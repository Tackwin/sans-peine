size_t :: u64;
MKL_ILP64 :: 1;
__INTEL_MKL_BUILD_DATE :: 20220311;

__INTEL_MKL__ :: 2022;

__INTEL_MKL_MINOR__ :: 0;
__INTEL_MKL_UPDATE__ :: 1;

INTEL_MKL_VERSION :: 20220001;

MKL_DOMAIN_ALL :: 0;
MKL_DOMAIN_BLAS :: 1;
MKL_DOMAIN_FFT :: 2;
MKL_DOMAIN_VML :: 3;
MKL_DOMAIN_PARDISO :: 4;
MKL_DOMAIN_LAPACK :: 5;

MKL_CBWR_BRANCH :: 1;
MKL_CBWR_ALL :: ~0;

MKL_CBWR_STRICT :: 0x10000;

MKL_CBWR_OFF :: 0;
MKL_CBWR_BRANCH_OFF :: 1;
MKL_CBWR_AUTO :: 2;
MKL_CBWR_COMPATIBLE :: 3;
MKL_CBWR_SSE2 :: 4;
MKL_CBWR_SSSE3 :: 6;
MKL_CBWR_SSE4_1 :: 7;
MKL_CBWR_SSE4_2 :: 8;
MKL_CBWR_AVX :: 9;
MKL_CBWR_AVX2 :: 10;
MKL_CBWR_AVX512_MIC :: 11;
MKL_CBWR_AVX512 :: 12;
MKL_CBWR_AVX512_MIC_E1 :: 13;
MKL_CBWR_AVX512_E1 :: 14;

MKL_CBWR_SUCCESS :: 0;
MKL_CBWR_ERR_INVALID_SETTINGS :: -1;
MKL_CBWR_ERR_INVALID_INPUT :: -2;
MKL_CBWR_ERR_UNSUPPORTED_BRANCH :: -3;
MKL_CBWR_ERR_UNKNOWN_BRANCH :: -4;
MKL_CBWR_ERR_MODE_CHANGE_FAILURE :: -8;

MKL_CBWR_SSE3 :: 5;

LAPACK_ROW_MAJOR :: 101;
LAPACK_COL_MAJOR :: 102;

LAPACK_WORK_MEMORY_ERROR :: -1010;
LAPACK_TRANSPOSE_MEMORY_ERROR :: -1011;

MKL_DSS_DEFAULTS :: 0;

MKL_DSS_OOC_VARIABLE :: 1024;
MKL_DSS_OOC_STRONG :: 2048;

MKL_DSS_REFINEMENT_OFF :: 4096;
MKL_DSS_REFINEMENT_ON :: 8192;

MKL_DSS_FORWARD_SOLVE :: 16384;
MKL_DSS_DIAGONAL_SOLVE :: 32768;
MKL_DSS_BACKWARD_SOLVE :: 49152;
MKL_DSS_TRANSPOSE_SOLVE :: 262144;
MKL_DSS_CONJUGATE_SOLVE :: 524288;

MKL_DSS_SINGLE_PRECISION :: 65536;

MKL_DSS_ZERO_BASED_INDEXING :: 131072;

MKL_DSS_MSG_LVL_SUCCESS :: -2147483647;
MKL_DSS_MSG_LVL_DEBUG :: -2147483646;
MKL_DSS_MSG_LVL_INFO :: -2147483645;
MKL_DSS_MSG_LVL_WARNING :: -2147483644;
MKL_DSS_MSG_LVL_ERROR :: -2147483643;
MKL_DSS_MSG_LVL_FATAL :: -2147483642;

MKL_DSS_TERM_LVL_SUCCESS :: 1073741832;
MKL_DSS_TERM_LVL_DEBUG :: 1073741840;
MKL_DSS_TERM_LVL_INFO :: 1073741848;
MKL_DSS_TERM_LVL_WARNING :: 1073741856;
MKL_DSS_TERM_LVL_ERROR :: 1073741864;
MKL_DSS_TERM_LVL_FATAL :: 1073741872;

MKL_DSS_SYMMETRIC :: 536870976;
MKL_DSS_SYMMETRIC_STRUCTURE :: 536871040;
MKL_DSS_NON_SYMMETRIC :: 536871104;
MKL_DSS_SYMMETRIC_COMPLEX :: 536871168;
MKL_DSS_SYMMETRIC_STRUCTURE_COMPLEX :: 536871232;
MKL_DSS_NON_SYMMETRIC_COMPLEX :: 536871296;

MKL_DSS_AUTO_ORDER :: 268435520;
MKL_DSS_MY_ORDER :: 268435584;
MKL_DSS_OPTION1_ORDER :: 268435648;
MKL_DSS_GET_ORDER :: 268435712;
MKL_DSS_METIS_ORDER :: 268435776;
MKL_DSS_METIS_OPENMP_ORDER :: 268435840;

MKL_DSS_POSITIVE_DEFINITE :: 134217792;
MKL_DSS_INDEFINITE :: 134217856;
MKL_DSS_HERMITIAN_POSITIVE_DEFINITE :: 134217920;
MKL_DSS_HERMITIAN_INDEFINITE :: 134217984;

MKL_DSS_SUCCESS :: 0;
MKL_DSS_ZERO_PIVOT :: -1;
MKL_DSS_OUT_OF_MEMORY :: -2;
MKL_DSS_FAILURE :: -3;
MKL_DSS_ROW_ERR :: -4;
MKL_DSS_COL_ERR :: -5;
MKL_DSS_TOO_FEW_VALUES :: -6;
MKL_DSS_TOO_MANY_VALUES :: -7;
MKL_DSS_NOT_SQUARE :: -8;
MKL_DSS_STATE_ERR :: -9;
MKL_DSS_INVALID_OPTION :: -10;
MKL_DSS_OPTION_CONFLICT :: -11;
MKL_DSS_MSG_LVL_ERR :: -12;
MKL_DSS_TERM_LVL_ERR :: -13;
MKL_DSS_STRUCTURE_ERR :: -14;
MKL_DSS_REORDER_ERR :: -15;
MKL_DSS_VALUES_ERR :: -16;
MKL_DSS_STATISTICS_INVALID_MATRIX :: -17;
MKL_DSS_STATISTICS_INVALID_STATE :: -18;
MKL_DSS_STATISTICS_INVALID_STRING :: -19;
MKL_DSS_REORDER1_ERR :: -20;
MKL_DSS_PREORDER_ERR :: -21;
MKL_DSS_DIAG_ERR :: -22;
MKL_DSS_I32BIT_ERR :: -23;
MKL_DSS_OOC_MEM_ERR :: -24;
MKL_DSS_OOC_OC_ERR :: -25;
MKL_DSS_OOC_RW_ERR :: -26;

PARDISO_NO_ERROR :: 0;
PARDISO_UNIMPLEMENTED :: -101;
PARDISO_NULL_HANDLE :: -102;
PARDISO_MEMORY_ERROR :: -103;

MKL_PEAK_MEM_DISABLE :: 0;
MKL_PEAK_MEM_ENABLE :: 1;
MKL_PEAK_MEM_RESET :: -1;
MKL_PEAK_MEM :: 2;

MKL_ENABLE_SSE4_2 :: 0;
MKL_ENABLE_AVX :: 1;
MKL_ENABLE_AVX2 :: 2;
MKL_ENABLE_AVX512_MIC :: 3;
MKL_ENABLE_AVX512 :: 4;
MKL_ENABLE_AVX512_MIC_E1 :: 5;
MKL_ENABLE_AVX512_E1 :: 6;
MKL_ENABLE_AVX512_E2 :: 7;
MKL_ENABLE_AVX512_E3 :: 8;
MKL_ENABLE_AVX512_E4 :: 9;
MKL_ENABLE_AVX2_E1 :: 10;
MKL_SINGLE_PATH_ENABLE :: 0x0600;

MKL_INTERFACE_LP64 :: 0;
MKL_INTERFACE_ILP64 :: 1;
MKL_INTERFACE_GNU :: 2;

MKL_THREADING_INTEL :: 0;
MKL_THREADING_SEQUENTIAL :: 1;
MKL_THREADING_PGI :: 2;
MKL_THREADING_GNU :: 3;
MKL_THREADING_TBB :: 4;

MKL_EXIT_UNSUPPORTED_CPU :: 1;
MKL_EXIT_CORRUPTED_INSTALL :: 2;
MKL_EXIT_NO_MEMORY :: 3;

MKL_MEM_MCDRAM :: 1;

TR_SUCCESS :: 1501;
TR_INVALID_OPTION :: 1502;
TR_OUT_OF_MEMORY :: 1503;

VML_LA :: 0x00000001;
VML_HA :: 0x00000002;
VML_EP :: 0x00000003;

VML_DEFAULT_PRECISION :: 0x00000000;
VML_FLOAT_CONSISTENT :: 0x00000010;
VML_DOUBLE_CONSISTENT :: 0x00000020;
VML_RESTORE :: 0x00000030;

VML_ERRMODE_IGNORE :: 0x00000100;
VML_ERRMODE_ERRNO :: 0x00000200;
VML_ERRMODE_STDERR :: 0x00000400;
VML_ERRMODE_EXCEPT :: 0x00000800;
VML_ERRMODE_CALLBACK :: 0x00001000;
VML_ERRMODE_NOERR :: 0x00002000;

VML_NUM_THREADS_OMP_AUTO :: 0x00000000;
VML_NUM_THREADS_OMP_FIXED :: 0x00010000;

VML_TBB_PARTITIONER_AUTO :: 0x00000000;
VML_TBB_PARTITIONER_STATIC :: 0x00010000;
VML_TBB_PARTITIONER_SIMPLE :: 0x00020000;

VML_FTZDAZ_ON :: 0x00280000;
VML_FTZDAZ_OFF :: 0x00140000;
VML_FTZDAZ_CURRENT :: 0x00000000;

VML_TRAP_INVALID :: 0x01000000;
VML_TRAP_DIVBYZERO :: 0x02000000;
VML_TRAP_OVERFLOW :: 0x04000000;
VML_TRAP_UNDERFLOW :: 0x08000000;

VML_ACCURACY_MASK :: 0x0000000F;
VML_FPUMODE_MASK :: 0x000000F0;
VML_ERRMODE_MASK :: 0x0000FF00;
VML_ERRMODE_STDHANDLER_MASK :: 0x00002F00;
VML_ERRMODE_CALLBACK_MASK :: 0x00001000;
VML_NUM_THREADS_OMP_MASK :: 0x00030000;
VML_TBB_PARTITIONER_MASK :: 0x00030000;
VML_FTZDAZ_MASK :: 0x003C0000;
VML_TRAP_EXCEPTIONS_MASK :: 0x0F000000;

VML_STATUS_OK :: 0;
VML_STATUS_BADSIZE :: -1;
VML_STATUS_BADMEM :: -2;
VML_STATUS_ERRDOM :: 1;
VML_STATUS_SING :: 2;
VML_STATUS_OVERFLOW :: 3;
VML_STATUS_UNDERFLOW :: 4;
VML_STATUS_ACCURACYWARNING :: 1000;

VSL_STATUS_OK :: 0;
VSL_ERROR_OK :: 0;

VSL_ERROR_FEATURE_NOT_IMPLEMENTED :: -1;
VSL_ERROR_UNKNOWN :: -2;
VSL_ERROR_BADARGS :: -3;
VSL_ERROR_MEM_FAILURE :: -4;
VSL_ERROR_NULL_PTR :: -5;
VSL_ERROR_CPU_NOT_SUPPORTED :: -6;

VSL_RNG_ERROR_INVALID_BRNG_INDEX :: -1000;
VSL_RNG_ERROR_LEAPFROG_UNSUPPORTED :: -1002;
VSL_RNG_ERROR_SKIPAHEAD_UNSUPPORTED :: -1003;
VSL_RNG_ERROR_SKIPAHEADEX_UNSUPPORTED :: -1004;
VSL_RNG_ERROR_BRNGS_INCOMPATIBLE :: -1005;
VSL_RNG_ERROR_BAD_STREAM :: -1006;
VSL_RNG_ERROR_BRNG_TABLE_FULL :: -1007;
VSL_RNG_ERROR_BAD_STREAM_STATE_SIZE :: -1008;
VSL_RNG_ERROR_BAD_WORD_SIZE :: -1009;
VSL_RNG_ERROR_BAD_NSEEDS :: -1010;
VSL_RNG_ERROR_BAD_NBITS :: -1011;
VSL_RNG_ERROR_QRNG_PERIOD_ELAPSED :: -1012;
VSL_RNG_ERROR_LEAPFROG_NSTREAMS_TOO_BIG :: -1013;
VSL_RNG_ERROR_BRNG_NOT_SUPPORTED :: -1014;

VSL_RNG_ERROR_BAD_UPDATE :: -1120;
VSL_RNG_ERROR_NO_NUMBERS :: -1121;
VSL_RNG_ERROR_INVALID_ABSTRACT_STREAM :: -1122;

VSL_RNG_ERROR_NONDETERM_NOT_SUPPORTED :: -1130;
VSL_RNG_ERROR_NONDETERM_NRETRIES_EXCEEDED :: -1131;

VSL_RNG_ERROR_ARS5_NOT_SUPPORTED :: -1140;

VSL_DISTR_MULTINOMIAL_BAD_PROBABILITY_ARRAY :: -1150;

VSL_RNG_ERROR_FILE_CLOSE :: -1100;
VSL_RNG_ERROR_FILE_OPEN :: -1101;
VSL_RNG_ERROR_FILE_WRITE :: -1102;
VSL_RNG_ERROR_FILE_READ :: -1103;

VSL_RNG_ERROR_BAD_FILE_FORMAT :: -1110;
VSL_RNG_ERROR_UNSUPPORTED_FILE_VER :: -1111;

VSL_RNG_ERROR_BAD_MEM_FORMAT :: -1200;

VSL_CC_ERROR_NOT_IMPLEMENTED :: -2000;
VSL_CC_ERROR_ALLOCATION_FAILURE :: -2001;
VSL_CC_ERROR_BAD_DESCRIPTOR :: -2200;
VSL_CC_ERROR_SERVICE_FAILURE :: -2210;
VSL_CC_ERROR_EDIT_FAILURE :: -2211;
VSL_CC_ERROR_EDIT_PROHIBITED :: -2212;
VSL_CC_ERROR_COMMIT_FAILURE :: -2220;
VSL_CC_ERROR_COPY_FAILURE :: -2230;
VSL_CC_ERROR_DELETE_FAILURE :: -2240;
VSL_CC_ERROR_BAD_ARGUMENT :: -2300;
VSL_CC_ERROR_DIMS :: -2301;
VSL_CC_ERROR_START :: -2302;
VSL_CC_ERROR_DECIMATION :: -2303;
VSL_CC_ERROR_XSHAPE :: -2311;
VSL_CC_ERROR_YSHAPE :: -2312;
VSL_CC_ERROR_ZSHAPE :: -2313;
VSL_CC_ERROR_XSTRIDE :: -2321;
VSL_CC_ERROR_YSTRIDE :: -2322;
VSL_CC_ERROR_ZSTRIDE :: -2323;
VSL_CC_ERROR_X :: -2331;
VSL_CC_ERROR_Y :: -2332;
VSL_CC_ERROR_Z :: -2333;
VSL_CC_ERROR_JOB :: -2100;
VSL_CC_ERROR_KIND :: -2110;
VSL_CC_ERROR_MODE :: -2120;
VSL_CC_ERROR_TYPE :: -2130;
VSL_CC_ERROR_PRECISION :: -2140;
VSL_CC_ERROR_EXTERNAL_PRECISION :: -2141;
VSL_CC_ERROR_INTERNAL_PRECISION :: -2142;
VSL_CC_ERROR_METHOD :: -2400;
VSL_CC_ERROR_OTHER :: -2800;

VSL_SS_NOT_FULL_RANK_MATRIX :: 4028;
VSL_SS_SEMIDEFINITE_COR :: 4029;

VSL_SS_ERROR_ALLOCATION_FAILURE :: -4000;
VSL_SS_ERROR_BAD_DIMEN :: -4001;
VSL_SS_ERROR_BAD_OBSERV_N :: -4002;
VSL_SS_ERROR_STORAGE_NOT_SUPPORTED :: -4003;
VSL_SS_ERROR_BAD_INDC_ADDR :: -4004;
VSL_SS_ERROR_BAD_WEIGHTS :: -4005;
VSL_SS_ERROR_BAD_MEAN_ADDR :: -4006;
VSL_SS_ERROR_BAD_2R_MOM_ADDR :: -4007;
VSL_SS_ERROR_BAD_3R_MOM_ADDR :: -4008;
VSL_SS_ERROR_BAD_4R_MOM_ADDR :: -4009;
VSL_SS_ERROR_BAD_2C_MOM_ADDR :: -4010;
VSL_SS_ERROR_BAD_3C_MOM_ADDR :: -4011;
VSL_SS_ERROR_BAD_4C_MOM_ADDR :: -4012;
VSL_SS_ERROR_BAD_KURTOSIS_ADDR :: -4013;
VSL_SS_ERROR_BAD_SKEWNESS_ADDR :: -4014;
VSL_SS_ERROR_BAD_MIN_ADDR :: -4015;
VSL_SS_ERROR_BAD_MAX_ADDR :: -4016;
VSL_SS_ERROR_BAD_VARIATION_ADDR :: -4017;
VSL_SS_ERROR_BAD_COV_ADDR :: -4018;
VSL_SS_ERROR_BAD_COR_ADDR :: -4019;
VSL_SS_ERROR_BAD_ACCUM_WEIGHT_ADDR :: -4020;
VSL_SS_ERROR_BAD_QUANT_ORDER_ADDR :: -4021;
VSL_SS_ERROR_BAD_QUANT_ORDER :: -4022;
VSL_SS_ERROR_BAD_QUANT_ADDR :: -4023;
VSL_SS_ERROR_BAD_ORDER_STATS_ADDR :: -4024;
VSL_SS_ERROR_MOMORDER_NOT_SUPPORTED :: -4025;
VSL_SS_ERROR_ALL_OBSERVS_OUTLIERS :: -4026;
VSL_SS_ERROR_BAD_ROBUST_COV_ADDR :: -4027;
VSL_SS_ERROR_BAD_ROBUST_MEAN_ADDR :: -4028;
VSL_SS_ERROR_METHOD_NOT_SUPPORTED :: -4029;
VSL_SS_ERROR_BAD_GROUP_INDC_ADDR :: -4030;
VSL_SS_ERROR_NULL_TASK_DESCRIPTOR :: -4031;
VSL_SS_ERROR_BAD_OBSERV_ADDR :: -4032;
VSL_SS_ERROR_SINGULAR_COV :: -4033;
VSL_SS_ERROR_BAD_POOLED_COV_ADDR :: -4034;
VSL_SS_ERROR_BAD_POOLED_MEAN_ADDR :: -4035;
VSL_SS_ERROR_BAD_GROUP_COV_ADDR :: -4036;
VSL_SS_ERROR_BAD_GROUP_MEAN_ADDR :: -4037;
VSL_SS_ERROR_BAD_GROUP_INDC :: -4038;
VSL_SS_ERROR_BAD_OUTLIERS_PARAMS_ADDR :: -4039;
VSL_SS_ERROR_BAD_OUTLIERS_PARAMS_N_ADDR :: -4040;
VSL_SS_ERROR_BAD_OUTLIERS_WEIGHTS_ADDR :: -4041;
VSL_SS_ERROR_BAD_ROBUST_COV_PARAMS_ADDR :: -4042;
VSL_SS_ERROR_BAD_ROBUST_COV_PARAMS_N_ADDR :: -4043;
VSL_SS_ERROR_BAD_STORAGE_ADDR :: -4044;
VSL_SS_ERROR_BAD_PARTIAL_COV_IDX_ADDR :: -4045;
VSL_SS_ERROR_BAD_PARTIAL_COV_ADDR :: -4046;
VSL_SS_ERROR_BAD_PARTIAL_COR_ADDR :: -4047;
VSL_SS_ERROR_BAD_MI_PARAMS_ADDR :: -4048;
VSL_SS_ERROR_BAD_MI_PARAMS_N_ADDR :: -4049;
VSL_SS_ERROR_BAD_MI_BAD_PARAMS_N :: -4050;
VSL_SS_ERROR_BAD_MI_PARAMS :: -4051;
VSL_SS_ERROR_BAD_MI_INIT_ESTIMATES_N_ADDR :: -4052;
VSL_SS_ERROR_BAD_MI_INIT_ESTIMATES_ADDR :: -4053;
VSL_SS_ERROR_BAD_MI_SIMUL_VALS_ADDR :: -4054;
VSL_SS_ERROR_BAD_MI_SIMUL_VALS_N_ADDR :: -4055;
VSL_SS_ERROR_BAD_MI_ESTIMATES_N_ADDR :: -4056;
VSL_SS_ERROR_BAD_MI_ESTIMATES_ADDR :: -4057;
VSL_SS_ERROR_BAD_MI_SIMUL_VALS_N :: -4058;
VSL_SS_ERROR_BAD_MI_ESTIMATES_N :: -4059;
VSL_SS_ERROR_BAD_MI_OUTPUT_PARAMS :: -4060;
VSL_SS_ERROR_BAD_MI_PRIOR_N_ADDR :: -4061;
VSL_SS_ERROR_BAD_MI_PRIOR_ADDR :: -4062;
VSL_SS_ERROR_BAD_MI_MISSING_VALS_N :: -4063;
VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS_N_ADDR :: -4064;
VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS_ADDR :: -4065;
VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS_N :: -4066;
VSL_SS_ERROR_BAD_STREAM_QUANT_PARAMS :: -4067;
VSL_SS_ERROR_BAD_STREAM_QUANT_ORDER_ADDR :: -4068;
VSL_SS_ERROR_BAD_STREAM_QUANT_ORDER :: -4069;
VSL_SS_ERROR_BAD_STREAM_QUANT_ADDR :: -4070;
VSL_SS_ERROR_BAD_PARAMTR_COR_ADDR :: -4071;
VSL_SS_ERROR_BAD_COR :: -4072;
VSL_SS_ERROR_BAD_PARTIAL_COV_IDX :: -4073;
VSL_SS_ERROR_BAD_SUM_ADDR :: -4074;
VSL_SS_ERROR_BAD_2R_SUM_ADDR :: -4075;
VSL_SS_ERROR_BAD_3R_SUM_ADDR :: -4076;
VSL_SS_ERROR_BAD_4R_SUM_ADDR :: -4077;
VSL_SS_ERROR_BAD_2C_SUM_ADDR :: -4078;
VSL_SS_ERROR_BAD_3C_SUM_ADDR :: -4079;
VSL_SS_ERROR_BAD_4C_SUM_ADDR :: -4080;
VSL_SS_ERROR_BAD_CP_ADDR :: -4081;
VSL_SS_ERROR_BAD_MDAD_ADDR :: -4082;
VSL_SS_ERROR_BAD_MNAD_ADDR :: -4083;
VSL_SS_ERROR_BAD_SORTED_OBSERV_ADDR :: -4084;
VSL_SS_ERROR_INDICES_NOT_SUPPORTED :: -4085;

VSL_SS_ERROR_ROBCOV_INTERN_C1 :: -5000;
VSL_SS_ERROR_PARTIALCOV_INTERN_C1 :: -5010;
VSL_SS_ERROR_PARTIALCOV_INTERN_C2 :: -5011;
VSL_SS_ERROR_MISSINGVALS_INTERN_C1 :: -5021;
VSL_SS_ERROR_MISSINGVALS_INTERN_C2 :: -5022;
VSL_SS_ERROR_MISSINGVALS_INTERN_C3 :: -5023;
VSL_SS_ERROR_MISSINGVALS_INTERN_C4 :: -5024;
VSL_SS_ERROR_MISSINGVALS_INTERN_C5 :: -5025;
VSL_SS_ERROR_PARAMTRCOR_INTERN_C1 :: -5030;
VSL_SS_ERROR_COVRANK_INTERNAL_ERROR_C1 :: -5040;
VSL_SS_ERROR_INVCOV_INTERNAL_ERROR_C1 :: -5041;
VSL_SS_ERROR_INVCOV_INTERNAL_ERROR_C2 :: -5042;

VSL_CONV_MODE_AUTO :: 0;
VSL_CORR_MODE_AUTO :: 0;
VSL_CONV_MODE_DIRECT :: 1;
VSL_CORR_MODE_DIRECT :: 1;
VSL_CONV_MODE_FFT :: 2;
VSL_CORR_MODE_FFT :: 2;
VSL_CONV_PRECISION_SINGLE :: 1;
VSL_CORR_PRECISION_SINGLE :: 1;
VSL_CONV_PRECISION_DOUBLE :: 2;
VSL_CORR_PRECISION_DOUBLE :: 2;

VSL_MAX_REG_BRNGS :: 512;

VSL_BRNG_SHIFT :: 20;

VSL_BRNG_RDRAND :: 0x0;
VSL_BRNG_NONDETERM_NRETRIES :: 10;

VSL_QRNG_LEAPFROG_COMPONENTS :: 0x7fffffff;

VSL_USER_QRNG_INITIAL_VALUES :: 0x1;
VSL_USER_PRIMITIVE_POLYMS :: 0x1;
VSL_USER_INIT_DIRECTION_NUMBERS :: 0x2;
VSL_USER_IRRED_POLYMS :: 0x1;
VSL_USER_DIRECTION_NUMBERS :: 0x4;
VSL_QRNG_OVERRIDE_1ST_DIM_INIT :: 0x8;

VSL_INIT_METHOD_STANDARD :: 0;
VSL_INIT_METHOD_LEAPFROG :: 1;
VSL_INIT_METHOD_SKIPAHEAD :: 2;
VSL_INIT_METHOD_SKIPAHEADEX :: 3;

VSL_RNG_METHOD_ACCURACY_FLAG :: 1<<30;

VSL_RNG_METHOD_UNIFORM_STD :: 0;

VSL_RNG_METHOD_UNIFORMBITS_STD :: 0;

VSL_RNG_METHOD_UNIFORMBITS32_STD :: 0;

VSL_RNG_METHOD_UNIFORMBITS64_STD :: 0;

VSL_RNG_METHOD_GAUSSIAN_BOXMULLER :: 0;
VSL_RNG_METHOD_GAUSSIAN_BOXMULLER2 :: 1;
VSL_RNG_METHOD_GAUSSIAN_ICDF :: 2;

VSL_RNG_METHOD_GAUSSIANMV_BOXMULLER :: 0;
VSL_RNG_METHOD_GAUSSIANMV_BOXMULLER2 :: 1;
VSL_RNG_METHOD_GAUSSIANMV_ICDF :: 2;

VSL_RNG_METHOD_EXPONENTIAL_ICDF :: 0;

VSL_RNG_METHOD_LAPLACE_ICDF :: 0;

VSL_RNG_METHOD_WEIBULL_ICDF :: 0;

VSL_RNG_METHOD_CAUCHY_ICDF :: 0;

VSL_RNG_METHOD_RAYLEIGH_ICDF :: 0;

VSL_RNG_METHOD_LOGNORMAL_BOXMULLER2 :: 0;
VSL_RNG_METHOD_LOGNORMAL_ICDF :: 1;

VSL_RNG_METHOD_GUMBEL_ICDF :: 0;

VSL_RNG_METHOD_GAMMA_GNORM :: 0;

VSL_RNG_METHOD_BETA_CJA :: 0;

VSL_RNG_METHOD_CHISQUARE_CHI2GAMMA :: 0;

VSL_RNG_METHOD_BERNOULLI_ICDF :: 0;

VSL_RNG_METHOD_GEOMETRIC_ICDF :: 0;

VSL_RNG_METHOD_BINOMIAL_BTPE :: 0;

VSL_RNG_METHOD_MULTINOMIAL_MULTPOISSON :: 0;

VSL_RNG_METHOD_HYPERGEOMETRIC_H2PE :: 0;

VSL_RNG_METHOD_POISSON_PTPE :: 0;
VSL_RNG_METHOD_POISSON_POISNORM :: 1;

VSL_RNG_METHOD_POISSONV_POISNORM :: 0;

VSL_RNG_METHOD_NEGBINOMIAL_NBAR :: 0;

VSL_MATRIX_STORAGE_FULL :: 0;
VSL_MATRIX_STORAGE_PACKED :: 1;
VSL_MATRIX_STORAGE_DIAGONAL :: 2;

VSL_SS_MATRIX_STORAGE_ROWS :: 0x00010000;
VSL_SS_MATRIX_STORAGE_COLS :: 0x00020000;

VSL_SS_MATRIX_STORAGE_FULL :: 0x00000000;
VSL_SS_MATRIX_STORAGE_L_PACKED :: 0x00000001;
VSL_SS_MATRIX_STORAGE_U_PACKED :: 0x00000002;

VSL_SS_METHOD_FAST :: 0x00000001;
VSL_SS_METHOD_1PASS :: 0x00000002;
VSL_SS_METHOD_FAST_USER_MEAN :: 0x00000100;
VSL_SS_METHOD_CP_TO_COVCOR :: 0x00000200;
VSL_SS_METHOD_SUM_TO_MOM :: 0x00000400;

VSL_SS_METHOD_SD :: 0x00000004;

VSL_SS_METHOD_TBS :: 0x00000008;

VSL_SS_METHOD_MI :: 0x00000010;

VSL_SS_METHOD_BACON :: 0x00000020;

VSL_SS_METHOD_SQUANTS_ZW :: 0x00000040;
VSL_SS_METHOD_SQUANTS_ZW_FAST :: 0x00000080;

VSL_SS_BACON_PARAMS_N :: 3;

VSL_SS_METHOD_BACON_MAHALANOBIS_INIT :: 0x00000001;
VSL_SS_METHOD_BACON_MEDIAN_INIT :: 0x00000002;

VSL_SS_METHOD_RADIX :: 0x00100000;

VSL_SS_TBS_PARAMS_N :: 4;

VSL_SS_MI_PARAMS_SIZE :: 5;

VSL_SS_DNAN :: 0xFFF8000000000000;
VSL_SS_SNAN :: 0xFFC00000;

VSL_SS_SQUANTS_ZW_PARAMS_N :: 1;

VSL_SS_ED_DIMEN :: 1;
VSL_SS_ED_OBSERV_N :: 2;
VSL_SS_ED_OBSERV :: 3;
VSL_SS_ED_OBSERV_STORAGE :: 4;
VSL_SS_ED_INDC :: 5;
VSL_SS_ED_WEIGHTS :: 6;
VSL_SS_ED_MEAN :: 7;
VSL_SS_ED_2R_MOM :: 8;
VSL_SS_ED_3R_MOM :: 9;
VSL_SS_ED_4R_MOM :: 10;
VSL_SS_ED_2C_MOM :: 11;
VSL_SS_ED_3C_MOM :: 12;
VSL_SS_ED_4C_MOM :: 13;
VSL_SS_ED_SUM :: 67;
VSL_SS_ED_2R_SUM :: 68;
VSL_SS_ED_3R_SUM :: 69;
VSL_SS_ED_4R_SUM :: 70;
VSL_SS_ED_2C_SUM :: 71;
VSL_SS_ED_3C_SUM :: 72;
VSL_SS_ED_4C_SUM :: 73;
VSL_SS_ED_KURTOSIS :: 14;
VSL_SS_ED_SKEWNESS :: 15;
VSL_SS_ED_MIN :: 16;
VSL_SS_ED_MAX :: 17;
VSL_SS_ED_VARIATION :: 18;
VSL_SS_ED_COV :: 19;
VSL_SS_ED_COV_STORAGE :: 20;
VSL_SS_ED_COR :: 21;
VSL_SS_ED_COR_STORAGE :: 22;
VSL_SS_ED_CP :: 74;
VSL_SS_ED_CP_STORAGE :: 75;
VSL_SS_ED_ACCUM_WEIGHT :: 23;
VSL_SS_ED_QUANT_ORDER_N :: 24;
VSL_SS_ED_QUANT_ORDER :: 25;
VSL_SS_ED_QUANT_QUANTILES :: 26;
VSL_SS_ED_ORDER_STATS :: 27;
VSL_SS_ED_GROUP_INDC :: 28;
VSL_SS_ED_POOLED_COV_STORAGE :: 29;
VSL_SS_ED_POOLED_MEAN :: 30;
VSL_SS_ED_POOLED_COV :: 31;
VSL_SS_ED_GROUP_COV_INDC :: 32;
VSL_SS_ED_REQ_GROUP_INDC :: 32;
VSL_SS_ED_GROUP_MEAN :: 33;
VSL_SS_ED_GROUP_COV_STORAGE :: 34;
VSL_SS_ED_GROUP_COV :: 35;
VSL_SS_ED_ROBUST_COV_STORAGE :: 36;
VSL_SS_ED_ROBUST_COV_PARAMS_N :: 37;
VSL_SS_ED_ROBUST_COV_PARAMS :: 38;
VSL_SS_ED_ROBUST_MEAN :: 39;
VSL_SS_ED_ROBUST_COV :: 40;
VSL_SS_ED_OUTLIERS_PARAMS_N :: 41;
VSL_SS_ED_OUTLIERS_PARAMS :: 42;
VSL_SS_ED_OUTLIERS_WEIGHT :: 43;
VSL_SS_ED_ORDER_STATS_STORAGE :: 44;
VSL_SS_ED_PARTIAL_COV_IDX :: 45;
VSL_SS_ED_PARTIAL_COV :: 46;
VSL_SS_ED_PARTIAL_COV_STORAGE :: 47;
VSL_SS_ED_PARTIAL_COR :: 48;
VSL_SS_ED_PARTIAL_COR_STORAGE :: 49;
VSL_SS_ED_MI_PARAMS_N :: 50;
VSL_SS_ED_MI_PARAMS :: 51;
VSL_SS_ED_MI_INIT_ESTIMATES_N :: 52;
VSL_SS_ED_MI_INIT_ESTIMATES :: 53;
VSL_SS_ED_MI_SIMUL_VALS_N :: 54;
VSL_SS_ED_MI_SIMUL_VALS :: 55;
VSL_SS_ED_MI_ESTIMATES_N :: 56;
VSL_SS_ED_MI_ESTIMATES :: 57;
VSL_SS_ED_MI_PRIOR_N :: 58;
VSL_SS_ED_MI_PRIOR :: 59;
VSL_SS_ED_PARAMTR_COR :: 60;
VSL_SS_ED_PARAMTR_COR_STORAGE :: 61;
VSL_SS_ED_STREAM_QUANT_PARAMS_N :: 62;
VSL_SS_ED_STREAM_QUANT_PARAMS :: 63;
VSL_SS_ED_STREAM_QUANT_ORDER_N :: 64;
VSL_SS_ED_STREAM_QUANT_ORDER :: 65;
VSL_SS_ED_STREAM_QUANT_QUANTILES :: 66;
VSL_SS_ED_MDAD :: 76;
VSL_SS_ED_MNAD :: 77;
VSL_SS_ED_SORTED_OBSERV :: 78;
VSL_SS_ED_SORTED_OBSERV_STORAGE :: 79;

VSL_SS_MEAN :: 0x0000000000000001;
VSL_SS_2R_MOM :: 0x0000000000000002;
VSL_SS_3R_MOM :: 0x0000000000000004;
VSL_SS_4R_MOM :: 0x0000000000000008;
VSL_SS_2C_MOM :: 0x0000000000000010;
VSL_SS_3C_MOM :: 0x0000000000000020;
VSL_SS_4C_MOM :: 0x0000000000000040;
VSL_SS_SUM :: 0x0000000002000000;
VSL_SS_2R_SUM :: 0x0000000004000000;
VSL_SS_3R_SUM :: 0x0000000008000000;
VSL_SS_4R_SUM :: 0x0000000010000000;
VSL_SS_2C_SUM :: 0x0000000020000000;
VSL_SS_3C_SUM :: 0x0000000040000000;
VSL_SS_4C_SUM :: 0x0000000080000000;
VSL_SS_KURTOSIS :: 0x0000000000000080;
VSL_SS_SKEWNESS :: 0x0000000000000100;
VSL_SS_VARIATION :: 0x0000000000000200;
VSL_SS_MIN :: 0x0000000000000400;
VSL_SS_MAX :: 0x0000000000000800;
VSL_SS_COV :: 0x0000000000001000;
VSL_SS_COR :: 0x0000000000002000;
VSL_SS_CP :: 0x0000000100000000;
VSL_SS_POOLED_COV :: 0x0000000000004000;
VSL_SS_GROUP_COV :: 0x0000000000008000;
VSL_SS_POOLED_MEAN :: 0x0000000800000000;
VSL_SS_GROUP_MEAN :: 0x0000001000000000;
VSL_SS_QUANTS :: 0x0000000000010000;
VSL_SS_ORDER_STATS :: 0x0000000000020000;
VSL_SS_SORTED_OBSERV :: 0x0000008000000000;
VSL_SS_ROBUST_COV :: 0x0000000000040000;
VSL_SS_OUTLIERS :: 0x0000000000080000;
VSL_SS_PARTIAL_COV :: 0x0000000000100000;
VSL_SS_PARTIAL_COR :: 0x0000000000200000;
VSL_SS_MISSING_VALS :: 0x0000000000400000;
VSL_SS_PARAMTR_COR :: 0x0000000000800000;
VSL_SS_STREAM_QUANTS :: 0x0000000001000000;
VSL_SS_MDAD :: 0x0000000200000000;
VSL_SS_MNAD :: 0x0000000400000000;

DF_STATUS_OK :: 0;

DF_ERROR_CPU_NOT_SUPPORTED :: -1;

DF_ERROR_NULL_TASK_DESCRIPTOR :: -1000;
DF_ERROR_MEM_FAILURE :: -1001;
DF_ERROR_METHOD_NOT_SUPPORTED :: -1002;
DF_ERROR_COMP_TYPE_NOT_SUPPORTED :: -1003;
DF_ERROR_NULL_PTR :: -1037;

DF_ERROR_BAD_NX :: -1004;
DF_ERROR_BAD_X :: -1005;
DF_ERROR_BAD_X_HINT :: -1006;
DF_ERROR_BAD_NY :: -1007;
DF_ERROR_BAD_Y :: -1008;
DF_ERROR_BAD_Y_HINT :: -1009;
DF_ERROR_BAD_SPLINE_ORDER :: -1010;
DF_ERROR_BAD_SPLINE_TYPE :: -1011;
DF_ERROR_BAD_IC_TYPE :: -1012;
DF_ERROR_BAD_IC :: -1013;
DF_ERROR_BAD_BC_TYPE :: -1014;
DF_ERROR_BAD_BC :: -1015;
DF_ERROR_BAD_PP_COEFF :: -1016;
DF_ERROR_BAD_PP_COEFF_HINT :: -1017;
DF_ERROR_BAD_PERIODIC_VAL :: -1018;
DF_ERROR_BAD_DATA_ATTR :: -1019;
DF_ERROR_BAD_DATA_IDX :: -1020;

DF_ERROR_BAD_NSITE :: -1021;
DF_ERROR_BAD_SITE :: -1022;
DF_ERROR_BAD_SITE_HINT :: -1023;
DF_ERROR_BAD_NDORDER :: -1024;
DF_ERROR_BAD_DORDER :: -1025;
DF_ERROR_BAD_DATA_HINT :: -1026;
DF_ERROR_BAD_INTERP :: -1027;
DF_ERROR_BAD_INTERP_HINT :: -1028;
DF_ERROR_BAD_CELL_IDX :: -1029;
DF_ERROR_BAD_NLIM :: -1030;
DF_ERROR_BAD_LLIM :: -1031;
DF_ERROR_BAD_RLIM :: -1032;
DF_ERROR_BAD_INTEGR :: -1033;
DF_ERROR_BAD_INTEGR_HINT :: -1034;
DF_ERROR_BAD_LOOKUP_INTERP_SITE :: -1035;
DF_ERROR_BAD_CHECK_FLAG :: -1036;

VSL_DF_ERROR_INTERNAL_C1 :: -1500;
VSL_DF_ERROR_INTERNAL_C2 :: -1501;

DF_STATUS_EXACT_RESULT :: 1000;

DF_X :: 1;
DF_Y :: 2;
DF_IC :: 3;
DF_BC :: 4;
DF_PP_SCOEFF :: 5;

DF_NX :: 14;
DF_XHINT :: 15;
DF_NY :: 16;
DF_YHINT :: 17;
DF_SPLINE_ORDER :: 18;
DF_SPLINE_TYPE :: 19;
DF_IC_TYPE :: 20;
DF_BC_TYPE :: 21;
DF_PP_COEFF_HINT :: 22;
DF_CHECK_FLAG :: 23;

DF_PP_STD :: 0;
DF_PP_LINEAR :: 2;
DF_PP_QUADRATIC :: 3;
DF_PP_CUBIC :: 4;

DF_PP_DEFAULT :: 0;
DF_PP_SUBBOTIN :: 1;
DF_PP_NATURAL :: 2;
DF_PP_HERMITE :: 3;
DF_PP_BESSEL :: 4;
DF_PP_AKIMA :: 5;
DF_LOOKUP_INTERPOLANT :: 6;
DF_CR_STEPWISE_CONST_INTERPOLANT :: 7;
DF_CL_STEPWISE_CONST_INTERPOLANT :: 8;
DF_PP_HYMAN :: 9;

DF_NO_BC :: 0;
DF_BC_NOT_A_KNOT :: 1;
DF_BC_FREE_END :: 2;
DF_BC_1ST_LEFT_DER :: 4;
DF_BC_1ST_RIGHT_DER :: 8;
DF_BC_2ND_LEFT_DER :: 16;
DF_BC_2ND_RIGHT_DER :: 32;
DF_BC_PERIODIC :: 64;
DF_BC_Q_VAL :: 128;

DF_NO_IC :: 0;
DF_IC_1ST_DER :: 1;
DF_IC_2ND_DER :: 2;
DF_IC_Q_KNOT :: 8;

DF_NO_HINT :: 0x00000000;
DF_NON_UNIFORM_PARTITION :: 0x00000001;
DF_QUASI_UNIFORM_PARTITION :: 0x00000002;
DF_UNIFORM_PARTITION :: 0x00000004;

DF_MATRIX_STORAGE_ROWS :: 0x00000010;
DF_MATRIX_STORAGE_COLS :: 0x00000020;

DF_SORTED_DATA :: 0x00000040;
DF_1ST_COORDINATE :: 0x00000080;

DF_MATRIX_STORAGE_SITES_FUNCS_DERS :: 0x00000100;
DF_MATRIX_STORAGE_SITES_DERS_FUNCS :: 0x00000200;

DF_NO_APRIORI_INFO :: 0x00000000;
DF_APRIORI_MOST_LIKELY_CELL :: 0x00000001;

DF_INTERP :: 0x00000001;
DF_CELL :: 0x00000002;
DF_INTERP_USER_CELL :: 0x00000004;

DF_METHOD_STD :: 0;
DF_METHOD_PP :: 1;

DF_ENABLE_CHECK_FLAG :: 0x00000000;
DF_DISABLE_CHECK_FLAG :: 0x00000001;

DF_PP_SPLINE :: 0;

DF_INTEGR_SEARCH_CB_LLIM_FLAG :: 0;
DF_INTEGR_SEARCH_CB_RLIM_FLAG :: 1;

DFTI_NO_ERROR :: 0;
DFTI_MEMORY_ERROR :: 1;
DFTI_INVALID_CONFIGURATION :: 2;
DFTI_INCONSISTENT_CONFIGURATION :: 3;
DFTI_MULTITHREADED_ERROR :: 4;
DFTI_BAD_DESCRIPTOR :: 5;
DFTI_UNIMPLEMENTED :: 6;
DFTI_MKL_INTERNAL_ERROR :: 7;
DFTI_NUMBER_OF_THREADS_ERROR :: 8;
DFTI_1D_LENGTH_EXCEEDS_INT32 :: 9;
DFTI_1D_MEMORY_EXCEEDS_INT32 :: 9;

DFTI_MAX_MESSAGE_LENGTH :: 80;
DFTI_MAX_NAME_LENGTH :: 10;
DFTI_VERSION_LENGTH :: 198;

MKL_SINE_TRANSFORM :: 0;
MKL_COSINE_TRANSFORM :: 1;
MKL_STAGGERED_COSINE_TRANSFORM :: 2;
MKL_STAGGERED_SINE_TRANSFORM :: 3;
MKL_STAGGERED2_COSINE_TRANSFORM :: 4;
MKL_STAGGERED2_SINE_TRANSFORM :: 5;

_MKL_Complex8 :: struct {
    real: float;
    imag: float;
}
#run {
    instance: _MKL_Complex8;
    assert(((cast(*void)(*instance.real)) - cast(*void)(*instance)) == 0, "_MKL_Complex8.real has unexpected offset % instead of 0", ((cast(*void)(*instance.real)) - cast(*void)(*instance)));
    assert(size_of(type_of(_MKL_Complex8.real)) == 4, "_MKL_Complex8.real has unexpected size % instead of 4", size_of(type_of(_MKL_Complex8.real)));
    assert(((cast(*void)(*instance.imag)) - cast(*void)(*instance)) == 4, "_MKL_Complex8.imag has unexpected offset % instead of 4", ((cast(*void)(*instance.imag)) - cast(*void)(*instance)));
    assert(size_of(type_of(_MKL_Complex8.imag)) == 4, "_MKL_Complex8.imag has unexpected size % instead of 4", size_of(type_of(_MKL_Complex8.imag)));
    assert(size_of(_MKL_Complex8) == 8, "_MKL_Complex8 has size % instead of 8", size_of(_MKL_Complex8));
}

MKL_Complex8 :: _MKL_Complex8;

_MKL_Complex16 :: struct {
    real: float64;
    imag: float64;
}
#run {
    instance: _MKL_Complex16;
    assert(((cast(*void)(*instance.real)) - cast(*void)(*instance)) == 0, "_MKL_Complex16.real has unexpected offset % instead of 0", ((cast(*void)(*instance.real)) - cast(*void)(*instance)));
    assert(size_of(type_of(_MKL_Complex16.real)) == 8, "_MKL_Complex16.real has unexpected size % instead of 8", size_of(type_of(_MKL_Complex16.real)));
    assert(((cast(*void)(*instance.imag)) - cast(*void)(*instance)) == 8, "_MKL_Complex16.imag has unexpected offset % instead of 8", ((cast(*void)(*instance.imag)) - cast(*void)(*instance)));
    assert(size_of(type_of(_MKL_Complex16.imag)) == 8, "_MKL_Complex16.imag has unexpected size % instead of 8", size_of(type_of(_MKL_Complex16.imag)));
    assert(size_of(_MKL_Complex16) == 16, "_MKL_Complex16 has size % instead of 16", size_of(_MKL_Complex16));
}

MKL_Complex16 :: _MKL_Complex16;

/* oneMKL Version type */
MKLVersion :: struct {
    MajorVersion:  s32;
    MinorVersion:  s32;
    UpdateVersion: s32;
    ProductStatus: *u8;
    Build:         *u8;
    Processor:     *u8;
    Platform:      *u8;
}
#run {
    instance: MKLVersion;
    assert(((cast(*void)(*instance.MajorVersion)) - cast(*void)(*instance)) == 0, "MKLVersion.MajorVersion has unexpected offset % instead of 0", ((cast(*void)(*instance.MajorVersion)) - cast(*void)(*instance)));
    assert(size_of(type_of(MKLVersion.MajorVersion)) == 4, "MKLVersion.MajorVersion has unexpected size % instead of 4", size_of(type_of(MKLVersion.MajorVersion)));
    assert(((cast(*void)(*instance.MinorVersion)) - cast(*void)(*instance)) == 4, "MKLVersion.MinorVersion has unexpected offset % instead of 4", ((cast(*void)(*instance.MinorVersion)) - cast(*void)(*instance)));
    assert(size_of(type_of(MKLVersion.MinorVersion)) == 4, "MKLVersion.MinorVersion has unexpected size % instead of 4", size_of(type_of(MKLVersion.MinorVersion)));
    assert(((cast(*void)(*instance.UpdateVersion)) - cast(*void)(*instance)) == 8, "MKLVersion.UpdateVersion has unexpected offset % instead of 8", ((cast(*void)(*instance.UpdateVersion)) - cast(*void)(*instance)));
    assert(size_of(type_of(MKLVersion.UpdateVersion)) == 4, "MKLVersion.UpdateVersion has unexpected size % instead of 4", size_of(type_of(MKLVersion.UpdateVersion)));
    assert(((cast(*void)(*instance.ProductStatus)) - cast(*void)(*instance)) == 16, "MKLVersion.ProductStatus has unexpected offset % instead of 16", ((cast(*void)(*instance.ProductStatus)) - cast(*void)(*instance)));
    assert(size_of(type_of(MKLVersion.ProductStatus)) == 8, "MKLVersion.ProductStatus has unexpected size % instead of 8", size_of(type_of(MKLVersion.ProductStatus)));
    assert(((cast(*void)(*instance.Build)) - cast(*void)(*instance)) == 24, "MKLVersion.Build has unexpected offset % instead of 24", ((cast(*void)(*instance.Build)) - cast(*void)(*instance)));
    assert(size_of(type_of(MKLVersion.Build)) == 8, "MKLVersion.Build has unexpected size % instead of 8", size_of(type_of(MKLVersion.Build)));
    assert(((cast(*void)(*instance.Processor)) - cast(*void)(*instance)) == 32, "MKLVersion.Processor has unexpected offset % instead of 32", ((cast(*void)(*instance.Processor)) - cast(*void)(*instance)));
    assert(size_of(type_of(MKLVersion.Processor)) == 8, "MKLVersion.Processor has unexpected size % instead of 8", size_of(type_of(MKLVersion.Processor)));
    assert(((cast(*void)(*instance.Platform)) - cast(*void)(*instance)) == 40, "MKLVersion.Platform has unexpected offset % instead of 40", ((cast(*void)(*instance.Platform)) - cast(*void)(*instance)));
    assert(size_of(type_of(MKLVersion.Platform)) == 8, "MKLVersion.Platform has unexpected size % instead of 8", size_of(type_of(MKLVersion.Platform)));
    assert(size_of(MKLVersion) == 48, "MKLVersion has size % instead of 48", size_of(MKLVersion));
}

MKL_LAYOUT :: enum s32 {
    ROW_MAJOR :: 101;
    COL_MAJOR :: 102;

    MKL_ROW_MAJOR :: ROW_MAJOR;
    MKL_COL_MAJOR :: COL_MAJOR;
}

MKL_TRANSPOSE :: enum s32 {
    NOTRANS   :: 111;
    TRANS     :: 112;
    CONJTRANS :: 113;
    CONJ      :: 114;

    MKL_NOTRANS   :: NOTRANS;
    MKL_TRANS     :: TRANS;
    MKL_CONJTRANS :: CONJTRANS;
    MKL_CONJ      :: CONJ;
}

MKL_UPLO :: enum s32 {
    UPPER :: 121;
    LOWER :: 122;

    MKL_UPPER :: UPPER;
    MKL_LOWER :: LOWER;
}

MKL_DIAG :: enum s32 {
    NONUNIT :: 131;
    UNIT    :: 132;

    MKL_NONUNIT :: NONUNIT;
    MKL_UNIT    :: UNIT;
}

MKL_SIDE :: enum s32 {
    LEFT  :: 141;
    RIGHT :: 142;

    MKL_LEFT  :: LEFT;
    MKL_RIGHT :: RIGHT;
}

MKL_COMPACT_PACK :: enum s32 {
    SSE    :: 181;
    AVX    :: 182;
    AVX512 :: 183;

    MKL_COMPACT_SSE    :: SSE;
    MKL_COMPACT_AVX    :: AVX;
    MKL_COMPACT_AVX512 :: AVX512;
}

sgemm_jit_kernel_t :: #type (a0: *void, a1: *float, a2: *float, a3: *float) -> void #c_call;
dgemm_jit_kernel_t :: #type (a0: *void, a1: *float64, a2: *float64, a3: *float64) -> void #c_call;
cgemm_jit_kernel_t :: #type (a0: *void, a1: *MKL_Complex8, a2: *MKL_Complex8, a3: *MKL_Complex8) -> void #c_call;
zgemm_jit_kernel_t :: #type (a0: *void, a1: *MKL_Complex16, a2: *MKL_Complex16, a3: *MKL_Complex16) -> void #c_call;

mkl_jit_status_t :: enum s32 {
    JIT_SUCCESS :: 0;
    NO_JIT      :: 1;
    JIT_ERROR   :: 2;

    MKL_JIT_SUCCESS :: JIT_SUCCESS;
    MKL_NO_JIT      :: NO_JIT;
    MKL_JIT_ERROR   :: JIT_ERROR;
}

/* Upper case declaration */
XERBLA :: (srname: *u8, info: *s32, lsrname: s32) -> void #foreign mkl_intel_ilp64;
LSAME :: (ca: *u8, cb: *u8, lca: s64, lcb: s64) -> s32 #foreign mkl_intel_ilp64;

/* BLAS Level1 */
SCABS1 :: (c: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;
SASUM :: (n: *s64, x: *float, incx: *s64) -> float #foreign mkl_intel_ilp64;
SAXPY :: (n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
SAXPBY :: (n: *s64, alpha: *float, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
SAXPYI :: (nz: *s64, a: *float, x: *float, indx: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
SCASUM :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> float #foreign mkl_intel_ilp64;
SCNRM2 :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> float #foreign mkl_intel_ilp64;
SCOPY :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
SDOT :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> float #foreign mkl_intel_ilp64;
SDSDOT :: (n: *s64, sb: *float, x: *float, incx: *s64, y: *float, incy: *s64) -> float #foreign mkl_intel_ilp64;
SDOTI :: (nz: *s64, x: *float, indx: *s64, y: *float) -> float #foreign mkl_intel_ilp64;
SGTHR :: (nz: *s64, y: *float, x: *float, indx: *s64) -> void #foreign mkl_intel_ilp64;
SGTHRZ :: (nz: *s64, y: *float, x: *float, indx: *s64) -> void #foreign mkl_intel_ilp64;
SNRM2 :: (n: *s64, x: *float, incx: *s64) -> float #foreign mkl_intel_ilp64;
SROT :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
SROTG :: (a: *float, b: *float, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
SROTI :: (nz: *s64, x: *float, indx: *s64, y: *float, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
SROTM :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, param: *float) -> void #foreign mkl_intel_ilp64;
SROTMG :: (d1: *float, d2: *float, x1: *float, y1: *float, param: *float) -> void #foreign mkl_intel_ilp64;
SSCAL :: (n: *s64, a: *float, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;
SSCTR :: (nz: *s64, x: *float, indx: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
SSWAP :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
ISAMAX :: (n: *s64, x: *float, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
ISAMIN :: (n: *s64, x: *float, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

CAXPY :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
CAXPBY :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
CAXPYI :: (nz: *s64, a: *MKL_Complex8, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
CCOPY :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
CDOTC :: (pres: *MKL_Complex8, n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
CDOTCI :: (pres: *MKL_Complex8, nz: *s64, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
CDOTU :: (pres: *MKL_Complex8, n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
CDOTUI :: (pres: *MKL_Complex8, nz: *s64, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
CGTHR :: (nz: *s64, y: *MKL_Complex8, x: *MKL_Complex8, indx: *s64) -> void #foreign mkl_intel_ilp64;
CGTHRZ :: (nz: *s64, y: *MKL_Complex8, x: *MKL_Complex8, indx: *s64) -> void #foreign mkl_intel_ilp64;
CROTG :: (a: *MKL_Complex8, b: *MKL_Complex8, c: *float, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
CSCAL :: (n: *s64, a: *MKL_Complex8, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;
CSCTR :: (nz: *s64, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
CSROT :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
CSSCAL :: (n: *s64, a: *float, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;
CSWAP :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
ICAMAX :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
ICAMIN :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

DCABS1 :: (z: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;
DASUM :: (n: *s64, x: *float64, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
DAXPY :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
DAXPBY :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
DAXPYI :: (nz: *s64, a: *float64, x: *float64, indx: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
DCOPY :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
DDOT :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> float64 #foreign mkl_intel_ilp64;
DSDOT :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> float64 #foreign mkl_intel_ilp64;
DDOTI :: (nz: *s64, x: *float64, indx: *s64, y: *float64) -> float64 #foreign mkl_intel_ilp64;
DGTHR :: (nz: *s64, y: *float64, x: *float64, indx: *s64) -> void #foreign mkl_intel_ilp64;
DGTHRZ :: (nz: *s64, y: *float64, x: *float64, indx: *s64) -> void #foreign mkl_intel_ilp64;
DNRM2 :: (n: *s64, x: *float64, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
DROT :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
DROTG :: (a: *float64, b: *float64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
DROTI :: (nz: *s64, x: *float64, indx: *s64, y: *float64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
DROTM :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, param: *float64) -> void #foreign mkl_intel_ilp64;
DROTMG :: (d1: *float64, d2: *float64, x1: *float64, y1: *float64, param: *float64) -> void #foreign mkl_intel_ilp64;
DSCAL :: (n: *s64, a: *float64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;
DSCTR :: (nz: *s64, x: *float64, indx: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
DSWAP :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
DZASUM :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
DZNRM2 :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
IDAMAX :: (n: *s64, x: *float64, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
IDAMIN :: (n: *s64, x: *float64, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

ZAXPY :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
ZAXPBY :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
ZAXPYI :: (nz: *s64, a: *MKL_Complex16, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
ZCOPY :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
ZDOTC :: (pres: *MKL_Complex16, n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
ZDOTCI :: (pres: *MKL_Complex16, nz: *s64, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
ZDOTU :: (pres: *MKL_Complex16, n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
ZDOTUI :: (pres: *MKL_Complex16, nz: *s64, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
ZDROT :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
ZDSCAL :: (n: *s64, a: *float64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;
ZGTHR :: (nz: *s64, y: *MKL_Complex16, x: *MKL_Complex16, indx: *s64) -> void #foreign mkl_intel_ilp64;
ZGTHRZ :: (nz: *s64, y: *MKL_Complex16, x: *MKL_Complex16, indx: *s64) -> void #foreign mkl_intel_ilp64;
ZROTG :: (a: *MKL_Complex16, b: *MKL_Complex16, c: *float64, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
ZSCAL :: (n: *s64, a: *MKL_Complex16, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;
ZSCTR :: (nz: *s64, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
ZSWAP :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
IZAMAX :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
IZAMIN :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

/* BLAS Level2 */
SGBMV :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SGEMV :: (trans: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SGER :: (m: *s64, n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

SSBMV :: (uplo: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SSPMV :: (uplo: *u8, n: *s64, alpha: *float, ap: *float, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SSPR :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, ap: *float) -> void #foreign mkl_intel_ilp64;
SSPR2 :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64, ap: *float) -> void #foreign mkl_intel_ilp64;

SSYMV :: (uplo: *u8, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SSYR :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

SSYR2 :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

STBMV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float, lda: *s64, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

STBSV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float, lda: *s64, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

STPMV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

STPSV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

STRMV :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, b: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

STRSV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

SGEM2VU :: (m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, beta: *float, y1: *float, incy1: *s64, y2: *float, incy2: *s64) -> void #foreign mkl_intel_ilp64;

CGBMV :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CGEMV :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CGERC :: (m: *s64, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CGERU :: (m: *s64, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CHBMV :: (uplo: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CHEMV :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CHER :: (uplo: *u8, n: *s64, alpha: *float, x: *MKL_Complex8, incx: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CHER2 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CHPMV :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CHPR :: (uplo: *u8, n: *s64, alpha: *float, x: *MKL_Complex8, incx: *s64, ap: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CHPR2 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, ap: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CTBMV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CTBSV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CTPMV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CTPSV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CTRMV :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CTRSV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CGEM2VC :: (m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, beta: *MKL_Complex8, y1: *MKL_Complex8, incy1: *s64, y2: *MKL_Complex8, incy2: *s64) -> void #foreign mkl_intel_ilp64;

SCGEMV :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *float, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

DGBMV :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DGEMV :: (trans: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DGER :: (m: *s64, n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

DSBMV :: (uplo: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DSPMV :: (uplo: *u8, n: *s64, alpha: *float64, ap: *float64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DSPR :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, ap: *float64) -> void #foreign mkl_intel_ilp64;
DSPR2 :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64, ap: *float64) -> void #foreign mkl_intel_ilp64;

DSYMV :: (uplo: *u8, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DSYR :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

DSYR2 :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

DTBMV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float64, lda: *s64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DTBSV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float64, lda: *s64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DTPMV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DTPSV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DTRMV :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DTRSV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DGEM2VU :: (m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, beta: *float64, y1: *float64, incy1: *s64, y2: *float64, incy2: *s64) -> void #foreign mkl_intel_ilp64;

ZGBMV :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMV :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZGERC :: (m: *s64, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZGERU :: (m: *s64, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZHBMV :: (uplo: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZHEMV :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZHER :: (uplo: *u8, n: *s64, alpha: *float64, x: *MKL_Complex16, incx: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZHER2 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZHPMV :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZHPR :: (uplo: *u8, n: *s64, alpha: *float64, x: *MKL_Complex16, incx: *s64, ap: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZHPR2 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, ap: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZTBMV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZTBSV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZTPMV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZTPSV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZTRMV :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSV :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZGEM2VC :: (m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, beta: *MKL_Complex16, y1: *MKL_Complex16, incy1: *s64, y2: *MKL_Complex16, incy2: *s64) -> void #foreign mkl_intel_ilp64;

DZGEMV :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *float64, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

/* BLAS Level3 */
SGEMM :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

SGEMM_PACK_GET_SIZE :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
SGEMM_PACK :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, src: *float, ld: *s64, dest: *float) -> void #foreign mkl_intel_ilp64;

SGEMM_COMPUTE :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

SGEMM_BATCH :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *float, a_array: **float, lda_array: *s64, b_array: **float, ldb_array: *s64, beta_array: *float, c_array: **float, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

SGEMM_BATCH_STRIDED :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, b: *float, ldb: *s64, strideb: *s64, beta: *float, c: *float, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

SGEMMT :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

SSYMM :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

SSYR2K :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

SSYRK :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

SSYRK_BATCH_STRIDED :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, beta: *float, c: *float, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

SSYRK_BATCH :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *float, a_array: **float, lda_array: *s64, beta_array: *float, c_array: **float, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

STRMM :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

STRSM :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

STRSM_BATCH :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *float, a_array: **float, lda_array: *s64, b_array: **float, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

STRSM_BATCH_STRIDED :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, b: *float, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CGEMM :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CGEMM_BATCH :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, b_array: **MKL_Complex8, ldb_array: *s64, beta_array: *MKL_Complex8, c_array: **MKL_Complex8, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CGEMM_BATCH_STRIDED :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, b: *MKL_Complex8, ldb: *s64, strideb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

SCGEMM :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CGEMM3M :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CGEMM3M_BATCH :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, b_array: **MKL_Complex8, ldb_array: *s64, beta_array: *MKL_Complex8, c_array: **MKL_Complex8, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CGEMMT :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CTRSM_BATCH :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, b_array: **MKL_Complex8, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CTRSM_BATCH_STRIDED :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, b: *MKL_Complex8, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CHEMM :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CHER2K :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *float, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CHERK :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, beta: *float, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CSYMM :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CSYR2K :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CSYRK :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CSYRK_BATCH :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, beta_array: *MKL_Complex8, c_array: **MKL_Complex8, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CSYRK_BATCH_STRIDED :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CTRMM :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CTRSM :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DGEMM :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

DGEMM_PACK_GET_SIZE :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
DGEMM_PACK :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, src: *float64, ld: *s64, dest: *float64) -> void #foreign mkl_intel_ilp64;

DGEMM_COMPUTE :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

DGEMM_BATCH :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *float64, a_array: **float64, lda_array: *s64, b_array: **float64, ldb_array: *s64, beta_array: *float64, c_array: **float64, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DGEMM_BATCH_STRIDED :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, b: *float64, ldb: *s64, strideb: *s64, beta: *float64, c: *float64, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DGEMMT :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

DSYMM :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

DSYR2K :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

DSYRK :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

DSYRK_BATCH :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *float64, a_array: **float64, lda_array: *s64, beta_array: *float64, c_array: **float64, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DSYRK_BATCH_STRIDED :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, beta: *float64, c: *float64, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DTRMM :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DTRSM :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DTRSM_BATCH :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *float64, a_array: **float64, lda_array: *s64, b_array: **float64, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DTRSM_BATCH_STRIDED :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, b: *float64, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMM :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMM_BATCH :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, b_array: **MKL_Complex16, ldb_array: *s64, beta_array: *MKL_Complex16, c_array: **MKL_Complex16, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMM_BATCH_STRIDED :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, b: *MKL_Complex16, ldb: *s64, strideb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DZGEMM :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMM3M :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMM3M_BATCH :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, b_array: **MKL_Complex16, ldb_array: *s64, beta_array: *MKL_Complex16, c_array: **MKL_Complex16, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMMT :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZHEMM :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZHER2K :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *float64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZHERK :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, beta: *float64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZSYMM :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZSYR2K :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZSYRK :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZSYRK_BATCH :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, beta_array: *MKL_Complex16, c_array: **MKL_Complex16, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZSYRK_BATCH_STRIDED :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ZTRMM :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSM :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSM_BATCH :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, b_array: **MKL_Complex16, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSM_BATCH_STRIDED :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, b: *MKL_Complex16, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

GEMM_S8U8S32 :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *u8, lda: *s64, ao: *u8, b: *u8, ldb: *s64, bo: *u8, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

GEMM_S16S16S32 :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *s16, lda: *s64, ao: *s16, b: *s16, ldb: *s64, bo: *s16, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

GEMM_S8U8S32_PACK_GET_SIZE :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
GEMM_S16S16S32_PACK_GET_SIZE :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;

GEMM_S8U8S32_PACK :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, src: *void, ld: *s64, dest: *void) -> void #foreign mkl_intel_ilp64;

GEMM_S16S16S32_PACK :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, src: *s16, ld: *s64, dest: *s16) -> void #foreign mkl_intel_ilp64;

GEMM_S8U8S32_COMPUTE :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *u8, lda: *s64, ao: *u8, b: *u8, ldb: *s64, bo: *u8, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

GEMM_S16S16S32_COMPUTE :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *s16, lda: *s64, ao: *s16, b: *s16, ldb: *s64, bo: *s16, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

HGEMM :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *u16, a: *u16, lda: *s64, b: *u16, ldb: *s64, beta: *u16, c: *u16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

HGEMM_PACK_GET_SIZE :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
HGEMM_PACK :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, alpha: *u16, src: *u16, ld: *s64, dest: *u16) -> void #foreign mkl_intel_ilp64;

HGEMM_COMPUTE :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, a: *u16, lda: *s64, b: *u16, ldb: *s64, beta: *u16, c: *u16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

/* Lower case declaration */
xerbla :: (srname: *u8, info: *s32, lsrname: s32) -> void #foreign mkl_intel_ilp64;
lsame :: (ca: *u8, cb: *u8, lca: s64, lcb: s64) -> s32 #foreign mkl_intel_ilp64;

/* BLAS Level1 */
scabs1 :: (c: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;
sasum :: (n: *s64, x: *float, incx: *s64) -> float #foreign mkl_intel_ilp64;
saxpy :: (n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
saxpby :: (n: *s64, alpha: *float, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
saxpyi :: (nz: *s64, a: *float, x: *float, indx: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
scasum :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> float #foreign mkl_intel_ilp64;
scnrm2 :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> float #foreign mkl_intel_ilp64;
scopy :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
sdot :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> float #foreign mkl_intel_ilp64;
sdoti :: (nz: *s64, x: *float, indx: *s64, y: *float) -> float #foreign mkl_intel_ilp64;
sdsdot :: (n: *s64, sb: *float, x: *float, incx: *s64, y: *float, incy: *s64) -> float #foreign mkl_intel_ilp64;
sgthr :: (nz: *s64, y: *float, x: *float, indx: *s64) -> void #foreign mkl_intel_ilp64;
sgthrz :: (nz: *s64, y: *float, x: *float, indx: *s64) -> void #foreign mkl_intel_ilp64;
snrm2 :: (n: *s64, x: *float, incx: *s64) -> float #foreign mkl_intel_ilp64;
srot :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
srotg :: (a: *float, b: *float, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
sroti :: (nz: *s64, x: *float, indx: *s64, y: *float, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
srotm :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, param: *float) -> void #foreign mkl_intel_ilp64;
srotmg :: (d1: *float, d2: *float, x1: *float, y1: *float, param: *float) -> void #foreign mkl_intel_ilp64;
sscal :: (n: *s64, a: *float, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;
ssctr :: (nz: *s64, x: *float, indx: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
sswap :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
isamax :: (n: *s64, x: *float, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
isamin :: (n: *s64, x: *float, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

caxpy :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
caxpby :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
caxpyi :: (nz: *s64, a: *MKL_Complex8, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
ccopy :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
cdotc :: (pres: *MKL_Complex8, n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
cdotci :: (pres: *MKL_Complex8, nz: *s64, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
cdotu :: (pres: *MKL_Complex8, n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
cdotui :: (pres: *MKL_Complex8, nz: *s64, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
cgthr :: (nz: *s64, y: *MKL_Complex8, x: *MKL_Complex8, indx: *s64) -> void #foreign mkl_intel_ilp64;
cgthrz :: (nz: *s64, y: *MKL_Complex8, x: *MKL_Complex8, indx: *s64) -> void #foreign mkl_intel_ilp64;
crotg :: (a: *MKL_Complex8, b: *MKL_Complex8, c: *float, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
cscal :: (n: *s64, a: *MKL_Complex8, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;
csctr :: (nz: *s64, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
csrot :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
csscal :: (n: *s64, a: *float, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;
cswap :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
icamax :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
icamin :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

dcabs1 :: (z: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;
dasum :: (n: *s64, x: *float64, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
daxpy :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
daxpby :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
daxpyi :: (nz: *s64, a: *float64, x: *float64, indx: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
dcopy :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
ddot :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> float64 #foreign mkl_intel_ilp64;
dsdot :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> float64 #foreign mkl_intel_ilp64;
ddoti :: (nz: *s64, x: *float64, indx: *s64, y: *float64) -> float64 #foreign mkl_intel_ilp64;
dgthr :: (nz: *s64, y: *float64, x: *float64, indx: *s64) -> void #foreign mkl_intel_ilp64;
dgthrz :: (nz: *s64, y: *float64, x: *float64, indx: *s64) -> void #foreign mkl_intel_ilp64;
dnrm2 :: (n: *s64, x: *float64, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
drot :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
drotg :: (a: *float64, b: *float64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
droti :: (nz: *s64, x: *float64, indx: *s64, y: *float64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
drotm :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, param: *float64) -> void #foreign mkl_intel_ilp64;
drotmg :: (d1: *float64, d2: *float64, x1: *float64, y1: *float64, param: *float64) -> void #foreign mkl_intel_ilp64;
dscal :: (n: *s64, a: *float64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;
dsctr :: (nz: *s64, x: *float64, indx: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
dswap :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
dzasum :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
dznrm2 :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
idamax :: (n: *s64, x: *float64, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
idamin :: (n: *s64, x: *float64, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

zaxpy :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
zaxpby :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
zaxpyi :: (nz: *s64, a: *MKL_Complex16, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
zcopy :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
zdotc :: (pres: *MKL_Complex16, n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
zdotci :: (pres: *MKL_Complex16, nz: *s64, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
zdotu :: (pres: *MKL_Complex16, n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
zdotui :: (pres: *MKL_Complex16, nz: *s64, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
zdrot :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
zdscal :: (n: *s64, a: *float64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;
zgthr :: (nz: *s64, y: *MKL_Complex16, x: *MKL_Complex16, indx: *s64) -> void #foreign mkl_intel_ilp64;
zgthrz :: (nz: *s64, y: *MKL_Complex16, x: *MKL_Complex16, indx: *s64) -> void #foreign mkl_intel_ilp64;
zrotg :: (a: *MKL_Complex16, b: *MKL_Complex16, c: *float64, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
zscal :: (n: *s64, a: *MKL_Complex16, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;
zsctr :: (nz: *s64, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
zswap :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
izamax :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
izamin :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

/* blas level2 */
sgbmv :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sgemv :: (trans: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sger :: (m: *s64, n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

ssbmv :: (uplo: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sspmv :: (uplo: *u8, n: *s64, alpha: *float, ap: *float, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sspr :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, ap: *float) -> void #foreign mkl_intel_ilp64;

sspr2 :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64, ap: *float) -> void #foreign mkl_intel_ilp64;

ssymv :: (uplo: *u8, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

ssyr :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

ssyr2 :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

stbmv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float, lda: *s64, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

stbsv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float, lda: *s64, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

stpmv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

stpsv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

strmv :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, b: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

strsv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

sgem2vu :: (m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, beta: *float, y1: *float, incy1: *s64, y2: *float, incy2: *s64) -> void #foreign mkl_intel_ilp64;

cgbmv :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

cgemv :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

cgerc :: (m: *s64, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

cgeru :: (m: *s64, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

chbmv :: (uplo: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

chemv :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

cher :: (uplo: *u8, n: *s64, alpha: *float, x: *MKL_Complex8, incx: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

cher2 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

chpmv :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

chpr :: (uplo: *u8, n: *s64, alpha: *float, x: *MKL_Complex8, incx: *s64, ap: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

chpr2 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, ap: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

ctbmv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

ctbsv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

ctpmv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

ctpsv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

ctrmv :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

ctrsv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

cgem2vc :: (m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, beta: *MKL_Complex8, y1: *MKL_Complex8, incy1: *s64, y2: *MKL_Complex8, incy2: *s64) -> void #foreign mkl_intel_ilp64;

scgemv :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *float, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

dgbmv :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dgemv :: (trans: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dger :: (m: *s64, n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

dsbmv :: (uplo: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dspmv :: (uplo: *u8, n: *s64, alpha: *float64, ap: *float64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dspr :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, ap: *float64) -> void #foreign mkl_intel_ilp64;

dspr2 :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64, ap: *float64) -> void #foreign mkl_intel_ilp64;

dsymv :: (uplo: *u8, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dsyr :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

dsyr2 :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

dtbmv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float64, lda: *s64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dtbsv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float64, lda: *s64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dtpmv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dtpsv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dtrmv :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dtrsv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dgem2vu :: (m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, beta: *float64, y1: *float64, incy1: *s64, y2: *float64, incy2: *s64) -> void #foreign mkl_intel_ilp64;

zgbmv :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zgemv :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zgerc :: (m: *s64, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zgeru :: (m: *s64, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zhbmv :: (uplo: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zhemv :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zher :: (uplo: *u8, n: *s64, alpha: *float64, x: *MKL_Complex16, incx: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zher2 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zhpmv :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zhpr :: (uplo: *u8, n: *s64, alpha: *float64, x: *MKL_Complex16, incx: *s64, ap: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zhpr2 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, ap: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ztbmv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ztbsv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ztpmv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ztpsv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ztrmv :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ztrsv :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

zgem2vc :: (m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, beta: *MKL_Complex16, y1: *MKL_Complex16, incy1: *s64, y2: *MKL_Complex16, incy2: *s64) -> void #foreign mkl_intel_ilp64;

dzgemv :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *float64, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

/* blas level3 */
sgemm :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

sgemm_pack_get_size :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
sgemm_pack :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, src: *float, ld: *s64, dest: *float) -> void #foreign mkl_intel_ilp64;

sgemm_compute :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

sgemm_batch :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *float, a_array: **float, lda_array: *s64, b_array: **float, ldb_array: *s64, beta_array: *float, c_array: **float, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

sgemm_batch_strided :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, b: *float, ldb: *s64, strideb: *s64, beta: *float, c: *float, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

sgemmt :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ssymm :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ssyr2k :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ssyrk :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ssyrk_batch :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *float, a_array: **float, lda_array: *s64, beta_array: *float, c_array: **float, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ssyrk_batch_strided :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, beta: *float, c: *float, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

strmm :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

strsm :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

strsm_batch :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *float, a_array: **float, lda_array: *s64, b_array: **float, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

strsm_batch_strided :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, b: *float, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

cgemm :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

cgemm_batch :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, b_array: **MKL_Complex8, ldb_array: *s64, beta_array: *MKL_Complex8, c_array: **MKL_Complex8, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cgemm_batch_strided :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, b: *MKL_Complex8, ldb: *s64, strideb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

scgemm :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

cgemm3m :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

cgemm3m_batch :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, b_array: **MKL_Complex8, ldb_array: *s64, beta_array: *MKL_Complex8, c_array: **MKL_Complex8, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cgemmt :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

chemm :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

cher2k :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *float, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

cherk :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, beta: *float, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

csymm :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

csyr2k :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

csyrk :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

csyrk_batch :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, beta_array: *MKL_Complex8, c_array: **MKL_Complex8, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

csyrk_batch_strided :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ctrmm :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ctrsm :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ctrsm_batch :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, b_array: **MKL_Complex8, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ctrsm_batch_strided :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, b: *MKL_Complex8, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

dgemm :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

dgemm_pack_get_size :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
dgemm_pack :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, src: *float64, ld: *s64, dest: *float64) -> void #foreign mkl_intel_ilp64;

dgemm_compute :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

dgemm_batch :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *float64, a_array: **float64, lda_array: *s64, b_array: **float64, ldb_array: *s64, beta_array: *float64, c_array: **float64, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

dgemm_batch_strided :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, b: *float64, ldb: *s64, strideb: *s64, beta: *float64, c: *float64, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

dgemmt :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

dsymm :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

dsyr2k :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

dsyrk :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

dsyrk_batch :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *float64, a_array: **float64, lda_array: *s64, beta_array: *float64, c_array: **float64, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

dsyrk_batch_strided :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, beta: *float64, c: *float64, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

dtrmm :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dtrsm :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dtrsm_batch :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *float64, a_array: **float64, lda_array: *s64, b_array: **float64, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

dtrsm_batch_strided :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, b: *float64, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

zgemm :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zgemm_batch :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, b_array: **MKL_Complex16, ldb_array: *s64, beta_array: *MKL_Complex16, c_array: **MKL_Complex16, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zgemm_batch_strided :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, b: *MKL_Complex16, ldb: *s64, strideb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

dzgemm :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zgemm3m :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zgemm3m_batch :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, b_array: **MKL_Complex16, ldb_array: *s64, beta_array: *MKL_Complex16, c_array: **MKL_Complex16, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zgemmt :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zhemm :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zher2k :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *float64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zherk :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, beta: *float64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zsymm :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zsyr2k :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zsyrk :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zsyrk_batch :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, beta_array: *MKL_Complex16, c_array: **MKL_Complex16, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zsyrk_batch_strided :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ztrmm :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ztrsm :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ztrsm_batch :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, b_array: **MKL_Complex16, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ztrsm_batch_strided :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, b: *MKL_Complex16, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

gemm_s16s16s32 :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *s16, lda: *s64, ao: *s16, b: *s16, ldb: *s64, bo: *s16, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

gemm_s8u8s32 :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *u8, lda: *s64, ao: *u8, b: *u8, ldb: *s64, bo: *u8, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

gemm_s8u8s32_pack_get_size :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
gemm_s16s16s32_pack_get_size :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
gemm_s8u8s32_pack :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, src: *void, ld: *s64, dest: *void) -> void #foreign mkl_intel_ilp64;

gemm_s16s16s32_pack :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, src: *s16, ld: *s64, dest: *s16) -> void #foreign mkl_intel_ilp64;

gemm_s8u8s32_compute :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *u8, lda: *s64, ao: *u8, b: *u8, ldb: *s64, bo: *u8, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

gemm_s16s16s32_compute :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *s16, lda: *s64, ao: *s16, b: *s16, ldb: *s64, bo: *s16, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

hgemm :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *u16, a: *u16, lda: *s64, b: *u16, ldb: *s64, beta: *u16, c: *u16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

hgemm_pack_get_size :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
hgemm_pack :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, alpha: *u16, src: *u16, ld: *s64, dest: *u16) -> void #foreign mkl_intel_ilp64;

hgemm_compute :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, a: *u16, lda: *s64, b: *u16, ldb: *s64, beta: *u16, c: *u16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_cblas_jit_create_dgemm :: (jitter: **void, layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: s64, n: s64, k: s64, alpha: float64, lda: s64, ldb: s64, beta: float64, ldc: s64) -> mkl_jit_status_t #foreign mkl_intel_ilp64;

mkl_cblas_jit_create_sgemm :: (jitter: **void, layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: s64, n: s64, k: s64, alpha: float, lda: s64, ldb: s64, beta: float, ldc: s64) -> mkl_jit_status_t #foreign mkl_intel_ilp64;

mkl_cblas_jit_create_cgemm :: (jitter: **void, layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: s64, n: s64, k: s64, alpha: *void, lda: s64, ldb: s64, beta: *void, ldc: s64) -> mkl_jit_status_t #foreign mkl_intel_ilp64;

mkl_cblas_jit_create_zgemm :: (jitter: **void, layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: s64, n: s64, k: s64, alpha: *void, lda: s64, ldb: s64, beta: *void, ldc: s64) -> mkl_jit_status_t #foreign mkl_intel_ilp64;

mkl_jit_get_dgemm_ptr :: (jitter: *void) -> dgemm_jit_kernel_t #foreign mkl_intel_ilp64;
mkl_jit_get_sgemm_ptr :: (jitter: *void) -> sgemm_jit_kernel_t #foreign mkl_intel_ilp64;
mkl_jit_get_cgemm_ptr :: (jitter: *void) -> cgemm_jit_kernel_t #foreign mkl_intel_ilp64;
mkl_jit_get_zgemm_ptr :: (jitter: *void) -> zgemm_jit_kernel_t #foreign mkl_intel_ilp64;

mkl_jit_destroy :: (jitter: *void) -> mkl_jit_status_t #foreign mkl_intel_ilp64;

/* Level1 BLAS batch API */
SAXPY_BATCH :: (n: *s64, alpha: *float, x: **float, incx: *s64, y: **float, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

saxpy_batch :: (n: *s64, alpha: *float, x: **float, incx: *s64, y: **float, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DAXPY_BATCH :: (n: *s64, alpha: *float64, x: **float64, incx: *s64, y: **float64, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

daxpy_batch :: (n: *s64, alpha: *float64, x: **float64, incx: *s64, y: **float64, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CAXPY_BATCH :: (n: *s64, alpha: *MKL_Complex8, x: **MKL_Complex8, incx: *s64, y: **MKL_Complex8, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

caxpy_batch :: (n: *s64, alpha: *MKL_Complex8, x: **MKL_Complex8, incx: *s64, y: **MKL_Complex8, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZAXPY_BATCH :: (n: *s64, alpha: *MKL_Complex16, x: **MKL_Complex16, incx: *s64, y: **MKL_Complex16, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zaxpy_batch :: (n: *s64, alpha: *MKL_Complex16, x: **MKL_Complex16, incx: *s64, y: **MKL_Complex16, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

SCOPY_BATCH :: (n: *s64, x: **float, incx: *s64, y: **float, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

scopy_batch :: (n: *s64, x: **float, incx: *s64, y: **float, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DCOPY_BATCH :: (n: *s64, x: **float64, incx: *s64, y: **float64, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

dcopy_batch :: (n: *s64, x: **float64, incx: *s64, y: **float64, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CCOPY_BATCH :: (n: *s64, x: **MKL_Complex8, incx: *s64, y: **MKL_Complex8, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ccopy_batch :: (n: *s64, x: **MKL_Complex8, incx: *s64, y: **MKL_Complex8, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZCOPY_BATCH :: (n: *s64, x: **MKL_Complex16, incx: *s64, y: **MKL_Complex16, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zcopy_batch :: (n: *s64, x: **MKL_Complex16, incx: *s64, y: **MKL_Complex16, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

SAXPY_BATCH_STRIDED :: (n: *s64, alpha: *float, x: *float, incx: *s64, stridex: *s64, y: *float, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

saxpy_batch_strided :: (n: *s64, alpha: *float, x: *float, incx: *s64, stridex: *s64, y: *float, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DAXPY_BATCH_STRIDED :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, stridex: *s64, y: *float64, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

daxpy_batch_strided :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, stridex: *s64, y: *float64, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CAXPY_BATCH_STRIDED :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, stridex: *s64, y: *MKL_Complex8, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

caxpy_batch_strided :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, stridex: *s64, y: *MKL_Complex8, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ZAXPY_BATCH_STRIDED :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, stridex: *s64, y: *MKL_Complex16, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

zaxpy_batch_strided :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, stridex: *s64, y: *MKL_Complex16, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

SCOPY_BATCH_STRIDED :: (n: *s64, x: *float, incx: *s64, stridex: *s64, y: *float, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

scopy_batch_strided :: (n: *s64, x: *float, incx: *s64, stridex: *s64, y: *float, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DCOPY_BATCH_STRIDED :: (n: *s64, x: *float64, incx: *s64, stridex: *s64, y: *float64, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

dcopy_batch_strided :: (n: *s64, x: *float64, incx: *s64, stridex: *s64, y: *float64, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CCOPY_BATCH_STRIDED :: (n: *s64, x: *MKL_Complex8, incx: *s64, stridex: *s64, y: *MKL_Complex8, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ccopy_batch_strided :: (n: *s64, x: *MKL_Complex8, incx: *s64, stridex: *s64, y: *MKL_Complex8, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ZCOPY_BATCH_STRIDED :: (n: *s64, x: *MKL_Complex16, incx: *s64, stridex: *s64, y: *MKL_Complex16, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

zcopy_batch_strided :: (n: *s64, x: *MKL_Complex16, incx: *s64, stridex: *s64, y: *MKL_Complex16, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

/* Level2 BLAS batch API */
sgemv_batch :: (trans: *u8, m: *s64, n: *s64, alpha: *float, a: **float, lda: *s64, x: **float, incx: *s64, beta: *float, y: **float, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

sgemv_batch_strided :: (trans: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, x: *float, incx: *s64, stridex: *s64, beta: *float, y: *float, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

dgemv_batch :: (trans: *u8, m: *s64, n: *s64, alpha: *float64, a: **float64, lda: *s64, x: **float64, incx: *s64, beta: *float64, y: **float64, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

dgemv_batch_strided :: (trans: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, x: *float64, incx: *s64, stridex: *s64, beta: *float64, y: *float64, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

cgemv_batch :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: **MKL_Complex8, lda: *s64, x: **MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: **MKL_Complex8, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cgemv_batch_strided :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, x: *MKL_Complex8, incx: *s64, stridex: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

zgemv_batch :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: **MKL_Complex16, lda: *s64, x: **MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: **MKL_Complex16, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zgemv_batch_strided :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, x: *MKL_Complex16, incx: *s64, stridex: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

SGEMV_BATCH :: (trans: *u8, m: *s64, n: *s64, alpha: *float, a: **float, lda: *s64, x: **float, incx: *s64, beta: *float, y: **float, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

SGEMV_BATCH_STRIDED :: (trans: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, x: *float, incx: *s64, stridex: *s64, beta: *float, y: *float, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DGEMV_BATCH :: (trans: *u8, m: *s64, n: *s64, alpha: *float64, a: **float64, lda: *s64, x: **float64, incx: *s64, beta: *float64, y: **float64, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DGEMV_BATCH_STRIDED :: (trans: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, x: *float64, incx: *s64, stridex: *s64, beta: *float64, y: *float64, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CGEMV_BATCH :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: **MKL_Complex8, lda: *s64, x: **MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: **MKL_Complex8, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CGEMV_BATCH_STRIDED :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, x: *MKL_Complex8, incx: *s64, stridex: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMV_BATCH :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: **MKL_Complex16, lda: *s64, x: **MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: **MKL_Complex16, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMV_BATCH_STRIDED :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, x: *MKL_Complex16, incx: *s64, stridex: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

sdgmm_batch :: (side: *u8, m: *s64, n: *s64, a: **float, lda: *s64, x: **float, incx: *s64, c: **float, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

sdgmm_batch_strided :: (side: *u8, m: *s64, n: *s64, a: *float, lda: *s64, stridea: *s64, x: *float, incx: *s64, stridex: *s64, c: *float, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ddgmm_batch :: (side: *u8, m: *s64, n: *s64, a: **float64, lda: *s64, x: **float64, incx: *s64, c: **float64, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ddgmm_batch_strided :: (side: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, stridea: *s64, x: *float64, incx: *s64, stridex: *s64, c: *float64, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

cdgmm_batch :: (side: *u8, m: *s64, n: *s64, a: **MKL_Complex8, lda: *s64, x: **MKL_Complex8, incx: *s64, c: **MKL_Complex8, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cdgmm_batch_strided :: (side: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stridea: *s64, x: *MKL_Complex8, incx: *s64, stridex: *s64, c: *MKL_Complex8, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

zdgmm_batch :: (side: *u8, m: *s64, n: *s64, a: **MKL_Complex16, lda: *s64, x: **MKL_Complex16, incx: *s64, c: **MKL_Complex16, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zdgmm_batch_strided :: (side: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stridea: *s64, x: *MKL_Complex16, incx: *s64, stridex: *s64, c: *MKL_Complex16, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

SDGMM_BATCH :: (side: *u8, m: *s64, n: *s64, a: **float, lda: *s64, x: **float, incx: *s64, c: **float, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

SDGMM_BATCH_STRIDED :: (side: *u8, m: *s64, n: *s64, a: *float, lda: *s64, stridea: *s64, x: *float, incx: *s64, stridex: *s64, c: *float, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DDGMM_BATCH :: (side: *u8, m: *s64, n: *s64, a: **float64, lda: *s64, x: **float64, incx: *s64, c: **float64, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DDGMM_BATCH_STRIDED :: (side: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, stridea: *s64, x: *float64, incx: *s64, stridex: *s64, c: *float64, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CDGMM_BATCH :: (side: *u8, m: *s64, n: *s64, a: **MKL_Complex8, lda: *s64, x: **MKL_Complex8, incx: *s64, c: **MKL_Complex8, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CDGMM_BATCH_STRIDED :: (side: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stridea: *s64, x: *MKL_Complex8, incx: *s64, stridex: *s64, c: *MKL_Complex8, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ZDGMM_BATCH :: (side: *u8, m: *s64, n: *s64, a: **MKL_Complex16, lda: *s64, x: **MKL_Complex16, incx: *s64, c: **MKL_Complex16, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZDGMM_BATCH_STRIDED :: (side: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stridea: *s64, x: *MKL_Complex16, incx: *s64, stridex: *s64, c: *MKL_Complex16, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

/* BLAS Level1 */
SCABS1_64 :: (c: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;
SASUM_64 :: (n: *s64, x: *float, incx: *s64) -> float #foreign mkl_intel_ilp64;
SAXPY_64 :: (n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
SAXPBY_64 :: (n: *s64, alpha: *float, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
SAXPYI_64 :: (nz: *s64, a: *float, x: *float, indx: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
SCASUM_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> float #foreign mkl_intel_ilp64;
SCNRM2_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> float #foreign mkl_intel_ilp64;
SCOPY_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
SDOT_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> float #foreign mkl_intel_ilp64;
SDSDOT_64 :: (n: *s64, sb: *float, x: *float, incx: *s64, y: *float, incy: *s64) -> float #foreign mkl_intel_ilp64;
SDOTI_64 :: (nz: *s64, x: *float, indx: *s64, y: *float) -> float #foreign mkl_intel_ilp64;
SGTHR_64 :: (nz: *s64, y: *float, x: *float, indx: *s64) -> void #foreign mkl_intel_ilp64;
SGTHRZ_64 :: (nz: *s64, y: *float, x: *float, indx: *s64) -> void #foreign mkl_intel_ilp64;
SNRM2_64 :: (n: *s64, x: *float, incx: *s64) -> float #foreign mkl_intel_ilp64;
SROT_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
SROTG_64 :: (a: *float, b: *float, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
SROTI_64 :: (nz: *s64, x: *float, indx: *s64, y: *float, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
SROTM_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, param: *float) -> void #foreign mkl_intel_ilp64;
SROTMG_64 :: (d1: *float, d2: *float, x1: *float, y1: *float, param: *float) -> void #foreign mkl_intel_ilp64;
SSCAL_64 :: (n: *s64, a: *float, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;
SSCTR_64 :: (nz: *s64, x: *float, indx: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
SSWAP_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
ISAMAX_64 :: (n: *s64, x: *float, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
ISAMIN_64 :: (n: *s64, x: *float, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

CAXPY_64 :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
CAXPBY_64 :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
CAXPYI_64 :: (nz: *s64, a: *MKL_Complex8, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
CCOPY_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
CDOTC_64 :: (pres: *MKL_Complex8, n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
CDOTCI_64 :: (pres: *MKL_Complex8, nz: *s64, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
CDOTU_64 :: (pres: *MKL_Complex8, n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
CDOTUI_64 :: (pres: *MKL_Complex8, nz: *s64, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
CGTHR_64 :: (nz: *s64, y: *MKL_Complex8, x: *MKL_Complex8, indx: *s64) -> void #foreign mkl_intel_ilp64;
CGTHRZ_64 :: (nz: *s64, y: *MKL_Complex8, x: *MKL_Complex8, indx: *s64) -> void #foreign mkl_intel_ilp64;
CROTG_64 :: (a: *MKL_Complex8, b: *MKL_Complex8, c: *float, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
CSCAL_64 :: (n: *s64, a: *MKL_Complex8, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;
CSCTR_64 :: (nz: *s64, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
CSROT_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
CSSCAL_64 :: (n: *s64, a: *float, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;
CSWAP_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
ICAMAX_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
ICAMIN_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

DCABS1_64 :: (z: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;
DASUM_64 :: (n: *s64, x: *float64, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
DAXPY_64 :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
DAXPBY_64 :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
DAXPYI_64 :: (nz: *s64, a: *float64, x: *float64, indx: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
DCOPY_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
DDOT_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> float64 #foreign mkl_intel_ilp64;
DSDOT_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> float64 #foreign mkl_intel_ilp64;
DDOTI_64 :: (nz: *s64, x: *float64, indx: *s64, y: *float64) -> float64 #foreign mkl_intel_ilp64;
DGTHR_64 :: (nz: *s64, y: *float64, x: *float64, indx: *s64) -> void #foreign mkl_intel_ilp64;
DGTHRZ_64 :: (nz: *s64, y: *float64, x: *float64, indx: *s64) -> void #foreign mkl_intel_ilp64;
DNRM2_64 :: (n: *s64, x: *float64, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
DROT_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
DROTG_64 :: (a: *float64, b: *float64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
DROTI_64 :: (nz: *s64, x: *float64, indx: *s64, y: *float64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
DROTM_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, param: *float64) -> void #foreign mkl_intel_ilp64;
DROTMG_64 :: (d1: *float64, d2: *float64, x1: *float64, y1: *float64, param: *float64) -> void #foreign mkl_intel_ilp64;
DSCAL_64 :: (n: *s64, a: *float64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;
DSCTR_64 :: (nz: *s64, x: *float64, indx: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
DSWAP_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
DZASUM_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
DZNRM2_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
IDAMAX_64 :: (n: *s64, x: *float64, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
IDAMIN_64 :: (n: *s64, x: *float64, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

ZAXPY_64 :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
ZAXPBY_64 :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
ZAXPYI_64 :: (nz: *s64, a: *MKL_Complex16, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
ZCOPY_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
ZDOTC_64 :: (pres: *MKL_Complex16, n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
ZDOTCI_64 :: (pres: *MKL_Complex16, nz: *s64, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
ZDOTU_64 :: (pres: *MKL_Complex16, n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
ZDOTUI_64 :: (pres: *MKL_Complex16, nz: *s64, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
ZDROT_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
ZDSCAL_64 :: (n: *s64, a: *float64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;
ZGTHR_64 :: (nz: *s64, y: *MKL_Complex16, x: *MKL_Complex16, indx: *s64) -> void #foreign mkl_intel_ilp64;
ZGTHRZ_64 :: (nz: *s64, y: *MKL_Complex16, x: *MKL_Complex16, indx: *s64) -> void #foreign mkl_intel_ilp64;
ZROTG_64 :: (a: *MKL_Complex16, b: *MKL_Complex16, c: *float64, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
ZSCAL_64 :: (n: *s64, a: *MKL_Complex16, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;
ZSCTR_64 :: (nz: *s64, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
ZSWAP_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
IZAMAX_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
IZAMIN_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

/* BLAS Level2 */
SGBMV_64 :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SGEMV_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SGER_64 :: (m: *s64, n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

SSBMV_64 :: (uplo: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SSPMV_64 :: (uplo: *u8, n: *s64, alpha: *float, ap: *float, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SSPR_64 :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, ap: *float) -> void #foreign mkl_intel_ilp64;
SSPR2_64 :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64, ap: *float) -> void #foreign mkl_intel_ilp64;

SSYMV_64 :: (uplo: *u8, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SSYR_64 :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

SSYR2_64 :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

STBMV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float, lda: *s64, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

STBSV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float, lda: *s64, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

STPMV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

STPSV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

STRMV_64 :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, b: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

STRSV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

SGEM2VU_64 :: (m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, beta: *float, y1: *float, incy1: *s64, y2: *float, incy2: *s64) -> void #foreign mkl_intel_ilp64;

CGBMV_64 :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CGEMV_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CGERC_64 :: (m: *s64, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CGERU_64 :: (m: *s64, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CHBMV_64 :: (uplo: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CHEMV_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CHER_64 :: (uplo: *u8, n: *s64, alpha: *float, x: *MKL_Complex8, incx: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CHER2_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CHPMV_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CHPR_64 :: (uplo: *u8, n: *s64, alpha: *float, x: *MKL_Complex8, incx: *s64, ap: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CHPR2_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, ap: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CTBMV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CTBSV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CTPMV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CTPSV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CTRMV_64 :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CTRSV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CGEM2VC_64 :: (m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, beta: *MKL_Complex8, y1: *MKL_Complex8, incy1: *s64, y2: *MKL_Complex8, incy2: *s64) -> void #foreign mkl_intel_ilp64;

SCGEMV_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *float, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

DGBMV_64 :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DGEMV_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DGER_64 :: (m: *s64, n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

DSBMV_64 :: (uplo: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DSPMV_64 :: (uplo: *u8, n: *s64, alpha: *float64, ap: *float64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DSPR_64 :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, ap: *float64) -> void #foreign mkl_intel_ilp64;
DSPR2_64 :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64, ap: *float64) -> void #foreign mkl_intel_ilp64;

DSYMV_64 :: (uplo: *u8, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DSYR_64 :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

DSYR2_64 :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

DTBMV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float64, lda: *s64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DTBSV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float64, lda: *s64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DTPMV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DTPSV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DTRMV_64 :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DTRSV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DGEM2VU_64 :: (m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, beta: *float64, y1: *float64, incy1: *s64, y2: *float64, incy2: *s64) -> void #foreign mkl_intel_ilp64;

ZGBMV_64 :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMV_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZGERC_64 :: (m: *s64, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZGERU_64 :: (m: *s64, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZHBMV_64 :: (uplo: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZHEMV_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZHER_64 :: (uplo: *u8, n: *s64, alpha: *float64, x: *MKL_Complex16, incx: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZHER2_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZHPMV_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZHPR_64 :: (uplo: *u8, n: *s64, alpha: *float64, x: *MKL_Complex16, incx: *s64, ap: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZHPR2_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, ap: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZTBMV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZTBSV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZTPMV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZTPSV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZTRMV_64 :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSV_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZGEM2VC_64 :: (m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, beta: *MKL_Complex16, y1: *MKL_Complex16, incy1: *s64, y2: *MKL_Complex16, incy2: *s64) -> void #foreign mkl_intel_ilp64;

DZGEMV_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *float64, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

/* BLAS Level3 */
SGEMM_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

SGEMM_PACK_GET_SIZE_64 :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
SGEMM_PACK_64 :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, src: *float, ld: *s64, dest: *float) -> void #foreign mkl_intel_ilp64;

SGEMM_COMPUTE_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

SGEMM_BATCH_64 :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *float, a_array: **float, lda_array: *s64, b_array: **float, ldb_array: *s64, beta_array: *float, c_array: **float, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

SGEMM_BATCH_STRIDED_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, b: *float, ldb: *s64, strideb: *s64, beta: *float, c: *float, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

SGEMMT_64 :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

SSYMM_64 :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

SSYR2K_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

SSYRK_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

SSYRK_BATCH_STRIDED_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, beta: *float, c: *float, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

SSYRK_BATCH_64 :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *float, a_array: **float, lda_array: *s64, beta_array: *float, c_array: **float, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

STRMM_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

STRSM_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

STRSM_BATCH_64 :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *float, a_array: **float, lda_array: *s64, b_array: **float, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

STRSM_BATCH_STRIDED_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, b: *float, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CGEMM_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CGEMM_BATCH_64 :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, b_array: **MKL_Complex8, ldb_array: *s64, beta_array: *MKL_Complex8, c_array: **MKL_Complex8, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CGEMM_BATCH_STRIDED_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, b: *MKL_Complex8, ldb: *s64, strideb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

SCGEMM_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CGEMM3M_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CGEMM3M_BATCH_64 :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, b_array: **MKL_Complex8, ldb_array: *s64, beta_array: *MKL_Complex8, c_array: **MKL_Complex8, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CGEMMT_64 :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CTRSM_BATCH_64 :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, b_array: **MKL_Complex8, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CTRSM_BATCH_STRIDED_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, b: *MKL_Complex8, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CHEMM_64 :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CHER2K_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *float, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CHERK_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, beta: *float, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CSYMM_64 :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CSYR2K_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CSYRK_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

CSYRK_BATCH_64 :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, beta_array: *MKL_Complex8, c_array: **MKL_Complex8, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CSYRK_BATCH_STRIDED_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CTRMM_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CTRSM_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DGEMM_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

DGEMM_PACK_GET_SIZE_64 :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
DGEMM_PACK_64 :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, src: *float64, ld: *s64, dest: *float64) -> void #foreign mkl_intel_ilp64;

DGEMM_COMPUTE_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

DGEMM_BATCH_64 :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *float64, a_array: **float64, lda_array: *s64, b_array: **float64, ldb_array: *s64, beta_array: *float64, c_array: **float64, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DGEMM_BATCH_STRIDED_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, b: *float64, ldb: *s64, strideb: *s64, beta: *float64, c: *float64, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DGEMMT_64 :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

DSYMM_64 :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

DSYR2K_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

DSYRK_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

DSYRK_BATCH_64 :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *float64, a_array: **float64, lda_array: *s64, beta_array: *float64, c_array: **float64, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DSYRK_BATCH_STRIDED_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, beta: *float64, c: *float64, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DTRMM_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DTRSM_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DTRSM_BATCH_64 :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *float64, a_array: **float64, lda_array: *s64, b_array: **float64, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DTRSM_BATCH_STRIDED_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, b: *float64, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMM_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMM_BATCH_64 :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, b_array: **MKL_Complex16, ldb_array: *s64, beta_array: *MKL_Complex16, c_array: **MKL_Complex16, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMM_BATCH_STRIDED_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, b: *MKL_Complex16, ldb: *s64, strideb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DZGEMM_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMM3M_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMM3M_BATCH_64 :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, b_array: **MKL_Complex16, ldb_array: *s64, beta_array: *MKL_Complex16, c_array: **MKL_Complex16, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMMT_64 :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZHEMM_64 :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZHER2K_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *float64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZHERK_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, beta: *float64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZSYMM_64 :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZSYR2K_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZSYRK_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ZSYRK_BATCH_64 :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, beta_array: *MKL_Complex16, c_array: **MKL_Complex16, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZSYRK_BATCH_STRIDED_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ZTRMM_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSM_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSM_BATCH_64 :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, b_array: **MKL_Complex16, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSM_BATCH_STRIDED_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, b: *MKL_Complex16, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

GEMM_S8U8S32_64 :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *u8, lda: *s64, ao: *u8, b: *u8, ldb: *s64, bo: *u8, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

GEMM_S16S16S32_64 :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *s16, lda: *s64, ao: *s16, b: *s16, ldb: *s64, bo: *s16, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

GEMM_S8U8S32_PACK_GET_SIZE_64 :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
GEMM_S16S16S32_PACK_GET_SIZE_64 :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;

GEMM_S8U8S32_PACK_64 :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, src: *void, ld: *s64, dest: *void) -> void #foreign mkl_intel_ilp64;

GEMM_S16S16S32_PACK_64 :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, src: *s16, ld: *s64, dest: *s16) -> void #foreign mkl_intel_ilp64;

GEMM_S8U8S32_COMPUTE_64 :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *u8, lda: *s64, ao: *u8, b: *u8, ldb: *s64, bo: *u8, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

GEMM_S16S16S32_COMPUTE_64 :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *s16, lda: *s64, ao: *s16, b: *s16, ldb: *s64, bo: *s16, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

HGEMM_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *u16, a: *u16, lda: *s64, b: *u16, ldb: *s64, beta: *u16, c: *u16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

HGEMM_PACK_GET_SIZE_64 :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
HGEMM_PACK_64 :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, alpha: *u16, src: *u16, ld: *s64, dest: *u16) -> void #foreign mkl_intel_ilp64;

HGEMM_COMPUTE_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, a: *u16, lda: *s64, b: *u16, ldb: *s64, beta: *u16, c: *u16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

/* BLAS Level1 */
scabs1_64 :: (c: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;
sasum_64 :: (n: *s64, x: *float, incx: *s64) -> float #foreign mkl_intel_ilp64;
saxpy_64 :: (n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
saxpby_64 :: (n: *s64, alpha: *float, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
saxpyi_64 :: (nz: *s64, a: *float, x: *float, indx: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
scasum_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> float #foreign mkl_intel_ilp64;
scnrm2_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> float #foreign mkl_intel_ilp64;
scopy_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
sdot_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> float #foreign mkl_intel_ilp64;
sdoti_64 :: (nz: *s64, x: *float, indx: *s64, y: *float) -> float #foreign mkl_intel_ilp64;
sdsdot_64 :: (n: *s64, sb: *float, x: *float, incx: *s64, y: *float, incy: *s64) -> float #foreign mkl_intel_ilp64;
sgthr_64 :: (nz: *s64, y: *float, x: *float, indx: *s64) -> void #foreign mkl_intel_ilp64;
sgthrz_64 :: (nz: *s64, y: *float, x: *float, indx: *s64) -> void #foreign mkl_intel_ilp64;
snrm2_64 :: (n: *s64, x: *float, incx: *s64) -> float #foreign mkl_intel_ilp64;
srot_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
srotg_64 :: (a: *float, b: *float, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
sroti_64 :: (nz: *s64, x: *float, indx: *s64, y: *float, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
srotm_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, param: *float) -> void #foreign mkl_intel_ilp64;
srotmg_64 :: (d1: *float, d2: *float, x1: *float, y1: *float, param: *float) -> void #foreign mkl_intel_ilp64;
sscal_64 :: (n: *s64, a: *float, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;
ssctr_64 :: (nz: *s64, x: *float, indx: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
sswap_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;
isamax_64 :: (n: *s64, x: *float, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
isamin_64 :: (n: *s64, x: *float, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

caxpy_64 :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
caxpby_64 :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
caxpyi_64 :: (nz: *s64, a: *MKL_Complex8, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
ccopy_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
cdotc_64 :: (pres: *MKL_Complex8, n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
cdotci_64 :: (pres: *MKL_Complex8, nz: *s64, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
cdotu_64 :: (pres: *MKL_Complex8, n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
cdotui_64 :: (pres: *MKL_Complex8, nz: *s64, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
cgthr_64 :: (nz: *s64, y: *MKL_Complex8, x: *MKL_Complex8, indx: *s64) -> void #foreign mkl_intel_ilp64;
cgthrz_64 :: (nz: *s64, y: *MKL_Complex8, x: *MKL_Complex8, indx: *s64) -> void #foreign mkl_intel_ilp64;
crotg_64 :: (a: *MKL_Complex8, b: *MKL_Complex8, c: *float, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
cscal_64 :: (n: *s64, a: *MKL_Complex8, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;
csctr_64 :: (nz: *s64, x: *MKL_Complex8, indx: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
csrot_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;
csscal_64 :: (n: *s64, a: *float, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;
cswap_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;
icamax_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
icamin_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

dcabs1_64 :: (z: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;
dasum_64 :: (n: *s64, x: *float64, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
daxpy_64 :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
daxpby_64 :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
daxpyi_64 :: (nz: *s64, a: *float64, x: *float64, indx: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
dcopy_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
ddot_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> float64 #foreign mkl_intel_ilp64;
dsdot_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64) -> float64 #foreign mkl_intel_ilp64;
ddoti_64 :: (nz: *s64, x: *float64, indx: *s64, y: *float64) -> float64 #foreign mkl_intel_ilp64;
dgthr_64 :: (nz: *s64, y: *float64, x: *float64, indx: *s64) -> void #foreign mkl_intel_ilp64;
dgthrz_64 :: (nz: *s64, y: *float64, x: *float64, indx: *s64) -> void #foreign mkl_intel_ilp64;
dnrm2_64 :: (n: *s64, x: *float64, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
drot_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
drotg_64 :: (a: *float64, b: *float64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
droti_64 :: (nz: *s64, x: *float64, indx: *s64, y: *float64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
drotm_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, param: *float64) -> void #foreign mkl_intel_ilp64;
drotmg_64 :: (d1: *float64, d2: *float64, x1: *float64, y1: *float64, param: *float64) -> void #foreign mkl_intel_ilp64;
dscal_64 :: (n: *s64, a: *float64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;
dsctr_64 :: (nz: *s64, x: *float64, indx: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
dswap_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;
dzasum_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
dznrm2_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> float64 #foreign mkl_intel_ilp64;
idamax_64 :: (n: *s64, x: *float64, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
idamin_64 :: (n: *s64, x: *float64, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

zaxpy_64 :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
zaxpby_64 :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
zaxpyi_64 :: (nz: *s64, a: *MKL_Complex16, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
zcopy_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
zdotc_64 :: (pres: *MKL_Complex16, n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
zdotci_64 :: (pres: *MKL_Complex16, nz: *s64, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
zdotu_64 :: (pres: *MKL_Complex16, n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
zdotui_64 :: (pres: *MKL_Complex16, nz: *s64, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
zdrot_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;
zdscal_64 :: (n: *s64, a: *float64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;
zgthr_64 :: (nz: *s64, y: *MKL_Complex16, x: *MKL_Complex16, indx: *s64) -> void #foreign mkl_intel_ilp64;
zgthrz_64 :: (nz: *s64, y: *MKL_Complex16, x: *MKL_Complex16, indx: *s64) -> void #foreign mkl_intel_ilp64;
zrotg_64 :: (a: *MKL_Complex16, b: *MKL_Complex16, c: *float64, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
zscal_64 :: (n: *s64, a: *MKL_Complex16, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;
zsctr_64 :: (nz: *s64, x: *MKL_Complex16, indx: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
zswap_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;
izamax_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> s64 #foreign mkl_intel_ilp64;
izamin_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

/* blas level2 */
sgbmv_64 :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sgemv_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sger_64 :: (m: *s64, n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

ssbmv_64 :: (uplo: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sspmv_64 :: (uplo: *u8, n: *s64, alpha: *float, ap: *float, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sspr_64 :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, ap: *float) -> void #foreign mkl_intel_ilp64;

sspr2_64 :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64, ap: *float) -> void #foreign mkl_intel_ilp64;

ssymv_64 :: (uplo: *u8, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

ssyr_64 :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

ssyr2_64 :: (uplo: *u8, n: *s64, alpha: *float, x: *float, incx: *s64, y: *float, incy: *s64, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

stbmv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float, lda: *s64, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

stbsv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float, lda: *s64, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

stpmv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

stpsv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

strmv_64 :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, b: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

strsv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, x: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

sgem2vu_64 :: (m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, beta: *float, y1: *float, incy1: *s64, y2: *float, incy2: *s64) -> void #foreign mkl_intel_ilp64;

cgbmv_64 :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

cgemv_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

cgerc_64 :: (m: *s64, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

cgeru_64 :: (m: *s64, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

chbmv_64 :: (uplo: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

chemv_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

cher_64 :: (uplo: *u8, n: *s64, alpha: *float, x: *MKL_Complex8, incx: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

cher2_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

chpmv_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

chpr_64 :: (uplo: *u8, n: *s64, alpha: *float, x: *MKL_Complex8, incx: *s64, ap: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

chpr2_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, ap: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

ctbmv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

ctbsv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

ctpmv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

ctpsv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

ctrmv_64 :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

ctrsv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

cgem2vc_64 :: (m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, beta: *MKL_Complex8, y1: *MKL_Complex8, incy1: *s64, y2: *MKL_Complex8, incy2: *s64) -> void #foreign mkl_intel_ilp64;

scgemv_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *float, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

dgbmv_64 :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dgemv_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dger_64 :: (m: *s64, n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

dsbmv_64 :: (uplo: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dspmv_64 :: (uplo: *u8, n: *s64, alpha: *float64, ap: *float64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dspr_64 :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, ap: *float64) -> void #foreign mkl_intel_ilp64;

dspr2_64 :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64, ap: *float64) -> void #foreign mkl_intel_ilp64;

dsymv_64 :: (uplo: *u8, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dsyr_64 :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

dsyr2_64 :: (uplo: *u8, n: *s64, alpha: *float64, x: *float64, incx: *s64, y: *float64, incy: *s64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

dtbmv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float64, lda: *s64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dtbsv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *float64, lda: *s64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dtpmv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dtpsv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *float64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dtrmv_64 :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dtrsv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, x: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dgem2vu_64 :: (m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, beta: *float64, y1: *float64, incy1: *s64, y2: *float64, incy2: *s64) -> void #foreign mkl_intel_ilp64;

zgbmv_64 :: (trans: *u8, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zgemv_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zgerc_64 :: (m: *s64, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zgeru_64 :: (m: *s64, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zhbmv_64 :: (uplo: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zhemv_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zher_64 :: (uplo: *u8, n: *s64, alpha: *float64, x: *MKL_Complex16, incx: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zher2_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zhpmv_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zhpr_64 :: (uplo: *u8, n: *s64, alpha: *float64, x: *MKL_Complex16, incx: *s64, ap: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zhpr2_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, ap: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ztbmv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ztbsv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ztpmv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ztpsv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ztrmv_64 :: (uplo: *u8, transa: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ztrsv_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

zgem2vc_64 :: (m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, beta: *MKL_Complex16, y1: *MKL_Complex16, incy1: *s64, y2: *MKL_Complex16, incy2: *s64) -> void #foreign mkl_intel_ilp64;

dzgemv_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *float64, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

/* blas level3 */
sgemm_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

sgemm_pack_get_size_64 :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
sgemm_pack_64 :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, src: *float, ld: *s64, dest: *float) -> void #foreign mkl_intel_ilp64;

sgemm_compute_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

sgemm_batch_64 :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *float, a_array: **float, lda_array: *s64, b_array: **float, ldb_array: *s64, beta_array: *float, c_array: **float, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

sgemm_batch_strided_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, b: *float, ldb: *s64, strideb: *s64, beta: *float, c: *float, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

sgemmt_64 :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ssymm_64 :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ssyr2k_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ssyrk_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

ssyrk_batch_64 :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *float, a_array: **float, lda_array: *s64, beta_array: *float, c_array: **float, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ssyrk_batch_strided_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, beta: *float, c: *float, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

strmm_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

strsm_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

strsm_batch_64 :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *float, a_array: **float, lda_array: *s64, b_array: **float, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

strsm_batch_strided_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, b: *float, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

cgemm_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

cgemm_batch_64 :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, b_array: **MKL_Complex8, ldb_array: *s64, beta_array: *MKL_Complex8, c_array: **MKL_Complex8, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cgemm_batch_strided_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, b: *MKL_Complex8, ldb: *s64, strideb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

scgemm_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

cgemm3m_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

cgemm3m_batch_64 :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, b_array: **MKL_Complex8, ldb_array: *s64, beta_array: *MKL_Complex8, c_array: **MKL_Complex8, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cgemmt_64 :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

chemm_64 :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

cher2k_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *float, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

cherk_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, beta: *float, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

csymm_64 :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

csyr2k_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

csyrk_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

csyrk_batch_64 :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, beta_array: *MKL_Complex8, c_array: **MKL_Complex8, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

csyrk_batch_strided_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ctrmm_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ctrsm_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ctrsm_batch_64 :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *MKL_Complex8, a_array: **MKL_Complex8, lda_array: *s64, b_array: **MKL_Complex8, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ctrsm_batch_strided_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, b: *MKL_Complex8, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

dgemm_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

dgemm_pack_get_size_64 :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
dgemm_pack_64 :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, src: *float64, ld: *s64, dest: *float64) -> void #foreign mkl_intel_ilp64;

dgemm_compute_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

dgemm_batch_64 :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *float64, a_array: **float64, lda_array: *s64, b_array: **float64, ldb_array: *s64, beta_array: *float64, c_array: **float64, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

dgemm_batch_strided_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, b: *float64, ldb: *s64, strideb: *s64, beta: *float64, c: *float64, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

dgemmt_64 :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

dsymm_64 :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

dsyr2k_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

dsyrk_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

dsyrk_batch_64 :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *float64, a_array: **float64, lda_array: *s64, beta_array: *float64, c_array: **float64, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

dsyrk_batch_strided_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, beta: *float64, c: *float64, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

dtrmm_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dtrsm_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dtrsm_batch_64 :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *float64, a_array: **float64, lda_array: *s64, b_array: **float64, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

dtrsm_batch_strided_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, b: *float64, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

zgemm_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zgemm_batch_64 :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, b_array: **MKL_Complex16, ldb_array: *s64, beta_array: *MKL_Complex16, c_array: **MKL_Complex16, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zgemm_batch_strided_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, b: *MKL_Complex16, ldb: *s64, strideb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

dzgemm_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zgemm3m_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zgemm3m_batch_64 :: (transa_array: *u8, transb_array: *u8, m_array: *s64, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, b_array: **MKL_Complex16, ldb_array: *s64, beta_array: *MKL_Complex16, c_array: **MKL_Complex16, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zgemmt_64 :: (uplo: *u8, transa: *u8, transb: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zhemm_64 :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zher2k_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *float64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zherk_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, beta: *float64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zsymm_64 :: (side: *u8, uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zsyr2k_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zsyrk_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

zsyrk_batch_64 :: (uplo_array: *u8, trans_array: *u8, n_array: *s64, k_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, beta_array: *MKL_Complex16, c_array: **MKL_Complex16, ldc_array: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zsyrk_batch_strided_64 :: (uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ztrmm_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ztrsm_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ztrsm_batch_64 :: (side_array: *u8, uplo_array: *u8, transa_array: *u8, diag_array: *u8, m_array: *s64, n_array: *s64, alpha_array: *MKL_Complex16, a_array: **MKL_Complex16, lda_array: *s64, b_array: **MKL_Complex16, ldb: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ztrsm_batch_strided_64 :: (side: *u8, uplo: *u8, transa: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, b: *MKL_Complex16, ldb: *s64, strideb: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

gemm_s16s16s32_64 :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *s16, lda: *s64, ao: *s16, b: *s16, ldb: *s64, bo: *s16, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

gemm_s8u8s32_64 :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *u8, lda: *s64, ao: *u8, b: *u8, ldb: *s64, bo: *u8, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

gemm_s8u8s32_pack_get_size_64 :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
gemm_s16s16s32_pack_get_size_64 :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
gemm_s8u8s32_pack_64 :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, src: *void, ld: *s64, dest: *void) -> void #foreign mkl_intel_ilp64;

gemm_s16s16s32_pack_64 :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, src: *s16, ld: *s64, dest: *s16) -> void #foreign mkl_intel_ilp64;

gemm_s8u8s32_compute_64 :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *u8, lda: *s64, ao: *u8, b: *u8, ldb: *s64, bo: *u8, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

gemm_s16s16s32_compute_64 :: (transa: *u8, transb: *u8, offsetc: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, a: *s16, lda: *s64, ao: *s16, b: *s16, ldb: *s64, bo: *s16, beta: *float, c: *s32, ldc: *s64, co: *s32) -> void #foreign mkl_intel_ilp64;

hgemm_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, alpha: *u16, a: *u16, lda: *s64, b: *u16, ldb: *s64, beta: *u16, c: *u16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

hgemm_pack_get_size_64 :: (identifier: *u8, m: *s64, n: *s64, k: *s64) -> size_t #foreign mkl_intel_ilp64;
hgemm_pack_64 :: (identifier: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, alpha: *u16, src: *u16, ld: *s64, dest: *u16) -> void #foreign mkl_intel_ilp64;

hgemm_compute_64 :: (transa: *u8, transb: *u8, m: *s64, n: *s64, k: *s64, a: *u16, lda: *s64, b: *u16, ldb: *s64, beta: *u16, c: *u16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

/* Level1 BLAS batch API */
SAXPY_BATCH_64 :: (n: *s64, alpha: *float, x: **float, incx: *s64, y: **float, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

saxpy_batch_64 :: (n: *s64, alpha: *float, x: **float, incx: *s64, y: **float, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DAXPY_BATCH_64 :: (n: *s64, alpha: *float64, x: **float64, incx: *s64, y: **float64, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

daxpy_batch_64 :: (n: *s64, alpha: *float64, x: **float64, incx: *s64, y: **float64, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CAXPY_BATCH_64 :: (n: *s64, alpha: *MKL_Complex8, x: **MKL_Complex8, incx: *s64, y: **MKL_Complex8, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

caxpy_batch_64 :: (n: *s64, alpha: *MKL_Complex8, x: **MKL_Complex8, incx: *s64, y: **MKL_Complex8, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZAXPY_BATCH_64 :: (n: *s64, alpha: *MKL_Complex16, x: **MKL_Complex16, incx: *s64, y: **MKL_Complex16, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zaxpy_batch_64 :: (n: *s64, alpha: *MKL_Complex16, x: **MKL_Complex16, incx: *s64, y: **MKL_Complex16, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

SCOPY_BATCH_64 :: (n: *s64, x: **float, incx: *s64, y: **float, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

scopy_batch_64 :: (n: *s64, x: **float, incx: *s64, y: **float, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DCOPY_BATCH_64 :: (n: *s64, x: **float64, incx: *s64, y: **float64, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

dcopy_batch_64 :: (n: *s64, x: **float64, incx: *s64, y: **float64, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CCOPY_BATCH_64 :: (n: *s64, x: **MKL_Complex8, incx: *s64, y: **MKL_Complex8, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ccopy_batch_64 :: (n: *s64, x: **MKL_Complex8, incx: *s64, y: **MKL_Complex8, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZCOPY_BATCH_64 :: (n: *s64, x: **MKL_Complex16, incx: *s64, y: **MKL_Complex16, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zcopy_batch_64 :: (n: *s64, x: **MKL_Complex16, incx: *s64, y: **MKL_Complex16, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

SAXPY_BATCH_STRIDED_64 :: (n: *s64, alpha: *float, x: *float, incx: *s64, stridex: *s64, y: *float, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

saxpy_batch_strided_64 :: (n: *s64, alpha: *float, x: *float, incx: *s64, stridex: *s64, y: *float, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DAXPY_BATCH_STRIDED_64 :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, stridex: *s64, y: *float64, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

daxpy_batch_strided_64 :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, stridex: *s64, y: *float64, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CAXPY_BATCH_STRIDED_64 :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, stridex: *s64, y: *MKL_Complex8, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

caxpy_batch_strided_64 :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, stridex: *s64, y: *MKL_Complex8, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ZAXPY_BATCH_STRIDED_64 :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, stridex: *s64, y: *MKL_Complex16, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

zaxpy_batch_strided_64 :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, stridex: *s64, y: *MKL_Complex16, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

SCOPY_BATCH_STRIDED_64 :: (n: *s64, x: *float, incx: *s64, stridex: *s64, y: *float, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

scopy_batch_strided_64 :: (n: *s64, x: *float, incx: *s64, stridex: *s64, y: *float, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DCOPY_BATCH_STRIDED_64 :: (n: *s64, x: *float64, incx: *s64, stridex: *s64, y: *float64, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

dcopy_batch_strided_64 :: (n: *s64, x: *float64, incx: *s64, stridex: *s64, y: *float64, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CCOPY_BATCH_STRIDED_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, stridex: *s64, y: *MKL_Complex8, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ccopy_batch_strided_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, stridex: *s64, y: *MKL_Complex8, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ZCOPY_BATCH_STRIDED_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, stridex: *s64, y: *MKL_Complex16, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

zcopy_batch_strided_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, stridex: *s64, y: *MKL_Complex16, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

/* Level2 BLAS batch API */
sgemv_batch_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *float, a: **float, lda: *s64, x: **float, incx: *s64, beta: *float, y: **float, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

sgemv_batch_strided_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, x: *float, incx: *s64, stridex: *s64, beta: *float, y: *float, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

dgemv_batch_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *float64, a: **float64, lda: *s64, x: **float64, incx: *s64, beta: *float64, y: **float64, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

dgemv_batch_strided_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, x: *float64, incx: *s64, stridex: *s64, beta: *float64, y: *float64, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

cgemv_batch_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: **MKL_Complex8, lda: *s64, x: **MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: **MKL_Complex8, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cgemv_batch_strided_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, x: *MKL_Complex8, incx: *s64, stridex: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

zgemv_batch_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: **MKL_Complex16, lda: *s64, x: **MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: **MKL_Complex16, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zgemv_batch_strided_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, x: *MKL_Complex16, incx: *s64, stridex: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

SGEMV_BATCH_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *float, a: **float, lda: *s64, x: **float, incx: *s64, beta: *float, y: **float, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

SGEMV_BATCH_STRIDED_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, stridea: *s64, x: *float, incx: *s64, stridex: *s64, beta: *float, y: *float, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DGEMV_BATCH_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *float64, a: **float64, lda: *s64, x: **float64, incx: *s64, beta: *float64, y: **float64, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DGEMV_BATCH_STRIDED_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, stridea: *s64, x: *float64, incx: *s64, stridex: *s64, beta: *float64, y: *float64, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CGEMV_BATCH_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: **MKL_Complex8, lda: *s64, x: **MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: **MKL_Complex8, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CGEMV_BATCH_STRIDED_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, stridea: *s64, x: *MKL_Complex8, incx: *s64, stridex: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMV_BATCH_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: **MKL_Complex16, lda: *s64, x: **MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: **MKL_Complex16, incy: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMV_BATCH_STRIDED_64 :: (trans: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, stridea: *s64, x: *MKL_Complex16, incx: *s64, stridex: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64, stridey: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

sdgmm_batch_64 :: (side: *u8, m: *s64, n: *s64, a: **float, lda: *s64, x: **float, incx: *s64, c: **float, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

sdgmm_batch_strided_64 :: (side: *u8, m: *s64, n: *s64, a: *float, lda: *s64, stridea: *s64, x: *float, incx: *s64, stridex: *s64, c: *float, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ddgmm_batch_64 :: (side: *u8, m: *s64, n: *s64, a: **float64, lda: *s64, x: **float64, incx: *s64, c: **float64, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ddgmm_batch_strided_64 :: (side: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, stridea: *s64, x: *float64, incx: *s64, stridex: *s64, c: *float64, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

cdgmm_batch_64 :: (side: *u8, m: *s64, n: *s64, a: **MKL_Complex8, lda: *s64, x: **MKL_Complex8, incx: *s64, c: **MKL_Complex8, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cdgmm_batch_strided_64 :: (side: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stridea: *s64, x: *MKL_Complex8, incx: *s64, stridex: *s64, c: *MKL_Complex8, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

zdgmm_batch_64 :: (side: *u8, m: *s64, n: *s64, a: **MKL_Complex16, lda: *s64, x: **MKL_Complex16, incx: *s64, c: **MKL_Complex16, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

zdgmm_batch_strided_64 :: (side: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stridea: *s64, x: *MKL_Complex16, incx: *s64, stridex: *s64, c: *MKL_Complex16, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

SDGMM_BATCH_64 :: (side: *u8, m: *s64, n: *s64, a: **float, lda: *s64, x: **float, incx: *s64, c: **float, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

SDGMM_BATCH_STRIDED_64 :: (side: *u8, m: *s64, n: *s64, a: *float, lda: *s64, stridea: *s64, x: *float, incx: *s64, stridex: *s64, c: *float, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

DDGMM_BATCH_64 :: (side: *u8, m: *s64, n: *s64, a: **float64, lda: *s64, x: **float64, incx: *s64, c: **float64, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

DDGMM_BATCH_STRIDED_64 :: (side: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, stridea: *s64, x: *float64, incx: *s64, stridex: *s64, c: *float64, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

CDGMM_BATCH_64 :: (side: *u8, m: *s64, n: *s64, a: **MKL_Complex8, lda: *s64, x: **MKL_Complex8, incx: *s64, c: **MKL_Complex8, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

CDGMM_BATCH_STRIDED_64 :: (side: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stridea: *s64, x: *MKL_Complex8, incx: *s64, stridex: *s64, c: *MKL_Complex8, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

ZDGMM_BATCH_64 :: (side: *u8, m: *s64, n: *s64, a: **MKL_Complex16, lda: *s64, x: **MKL_Complex16, incx: *s64, c: **MKL_Complex16, ldc: *s64, group_count: *s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

ZDGMM_BATCH_STRIDED_64 :: (side: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stridea: *s64, x: *MKL_Complex16, incx: *s64, stridex: *s64, c: *MKL_Complex16, ldc: *s64, stridec: *s64, batch_size: *s64) -> void #foreign mkl_intel_ilp64;

MKL_Simatcopy :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: float, AB: *float, lda: size_t, ldb: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Dimatcopy :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: float64, AB: *float64, lda: size_t, ldb: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Cimatcopy :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: MKL_Complex8, AB: *MKL_Complex8, lda: size_t, ldb: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Zimatcopy :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: MKL_Complex16, AB: *MKL_Complex16, lda: size_t, ldb: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Somatcopy :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: float, A: *float, lda: size_t, B: *float, ldb: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Domatcopy :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: float64, A: *float64, lda: size_t, B: *float64, ldb: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Comatcopy :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: MKL_Complex8, A: *MKL_Complex8, lda: size_t, B: *MKL_Complex8, ldb: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Zomatcopy :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: MKL_Complex16, A: *MKL_Complex16, lda: size_t, B: *MKL_Complex16, ldb: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Somatcopy2 :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: float, A: *float, lda: size_t, stridea: size_t, B: *float, ldb: size_t, strideb: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Domatcopy2 :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: float64, A: *float64, lda: size_t, stridea: size_t, B: *float64, ldb: size_t, strideb: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Comatcopy2 :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: MKL_Complex8, A: *MKL_Complex8, lda: size_t, stridea: size_t, B: *MKL_Complex8, ldb: size_t, strideb: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Zomatcopy2 :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: MKL_Complex16, A: *MKL_Complex16, lda: size_t, stridea: size_t, B: *MKL_Complex16, ldb: size_t, strideb: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Somatadd :: (ordering: u8, transa: u8, transb: u8, rows: size_t, cols: size_t, alpha: float, A: *float, lda: size_t, beta: float, B: *float, ldb: size_t, C: *float, ldc: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Domatadd :: (ordering: u8, transa: u8, transb: u8, rows: size_t, cols: size_t, alpha: float64, A: *float64, lda: size_t, beta: float64, B: *float64, ldb: size_t, C: *float64, ldc: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Comatadd :: (ordering: u8, transa: u8, transb: u8, rows: size_t, cols: size_t, alpha: MKL_Complex8, A: *MKL_Complex8, lda: size_t, beta: MKL_Complex8, B: *MKL_Complex8, ldb: size_t, C: *MKL_Complex8, ldc: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Zomatadd :: (ordering: u8, transa: u8, transb: u8, rows: size_t, cols: size_t, alpha: MKL_Complex16, A: *MKL_Complex16, lda: size_t, beta: MKL_Complex16, B: *MKL_Complex16, ldb: size_t, C: *MKL_Complex16, ldc: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Simatcopy_batch_strided :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: float, AB: *float, lda: size_t, ldb: size_t, stride: size_t, batch_size: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Dimatcopy_batch_strided :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: float64, AB: *float64, lda: size_t, ldb: size_t, stride: size_t, batch_size: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Cimatcopy_batch_strided :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: MKL_Complex8, AB: *MKL_Complex8, lda: size_t, ldb: size_t, stride: size_t, batch_size: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Zimatcopy_batch_strided :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: MKL_Complex16, AB: *MKL_Complex16, lda: size_t, ldb: size_t, stride: size_t, batch_size: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Somatcopy_batch_strided :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: float, A: *float, lda: size_t, stridea: size_t, B: *float, ldb: size_t, strideb: size_t, batch_size: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Domatcopy_batch_strided :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: float64, A: *float64, lda: size_t, stridea: size_t, B: *float64, ldb: size_t, strideb: size_t, batch_size: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Comatcopy_batch_strided :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: MKL_Complex8, A: *MKL_Complex8, lda: size_t, stridea: size_t, B: *MKL_Complex8, ldb: size_t, strideb: size_t, batch_size: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Zomatcopy_batch_strided :: (ordering: u8, trans: u8, rows: size_t, cols: size_t, alpha: MKL_Complex16, A: *MKL_Complex16, lda: size_t, stridea: size_t, B: *MKL_Complex16, ldb: size_t, strideb: size_t, batch_size: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Simatcopy_batch :: (ordering: u8, trans_array: *u8, rows_array: *size_t, cols_array: *size_t, alpha_array: *float, AB_array: **float, lda_array: *size_t, ldb_array: *size_t, group_count: size_t, group_size: *size_t) -> void #foreign mkl_intel_ilp64;

MKL_Dimatcopy_batch :: (ordering: u8, trans_array: *u8, rows_array: *size_t, cols_array: *size_t, alpha_array: *float64, AB_array: **float64, lda_array: *size_t, ldb_array: *size_t, group_count: size_t, group_size: *size_t) -> void #foreign mkl_intel_ilp64;

MKL_Cimatcopy_batch :: (ordering: u8, trans_array: *u8, rows_array: *size_t, cols_array: *size_t, alpha_array: *MKL_Complex8, AB_array: **MKL_Complex8, lda_array: *size_t, ldb_array: *size_t, group_count: size_t, group_size: *size_t) -> void #foreign mkl_intel_ilp64;

MKL_Zimatcopy_batch :: (ordering: u8, trans_array: *u8, rows_array: *size_t, cols_array: *size_t, alpha_array: *MKL_Complex16, AB_array: **MKL_Complex16, lda_array: *size_t, ldb_array: *size_t, group_count: size_t, group_size: *size_t) -> void #foreign mkl_intel_ilp64;

MKL_Somatcopy_batch :: (ordering: u8, trans_array: *u8, rows_array: *size_t, cols_array: *size_t, alpha_array: *float, A_array: **float, lda_array: *size_t, B: **float, ldb_array: *size_t, group_count: size_t, group_size: *size_t) -> void #foreign mkl_intel_ilp64;

MKL_Domatcopy_batch :: (ordering: u8, trans_array: *u8, rows_array: *size_t, cols_array: *size_t, alpha_array: *float64, A_array: **float64, lda_array: *size_t, B_array: **float64, ldb_array: *size_t, group_count: size_t, group_size: *size_t) -> void #foreign mkl_intel_ilp64;

MKL_Comatcopy_batch :: (ordering: u8, trans_array: *u8, rows_array: *size_t, cols_array: *size_t, alpha_array: *MKL_Complex8, A_array: **MKL_Complex8, lda_array: *size_t, B: **MKL_Complex8, ldb_array: *size_t, group_count: size_t, group_size: *size_t) -> void #foreign mkl_intel_ilp64;

MKL_Zomatcopy_batch :: (ordering: u8, trans_array: *u8, rows_array: *size_t, cols_array: *size_t, alpha_array: *MKL_Complex16, A_array: **MKL_Complex16, lda_array: *size_t, B: **MKL_Complex16, ldb_array: *size_t, group_count: size_t, group_size: *size_t) -> void #foreign mkl_intel_ilp64;

MKL_Somatadd_batch_strided :: (ordering: u8, transa: u8, transb: u8, rows: size_t, cols: size_t, alpha: float, A: *float, lda: size_t, stridea: size_t, beta: float, B: *float, ldb: size_t, strideb: size_t, C: *float, ldc: size_t, stridec: size_t, batch_size: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Domatadd_batch_strided :: (ordering: u8, transa: u8, transb: u8, rows: size_t, cols: size_t, alpha: float64, A: *float64, lda: size_t, stridea: size_t, beta: float64, B: *float64, ldb: size_t, strideb: size_t, C: *float64, ldc: size_t, stridec: size_t, batch_size: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Comatadd_batch_strided :: (ordering: u8, transa: u8, transb: u8, rows: size_t, cols: size_t, alpha: MKL_Complex8, A: *MKL_Complex8, lda: size_t, stridea: size_t, beta: MKL_Complex8, B: *MKL_Complex8, ldb: size_t, strideb: size_t, C: *MKL_Complex8, ldc: size_t, stridec: size_t, batch_size: size_t) -> void #foreign mkl_intel_ilp64;

MKL_Zomatadd_batch_strided :: (ordering: u8, transa: u8, transb: u8, rows: size_t, cols: size_t, alpha: MKL_Complex16, A: *MKL_Complex16, lda: size_t, stridea: size_t, beta: MKL_Complex16, B: *MKL_Complex16, ldb: size_t, strideb: size_t, C: *MKL_Complex16, ldc: size_t, stridec: size_t, batch_size: size_t) -> void #foreign mkl_intel_ilp64;

CBLAS_LAYOUT :: enum s32 {
    RowMajor :: 101;
    ColMajor :: 102;
    CblasRowMajor :: RowMajor;
    CblasColMajor :: ColMajor;
}
CBLAS_TRANSPOSE :: enum s32 {
    NoTrans   :: 111;
    Trans     :: 112;
    ConjTrans :: 113;
    CblasNoTrans   :: NoTrans;
    CblasTrans     :: Trans;
    CblasConjTrans :: ConjTrans;
}
CBLAS_UPLO :: enum s32 {
    Upper :: 121;
    Lower :: 122;
    CblasUpper :: Upper;
    CblasLower :: Lower;
}
CBLAS_DIAG :: enum s32 {
    NonUnit :: 131;
    Unit    :: 132;
    CblasNonUnit :: NonUnit;
    CblasUnit    :: Unit;
}
CBLAS_SIDE :: enum s32 {
    Left  :: 141;
    Right :: 142;
    CblasLeft  :: Left;
    CblasRight :: Right;
}
CBLAS_STORAGE :: enum s32 {
    CblasPacked :: 151;
}
CBLAS_IDENTIFIER :: enum s32 {
    AMatrix :: 161;
    BMatrix :: 162;
    CblasAMatrix :: AMatrix;
    CblasBMatrix :: BMatrix;
}
CBLAS_OFFSET :: enum s32 {
    RowOffset :: 171;
    ColOffset :: 172;
    FixOffset :: 173;
    CblasRowOffset :: RowOffset;
    CblasColOffset :: ColOffset;
    CblasFixOffset :: FixOffset;
}

CBLAS_ORDER :: CBLAS_LAYOUT;

/*
* ===========================================================================
* Prototypes for level 1 BLAS functions (complex are recast as routines)
* ===========================================================================
*/
cblas_dcabs1 :: (z: *void) -> float64 #foreign mkl_intel_ilp64;
cblas_scabs1 :: (c: *void) -> float #foreign mkl_intel_ilp64;

cblas_sdot :: (N: s64, X: *float, incX: s64, Y: *float, incY: s64) -> float #foreign mkl_intel_ilp64;

cblas_sdoti :: (N: s64, X: *float, indx: *s64, Y: *float) -> float #foreign mkl_intel_ilp64;

cblas_ddot :: (N: s64, X: *float64, incX: s64, Y: *float64, incY: s64) -> float64 #foreign mkl_intel_ilp64;

cblas_ddoti :: (N: s64, X: *float64, indx: *s64, Y: *float64) -> float64 #foreign mkl_intel_ilp64;

cblas_dsdot :: (N: s64, X: *float, incX: s64, Y: *float, incY: s64) -> float64 #foreign mkl_intel_ilp64;

cblas_sdsdot :: (N: s64, sb: float, X: *float, incX: s64, Y: *float, incY: s64) -> float #foreign mkl_intel_ilp64;

/*
* Functions having prefixes Z and C only
*/
cblas_cdotu_sub :: (N: s64, X: *void, incX: s64, Y: *void, incY: s64, dotu: *void) -> void #foreign mkl_intel_ilp64;

cblas_cdotui_sub :: (N: s64, X: *void, indx: *s64, Y: *void, dotui: *void) -> void #foreign mkl_intel_ilp64;

cblas_cdotc_sub :: (N: s64, X: *void, incX: s64, Y: *void, incY: s64, dotc: *void) -> void #foreign mkl_intel_ilp64;

cblas_cdotci_sub :: (N: s64, X: *void, indx: *s64, Y: *void, dotui: *void) -> void #foreign mkl_intel_ilp64;

cblas_zdotu_sub :: (N: s64, X: *void, incX: s64, Y: *void, incY: s64, dotu: *void) -> void #foreign mkl_intel_ilp64;

cblas_zdotui_sub :: (N: s64, X: *void, indx: *s64, Y: *void, dotui: *void) -> void #foreign mkl_intel_ilp64;

cblas_zdotc_sub :: (N: s64, X: *void, incX: s64, Y: *void, incY: s64, dotc: *void) -> void #foreign mkl_intel_ilp64;

cblas_zdotci_sub :: (N: s64, X: *void, indx: *s64, Y: *void, dotui: *void) -> void #foreign mkl_intel_ilp64;

/*
* Functions having prefixes S D SC DZ
*/
cblas_snrm2 :: (N: s64, X: *float, incX: s64) -> float #foreign mkl_intel_ilp64;
cblas_sasum :: (N: s64, X: *float, incX: s64) -> float #foreign mkl_intel_ilp64;

cblas_dnrm2 :: (N: s64, X: *float64, incX: s64) -> float64 #foreign mkl_intel_ilp64;
cblas_dasum :: (N: s64, X: *float64, incX: s64) -> float64 #foreign mkl_intel_ilp64;

cblas_scnrm2 :: (N: s64, X: *void, incX: s64) -> float #foreign mkl_intel_ilp64;
cblas_scasum :: (N: s64, X: *void, incX: s64) -> float #foreign mkl_intel_ilp64;

cblas_dznrm2 :: (N: s64, X: *void, incX: s64) -> float64 #foreign mkl_intel_ilp64;
cblas_dzasum :: (N: s64, X: *void, incX: s64) -> float64 #foreign mkl_intel_ilp64;

/*
* Functions having standard 4 prefixes (S D C Z)
*/
cblas_isamax :: (N: s64, X: *float, incX: s64) -> size_t #foreign mkl_intel_ilp64;
cblas_idamax :: (N: s64, X: *float64, incX: s64) -> size_t #foreign mkl_intel_ilp64;
cblas_icamax :: (N: s64, X: *void, incX: s64) -> size_t #foreign mkl_intel_ilp64;
cblas_izamax :: (N: s64, X: *void, incX: s64) -> size_t #foreign mkl_intel_ilp64;
cblas_isamin :: (N: s64, X: *float, incX: s64) -> size_t #foreign mkl_intel_ilp64;
cblas_idamin :: (N: s64, X: *float64, incX: s64) -> size_t #foreign mkl_intel_ilp64;
cblas_icamin :: (N: s64, X: *void, incX: s64) -> size_t #foreign mkl_intel_ilp64;
cblas_izamin :: (N: s64, X: *void, incX: s64) -> size_t #foreign mkl_intel_ilp64;

/*
* Routines with standard 4 prefixes (s, d, c, z)
*/
cblas_sswap :: (N: s64, X: *float, incX: s64, Y: *float, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_scopy :: (N: s64, X: *float, incX: s64, Y: *float, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_saxpy :: (N: s64, alpha: float, X: *float, incX: s64, Y: *float, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_saxpby :: (N: s64, alpha: float, X: *float, incX: s64, beta: float, Y: *float, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_saxpyi :: (N: s64, alpha: float, X: *float, indx: *s64, Y: *float) -> void #foreign mkl_intel_ilp64;

cblas_sgthr :: (N: s64, Y: *float, X: *float, indx: *s64) -> void #foreign mkl_intel_ilp64;

cblas_sgthrz :: (N: s64, Y: *float, X: *float, indx: *s64) -> void #foreign mkl_intel_ilp64;

cblas_ssctr :: (N: s64, X: *float, indx: *s64, Y: *float) -> void #foreign mkl_intel_ilp64;

cblas_srotg :: (a: *float, b: *float, c: *float, s: *float) -> void #foreign mkl_intel_ilp64;

cblas_dswap :: (N: s64, X: *float64, incX: s64, Y: *float64, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_dcopy :: (N: s64, X: *float64, incX: s64, Y: *float64, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_daxpy :: (N: s64, alpha: float64, X: *float64, incX: s64, Y: *float64, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_daxpby :: (N: s64, alpha: float64, X: *float64, incX: s64, beta: float64, Y: *float64, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_daxpyi :: (N: s64, alpha: float64, X: *float64, indx: *s64, Y: *float64) -> void #foreign mkl_intel_ilp64;

cblas_dgthr :: (N: s64, Y: *float64, X: *float64, indx: *s64) -> void #foreign mkl_intel_ilp64;

cblas_dgthrz :: (N: s64, Y: *float64, X: *float64, indx: *s64) -> void #foreign mkl_intel_ilp64;

cblas_dsctr :: (N: s64, X: *float64, indx: *s64, Y: *float64) -> void #foreign mkl_intel_ilp64;

cblas_drotg :: (a: *float64, b: *float64, c: *float64, s: *float64) -> void #foreign mkl_intel_ilp64;

cblas_cswap :: (N: s64, X: *void, incX: s64, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_ccopy :: (N: s64, X: *void, incX: s64, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_caxpy :: (N: s64, alpha: *void, X: *void, incX: s64, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_caxpby :: (N: s64, alpha: *void, X: *void, incX: s64, beta: *void, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_caxpyi :: (N: s64, alpha: *void, X: *void, indx: *s64, Y: *void) -> void #foreign mkl_intel_ilp64;

cblas_cgthr :: (N: s64, Y: *void, X: *void, indx: *s64) -> void #foreign mkl_intel_ilp64;

cblas_cgthrz :: (N: s64, Y: *void, X: *void, indx: *s64) -> void #foreign mkl_intel_ilp64;

cblas_csctr :: (N: s64, X: *void, indx: *s64, Y: *void) -> void #foreign mkl_intel_ilp64;

cblas_crotg :: (a: *void, b: *void, c: *float, s: *void) -> void #foreign mkl_intel_ilp64;

cblas_zswap :: (N: s64, X: *void, incX: s64, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_zcopy :: (N: s64, X: *void, incX: s64, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_zaxpy :: (N: s64, alpha: *void, X: *void, incX: s64, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_zaxpby :: (N: s64, alpha: *void, X: *void, incX: s64, beta: *void, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_zaxpyi :: (N: s64, alpha: *void, X: *void, indx: *s64, Y: *void) -> void #foreign mkl_intel_ilp64;

cblas_zgthr :: (N: s64, Y: *void, X: *void, indx: *s64) -> void #foreign mkl_intel_ilp64;

cblas_zgthrz :: (N: s64, Y: *void, X: *void, indx: *s64) -> void #foreign mkl_intel_ilp64;

cblas_zsctr :: (N: s64, X: *void, indx: *s64, Y: *void) -> void #foreign mkl_intel_ilp64;

cblas_zrotg :: (a: *void, b: *void, c: *float64, s: *void) -> void #foreign mkl_intel_ilp64;

/*
* Routines with S and D prefix only
*/
cblas_srotmg :: (d1: *float, d2: *float, b1: *float, b2: float, P: *float) -> void #foreign mkl_intel_ilp64;
cblas_srot :: (N: s64, X: *float, incX: s64, Y: *float, incY: s64, c: float, s: float) -> void #foreign mkl_intel_ilp64;

cblas_sroti :: (N: s64, X: *float, indx: *s64, Y: *float, c: float, s: float) -> void #foreign mkl_intel_ilp64;

cblas_srotm :: (N: s64, X: *float, incX: s64, Y: *float, incY: s64, P: *float) -> void #foreign mkl_intel_ilp64;

cblas_drotmg :: (d1: *float64, d2: *float64, b1: *float64, b2: float64, P: *float64) -> void #foreign mkl_intel_ilp64;
cblas_drot :: (N: s64, X: *float64, incX: s64, Y: *float64, incY: s64, c: float64, s: float64) -> void #foreign mkl_intel_ilp64;

cblas_drotm :: (N: s64, X: *float64, incX: s64, Y: *float64, incY: s64, P: *float64) -> void #foreign mkl_intel_ilp64;

cblas_droti :: (N: s64, X: *float64, indx: *s64, Y: *float64, c: float64, s: float64) -> void #foreign mkl_intel_ilp64;

/*
* Routines with CS and ZD prefix only
*/
cblas_csrot :: (N: s64, X: *void, incX: s64, Y: *void, incY: s64, c: float, s: float) -> void #foreign mkl_intel_ilp64;

cblas_zdrot :: (N: s64, X: *void, incX: s64, Y: *void, incY: s64, c: float64, s: float64) -> void #foreign mkl_intel_ilp64;

/*
* Routines with S D C Z CS and ZD prefixes
*/
cblas_sscal :: (N: s64, alpha: float, X: *float, incX: s64) -> void #foreign mkl_intel_ilp64;
cblas_dscal :: (N: s64, alpha: float64, X: *float64, incX: s64) -> void #foreign mkl_intel_ilp64;
cblas_cscal :: (N: s64, alpha: *void, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;
cblas_zscal :: (N: s64, alpha: *void, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;
cblas_csscal :: (N: s64, alpha: float, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;
cblas_zdscal :: (N: s64, alpha: float64, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;

/*
* Routines with standard 4 prefixes (S, D, C, Z)
*/
cblas_sgemv :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: s64, N: s64, alpha: float, A: *float, lda: s64, X: *float, incX: s64, beta: float, Y: *float, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_sgbmv :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: s64, N: s64, KL: s64, KU: s64, alpha: float, A: *float, lda: s64, X: *float, incX: s64, beta: float, Y: *float, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_strmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, A: *float, lda: s64, X: *float, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_stbmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, K: s64, A: *float, lda: s64, X: *float, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_stpmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, Ap: *float, X: *float, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_strsv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, A: *float, lda: s64, X: *float, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_stbsv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, K: s64, A: *float, lda: s64, X: *float, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_stpsv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, Ap: *float, X: *float, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_dgemv :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: s64, N: s64, alpha: float64, A: *float64, lda: s64, X: *float64, incX: s64, beta: float64, Y: *float64, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_dgbmv :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: s64, N: s64, KL: s64, KU: s64, alpha: float64, A: *float64, lda: s64, X: *float64, incX: s64, beta: float64, Y: *float64, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_dtrmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, A: *float64, lda: s64, X: *float64, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_dtbmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, K: s64, A: *float64, lda: s64, X: *float64, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_dtpmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, Ap: *float64, X: *float64, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_dtrsv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, A: *float64, lda: s64, X: *float64, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_dtbsv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, K: s64, A: *float64, lda: s64, X: *float64, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_dtpsv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, Ap: *float64, X: *float64, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_cgemv :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: s64, N: s64, alpha: *void, A: *void, lda: s64, X: *void, incX: s64, beta: *void, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_cgbmv :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: s64, N: s64, KL: s64, KU: s64, alpha: *void, A: *void, lda: s64, X: *void, incX: s64, beta: *void, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_ctrmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, A: *void, lda: s64, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_ctbmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, K: s64, A: *void, lda: s64, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_ctpmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, Ap: *void, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_ctrsv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, A: *void, lda: s64, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_ctbsv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, K: s64, A: *void, lda: s64, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_ctpsv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, Ap: *void, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_zgemv :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: s64, N: s64, alpha: *void, A: *void, lda: s64, X: *void, incX: s64, beta: *void, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_zgbmv :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: s64, N: s64, KL: s64, KU: s64, alpha: *void, A: *void, lda: s64, X: *void, incX: s64, beta: *void, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_ztrmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, A: *void, lda: s64, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_ztbmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, K: s64, A: *void, lda: s64, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_ztpmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, Ap: *void, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_ztrsv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, A: *void, lda: s64, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_ztbsv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, K: s64, A: *void, lda: s64, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;

cblas_ztpsv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, N: s64, Ap: *void, X: *void, incX: s64) -> void #foreign mkl_intel_ilp64;

/*
* Routines with S and D prefixes only
*/
cblas_ssymv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float, A: *float, lda: s64, X: *float, incX: s64, beta: float, Y: *float, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_ssbmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, K: s64, alpha: float, A: *float, lda: s64, X: *float, incX: s64, beta: float, Y: *float, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_sspmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float, Ap: *float, X: *float, incX: s64, beta: float, Y: *float, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_sger :: (Layout: CBLAS_LAYOUT, M: s64, N: s64, alpha: float, X: *float, incX: s64, Y: *float, incY: s64, A: *float, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_ssyr :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float, X: *float, incX: s64, A: *float, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_sspr :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float, X: *float, incX: s64, Ap: *float) -> void #foreign mkl_intel_ilp64;

cblas_ssyr2 :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float, X: *float, incX: s64, Y: *float, incY: s64, A: *float, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_sspr2 :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float, X: *float, incX: s64, Y: *float, incY: s64, A: *float) -> void #foreign mkl_intel_ilp64;

cblas_dsymv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float64, A: *float64, lda: s64, X: *float64, incX: s64, beta: float64, Y: *float64, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_dsbmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, K: s64, alpha: float64, A: *float64, lda: s64, X: *float64, incX: s64, beta: float64, Y: *float64, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_dspmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float64, Ap: *float64, X: *float64, incX: s64, beta: float64, Y: *float64, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_dger :: (Layout: CBLAS_LAYOUT, M: s64, N: s64, alpha: float64, X: *float64, incX: s64, Y: *float64, incY: s64, A: *float64, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_dsyr :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float64, X: *float64, incX: s64, A: *float64, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_dspr :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float64, X: *float64, incX: s64, Ap: *float64) -> void #foreign mkl_intel_ilp64;

cblas_dsyr2 :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float64, X: *float64, incX: s64, Y: *float64, incY: s64, A: *float64, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_dspr2 :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float64, X: *float64, incX: s64, Y: *float64, incY: s64, A: *float64) -> void #foreign mkl_intel_ilp64;

/*
* Routines with C and Z prefixes only
*/
cblas_chemv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: *void, A: *void, lda: s64, X: *void, incX: s64, beta: *void, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_chbmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, K: s64, alpha: *void, A: *void, lda: s64, X: *void, incX: s64, beta: *void, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_chpmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: *void, Ap: *void, X: *void, incX: s64, beta: *void, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_cgeru :: (Layout: CBLAS_LAYOUT, M: s64, N: s64, alpha: *void, X: *void, incX: s64, Y: *void, incY: s64, A: *void, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_cgerc :: (Layout: CBLAS_LAYOUT, M: s64, N: s64, alpha: *void, X: *void, incX: s64, Y: *void, incY: s64, A: *void, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_cher :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float, X: *void, incX: s64, A: *void, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_chpr :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float, X: *void, incX: s64, A: *void) -> void #foreign mkl_intel_ilp64;

cblas_cher2 :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: *void, X: *void, incX: s64, Y: *void, incY: s64, A: *void, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_chpr2 :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: *void, X: *void, incX: s64, Y: *void, incY: s64, Ap: *void) -> void #foreign mkl_intel_ilp64;

cblas_zhemv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: *void, A: *void, lda: s64, X: *void, incX: s64, beta: *void, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_zhbmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, K: s64, alpha: *void, A: *void, lda: s64, X: *void, incX: s64, beta: *void, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_zhpmv :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: *void, Ap: *void, X: *void, incX: s64, beta: *void, Y: *void, incY: s64) -> void #foreign mkl_intel_ilp64;

cblas_zgeru :: (Layout: CBLAS_LAYOUT, M: s64, N: s64, alpha: *void, X: *void, incX: s64, Y: *void, incY: s64, A: *void, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_zgerc :: (Layout: CBLAS_LAYOUT, M: s64, N: s64, alpha: *void, X: *void, incX: s64, Y: *void, incY: s64, A: *void, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_zher :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float64, X: *void, incX: s64, A: *void, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_zhpr :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: float64, X: *void, incX: s64, A: *void) -> void #foreign mkl_intel_ilp64;

cblas_zher2 :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: *void, X: *void, incX: s64, Y: *void, incY: s64, A: *void, lda: s64) -> void #foreign mkl_intel_ilp64;

cblas_zhpr2 :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, N: s64, alpha: *void, X: *void, incX: s64, Y: *void, incY: s64, Ap: *void) -> void #foreign mkl_intel_ilp64;

/*
* Routines with standard 4 prefixes (S, D, C, Z)
*/
cblas_sgemm :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: float, A: *float, lda: s64, B: *float, ldb: s64, beta: float, C: *float, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_sgemm_batch :: (Layout: CBLAS_LAYOUT, TransA_Array: *CBLAS_TRANSPOSE, TransB_Array: *CBLAS_TRANSPOSE, M_Array: *s64, N_Array: *s64, K_Array: *s64, alpha_Array: *float, A_Array: **float, lda_Array: *s64, B_Array: **float, ldb_Array: *s64, beta_Array: *float, C_Array: **float, ldc_Array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_sgemm_batch_strided :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: float, A: *float, lda: s64, stridea: s64, B: *float, ldb: s64, strideb: s64, beta: float, C: *float, ldc: s64, stridec: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_sgemmt :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: float, A: *float, lda: s64, B: *float, ldb: s64, beta: float, C: *float, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_ssymm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: s64, N: s64, alpha: float, A: *float, lda: s64, B: *float, ldb: s64, beta: float, C: *float, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_ssyrk :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: float, A: *float, lda: s64, beta: float, C: *float, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_ssyrk_batch_strided :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: float, A: *float, lda: s64, stridea: s64, beta: float, C: *float, ldc: s64, stridec: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_ssyrk_batch :: (Layout: CBLAS_LAYOUT, Uplo_array: *CBLAS_UPLO, Trans_array: *CBLAS_TRANSPOSE, N_array: *s64, K_array: *s64, alpha_array: *float, A_array: **float, lda_array: *s64, beta_array: *float, C_array: **float, ldc_array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_ssyr2k :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: float, A: *float, lda: s64, B: *float, ldb: s64, beta: float, C: *float, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_strmm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s64, N: s64, alpha: float, A: *float, lda: s64, B: *float, ldb: s64) -> void #foreign mkl_intel_ilp64;

cblas_strsm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s64, N: s64, alpha: float, A: *float, lda: s64, B: *float, ldb: s64) -> void #foreign mkl_intel_ilp64;

cblas_strsm_batch :: (Layout: CBLAS_LAYOUT, Side_Array: *CBLAS_SIDE, Uplo_Array: *CBLAS_UPLO, TransA_Array: *CBLAS_TRANSPOSE, Diag_Array: *CBLAS_DIAG, M_Array: *s64, N_Array: *s64, alpha_Array: *float, A_Array: **float, lda_Array: *s64, B_Array: **float, ldb_Array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_strsm_batch_strided :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s64, N: s64, alpha: float, A: *float, lda: s64, stridea: s64, B: *float, ldb: s64, strideb: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_dgemm :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: float64, A: *float64, lda: s64, B: *float64, ldb: s64, beta: float64, C: *float64, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_dgemm_batch :: (Layout: CBLAS_LAYOUT, TransA_Array: *CBLAS_TRANSPOSE, TransB_Array: *CBLAS_TRANSPOSE, M_Array: *s64, N_Array: *s64, K_Array: *s64, alpha_Array: *float64, A_Array: **float64, lda_Array: *s64, B_Array: **float64, ldb_Array: *s64, beta_Array: *float64, C_Array: **float64, ldc_Array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_dgemm_batch_strided :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: float64, A: *float64, lda: s64, stridea: s64, B: *float64, ldb: s64, strideb: s64, beta: float64, C: *float64, ldc: s64, stridec: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_dgemmt :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: float64, A: *float64, lda: s64, B: *float64, ldb: s64, beta: float64, C: *float64, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_dsymm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: s64, N: s64, alpha: float64, A: *float64, lda: s64, B: *float64, ldb: s64, beta: float64, C: *float64, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_dsyrk :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: float64, A: *float64, lda: s64, beta: float64, C: *float64, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_dsyrk_batch :: (Layout: CBLAS_LAYOUT, Uplo_array: *CBLAS_UPLO, Trans_array: *CBLAS_TRANSPOSE, N_array: *s64, K_array: *s64, alpha_array: *float64, A_array: **float64, lda_array: *s64, beta_array: *float64, C_array: **float64, ldc_array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_dsyrk_batch_strided :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: float64, A: *float64, lda: s64, stridea: s64, beta: float64, C: *float64, ldc: s64, stridec: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_dsyr2k :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: float64, A: *float64, lda: s64, B: *float64, ldb: s64, beta: float64, C: *float64, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_dtrmm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s64, N: s64, alpha: float64, A: *float64, lda: s64, B: *float64, ldb: s64) -> void #foreign mkl_intel_ilp64;

cblas_dtrsm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s64, N: s64, alpha: float64, A: *float64, lda: s64, B: *float64, ldb: s64) -> void #foreign mkl_intel_ilp64;

cblas_dtrsm_batch :: (Layout: CBLAS_LAYOUT, Side_Array: *CBLAS_SIDE, Uplo_Array: *CBLAS_UPLO, Transa_Array: *CBLAS_TRANSPOSE, Diag_Array: *CBLAS_DIAG, M_Array: *s64, N_Array: *s64, alpha_Array: *float64, A_Array: **float64, lda_Array: *s64, B_Array: **float64, ldb_Array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_dtrsm_batch_strided :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s64, N: s64, alpha: float64, A: *float64, lda: s64, stridea: s64, B: *float64, ldb: s64, strideb: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_cgemm :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_cgemm3m :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_cgemm_batch :: (Layout: CBLAS_LAYOUT, TransA_Array: *CBLAS_TRANSPOSE, TransB_Array: *CBLAS_TRANSPOSE, M_Array: *s64, N_Array: *s64, K_Array: *s64, alpha_Array: *void, A_Array: **void, lda_Array: *s64, B_Array: **void, ldb_Array: *s64, beta_Array: *void, C_Array: **void, ldc_Array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_cgemm_batch_strided :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: *void, A: *void, lda: s64, stridea: s64, B: *void, ldb: s64, strideb: s64, beta: *void, C: *void, ldc: s64, stridec: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_cgemm3m_batch :: (Layout: CBLAS_LAYOUT, TransA_Array: *CBLAS_TRANSPOSE, TransB_Array: *CBLAS_TRANSPOSE, M_Array: *s64, N_Array: *s64, K_Array: *s64, alpha_Array: *void, A_Array: **void, lda_Array: *s64, B_Array: **void, ldb_Array: *s64, beta_Array: *void, C_Array: **void, ldc_Array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_cgemmt :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_csymm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: s64, N: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_csyrk :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: *void, A: *void, lda: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_csyrk_batch :: (Layout: CBLAS_LAYOUT, Uplo_array: *CBLAS_UPLO, Trans_array: *CBLAS_TRANSPOSE, N_array: *s64, K_array: *s64, alpha_array: *void, A_array: **void, lda_array: *s64, beta_array: *void, C_array: **void, ldc_array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_csyrk_batch_strided :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: *void, A: *void, lda: s64, stridea: s64, beta: *void, C: *void, ldc: s64, stridec: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_csyr2k :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_ctrmm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s64, N: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64) -> void #foreign mkl_intel_ilp64;

cblas_ctrsm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s64, N: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64) -> void #foreign mkl_intel_ilp64;

cblas_ctrsm_batch :: (Layout: CBLAS_LAYOUT, Side_Array: *CBLAS_SIDE, Uplo_Array: *CBLAS_UPLO, Transa_Array: *CBLAS_TRANSPOSE, Diag_Array: *CBLAS_DIAG, M_Array: *s64, N_Array: *s64, alpha_Array: *void, A_Array: **void, lda_Array: *s64, B_Array: **void, ldb_Array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_ctrsm_batch_strided :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s64, N: s64, alpha: *void, A: *void, lda: s64, stridea: s64, B: *void, ldb: s64, strideb: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_zgemm :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_zgemm3m :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_zgemm_batch :: (Layout: CBLAS_LAYOUT, TransA_Array: *CBLAS_TRANSPOSE, TransB_Array: *CBLAS_TRANSPOSE, M_Array: *s64, N_Array: *s64, K_Array: *s64, alpha_Array: *void, A_Array: **void, lda_Array: *s64, B_Array: **void, ldb_Array: *s64, beta_Array: *void, C_Array: **void, ldc_Array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_zgemm_batch_strided :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: *void, A: *void, lda: s64, stridea: s64, B: *void, ldb: s64, strideb: s64, beta: *void, C: *void, ldc: s64, stridec: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_zgemm3m_batch :: (Layout: CBLAS_LAYOUT, TransA_Array: *CBLAS_TRANSPOSE, TransB_Array: *CBLAS_TRANSPOSE, M_Array: *s64, N_Array: *s64, K_Array: *s64, alpha_Array: *void, A_Array: **void, lda_Array: *s64, B_Array: **void, ldb_Array: *s64, beta_Array: *void, C_Array: **void, ldc_Array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_zgemmt :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_zsymm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: s64, N: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_zsyrk :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: *void, A: *void, lda: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_zsyrk_batch :: (Layout: CBLAS_LAYOUT, Uplo_array: *CBLAS_UPLO, Trans_array: *CBLAS_TRANSPOSE, N_array: *s64, K_array: *s64, alpha_array: *void, A_array: **void, lda_array: *s64, beta_array: *void, C_array: **void, ldc_array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_zsyrk_batch_strided :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: *void, A: *void, lda: s64, stridea: s64, beta: *void, C: *void, ldc: s64, stridec: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_zsyr2k :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_ztrmm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s64, N: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64) -> void #foreign mkl_intel_ilp64;

cblas_ztrsm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s64, N: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64) -> void #foreign mkl_intel_ilp64;

cblas_ztrsm_batch :: (Layout: CBLAS_LAYOUT, Side_Array: *CBLAS_SIDE, Uplo_Array: *CBLAS_UPLO, Transa_Array: *CBLAS_TRANSPOSE, Diag_Array: *CBLAS_DIAG, M_Array: *s64, N_Array: *s64, alpha_Array: *void, A_Array: **void, lda_Array: *s64, B_Array: **void, ldb_Array: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_ztrsm_batch_strided :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, TransA: CBLAS_TRANSPOSE, Diag: CBLAS_DIAG, M: s64, N: s64, alpha: *void, A: *void, lda: s64, stridea: s64, B: *void, ldb: s64, strideb: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

/*
* Routines with prefixes C and Z only
*/
cblas_chemm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: s64, N: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_cherk :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: float, A: *void, lda: s64, beta: float, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_cher2k :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: float, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_zhemm :: (Layout: CBLAS_LAYOUT, Side: CBLAS_SIDE, Uplo: CBLAS_UPLO, M: s64, N: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: *void, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_zherk :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: float64, A: *void, lda: s64, beta: float64, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_zher2k :: (Layout: CBLAS_LAYOUT, Uplo: CBLAS_UPLO, Trans: CBLAS_TRANSPOSE, N: s64, K: s64, alpha: *void, A: *void, lda: s64, B: *void, ldb: s64, beta: float64, C: *void, ldc: s64) -> void #foreign mkl_intel_ilp64;

/*
* Routines with prefixes S and D only
*/
cblas_sgemm_pack_get_size :: (identifier: CBLAS_IDENTIFIER, M: s64, N: s64, K: s64) -> size_t #foreign mkl_intel_ilp64;

cblas_sgemm_pack :: (Layout: CBLAS_LAYOUT, identifier: CBLAS_IDENTIFIER, Trans: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: float, src: *float, ld: s64, dest: *float) -> void #foreign mkl_intel_ilp64;

cblas_sgemm_compute :: (Layout: CBLAS_LAYOUT, TransA: s64, TransB: s64, M: s64, N: s64, K: s64, A: *float, lda: s64, B: *float, ldb: s64, beta: float, C: *float, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_dgemm_pack_get_size :: (identifier: CBLAS_IDENTIFIER, M: s64, N: s64, K: s64) -> size_t #foreign mkl_intel_ilp64;

cblas_dgemm_pack :: (Layout: CBLAS_LAYOUT, identifier: CBLAS_IDENTIFIER, Trans: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: float64, src: *float64, ld: s64, dest: *float64) -> void #foreign mkl_intel_ilp64;

cblas_dgemm_compute :: (Layout: CBLAS_LAYOUT, TransA: s64, TransB: s64, M: s64, N: s64, K: s64, A: *float64, lda: s64, B: *float64, ldb: s64, beta: float64, C: *float64, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_hgemm :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: u16, A: *u16, lda: s64, B: *u16, ldb: s64, beta: u16, C: *u16, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_hgemm_pack_get_size :: (identifier: CBLAS_IDENTIFIER, M: s64, N: s64, K: s64) -> size_t #foreign mkl_intel_ilp64;

cblas_hgemm_pack :: (Layout: CBLAS_LAYOUT, identifier: CBLAS_IDENTIFIER, Trans: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: u16, src: *u16, ld: s64, dest: *u16) -> void #foreign mkl_intel_ilp64;

cblas_hgemm_compute :: (Layout: CBLAS_LAYOUT, TransA: s64, TransB: s64, M: s64, N: s64, K: s64, A: *u16, lda: s64, B: *u16, ldb: s64, beta: u16, C: *u16, ldc: s64) -> void #foreign mkl_intel_ilp64;

/*
* Integer Routines
*/
cblas_gemm_s16s16s32 :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, OffsetC: CBLAS_OFFSET, M: s64, N: s64, K: s64, alpha: float, A: *s16, lda: s64, ao: s16, B: *s16, ldb: s64, bo: s16, beta: float, C: *s32, ldc: s64, cb: *s32) -> void #foreign mkl_intel_ilp64;

cblas_gemm_s8u8s32 :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, OffsetC: CBLAS_OFFSET, M: s64, N: s64, K: s64, alpha: float, A: *void, lda: s64, ao: u8, B: *void, ldb: s64, bo: u8, beta: float, C: *s32, ldc: s64, cb: *s32) -> void #foreign mkl_intel_ilp64;

cblas_gemm_bf16bf16f32 :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, TransB: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, alpha: float, A: *u16, lda: s64, B: *u16, ldb: s64, beta: float, C: *float, ldc: s64) -> void #foreign mkl_intel_ilp64;

cblas_gemm_s8u8s32_pack_get_size :: (identifier: CBLAS_IDENTIFIER, M: s64, N: s64, K: s64) -> size_t #foreign mkl_intel_ilp64;

cblas_gemm_s16s16s32_pack_get_size :: (identifier: CBLAS_IDENTIFIER, M: s64, N: s64, K: s64) -> size_t #foreign mkl_intel_ilp64;

cblas_gemm_bf16bf16f32_pack_get_size :: (identifier: CBLAS_IDENTIFIER, M: s64, N: s64, K: s64) -> size_t #foreign mkl_intel_ilp64;

cblas_gemm_s8u8s32_pack :: (Layout: CBLAS_LAYOUT, identifier: CBLAS_IDENTIFIER, Trans: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, src: *void, ld: s64, dest: *void) -> void #foreign mkl_intel_ilp64;

cblas_gemm_s16s16s32_pack :: (Layout: CBLAS_LAYOUT, identifier: CBLAS_IDENTIFIER, Trans: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, src: *s16, ld: s64, dest: *s16) -> void #foreign mkl_intel_ilp64;

cblas_gemm_bf16bf16f32_pack :: (Layout: CBLAS_LAYOUT, identifier: CBLAS_IDENTIFIER, Trans: CBLAS_TRANSPOSE, M: s64, N: s64, K: s64, src: *u16, ld: s64, dest: *u16) -> void #foreign mkl_intel_ilp64;

cblas_gemm_s8u8s32_compute :: (Layout: CBLAS_LAYOUT, TransA: s64, TransB: s64, offsetc: CBLAS_OFFSET, M: s64, N: s64, K: s64, alpha: float, A: *void, lda: s64, ao: u8, B: *void, ldb: s64, bo: u8, beta: float, C: *s32, ldc: s64, co: *s32) -> void #foreign mkl_intel_ilp64;

cblas_gemm_s16s16s32_compute :: (Layout: CBLAS_LAYOUT, TransA: s64, TransB: s64, offsetc: CBLAS_OFFSET, M: s64, N: s64, K: s64, alpha: float, A: *s16, lda: s64, ao: s16, B: *s16, ldb: s64, bo: s16, beta: float, C: *s32, ldc: s64, co: *s32) -> void #foreign mkl_intel_ilp64;

cblas_gemm_bf16bf16f32_compute :: (Layout: CBLAS_LAYOUT, TransA: s64, TransB: s64, M: s64, N: s64, K: s64, alpha: float, A: *u16, lda: s64, B: *u16, ldb: s64, beta: float, C: *float, ldc: s64) -> void #foreign mkl_intel_ilp64;

/* Level1 BLAS batch API */
cblas_saxpy_batch :: (n: *s64, alpha: *float, x: **float, incx: *s64, y: **float, incy: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_daxpy_batch :: (n: *s64, alpha: *float64, x: **float64, incx: *s64, y: **float64, incy: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_caxpy_batch :: (n: *s64, alpha: *void, x: **void, incx: *s64, y: **void, incy: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_zaxpy_batch :: (n: *s64, alpha: *void, x: **void, incx: *s64, y: **void, incy: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_saxpy_batch_strided :: (N: s64, alpha: float, X: *float, incX: s64, stridex: s64, Y: *float, incY: s64, stridey: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_daxpy_batch_strided :: (N: s64, alpha: float64, X: *float64, incX: s64, stridex: s64, Y: *float64, incY: s64, stridey: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_caxpy_batch_strided :: (N: s64, alpha: *void, X: *void, incX: s64, stridex: s64, Y: *void, incY: s64, stridey: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_zaxpy_batch_strided :: (N: s64, alpha: *void, X: *void, incX: s64, stridex: s64, Y: *void, incY: s64, stridey: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_scopy_batch :: (n: *s64, x: **float, incx: *s64, y: **float, incy: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_dcopy_batch :: (n: *s64, x: **float64, incx: *s64, y: **float64, incy: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_ccopy_batch :: (n: *s64, x: **void, incx: *s64, y: **void, incy: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_zcopy_batch :: (n: *s64, x: **void, incx: *s64, y: **void, incy: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_scopy_batch_strided :: (N: s64, X: *float, incX: s64, stridex: s64, Y: *float, incY: s64, stridey: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_dcopy_batch_strided :: (N: s64, X: *float64, incX: s64, stridex: s64, Y: *float64, incY: s64, stridey: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_ccopy_batch_strided :: (N: s64, X: *void, incX: s64, stridex: s64, Y: *void, incY: s64, stridey: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_zcopy_batch_strided :: (N: s64, X: *void, incX: s64, stridex: s64, Y: *void, incY: s64, stridey: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

/* Level2 BLAS batch API */
cblas_sgemv_batch :: (Layout: CBLAS_LAYOUT, TransA: *CBLAS_TRANSPOSE, M: *s64, N: *s64, alpha: *float, A: **float, lda: *s64, X: **float, incX: *s64, beta: *float, Y: **float, incY: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_sgemv_batch_strided :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: s64, N: s64, alpha: float, A: *float, lda: s64, stridea: s64, X: *float, incX: s64, stridex: s64, beta: float, Y: *float, incY: s64, stridey: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_dgemv_batch :: (Layout: CBLAS_LAYOUT, TransA: *CBLAS_TRANSPOSE, M: *s64, N: *s64, alpha: *float64, A: **float64, lda: *s64, X: **float64, incX: *s64, beta: *float64, Y: **float64, incY: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_dgemv_batch_strided :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: s64, N: s64, alpha: float64, A: *float64, lda: s64, stridea: s64, X: *float64, incX: s64, stridex: s64, beta: float64, Y: *float64, incY: s64, stridey: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_cgemv_batch :: (Layout: CBLAS_LAYOUT, TransA: *CBLAS_TRANSPOSE, M: *s64, N: *s64, alpha: *void, A: **void, lda: *s64, X: **void, incX: *s64, beta: *void, Y: **void, incY: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_cgemv_batch_strided :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: s64, N: s64, alpha: *void, A: *void, lda: s64, stridea: s64, X: *void, incX: s64, stridex: s64, beta: *void, Y: *void, incY: s64, stridey: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_zgemv_batch :: (Layout: CBLAS_LAYOUT, TransA: *CBLAS_TRANSPOSE, M: *s64, N: *s64, alpha: *void, A: **void, lda: *s64, X: **void, incX: *s64, beta: *void, Y: **void, incY: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_zgemv_batch_strided :: (Layout: CBLAS_LAYOUT, TransA: CBLAS_TRANSPOSE, M: s64, N: s64, alpha: *void, A: *void, lda: s64, stridea: s64, X: *void, incX: s64, stridex: s64, beta: *void, Y: *void, incY: s64, stridey: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_sdgmm_batch :: (layout: CBLAS_LAYOUT, side: *CBLAS_SIDE, m: *s64, n: *s64, a: **float, lda: *s64, x: **float, incx: *s64, c: **float, ldc: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_sdgmm_batch_strided :: (layout: CBLAS_LAYOUT, side: CBLAS_SIDE, m: s64, n: s64, a: *float, lda: s64, stridea: s64, x: *float, incx: s64, stridex: s64, c: *float, ldc: s64, stridec: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_ddgmm_batch :: (layout: CBLAS_LAYOUT, side: *CBLAS_SIDE, m: *s64, n: *s64, a: **float64, lda: *s64, x: **float64, incx: *s64, c: **float64, ldc: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_ddgmm_batch_strided :: (layout: CBLAS_LAYOUT, side: CBLAS_SIDE, m: s64, n: s64, a: *float64, lda: s64, stridea: s64, x: *float64, incx: s64, stridex: s64, c: *float64, ldc: s64, stridec: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_cdgmm_batch :: (layout: CBLAS_LAYOUT, side: *CBLAS_SIDE, m: *s64, n: *s64, a: **void, lda: *s64, x: **void, incx: *s64, c: **void, ldc: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_cdgmm_batch_strided :: (layout: CBLAS_LAYOUT, side: CBLAS_SIDE, m: s64, n: s64, a: *void, lda: s64, stridea: s64, x: *void, incx: s64, stridex: s64, c: *void, ldc: s64, stridec: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

cblas_zdgmm_batch :: (layout: CBLAS_LAYOUT, side: *CBLAS_SIDE, m: *s64, n: *s64, a: **void, lda: *s64, x: **void, incx: *s64, c: **void, ldc: *s64, group_count: s64, group_size: *s64) -> void #foreign mkl_intel_ilp64;

cblas_zdgmm_batch_strided :: (layout: CBLAS_LAYOUT, side: CBLAS_SIDE, m: s64, n: s64, a: *void, lda: s64, stridea: s64, x: *void, incx: s64, stridex: s64, c: *void, ldc: s64, stridec: s64, batch_size: s64) -> void #foreign mkl_intel_ilp64;

/* Float */
/* Sparse BLAS Level2 lower case */
mkl_scsrmv :: (transa: *u8, m: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, x: *float, beta: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_scsrsv :: (transa: *u8, m: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_scsrgemv :: (transa: *u8, m: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_scsrgemv :: (transa: *u8, m: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_scsrsymv :: (uplo: *u8, m: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_scsrsymv :: (uplo: *u8, m: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_scsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_scsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;

mkl_scscmv :: (transa: *u8, m: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, x: *float, beta: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_scscsv :: (transa: *u8, m: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;

mkl_scoomv :: (transa: *u8, m: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, beta: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_scoosv :: (transa: *u8, m: *s64, alpha: *float, matdescra: *u8, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_scoogemv :: (transa: *u8, m: *s64, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_scoogemv :: (transa: *u8, m: *s64, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_scoosymv :: (uplo: *u8, m: *s64, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_scoosymv :: (uplo: *u8, m: *s64, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_scootrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_scootrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;

mkl_sdiamv :: (transa: *u8, m: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, x: *float, beta: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_sdiasv :: (transa: *u8, m: *s64, alpha: *float, matdescra: *u8, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_sdiagemv :: (transa: *u8, m: *s64, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_sdiasymv :: (uplo: *u8, m: *s64, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_sdiatrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;

mkl_sskymv :: (transa: *u8, m: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, pntr: *s64, x: *float, beta: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_sskysv :: (transa: *u8, m: *s64, alpha: *float, matdescra: *u8, val: *float, pntr: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;

mkl_sbsrmv :: (transa: *u8, m: *s64, k: *s64, lb: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, x: *float, beta: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_sbsrsv :: (transa: *u8, m: *s64, lb: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_sbsrgemv :: (transa: *u8, m: *s64, lb: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_sbsrgemv :: (transa: *u8, m: *s64, lb: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_sbsrsymv :: (uplo: *u8, m: *s64, lb: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_sbsrsymv :: (uplo: *u8, m: *s64, lb: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_sbsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_sbsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;

/* Sparse BLAS Level3 lower case */
mkl_scsrmm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_scsrsm :: (transa: *u8, m: *s64, n: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_scscmm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_scscsm :: (transa: *u8, m: *s64, n: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_scoomm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, rowind: *s64, colind: *s64, nnz: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_scoosm :: (transa: *u8, m: *s64, n: *s64, alpha: *float, matdescra: *u8, val: *float, rowind: *s64, colind: *s64, nnz: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_sdiamm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_sdiasm :: (transa: *u8, m: *s64, n: *s64, alpha: *float, matdescra: *u8, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_sskysm :: (transa: *u8, m: *s64, n: *s64, alpha: *float, matdescra: *u8, val: *float, pntr: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_sskymm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, pntr: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_sbsrmm :: (transa: *u8, m: *s64, n: *s64, k: *s64, lb: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_sbsrsm :: (transa: *u8, m: *s64, n: *s64, lb: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

/* Upper case declaration */
/* Sparse BLAS Level2 upper case */
MKL_SCSRMV :: (transa: *u8, m: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, x: *float, beta: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SCSRSV :: (transa: *u8, m: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SCSRGEMV :: (transa: *u8, m: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_SCSRGEMV :: (transa: *u8, m: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SCSRSYMV :: (uplo: *u8, m: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_SCSRSYMV :: (uplo: *u8, m: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SCSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_SCSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;

MKL_SCSCMV :: (transa: *u8, m: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, x: *float, beta: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SCSCSV :: (transa: *u8, m: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;

MKL_SCOOMV :: (transa: *u8, m: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, beta: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SCOOSV :: (transa: *u8, m: *s64, alpha: *float, matdescra: *u8, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SCOOGEMV :: (transa: *u8, m: *s64, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_SCOOGEMV :: (transa: *u8, m: *s64, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SCOOSYMV :: (uplo: *u8, m: *s64, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_SCOOSYMV :: (uplo: *u8, m: *s64, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SCOOTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_SCOOTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *float, rowind: *s64, colind: *s64, nnz: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;

MKL_SDIAMV :: (transa: *u8, m: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, x: *float, beta: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SDIASV :: (transa: *u8, m: *s64, alpha: *float, matdescra: *u8, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SDIAGEMV :: (transa: *u8, m: *s64, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SDIASYMV :: (uplo: *u8, m: *s64, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SDIATRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;

MKL_SSKYMV :: (transa: *u8, m: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, pntr: *s64, x: *float, beta: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SSKYSV :: (transa: *u8, m: *s64, alpha: *float, matdescra: *u8, val: *float, pntr: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;

MKL_SBSRMV :: (transa: *u8, m: *s64, k: *s64, lb: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, x: *float, beta: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SBSRSV :: (transa: *u8, m: *s64, lb: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SBSRGEMV :: (transa: *u8, m: *s64, lb: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_SBSRGEMV :: (transa: *u8, m: *s64, lb: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SBSRSYMV :: (uplo: *u8, m: *s64, lb: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_SBSRSYMV :: (uplo: *u8, m: *s64, lb: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_SBSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_SBSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *float, ia: *s64, ja: *s64, x: *float, y: *float) -> void #foreign mkl_intel_ilp64;

/* Sparse BLAS Level3 upper case */
MKL_SCSRMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_SCSRSM :: (transa: *u8, m: *s64, n: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_SCSCMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_SCSCSM :: (transa: *u8, m: *s64, n: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_SCOOMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, rowind: *s64, colind: *s64, nnz: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_SCOOSM :: (transa: *u8, m: *s64, n: *s64, alpha: *float, matdescra: *u8, val: *float, rowind: *s64, colind: *s64, nnz: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_SDIAMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_SDIASM :: (transa: *u8, m: *s64, n: *s64, alpha: *float, matdescra: *u8, val: *float, lval: *s64, idiag: *s64, ndiag: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_SSKYSM :: (transa: *u8, m: *s64, n: *s64, alpha: *float, matdescra: *u8, val: *float, pntr: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_SSKYMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float, matdescra: *u8, val: *float, pntr: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_SBSRMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, lb: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, b: *float, ldb: *s64, beta: *float, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_SBSRSM :: (transa: *u8, m: *s64, n: *s64, lb: *s64, alpha: *float, matdescra: *u8, val: *float, indx: *s64, pntrb: *s64, pntre: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;

/* Double */
/* Sparse BLAS Level2 lower case */
mkl_dcsrmv :: (transa: *u8, m: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, x: *float64, beta: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dcsrsv :: (transa: *u8, m: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dcsrgemv :: (transa: *u8, m: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_dcsrgemv :: (transa: *u8, m: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dcsrsymv :: (uplo: *u8, m: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_dcsrsymv :: (uplo: *u8, m: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dcsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_dcsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;

mkl_dcscmv :: (transa: *u8, m: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, x: *float64, beta: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dcscsv :: (transa: *u8, m: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;

mkl_dcoomv :: (transa: *u8, m: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, beta: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dcoosv :: (transa: *u8, m: *s64, alpha: *float64, matdescra: *u8, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dcoogemv :: (transa: *u8, m: *s64, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_dcoogemv :: (transa: *u8, m: *s64, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dcoosymv :: (uplo: *u8, m: *s64, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_dcoosymv :: (uplo: *u8, m: *s64, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dcootrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_dcootrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;

mkl_ddiamv :: (transa: *u8, m: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, x: *float64, beta: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_ddiasv :: (transa: *u8, m: *s64, alpha: *float64, matdescra: *u8, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_ddiagemv :: (transa: *u8, m: *s64, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_ddiasymv :: (uplo: *u8, m: *s64, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_ddiatrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;

mkl_dskymv :: (transa: *u8, m: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, pntr: *s64, x: *float64, beta: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dskysv :: (transa: *u8, m: *s64, alpha: *float64, matdescra: *u8, val: *float64, pntr: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;

mkl_dbsrmv :: (transa: *u8, m: *s64, k: *s64, lb: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, x: *float64, beta: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dbsrsv :: (transa: *u8, m: *s64, lb: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dbsrgemv :: (transa: *u8, m: *s64, lb: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_dbsrgemv :: (transa: *u8, m: *s64, lb: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dbsrsymv :: (uplo: *u8, m: *s64, lb: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_dbsrsymv :: (uplo: *u8, m: *s64, lb: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_dbsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_dbsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;

/* Sparse BLAS Level3 lower case */
mkl_dcsrmm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_dcsrsm :: (transa: *u8, m: *s64, n: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dcscmm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_dcscsm :: (transa: *u8, m: *s64, n: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dcoomm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_dcoosm :: (transa: *u8, m: *s64, n: *s64, alpha: *float64, matdescra: *u8, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_ddiamm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_ddiasm :: (transa: *u8, m: *s64, n: *s64, alpha: *float64, matdescra: *u8, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dskysm :: (transa: *u8, m: *s64, n: *s64, alpha: *float64, matdescra: *u8, val: *float64, pntr: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_dskymm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, pntr: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dbsrmm :: (transa: *u8, m: *s64, n: *s64, k: *s64, lb: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_dbsrsm :: (transa: *u8, m: *s64, n: *s64, lb: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

/* Upper case declaration */
/* Sparse BLAS Level2 upper case */
MKL_DCSRMV :: (transa: *u8, m: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, x: *float64, beta: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DCSRSV :: (transa: *u8, m: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DCSRGEMV :: (transa: *u8, m: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_DCSRGEMV :: (transa: *u8, m: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DCSRSYMV :: (uplo: *u8, m: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_DCSRSYMV :: (uplo: *u8, m: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DCSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_DCSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;

MKL_DCSCMV :: (transa: *u8, m: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, x: *float64, beta: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DCSCSV :: (transa: *u8, m: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;

MKL_DCOOMV :: (transa: *u8, m: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, beta: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DCOOSV :: (transa: *u8, m: *s64, alpha: *float64, matdescra: *u8, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DCOOGEMV :: (transa: *u8, m: *s64, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_DCOOGEMV :: (transa: *u8, m: *s64, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DCOOSYMV :: (uplo: *u8, m: *s64, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_DCOOSYMV :: (uplo: *u8, m: *s64, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DCOOTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_DCOOTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;

MKL_DDIAMV :: (transa: *u8, m: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, x: *float64, beta: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DDIASV :: (transa: *u8, m: *s64, alpha: *float64, matdescra: *u8, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DDIAGEMV :: (transa: *u8, m: *s64, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DDIASYMV :: (uplo: *u8, m: *s64, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DDIATRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;

MKL_DSKYMV :: (transa: *u8, m: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, pntr: *s64, x: *float64, beta: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DSKYSV :: (transa: *u8, m: *s64, alpha: *float64, matdescra: *u8, val: *float64, pntr: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;

MKL_DBSRMV :: (transa: *u8, m: *s64, k: *s64, lb: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, x: *float64, beta: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DBSRSV :: (transa: *u8, m: *s64, lb: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DBSRGEMV :: (transa: *u8, m: *s64, lb: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_DBSRGEMV :: (transa: *u8, m: *s64, lb: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DBSRSYMV :: (uplo: *u8, m: *s64, lb: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_DBSRSYMV :: (uplo: *u8, m: *s64, lb: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_DBSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_DBSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *float64, ia: *s64, ja: *s64, x: *float64, y: *float64) -> void #foreign mkl_intel_ilp64;

/* Sparse BLAS Level3 upper case */
MKL_DCSRMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_DCSRSM :: (transa: *u8, m: *s64, n: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_DCSCMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_DCSCSM :: (transa: *u8, m: *s64, n: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_DCOOMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_DCOOSM :: (transa: *u8, m: *s64, n: *s64, alpha: *float64, matdescra: *u8, val: *float64, rowind: *s64, colind: *s64, nnz: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_DDIAMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_DDIASM :: (transa: *u8, m: *s64, n: *s64, alpha: *float64, matdescra: *u8, val: *float64, lval: *s64, idiag: *s64, ndiag: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_DSKYSM :: (transa: *u8, m: *s64, n: *s64, alpha: *float64, matdescra: *u8, val: *float64, pntr: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_DSKYMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *float64, matdescra: *u8, val: *float64, pntr: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_DBSRMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, lb: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, b: *float64, ldb: *s64, beta: *float64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_DBSRSM :: (transa: *u8, m: *s64, n: *s64, lb: *s64, alpha: *float64, matdescra: *u8, val: *float64, indx: *s64, pntrb: *s64, pntre: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;

/* MKL_Complex8 */
/* Sparse BLAS Level2 lower case */
mkl_ccsrmv :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_ccsrsv :: (transa: *u8, m: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_ccsrgemv :: (transa: *u8, m: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_ccsrgemv :: (transa: *u8, m: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_ccsrsymv :: (uplo: *u8, m: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_ccsrsymv :: (uplo: *u8, m: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_ccsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_ccsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

mkl_ccscmv :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_ccscsv :: (transa: *u8, m: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

mkl_ccoomv :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_ccoosv :: (transa: *u8, m: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_ccoogemv :: (transa: *u8, m: *s64, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_ccoogemv :: (transa: *u8, m: *s64, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_ccoosymv :: (uplo: *u8, m: *s64, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_ccoosymv :: (uplo: *u8, m: *s64, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_ccootrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_ccootrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

mkl_cdiamv :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cdiasv :: (transa: *u8, m: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cdiagemv :: (transa: *u8, m: *s64, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cdiasymv :: (uplo: *u8, m: *s64, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cdiatrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

mkl_cskymv :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, pntr: *s64, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cskysv :: (transa: *u8, m: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, pntr: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

mkl_cbsrmv :: (transa: *u8, m: *s64, k: *s64, lb: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cbsrsv :: (transa: *u8, m: *s64, lb: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cbsrgemv :: (transa: *u8, m: *s64, lb: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_cbsrgemv :: (transa: *u8, m: *s64, lb: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cbsrsymv :: (uplo: *u8, m: *s64, lb: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_cbsrsymv :: (uplo: *u8, m: *s64, lb: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cbsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_cbsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

/* Sparse BLAS Level3 lower case */
mkl_ccsrmm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_ccsrsm :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_ccscmm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_ccscsm :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_ccoomm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_ccoosm :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_cdiamm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_cdiasm :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_cskysm :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, pntr: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_cskymm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, pntr: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_cbsrmm :: (transa: *u8, m: *s64, n: *s64, k: *s64, lb: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_cbsrsm :: (transa: *u8, m: *s64, n: *s64, lb: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

/* Upper case declaration */
/* Sparse BLAS Level2 upper case */
MKL_CCSRMV :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CCSRSV :: (transa: *u8, m: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CCSRGEMV :: (transa: *u8, m: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_CCSRGEMV :: (transa: *u8, m: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CCSRSYMV :: (uplo: *u8, m: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_CCSRSYMV :: (uplo: *u8, m: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CCSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_CCSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

MKL_CCSCMV :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CCSCSV :: (transa: *u8, m: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

MKL_CCOOMV :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CCOOSV :: (transa: *u8, m: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CCOOGEMV :: (transa: *u8, m: *s64, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_CCOOGEMV :: (transa: *u8, m: *s64, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CCOOSYMV :: (uplo: *u8, m: *s64, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_CCOOSYMV :: (uplo: *u8, m: *s64, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CCOOTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_CCOOTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

MKL_CDIAMV :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CDIASV :: (transa: *u8, m: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CDIAGEMV :: (transa: *u8, m: *s64, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CDIASYMV :: (uplo: *u8, m: *s64, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CDIATRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

MKL_CSKYMV :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, pntr: *s64, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CSKYSV :: (transa: *u8, m: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, pntr: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

MKL_CBSRMV :: (transa: *u8, m: *s64, k: *s64, lb: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex8, beta: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CBSRSV :: (transa: *u8, m: *s64, lb: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CBSRGEMV :: (transa: *u8, m: *s64, lb: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_CBSRGEMV :: (transa: *u8, m: *s64, lb: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CBSRSYMV :: (uplo: *u8, m: *s64, lb: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_CBSRSYMV :: (uplo: *u8, m: *s64, lb: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CBSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_CBSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *MKL_Complex8, ia: *s64, ja: *s64, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

/* Sparse BLAS Level3 upper case */
MKL_CCSRMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_CCSRSM :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_CCSCMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_CCSCSM :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_CCOOMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_CCOOSM :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, rowind: *s64, colind: *s64, nnz: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_CDIAMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_CDIASM :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, lval: *s64, idiag: *s64, ndiag: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_CSKYSM :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, pntr: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_CSKYMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, pntr: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_CBSRMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, lb: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex8, ldb: *s64, beta: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_CBSRSM :: (transa: *u8, m: *s64, n: *s64, lb: *s64, alpha: *MKL_Complex8, matdescra: *u8, val: *MKL_Complex8, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;

/* MKL_Complex16 */
/* Sparse BLAS Level2 lower case */
mkl_zcsrmv :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zcsrsv :: (transa: *u8, m: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zcsrgemv :: (transa: *u8, m: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_zcsrgemv :: (transa: *u8, m: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zcsrsymv :: (uplo: *u8, m: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_zcsrsymv :: (uplo: *u8, m: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zcsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_zcsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

mkl_zcscmv :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zcscsv :: (transa: *u8, m: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

mkl_zcoomv :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zcoosv :: (transa: *u8, m: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zcoogemv :: (transa: *u8, m: *s64, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_zcoogemv :: (transa: *u8, m: *s64, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zcoosymv :: (uplo: *u8, m: *s64, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_zcoosymv :: (uplo: *u8, m: *s64, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zcootrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_zcootrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

mkl_zdiamv :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zdiasv :: (transa: *u8, m: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zdiagemv :: (transa: *u8, m: *s64, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zdiasymv :: (uplo: *u8, m: *s64, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zdiatrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

mkl_zskymv :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, pntr: *s64, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zskysv :: (transa: *u8, m: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, pntr: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

mkl_zbsrmv :: (transa: *u8, m: *s64, k: *s64, lb: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zbsrsv :: (transa: *u8, m: *s64, lb: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zbsrgemv :: (transa: *u8, m: *s64, lb: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_zbsrgemv :: (transa: *u8, m: *s64, lb: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zbsrsymv :: (uplo: *u8, m: *s64, lb: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_zbsrsymv :: (uplo: *u8, m: *s64, lb: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_zbsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
mkl_cspblas_zbsrtrsv :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

/* Sparse BLAS Level3 lower case */
mkl_zcsrmm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_zcsrsm :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_zcscmm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_zcscsm :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_zcoomm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_zcoosm :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_zdiamm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_zdiasm :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_zskysm :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, pntr: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_zskymm :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, pntr: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

mkl_zbsrmm :: (transa: *u8, m: *s64, n: *s64, k: *s64, lb: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_zbsrsm :: (transa: *u8, m: *s64, n: *s64, lb: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

/* Upper case declaration */
/* Sparse BLAS Level2 upper case */
MKL_ZCSRMV :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZCSRSV :: (transa: *u8, m: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZCSRGEMV :: (transa: *u8, m: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_ZCSRGEMV :: (transa: *u8, m: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZCSRSYMV :: (uplo: *u8, m: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_ZCSRSYMV :: (uplo: *u8, m: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZCSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_ZCSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

MKL_ZCSCMV :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZCSCSV :: (transa: *u8, m: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

MKL_ZCOOMV :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZCOOSV :: (transa: *u8, m: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZCOOGEMV :: (transa: *u8, m: *s64, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_ZCOOGEMV :: (transa: *u8, m: *s64, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZCOOSYMV :: (uplo: *u8, m: *s64, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_ZCOOSYMV :: (uplo: *u8, m: *s64, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZCOOTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_ZCOOTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

MKL_ZDIAMV :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZDIASV :: (transa: *u8, m: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZDIAGEMV :: (transa: *u8, m: *s64, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZDIASYMV :: (uplo: *u8, m: *s64, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZDIATRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

MKL_ZSKYMV :: (transa: *u8, m: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, pntr: *s64, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZSKYSV :: (transa: *u8, m: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, pntr: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

MKL_ZBSRMV :: (transa: *u8, m: *s64, k: *s64, lb: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex16, beta: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZBSRSV :: (transa: *u8, m: *s64, lb: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZBSRGEMV :: (transa: *u8, m: *s64, lb: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_ZBSRGEMV :: (transa: *u8, m: *s64, lb: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZBSRSYMV :: (uplo: *u8, m: *s64, lb: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_ZBSRSYMV :: (uplo: *u8, m: *s64, lb: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_ZBSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
MKL_CSPBLAS_ZBSRTRSV :: (uplo: *u8, transa: *u8, diag: *u8, m: *s64, lb: *s64, a: *MKL_Complex16, ia: *s64, ja: *s64, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

/* Sparse BLAS Level3 upper case */
MKL_ZCSRMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_ZCSRSM :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_ZCSCMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_ZCSCSM :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_ZCOOMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_ZCOOSM :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, rowind: *s64, colind: *s64, nnz: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_ZDIAMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_ZDIASM :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, lval: *s64, idiag: *s64, ndiag: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_ZSKYSM :: (transa: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, pntr: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_ZSKYMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, pntr: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

MKL_ZBSRMM :: (transa: *u8, m: *s64, n: *s64, k: *s64, lb: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex16, ldb: *s64, beta: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_ZBSRSM :: (transa: *u8, m: *s64, n: *s64, lb: *s64, alpha: *MKL_Complex16, matdescra: *u8, val: *MKL_Complex16, indx: *s64, pntrb: *s64, pntre: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;

/*Converters lower case*/
mkl_dcsrbsr :: (job: *s64, m: *s64, mblk: *s64, ldAbsr: *s64, Acsr: *float64, AJ: *s64, AI: *s64, Absr: *float64, AJB: *s64, AIB: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_dcsrcoo :: (job: *s64, n: *s64, Acsr: *float64, AJR: *s64, AIR: *s64, nnz: *s64, Acoo: *float64, ir: *s64, jc: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_ddnscsr :: (job: *s64, m: *s64, n: *s64, Adns: *float64, lda: *s64, Acsr: *float64, AJ: *s64, AI: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_dcsrcsc :: (job: *s64, n: *s64, Acsr: *float64, AJ0: *s64, AI0: *s64, Acsc: *float64, AJ1: *s64, AI1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_dcsrdia :: (job: *s64, n: *s64, Acsr: *float64, AJ0: *s64, AI0: *s64, Adia: *float64, ndiag: *s64, distance: *s64, idiag: *s64, Acsr_rem: *float64, AJ0_rem: *s64, AI0_rem: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_dcsrsky :: (job: *s64, n: *s64, Acsr: *float64, AJ0: *s64, AI0: *s64, Asky: *float64, pointers: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_scsrbsr :: (job: *s64, m: *s64, mblk: *s64, ldAbsr: *s64, Acsr: *float, AJ: *s64, AI: *s64, Absr: *float, AJB: *s64, AIB: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_scsrcoo :: (job: *s64, n: *s64, Acsr: *float, AJR: *s64, AIR: *s64, nnz: *s64, Acoo: *float, ir: *s64, jc: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_sdnscsr :: (job: *s64, m: *s64, n: *s64, Adns: *float, lda: *s64, Acsr: *float, AJ: *s64, AI: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_scsrcsc :: (job: *s64, n: *s64, Acsr: *float, AJ0: *s64, AI0: *s64, Acsc: *float, AJ1: *s64, AI1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_scsrdia :: (job: *s64, n: *s64, Acsr: *float, AJ0: *s64, AI0: *s64, Adia: *float, ndiag: *s64, distance: *s64, idiag: *s64, Acsr_rem: *float, AJ0_rem: *s64, AI0_rem: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_scsrsky :: (job: *s64, n: *s64, Acsr: *float, AJ0: *s64, AI0: *s64, Asky: *float, pointers: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_ccsrbsr :: (job: *s64, m: *s64, mblk: *s64, ldAbsr: *s64, Acsr: *MKL_Complex8, AJ: *s64, AI: *s64, Absr: *MKL_Complex8, AJB: *s64, AIB: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_ccsrcoo :: (job: *s64, n: *s64, Acsr: *MKL_Complex8, AJR: *s64, AIR: *s64, nnz: *s64, Acoo: *MKL_Complex8, ir: *s64, jc: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_cdnscsr :: (job: *s64, m: *s64, n: *s64, Adns: *MKL_Complex8, lda: *s64, Acsr: *MKL_Complex8, AJ: *s64, AI: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_ccsrcsc :: (job: *s64, n: *s64, Acsr: *MKL_Complex8, AJ0: *s64, AI0: *s64, Acsc: *MKL_Complex8, AJ1: *s64, AI1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_ccsrdia :: (job: *s64, n: *s64, Acsr: *MKL_Complex8, AJ0: *s64, AI0: *s64, Adia: *MKL_Complex8, ndiag: *s64, distance: *s64, idiag: *s64, Acsr_rem: *MKL_Complex8, AJ0_rem: *s64, AI0_rem: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_ccsrsky :: (job: *s64, n: *s64, Acsr: *MKL_Complex8, AJ0: *s64, AI0: *s64, Asky: *MKL_Complex8, pointers: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_zcsrbsr :: (job: *s64, m: *s64, mblk: *s64, ldAbsr: *s64, Acsr: *MKL_Complex16, AJ: *s64, AI: *s64, Absr: *MKL_Complex16, AJB: *s64, AIB: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_zcsrcoo :: (job: *s64, n: *s64, Acsr: *MKL_Complex16, AJR: *s64, AIR: *s64, nnz: *s64, Acoo: *MKL_Complex16, ir: *s64, jc: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_zdnscsr :: (job: *s64, m: *s64, n: *s64, Adns: *MKL_Complex16, lda: *s64, Acsr: *MKL_Complex16, AJ: *s64, AI: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_zcsrcsc :: (job: *s64, n: *s64, Acsr: *MKL_Complex16, AJ0: *s64, AI0: *s64, Acsc: *MKL_Complex16, AJ1: *s64, AI1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_zcsrdia :: (job: *s64, n: *s64, Acsr: *MKL_Complex16, AJ0: *s64, AI0: *s64, Adia: *MKL_Complex16, ndiag: *s64, distance: *s64, idiag: *s64, Acsr_rem: *MKL_Complex16, AJ0_rem: *s64, AI0_rem: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
mkl_zcsrsky :: (job: *s64, n: *s64, Acsr: *MKL_Complex16, AJ0: *s64, AI0: *s64, Asky: *MKL_Complex16, pointers: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/*Converters upper case*/
MKL_DCSRBSR :: (job: *s64, m: *s64, mblk: *s64, ldAbsr: *s64, Acsr: *float64, AJ: *s64, AI: *s64, Absr: *float64, AJB: *s64, AIB: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_DCSRCOO :: (job: *s64, n: *s64, Acsr: *float64, AJR: *s64, AIR: *s64, nnz: *s64, Acoo: *float64, ir: *s64, jc: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_DDNSCSR :: (job: *s64, m: *s64, n: *s64, Adns: *float64, lda: *s64, Acsr: *float64, AJ: *s64, AI: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_DCSRCSC :: (job: *s64, n: *s64, Acsr: *float64, AJ0: *s64, AI0: *s64, Acsc: *float64, AJ1: *s64, AI1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_DCSRDIA :: (job: *s64, n: *s64, Acsr: *float64, AJ0: *s64, AI0: *s64, Adia: *float64, ndiag: *s64, distance: *s64, idiag: *s64, Acsr_rem: *float64, AJ0_rem: *s64, AI0_rem: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_DCSRSKY :: (job: *s64, n: *s64, Acsr: *float64, AJ0: *s64, AI0: *s64, Asky: *float64, pointers: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_SCSRBSR :: (job: *s64, m: *s64, mblk: *s64, ldAbsr: *s64, Acsr: *float, AJ: *s64, AI: *s64, Absr: *float, AJB: *s64, AIB: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_SCSRCOO :: (job: *s64, n: *s64, Acsr: *float, AJR: *s64, AIR: *s64, nnz: *s64, Acoo: *float, ir: *s64, jc: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_SDNSCSR :: (job: *s64, m: *s64, n: *s64, Adns: *float, lda: *s64, Acsr: *float, AJ: *s64, AI: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_SCSRCSC :: (job: *s64, n: *s64, Acsr: *float, AJ0: *s64, AI0: *s64, Acsc: *float, AJ1: *s64, AI1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_SCSRDIA :: (job: *s64, n: *s64, Acsr: *float, AJ0: *s64, AI0: *s64, Adia: *float, ndiag: *s64, distance: *s64, idiag: *s64, Acsr_rem: *float, AJ0_rem: *s64, AI0_rem: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_SCSRSKY :: (job: *s64, n: *s64, Acsr: *float, AJ0: *s64, AI0: *s64, Asky: *float, pointers: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_CCSRBSR :: (job: *s64, m: *s64, mblk: *s64, ldAbsr: *s64, Acsr: *MKL_Complex8, AJ: *s64, AI: *s64, Absr: *MKL_Complex8, AJB: *s64, AIB: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_CCSRCOO :: (job: *s64, n: *s64, Acsr: *MKL_Complex8, AJR: *s64, AIR: *s64, nnz: *s64, Acoo: *MKL_Complex8, ir: *s64, jc: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_CDNSCSR :: (job: *s64, m: *s64, n: *s64, Adns: *MKL_Complex8, lda: *s64, Acsr: *MKL_Complex8, AJ: *s64, AI: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_CCSRCSC :: (job: *s64, n: *s64, Acsr: *MKL_Complex8, AJ0: *s64, AI0: *s64, Acsc: *MKL_Complex8, AJ1: *s64, AI1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_CCSRDIA :: (job: *s64, n: *s64, Acsr: *MKL_Complex8, AJ0: *s64, AI0: *s64, Adia: *MKL_Complex8, ndiag: *s64, distance: *s64, idiag: *s64, Acsr_rem: *MKL_Complex8, AJ0_rem: *s64, AI0_rem: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_CCSRSKY :: (job: *s64, n: *s64, Acsr: *MKL_Complex8, AJ0: *s64, AI0: *s64, Asky: *MKL_Complex8, pointers: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_ZCSRBSR :: (job: *s64, m: *s64, mblk: *s64, ldAbsr: *s64, Acsr: *MKL_Complex16, AJ: *s64, AI: *s64, Absr: *MKL_Complex16, AJB: *s64, AIB: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_ZCSRCOO :: (job: *s64, n: *s64, Acsr: *MKL_Complex16, AJR: *s64, AIR: *s64, nnz: *s64, Acoo: *MKL_Complex16, ir: *s64, jc: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_ZDNSCSR :: (job: *s64, m: *s64, n: *s64, Adns: *MKL_Complex16, lda: *s64, Acsr: *MKL_Complex16, AJ: *s64, AI: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_ZCSRCSC :: (job: *s64, n: *s64, Acsr: *MKL_Complex16, AJ0: *s64, AI0: *s64, Acsc: *MKL_Complex16, AJ1: *s64, AI1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_ZCSRDIA :: (job: *s64, n: *s64, Acsr: *MKL_Complex16, AJ0: *s64, AI0: *s64, Adia: *MKL_Complex16, ndiag: *s64, distance: *s64, idiag: *s64, Acsr_rem: *MKL_Complex16, AJ0_rem: *s64, AI0_rem: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
MKL_ZCSRSKY :: (job: *s64, n: *s64, Acsr: *MKL_Complex16, AJ0: *s64, AI0: *s64, Asky: *MKL_Complex16, pointers: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/*Sparse BLAS Level2 (CSR-CSR or CSR-DNS) lower case */
mkl_dcsrmultcsr :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, k: *s64, a: *float64, ja: *s64, ia: *s64, b: *float64, jb: *s64, ib: *s64, c: *float64, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;
mkl_dcsrmultd :: (transa: *u8, m: *s64, n: *s64, k: *s64, a: *float64, ja: *s64, ia: *s64, b: *float64, jb: *s64, ib: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_dcsradd :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, a: *float64, ja: *s64, ia: *s64, beta: *float64, b: *float64, jb: *s64, ib: *s64, c: *float64, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;

mkl_scsrmultcsr :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, k: *s64, a: *float, ja: *s64, ia: *s64, b: *float, jb: *s64, ib: *s64, c: *float, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;
mkl_scsrmultd :: (transa: *u8, m: *s64, n: *s64, k: *s64, a: *float, ja: *s64, ia: *s64, b: *float, jb: *s64, ib: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_scsradd :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, a: *float, ja: *s64, ia: *s64, beta: *float, b: *float, jb: *s64, ib: *s64, c: *float, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;

mkl_ccsrmultcsr :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, ja: *s64, ia: *s64, b: *MKL_Complex8, jb: *s64, ib: *s64, c: *MKL_Complex8, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;
mkl_ccsrmultd :: (transa: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, ja: *s64, ia: *s64, b: *MKL_Complex8, jb: *s64, ib: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_ccsradd :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, a: *MKL_Complex8, ja: *s64, ia: *s64, beta: *MKL_Complex8, b: *MKL_Complex8, jb: *s64, ib: *s64, c: *MKL_Complex8, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;

mkl_zcsrmultcsr :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, ja: *s64, ia: *s64, b: *MKL_Complex16, jb: *s64, ib: *s64, c: *MKL_Complex16, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;
mkl_zcsrmultd :: (transa: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, ja: *s64, ia: *s64, b: *MKL_Complex16, jb: *s64, ib: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
mkl_zcsradd :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, a: *MKL_Complex16, ja: *s64, ia: *s64, beta: *MKL_Complex16, b: *MKL_Complex16, jb: *s64, ib: *s64, c: *MKL_Complex16, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;

/*Sparse BLAS Level2 (CSR-CSR or CSR-DNS) upper case */
MKL_DCSRMULTCSR :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, k: *s64, a: *float64, ja: *s64, ia: *s64, b: *float64, jb: *s64, ib: *s64, c: *float64, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;
MKL_DCSRMULTD :: (transa: *u8, m: *s64, n: *s64, k: *s64, a: *float64, ja: *s64, ia: *s64, b: *float64, jb: *s64, ib: *s64, c: *float64, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_DCSRADD :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, a: *float64, ja: *s64, ia: *s64, beta: *float64, b: *float64, jb: *s64, ib: *s64, c: *float64, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;

MKL_SCSRMULTCSR :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, k: *s64, a: *float, ja: *s64, ia: *s64, b: *float, jb: *s64, ib: *s64, c: *float, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;
MKL_SCSRMULTD :: (transa: *u8, m: *s64, n: *s64, k: *s64, a: *float, ja: *s64, ia: *s64, b: *float, jb: *s64, ib: *s64, c: *float, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_SCSRADD :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, a: *float, ja: *s64, ia: *s64, beta: *float, b: *float, jb: *s64, ib: *s64, c: *float, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;

MKL_CCSRMULTCSR :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, ja: *s64, ia: *s64, b: *MKL_Complex8, jb: *s64, ib: *s64, c: *MKL_Complex8, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;
MKL_CCSRMULTD :: (transa: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, ja: *s64, ia: *s64, b: *MKL_Complex8, jb: *s64, ib: *s64, c: *MKL_Complex8, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_CCSRADD :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, a: *MKL_Complex8, ja: *s64, ia: *s64, beta: *MKL_Complex8, b: *MKL_Complex8, jb: *s64, ib: *s64, c: *MKL_Complex8, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;

MKL_ZCSRMULTCSR :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, ja: *s64, ia: *s64, b: *MKL_Complex16, jb: *s64, ib: *s64, c: *MKL_Complex16, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;
MKL_ZCSRMULTD :: (transa: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, ja: *s64, ia: *s64, b: *MKL_Complex16, jb: *s64, ib: *s64, c: *MKL_Complex16, ldc: *s64) -> void #foreign mkl_intel_ilp64;
MKL_ZCSRADD :: (transa: *u8, job: *s64, sort: *s64, m: *s64, n: *s64, a: *MKL_Complex16, ja: *s64, ia: *s64, beta: *MKL_Complex16, b: *MKL_Complex16, jb: *s64, ib: *s64, c: *MKL_Complex16, jc: *s64, ic: *s64, nnzmax: *s64, ierr: *s64) -> void #foreign mkl_intel_ilp64;

/* status of the routines */
sparse_status_t :: enum s32 {
    SUCCESS          :: 0;
    NOT_INITIALIZED  :: 1;
    ALLOC_FAILED     :: 2;
    INVALID_VALUE    :: 3;
    EXECUTION_FAILED :: 4;
    INTERNAL_ERROR   :: 5;
    NOT_SUPPORTED    :: 6;

    SPARSE_STATUS_SUCCESS          :: SUCCESS;
    SPARSE_STATUS_NOT_INITIALIZED  :: NOT_INITIALIZED;
    SPARSE_STATUS_ALLOC_FAILED     :: ALLOC_FAILED;
    SPARSE_STATUS_INVALID_VALUE    :: INVALID_VALUE;
    SPARSE_STATUS_EXECUTION_FAILED :: EXECUTION_FAILED;
    SPARSE_STATUS_INTERNAL_ERROR   :: INTERNAL_ERROR;
    SPARSE_STATUS_NOT_SUPPORTED    :: NOT_SUPPORTED;
}

/* sparse matrix operations */
sparse_operation_t :: enum s32 {
    NON_TRANSPOSE       :: 10;
    TRANSPOSE           :: 11;
    CONJUGATE_TRANSPOSE :: 12;

    SPARSE_OPERATION_NON_TRANSPOSE       :: NON_TRANSPOSE;
    SPARSE_OPERATION_TRANSPOSE           :: TRANSPOSE;
    SPARSE_OPERATION_CONJUGATE_TRANSPOSE :: CONJUGATE_TRANSPOSE;
}

/* supported matrix types */
sparse_matrix_type_t :: enum s32 {
    GENERAL          :: 20;
    SYMMETRIC        :: 21;
    HERMITIAN        :: 22;
    TRIANGULAR       :: 23;
    DIAGONAL         :: 24;
    BLOCK_TRIANGULAR :: 25;
    BLOCK_DIAGONAL   :: 26;

    SPARSE_MATRIX_TYPE_GENERAL          :: GENERAL;
    SPARSE_MATRIX_TYPE_SYMMETRIC        :: SYMMETRIC;
    SPARSE_MATRIX_TYPE_HERMITIAN        :: HERMITIAN;
    SPARSE_MATRIX_TYPE_TRIANGULAR       :: TRIANGULAR;
    SPARSE_MATRIX_TYPE_DIAGONAL         :: DIAGONAL;
    SPARSE_MATRIX_TYPE_BLOCK_TRIANGULAR :: BLOCK_TRIANGULAR;
    SPARSE_MATRIX_TYPE_BLOCK_DIAGONAL   :: BLOCK_DIAGONAL;
}

/* sparse matrix indexing: C-style or Fortran-style */
sparse_index_base_t :: enum s32 {
    ZERO :: 0;
    ONE  :: 1;

    SPARSE_INDEX_BASE_ZERO :: ZERO;
    SPARSE_INDEX_BASE_ONE  :: ONE;
}

/* applies to triangular matrices only ( SPARSE_MATRIX_TYPE_SYMMETRIC, SPARSE_MATRIX_TYPE_HERMITIAN, SPARSE_MATRIX_TYPE_TRIANGULAR ) */
sparse_fill_mode_t :: enum s32 {
    LOWER :: 40;
    UPPER :: 41;
    FULL  :: 42;

    SPARSE_FILL_MODE_LOWER :: LOWER;
    SPARSE_FILL_MODE_UPPER :: UPPER;
    SPARSE_FILL_MODE_FULL  :: FULL;
}

/* applies to triangular matrices only ( SPARSE_MATRIX_TYPE_SYMMETRIC, SPARSE_MATRIX_TYPE_HERMITIAN, SPARSE_MATRIX_TYPE_TRIANGULAR ) */
sparse_diag_type_t :: enum s32 {
    NON_UNIT :: 50;
    UNIT     :: 51;

    SPARSE_DIAG_NON_UNIT :: NON_UNIT;
    SPARSE_DIAG_UNIT     :: UNIT;
}

/* applicable for Level 3 operations with dense matrices; describes storage scheme for dense matrix (row major or column major) */
sparse_layout_t :: enum s32 {
    ROW_MAJOR    :: 101;
    COLUMN_MAJOR :: 102;

    SPARSE_LAYOUT_ROW_MAJOR    :: ROW_MAJOR;
    SPARSE_LAYOUT_COLUMN_MAJOR :: COLUMN_MAJOR;
}

/* verbose mode; if verbose mode activated, handle should collect and report profiling / optimization info */
verbose_mode_t :: enum s32 {
    OFF      :: 70;
    BASIC    :: 71;
    EXTENDED :: 72;

    SPARSE_VERBOSE_OFF      :: OFF;
    SPARSE_VERBOSE_BASIC    :: BASIC;
    SPARSE_VERBOSE_EXTENDED :: EXTENDED;
}

/* memory optimization hints from user: describe how much memory could be used on optimization stage */
sparse_memory_usage_t :: enum s32 {
    NONE       :: 80;
    AGGRESSIVE :: 81;

    SPARSE_MEMORY_NONE       :: NONE;
    SPARSE_MEMORY_AGGRESSIVE :: AGGRESSIVE;
}

sparse_request_t :: enum s32 {
    FULL_MULT            :: 90;
    NNZ_COUNT            :: 91;
    FINALIZE_MULT        :: 92;
    FULL_MULT_NO_VAL     :: 93;
    FINALIZE_MULT_NO_VAL :: 94;

    SPARSE_STAGE_FULL_MULT            :: FULL_MULT;
    SPARSE_STAGE_NNZ_COUNT            :: NNZ_COUNT;
    SPARSE_STAGE_FINALIZE_MULT        :: FINALIZE_MULT;
    SPARSE_STAGE_FULL_MULT_NO_VAL     :: FULL_MULT_NO_VAL;
    SPARSE_STAGE_FINALIZE_MULT_NO_VAL :: FINALIZE_MULT_NO_VAL;
}

/*************************************************************************************************/
/*** Opaque structure for sparse matrix in internal format, further D - means double precision ***/
/*************************************************************************************************/
sparse_matrix :: struct {}
sparse_matrix_t :: *sparse_matrix;

/* descriptor of main sparse matrix properties */
matrix_descr :: struct {
    type: sparse_matrix_type_t; /* matrix type: general, diagonal or triangular / symmetric / hermitian */
    mode: sparse_fill_mode_t; /* upper or lower triangular part of the matrix ( for triangular / symmetric / hermitian case) */
    diag: sparse_diag_type_t; /* unit or non-unit diagonal ( for triangular / symmetric / hermitian case) */
}
#run {
    instance: matrix_descr;
    assert(((cast(*void)(*instance.type)) - cast(*void)(*instance)) == 0, "matrix_descr.type has unexpected offset % instead of 0", ((cast(*void)(*instance.type)) - cast(*void)(*instance)));
    assert(size_of(type_of(matrix_descr.type)) == 4, "matrix_descr.type has unexpected size % instead of 4", size_of(type_of(matrix_descr.type)));
    assert(((cast(*void)(*instance.mode)) - cast(*void)(*instance)) == 4, "matrix_descr.mode has unexpected offset % instead of 4", ((cast(*void)(*instance.mode)) - cast(*void)(*instance)));
    assert(size_of(type_of(matrix_descr.mode)) == 4, "matrix_descr.mode has unexpected size % instead of 4", size_of(type_of(matrix_descr.mode)));
    assert(((cast(*void)(*instance.diag)) - cast(*void)(*instance)) == 8, "matrix_descr.diag has unexpected offset % instead of 8", ((cast(*void)(*instance.diag)) - cast(*void)(*instance)));
    assert(size_of(type_of(matrix_descr.diag)) == 4, "matrix_descr.diag has unexpected size % instead of 4", size_of(type_of(matrix_descr.diag)));
    assert(size_of(matrix_descr) == 12, "matrix_descr has size % instead of 12", size_of(matrix_descr));
}

/*
Matrix handle is used for storing information about the matrix and matrix values

Create matrix from one of the existing sparse formats by creating the handle with matrix info and copy matrix values if requested.
Collect high-level info about the matrix. Need to use this interface for the case with several calls in program for performance reasons,
where optimizations are not required.

coordinate format,
SPARSE_MATRIX_TYPE_GENERAL by default, pointers to input arrays are stored in the handle

*** User data is not marked const since the mkl_sparse_order() or mkl_sparse_?_set_values()
functionality could change user data.  However, this is only done by a user call. 
Internally const-ness of user data is maintained other than through explicit
use of these interfaces.

*/
mkl_sparse_s_create_coo :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, rows: s64, cols: s64, nnz: s64, row_indx: *s64, col_indx: *s64, values: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_create_coo :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, rows: s64, cols: s64, nnz: s64, row_indx: *s64, col_indx: *s64, values: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_create_coo :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, rows: s64, cols: s64, nnz: s64, row_indx: *s64, col_indx: *s64, values: *MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_create_coo :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, rows: s64, cols: s64, nnz: s64, row_indx: *s64, col_indx: *s64, values: *MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

/*
compressed sparse row format (4-arrays version),
SPARSE_MATRIX_TYPE_GENERAL by default, pointers to input arrays are stored in the handle

*** User data is not marked const since the mkl_sparse_order() or mkl_sparse_?_set_values()
functionality could change user data.  However, this is only done by a user call. 
Internally const-ness of user data is maintained other than through explicit
use of these interfaces.

*/
mkl_sparse_s_create_csr :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, rows: s64, cols: s64, rows_start: *s64, rows_end: *s64, col_indx: *s64, values: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_create_csr :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, rows: s64, cols: s64, rows_start: *s64, rows_end: *s64, col_indx: *s64, values: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_create_csr :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, rows: s64, cols: s64, rows_start: *s64, rows_end: *s64, col_indx: *s64, values: *MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_create_csr :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, rows: s64, cols: s64, rows_start: *s64, rows_end: *s64, col_indx: *s64, values: *MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

/*
compressed sparse column format (4-arrays version),
SPARSE_MATRIX_TYPE_GENERAL by default, pointers to input arrays are stored in the handle

*** User data is not marked const since the mkl_sparse_order() or mkl_sparse_?_set_values()
functionality could change user data.  However, this is only done by a user call. 
Internally const-ness of user data is maintained other than through explicit
use of these interfaces.

*/
mkl_sparse_s_create_csc :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, rows: s64, cols: s64, cols_start: *s64, cols_end: *s64, row_indx: *s64, values: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_create_csc :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, rows: s64, cols: s64, cols_start: *s64, cols_end: *s64, row_indx: *s64, values: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_create_csc :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, rows: s64, cols: s64, cols_start: *s64, cols_end: *s64, row_indx: *s64, values: *MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_create_csc :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, rows: s64, cols: s64, cols_start: *s64, cols_end: *s64, row_indx: *s64, values: *MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

/*
compressed block sparse row format (4-arrays version, square blocks),
SPARSE_MATRIX_TYPE_GENERAL by default, pointers to input arrays are stored in the handle

*** User data is not marked const since the mkl_sparse_order() or mkl_sparse_?_set_values()
functionality could change user data.  However, this is only done by a user call. 
Internally const-ness of user data is maintained other than through explicit
use of these interfaces.

*/
mkl_sparse_s_create_bsr :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, block_layout: sparse_layout_t, rows: s64, cols: s64, block_size: s64, rows_start: *s64, rows_end: *s64, col_indx: *s64, values: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_create_bsr :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, block_layout: sparse_layout_t, rows: s64, cols: s64, block_size: s64, rows_start: *s64, rows_end: *s64, col_indx: *s64, values: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_create_bsr :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, block_layout: sparse_layout_t, rows: s64, cols: s64, block_size: s64, rows_start: *s64, rows_end: *s64, col_indx: *s64, values: *MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_create_bsr :: (A: *sparse_matrix_t, indexing: sparse_index_base_t, block_layout: sparse_layout_t, rows: s64, cols: s64, block_size: s64, rows_start: *s64, rows_end: *s64, col_indx: *s64, values: *MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

/*
Create copy of the existing handle; matrix properties could be changed.
For example it could be used for extracting triangular or diagonal parts from existing matrix.
*/
mkl_sparse_copy :: (source: sparse_matrix_t, descr: matrix_descr, dest: *sparse_matrix_t) -> sparse_status_t #foreign mkl_intel_ilp64;

/*
destroy matrix handle; if sparse matrix was stored inside the handle it also deallocates the matrix
It is user's responsibility not to delete the handle with the matrix, if this matrix is shared with other handles
*/
mkl_sparse_destroy :: (A: sparse_matrix_t) -> sparse_status_t #foreign mkl_intel_ilp64;

/*
return extended error information from last operation;
e.g. info about wrong input parameter, memory sizes that couldn't be allocated
*/
mkl_sparse_get_error_info :: (A: sparse_matrix_t, info: *s64) -> sparse_status_t #foreign mkl_intel_ilp64;

/* converters from current format to another */
mkl_sparse_convert_csr :: (source: sparse_matrix_t, operation: sparse_operation_t, dest: *sparse_matrix_t) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_convert_bsr :: (source: sparse_matrix_t, block_size: s64, block_layout: sparse_layout_t, operation: sparse_operation_t, dest: *sparse_matrix_t) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_s_export_bsr :: (source: sparse_matrix_t, indexing: *sparse_index_base_t, block_layout: *sparse_layout_t, rows: *s64, cols: *s64, block_size: *s64, rows_start: **s64, rows_end: **s64, col_indx: **s64, values: **float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_export_bsr :: (source: sparse_matrix_t, indexing: *sparse_index_base_t, block_layout: *sparse_layout_t, rows: *s64, cols: *s64, block_size: *s64, rows_start: **s64, rows_end: **s64, col_indx: **s64, values: **float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_export_bsr :: (source: sparse_matrix_t, indexing: *sparse_index_base_t, block_layout: *sparse_layout_t, rows: *s64, cols: *s64, block_size: *s64, rows_start: **s64, rows_end: **s64, col_indx: **s64, values: **MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_export_bsr :: (source: sparse_matrix_t, indexing: *sparse_index_base_t, block_layout: *sparse_layout_t, rows: *s64, cols: *s64, block_size: *s64, rows_start: **s64, rows_end: **s64, col_indx: **s64, values: **MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_s_export_csr :: (source: sparse_matrix_t, indexing: *sparse_index_base_t, rows: *s64, cols: *s64, rows_start: **s64, rows_end: **s64, col_indx: **s64, values: **float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_export_csr :: (source: sparse_matrix_t, indexing: *sparse_index_base_t, rows: *s64, cols: *s64, rows_start: **s64, rows_end: **s64, col_indx: **s64, values: **float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_export_csr :: (source: sparse_matrix_t, indexing: *sparse_index_base_t, rows: *s64, cols: *s64, rows_start: **s64, rows_end: **s64, col_indx: **s64, values: **MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_export_csr :: (source: sparse_matrix_t, indexing: *sparse_index_base_t, rows: *s64, cols: *s64, rows_start: **s64, rows_end: **s64, col_indx: **s64, values: **MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_s_export_csc :: (source: sparse_matrix_t, indexing: *sparse_index_base_t, rows: *s64, cols: *s64, cols_start: **s64, cols_end: **s64, row_indx: **s64, values: **float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_export_csc :: (source: sparse_matrix_t, indexing: *sparse_index_base_t, rows: *s64, cols: *s64, cols_start: **s64, cols_end: **s64, row_indx: **s64, values: **float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_export_csc :: (source: sparse_matrix_t, indexing: *sparse_index_base_t, rows: *s64, cols: *s64, cols_start: **s64, cols_end: **s64, row_indx: **s64, values: **MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_export_csc :: (source: sparse_matrix_t, indexing: *sparse_index_base_t, rows: *s64, cols: *s64, cols_start: **s64, cols_end: **s64, row_indx: **s64, values: **MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

/* update existing value in the matrix ( for internal storage only, should not work with user-allocated matrices) */
mkl_sparse_s_set_value :: (A: sparse_matrix_t, row: s64, col: s64, value: float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_set_value :: (A: sparse_matrix_t, row: s64, col: s64, value: float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_set_value :: (A: sparse_matrix_t, row: s64, col: s64, value: MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_set_value :: (A: sparse_matrix_t, row: s64, col: s64, value: MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

/* update existing values in the matrix for internal storage only 
can be used to either update all or selected values */
mkl_sparse_s_update_values :: (A: sparse_matrix_t, nvalues: s64, indx: *s64, indy: *s64, values: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_update_values :: (A: sparse_matrix_t, nvalues: s64, indx: *s64, indy: *s64, values: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_update_values :: (A: sparse_matrix_t, nvalues: s64, indx: *s64, indy: *s64, values: *MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_update_values :: (A: sparse_matrix_t, nvalues: s64, indx: *s64, indy: *s64, values: *MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

/* allow to switch on/off verbose mode */
mkl_sparse_set_verbose_mode :: (verbose: verbose_mode_t) -> sparse_status_t #foreign mkl_intel_ilp64;

/* Describe expected operations with amount of iterations */
mkl_sparse_set_mv_hint :: (A: sparse_matrix_t, operation: sparse_operation_t, descr: matrix_descr, expected_calls: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_set_dotmv_hint :: (A: sparse_matrix_t, operation: sparse_operation_t, descr: matrix_descr, expectedCalls: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_set_mm_hint :: (A: sparse_matrix_t, operation: sparse_operation_t, descr: matrix_descr, layout: sparse_layout_t, dense_matrix_size: s64, expected_calls: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_set_sv_hint :: (A: sparse_matrix_t, operation: sparse_operation_t, descr: matrix_descr, expected_calls: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_set_sm_hint :: (A: sparse_matrix_t, operation: sparse_operation_t, descr: matrix_descr, layout: sparse_layout_t, dense_matrix_size: s64, expected_calls: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_set_symgs_hint :: (A: sparse_matrix_t, operation: sparse_operation_t, descr: matrix_descr, expected_calls: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_set_lu_smoother_hint :: (A: sparse_matrix_t, operation: sparse_operation_t, descr: matrix_descr, expectedCalls: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

/* Describe memory usage model */
mkl_sparse_set_memory_hint :: (A: sparse_matrix_t, policy: sparse_memory_usage_t) -> sparse_status_t #foreign mkl_intel_ilp64;

/*
Optimize matrix described by the handle. It uses hints (optimization and memory) that should be set up before this call.
If hints were not explicitly defined, default vales are:
SPARSE_OPERATION_NON_TRANSPOSE for matrix-vector multiply with infinite number of expected iterations.
*/
mkl_sparse_optimize :: (A: sparse_matrix_t) -> sparse_status_t #foreign mkl_intel_ilp64;

/*****************************************************************************************/
/****************************** Computational routines ***********************************/
/*****************************************************************************************/
mkl_sparse_order :: (A: sparse_matrix_t) -> sparse_status_t #foreign mkl_intel_ilp64;

/*
Perform computations based on created matrix handle

Level 2
*/
/*   Computes y = alpha * A * x + beta * y   */
mkl_sparse_s_mv :: (operation: sparse_operation_t, alpha: float, A: sparse_matrix_t, descr: matrix_descr, x: *float, beta: float, y: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_mv :: (operation: sparse_operation_t, alpha: float64, A: sparse_matrix_t, descr: matrix_descr, x: *float64, beta: float64, y: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_mv :: (operation: sparse_operation_t, alpha: MKL_Complex8, A: sparse_matrix_t, descr: matrix_descr, x: *MKL_Complex8, beta: MKL_Complex8, y: *MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_mv :: (operation: sparse_operation_t, alpha: MKL_Complex16, A: sparse_matrix_t, descr: matrix_descr, x: *MKL_Complex16, beta: MKL_Complex16, y: *MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

/*    Computes y = alpha * A * x + beta * y  and d = <x, y> , the l2 inner product */
mkl_sparse_s_dotmv :: (transA: sparse_operation_t, alpha: float, A: sparse_matrix_t, descr: matrix_descr, x: *float, beta: float, y: *float, d: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_dotmv :: (transA: sparse_operation_t, alpha: float64, A: sparse_matrix_t, descr: matrix_descr, x: *float64, beta: float64, y: *float64, d: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_dotmv :: (transA: sparse_operation_t, alpha: MKL_Complex8, A: sparse_matrix_t, descr: matrix_descr, x: *MKL_Complex8, beta: MKL_Complex8, y: *MKL_Complex8, d: *MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_dotmv :: (transA: sparse_operation_t, alpha: MKL_Complex16, A: sparse_matrix_t, descr: matrix_descr, x: *MKL_Complex16, beta: MKL_Complex16, y: *MKL_Complex16, d: *MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Solves triangular system y = alpha * A^{-1} * x   */
mkl_sparse_s_trsv :: (operation: sparse_operation_t, alpha: float, A: sparse_matrix_t, descr: matrix_descr, x: *float, y: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_trsv :: (operation: sparse_operation_t, alpha: float64, A: sparse_matrix_t, descr: matrix_descr, x: *float64, y: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_trsv :: (operation: sparse_operation_t, alpha: MKL_Complex8, A: sparse_matrix_t, descr: matrix_descr, x: *MKL_Complex8, y: *MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_trsv :: (operation: sparse_operation_t, alpha: MKL_Complex16, A: sparse_matrix_t, descr: matrix_descr, x: *MKL_Complex16, y: *MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Applies symmetric Gauss-Seidel preconditioner to symmetric system A * x = b, */
/*   that is, it solves:                                                          */
/*      x0       = alpha*x                                                        */
/*      (L+D)*x1 = b - U*x0                                                       */
/*      (D+U)*x  = b - L*x1                                                       */
/*                                                                                */
/*   SYMGS_MV also returns y = A*x                                                */
mkl_sparse_s_symgs :: (op: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, alpha: float, b: *float, x: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_symgs :: (op: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, alpha: float64, b: *float64, x: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_symgs :: (op: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, alpha: MKL_Complex8, b: *MKL_Complex8, x: *MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_symgs :: (op: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, alpha: MKL_Complex16, b: *MKL_Complex16, x: *MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_s_symgs_mv :: (op: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, alpha: float, b: *float, x: *float, y: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_symgs_mv :: (op: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, alpha: float64, b: *float64, x: *float64, y: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_symgs_mv :: (op: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, alpha: MKL_Complex8, b: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_symgs_mv :: (op: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, alpha: MKL_Complex16, b: *MKL_Complex16, x: *MKL_Complex16, y: *MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Computes an action of a preconditioner
which corresponds to the approximate matrix decomposition A ≈ (L+D)*E*(U+D)
for the system Ax = b.

L is lower triangular part of A
U is upper triangular part of A
D is diagonal values of A 
E is approximate diagonal inverse            

That is, it solves:                                      
r = rhs - A*x0                                       
(L + D)*E*(U + D)*dx = r                             
x1 = x0 + dx                                        */
mkl_sparse_s_lu_smoother :: (op: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, diag: *float, approx_diag_inverse: *float, x: *float, rhs: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_lu_smoother :: (op: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, diag: *float64, approx_diag_inverse: *float64, x: *float64, rhs: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_lu_smoother :: (op: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, diag: *MKL_Complex8, approx_diag_inverse: *MKL_Complex8, x: *MKL_Complex8, rhs: *MKL_Complex8) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_lu_smoother :: (op: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, diag: *MKL_Complex16, approx_diag_inverse: *MKL_Complex16, x: *MKL_Complex16, rhs: *MKL_Complex16) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Computes y = alpha * A * x + beta * y   */
mkl_sparse_s_mm :: (operation: sparse_operation_t, alpha: float, A: sparse_matrix_t, descr: matrix_descr, layout: sparse_layout_t, x: *float, columns: s64, ldx: s64, beta: float, y: *float, ldy: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_mm :: (operation: sparse_operation_t, alpha: float64, A: sparse_matrix_t, descr: matrix_descr, layout: sparse_layout_t, x: *float64, columns: s64, ldx: s64, beta: float64, y: *float64, ldy: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_mm :: (operation: sparse_operation_t, alpha: MKL_Complex8, A: sparse_matrix_t, descr: matrix_descr, layout: sparse_layout_t, x: *MKL_Complex8, columns: s64, ldx: s64, beta: MKL_Complex8, y: *MKL_Complex8, ldy: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_mm :: (operation: sparse_operation_t, alpha: MKL_Complex16, A: sparse_matrix_t, descr: matrix_descr, layout: sparse_layout_t, x: *MKL_Complex16, columns: s64, ldx: s64, beta: MKL_Complex16, y: *MKL_Complex16, ldy: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Solves triangular system y = alpha * A^{-1} * x   */
mkl_sparse_s_trsm :: (operation: sparse_operation_t, alpha: float, A: sparse_matrix_t, descr: matrix_descr, layout: sparse_layout_t, x: *float, columns: s64, ldx: s64, y: *float, ldy: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_trsm :: (operation: sparse_operation_t, alpha: float64, A: sparse_matrix_t, descr: matrix_descr, layout: sparse_layout_t, x: *float64, columns: s64, ldx: s64, y: *float64, ldy: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_trsm :: (operation: sparse_operation_t, alpha: MKL_Complex8, A: sparse_matrix_t, descr: matrix_descr, layout: sparse_layout_t, x: *MKL_Complex8, columns: s64, ldx: s64, y: *MKL_Complex8, ldy: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_trsm :: (operation: sparse_operation_t, alpha: MKL_Complex16, A: sparse_matrix_t, descr: matrix_descr, layout: sparse_layout_t, x: *MKL_Complex16, columns: s64, ldx: s64, y: *MKL_Complex16, ldy: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Computes sum of sparse matrices: C = alpha * op(A) + B, result is sparse   */
mkl_sparse_s_add :: (operation: sparse_operation_t, A: sparse_matrix_t, alpha: float, B: sparse_matrix_t, C: *sparse_matrix_t) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_add :: (operation: sparse_operation_t, A: sparse_matrix_t, alpha: float64, B: sparse_matrix_t, C: *sparse_matrix_t) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_add :: (operation: sparse_operation_t, A: sparse_matrix_t, alpha: MKL_Complex8, B: sparse_matrix_t, C: *sparse_matrix_t) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_add :: (operation: sparse_operation_t, A: sparse_matrix_t, alpha: MKL_Complex16, B: sparse_matrix_t, C: *sparse_matrix_t) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Computes product of sparse matrices: C = op(A) * B, result is sparse   */
mkl_sparse_spmm :: (operation: sparse_operation_t, A: sparse_matrix_t, B: sparse_matrix_t, C: *sparse_matrix_t) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Computes product of sparse matrices: C = opA(A) * opB(B), result is sparse   */
mkl_sparse_sp2m :: (transA: sparse_operation_t, descrA: matrix_descr, A: sparse_matrix_t, transB: sparse_operation_t, descrB: matrix_descr, B: sparse_matrix_t, request: sparse_request_t, C: *sparse_matrix_t) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Computes product of sparse matrices: C = op(A) * (op(A))^{T for real or H for complex}, result is sparse   */
mkl_sparse_syrk :: (operation: sparse_operation_t, A: sparse_matrix_t, C: *sparse_matrix_t) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Computes product of sparse matrices: C = op(A) * B * (op(A))^{T for real or H for complex}, result is sparse   */
mkl_sparse_sypr :: (transA: sparse_operation_t, A: sparse_matrix_t, B: sparse_matrix_t, descrB: matrix_descr, C: *sparse_matrix_t, request: sparse_request_t) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Computes product of sparse matrices: C = op(A) * B * (op(A))^{T for real or H for complex}, result is dense */
mkl_sparse_s_syprd :: (op: sparse_operation_t, A: sparse_matrix_t, B: *float, layoutB: sparse_layout_t, ldb: s64, alpha: float, beta: float, C: *float, layoutC: sparse_layout_t, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_syprd :: (op: sparse_operation_t, A: sparse_matrix_t, B: *float64, layoutB: sparse_layout_t, ldb: s64, alpha: float64, beta: float64, C: *float64, layoutC: sparse_layout_t, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_syprd :: (op: sparse_operation_t, A: sparse_matrix_t, B: *MKL_Complex8, layoutB: sparse_layout_t, ldb: s64, alpha: MKL_Complex8, beta: MKL_Complex8, C: *MKL_Complex8, layoutC: sparse_layout_t, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_syprd :: (op: sparse_operation_t, A: sparse_matrix_t, B: *MKL_Complex16, layoutB: sparse_layout_t, ldb: s64, alpha: MKL_Complex16, beta: MKL_Complex16, C: *MKL_Complex16, layoutC: sparse_layout_t, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Computes product of sparse matrices: C = op(A) * B, result is dense   */
mkl_sparse_s_spmmd :: (operation: sparse_operation_t, A: sparse_matrix_t, B: sparse_matrix_t, layout: sparse_layout_t, C: *float, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_spmmd :: (operation: sparse_operation_t, A: sparse_matrix_t, B: sparse_matrix_t, layout: sparse_layout_t, C: *float64, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_spmmd :: (operation: sparse_operation_t, A: sparse_matrix_t, B: sparse_matrix_t, layout: sparse_layout_t, C: *MKL_Complex8, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_spmmd :: (operation: sparse_operation_t, A: sparse_matrix_t, B: sparse_matrix_t, layout: sparse_layout_t, C: *MKL_Complex16, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Computes product of sparse matrices: C = opA(A) * opB(B), result is dense*/
mkl_sparse_s_sp2md :: (transA: sparse_operation_t, descrA: matrix_descr, A: sparse_matrix_t, transB: sparse_operation_t, descrB: matrix_descr, B: sparse_matrix_t, alpha: float, beta: float, C: *float, layout: sparse_layout_t, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_sp2md :: (transA: sparse_operation_t, descrA: matrix_descr, A: sparse_matrix_t, transB: sparse_operation_t, descrB: matrix_descr, B: sparse_matrix_t, alpha: float64, beta: float64, C: *float64, layout: sparse_layout_t, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_sp2md :: (transA: sparse_operation_t, descrA: matrix_descr, A: sparse_matrix_t, transB: sparse_operation_t, descrB: matrix_descr, B: sparse_matrix_t, alpha: MKL_Complex8, beta: MKL_Complex8, C: *MKL_Complex8, layout: sparse_layout_t, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_sp2md :: (transA: sparse_operation_t, descrA: matrix_descr, A: sparse_matrix_t, transB: sparse_operation_t, descrB: matrix_descr, B: sparse_matrix_t, alpha: MKL_Complex16, beta: MKL_Complex16, C: *MKL_Complex16, layout: sparse_layout_t, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

/*   Computes product of sparse matrices: C = op(A) * (op(A))^{T for real or H for complex}, result is dense */
mkl_sparse_s_syrkd :: (operation: sparse_operation_t, A: sparse_matrix_t, alpha: float, beta: float, C: *float, layout: sparse_layout_t, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_syrkd :: (operation: sparse_operation_t, A: sparse_matrix_t, alpha: float64, beta: float64, C: *float64, layout: sparse_layout_t, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_c_syrkd :: (operation: sparse_operation_t, A: sparse_matrix_t, alpha: MKL_Complex8, beta: MKL_Complex8, C: *MKL_Complex8, layout: sparse_layout_t, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_z_syrkd :: (operation: sparse_operation_t, A: sparse_matrix_t, alpha: MKL_Complex16, beta: MKL_Complex16, C: *MKL_Complex16, layout: sparse_layout_t, ldc: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

/* LAPACK specific types */
MKL_C_SELECT_FUNCTION_1 :: #type (a0: *MKL_Complex8) -> s64 #c_call;
MKL_C_SELECT_FUNCTION_2 :: #type (a0: *MKL_Complex8, a1: *MKL_Complex8) -> s64 #c_call;
MKL_D_SELECT_FUNCTION_2 :: #type (a0: *float64, a1: *float64) -> s64 #c_call;
MKL_D_SELECT_FUNCTION_3 :: #type (a0: *float64, a1: *float64, a2: *float64) -> s64 #c_call;
MKL_S_SELECT_FUNCTION_2 :: #type (a0: *float, a1: *float) -> s64 #c_call;
MKL_S_SELECT_FUNCTION_3 :: #type (a0: *float, a1: *float, a2: *float) -> s64 #c_call;
MKL_Z_SELECT_FUNCTION_1 :: #type (a0: *MKL_Complex16) -> s64 #c_call;
MKL_Z_SELECT_FUNCTION_2 :: #type (a0: *MKL_Complex16, a1: *MKL_Complex16) -> s64 #c_call;

CGESVDQ :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, cwork: *MKL_Complex8, lcwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvdq :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, cwork: *MKL_Complex8, lcwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
cgesvdq_ :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, cwork: *MKL_Complex8, lcwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESVDQ :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, work: *float64, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvdq :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, work: *float64, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
dgesvdq_ :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, work: *float64, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESVDQ :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, work: *float, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvdq :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, work: *float, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
sgesvdq_ :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, work: *float, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESVDQ :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, cwork: *MKL_Complex16, lcwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvdq :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, cwork: *MKL_Complex16, lcwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
zgesvdq_ :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, cwork: *MKL_Complex16, lcwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAUNHR_COL_GETRFNP2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

claunhr_col_getrfnp2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;
claunhr_col_getrfnp2_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAUNHR_COL_GETRFNP :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

claunhr_col_getrfnp :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;
claunhr_col_getrfnp_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAORHR_COL_GETRFNP2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaorhr_col_getrfnp2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dlaorhr_col_getrfnp2_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAORHR_COL_GETRFNP :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaorhr_col_getrfnp :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dlaorhr_col_getrfnp_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAORHR_COL_GETRFNP2 :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaorhr_col_getrfnp2 :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
slaorhr_col_getrfnp2_ :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAORHR_COL_GETRFNP :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaorhr_col_getrfnp :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
slaorhr_col_getrfnp_ :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAUNHR_COL_GETRFNP2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaunhr_col_getrfnp2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;
zlaunhr_col_getrfnp2_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAUNHR_COL_GETRFNP :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaunhr_col_getrfnp :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;
zlaunhr_col_getrfnp_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGTSQR :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungtsqr :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
cungtsqr_ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNHR_COL :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunhr_col :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;
cunhr_col_ :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGTSQR :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgtsqr :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
dorgtsqr_ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORHR_COL :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorhr_col :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dorhr_col_ :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGTSQR :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgtsqr :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
sorgtsqr_ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORHR_COL :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorhr_col :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
sorhr_col_ :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGTSQR :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungtsqr :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
zungtsqr_ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNHR_COL :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunhr_col :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;
zunhr_col_ :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELQ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelq :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelq_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELQT :: (m: *s64, n: *s64, mb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelqt :: (m: *s64, n: *s64, mb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelqt_ :: (m: *s64, n: *s64, mb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELQT3 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelqt3 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelqt3_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEMLQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgemlq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgemlq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEMLQT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgemlqt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgemlqt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQR :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqr :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqr_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETSLS :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetsls :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetsls_ :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAMSWLQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clamswlq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clamswlq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAMTSQR :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clamtsqr :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clamtsqr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLASWLQ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claswlq :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claswlq_ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATSQR :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clatsqr :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clatsqr_ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPLQT :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctplqt :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctplqt_ :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPLQT2 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctplqt2 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctplqt2_ :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPMLQT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpmlqt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpmlqt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELQ :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelq :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelq_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELQT :: (m: *s64, n: *s64, mb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelqt :: (m: *s64, n: *s64, mb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelqt_ :: (m: *s64, n: *s64, mb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELQT3 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelqt3 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelqt3_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEMLQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgemlq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgemlq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEMLQT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgemlqt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgemlqt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQR :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqr :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqr_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAMSWLQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlamswlq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlamswlq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAMTSQR :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlamtsqr :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlamtsqr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASWLQ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaswlq :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaswlq_ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATSQR :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatsqr :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatsqr_ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPLQT :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtplqt :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtplqt_ :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPLQT2 :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtplqt2 :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtplqt2_ :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPMLQT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpmlqt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpmlqt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELQ :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelq :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelq_ :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETSLS :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetsls :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetsls_ :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELQT :: (m: *s64, n: *s64, mb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelqt :: (m: *s64, n: *s64, mb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelqt_ :: (m: *s64, n: *s64, mb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELQT3 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelqt3 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelqt3_ :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEMLQT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgemlqt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgemlqt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQR :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqr :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqr_ :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETSLS :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetsls :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetsls_ :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAMTSQR :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slamtsqr :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slamtsqr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASWLQ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaswlq :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaswlq_ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPLQT :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stplqt :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stplqt_ :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STPMLQT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stpmlqt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stpmlqt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELQ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelq :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelq_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEMLQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgemlq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgemlq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAMSWLQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slamswlq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slamswlq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATSQR :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slatsqr :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slatsqr_ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPLQT2 :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stplqt2 :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stplqt2_ :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELQT :: (m: *s64, n: *s64, mb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelqt :: (m: *s64, n: *s64, mb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelqt_ :: (m: *s64, n: *s64, mb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELQT3 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelqt3 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelqt3_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMLQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgemlq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgemlq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMLQT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgemlqt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgemlqt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQR :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqr :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqr_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETSLS :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetsls :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetsls_ :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAMSWLQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlamswlq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlamswlq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAMTSQR :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlamtsqr :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlamtsqr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLASWLQ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaswlq :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaswlq_ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATSQR :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatsqr :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatsqr_ :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPLQT :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztplqt :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztplqt_ :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPLQT2 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztplqt2 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztplqt2_ :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPMLQT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpmlqt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpmlqt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESV_AA :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_aa :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_aa_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRF_AA :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_aa :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_aa_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRS_AA :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_aa :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_aa_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAHEF_AA :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, h: *MKL_Complex8, ldh: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clahef_aa :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, h: *MKL_Complex8, ldh: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clahef_aa_ :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, h: *MKL_Complex8, ldh: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASYF_AA :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *float64, lda: *s64, ipiv: *s64, h: *float64, ldh: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasyf_aa :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *float64, lda: *s64, ipiv: *s64, h: *float64, ldh: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasyf_aa_ :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *float64, lda: *s64, ipiv: *s64, h: *float64, ldh: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSV_AA :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_aa :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_aa_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRF_AA :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_aa :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_aa_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRS_AA :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_aa :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_aa_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASYF_AA :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *float, lda: *s64, ipiv: *s64, h: *float, ldh: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasyf_aa :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *float, lda: *s64, ipiv: *s64, h: *float, ldh: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasyf_aa_ :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *float, lda: *s64, ipiv: *s64, h: *float, ldh: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSV_AA :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_aa :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_aa_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRF_AA :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_aa :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_aa_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRS_AA :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_aa :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_aa_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESV_AA :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_aa :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_aa_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRF_AA :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_aa :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_aa_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRS_AA :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_aa :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_aa_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHEF_AA :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, h: *MKL_Complex16, ldh: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahef_aa :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, h: *MKL_Complex16, ldh: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahef_aa_ :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, h: *MKL_Complex16, ldh: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEMQR :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgemqr :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgemqr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEMQR :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgemqr :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgemqr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEMQR :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgemqr :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgemqr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMQR :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgemqr :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgemqr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHECON_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

checon_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

checon_3_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESV_RK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_rk :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_rk_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETF2_RK :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetf2_rk :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetf2_rk_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRF_RK :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_rk :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_rk_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRI_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri_3_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRI_3X :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri_3x :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri_3x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRS_3 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_3 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_3_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAHEF_RK :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clahef_rk :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clahef_rk_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLARFY :: (uplo: *u8, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfy :: (uplo: *u8, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfy_ :: (uplo: *u8, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLASYF_AA :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, h: *MKL_Complex8, ldh: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clasyf_aa :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, h: *MKL_Complex8, ldh: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clasyf_aa_ :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, h: *MKL_Complex8, ldh: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CLASYF_RK :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clasyf_rk :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clasyf_rk_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYCON_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csycon_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csycon_3_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYCONVF :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csyconvf :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csyconvf_ :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYCONVF_ROOK :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csyconvf_rook :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csyconvf_rook_ :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSV_AA :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_aa :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_aa_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSV_RK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_rk :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_rk_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTF2_RK :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytf2_rk :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytf2_rk_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRF_AA :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_aa :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_aa_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRF_RK :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_rk :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_rk_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRI_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri_3_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRI_3X :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri_3x :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri_3x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRS_3 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_3 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_3_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRS_AA :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_aa :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_aa_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARFY :: (uplo: *u8, n: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlarfy :: (uplo: *u8, n: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlarfy_ :: (uplo: *u8, n: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLASYF_RK :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasyf_rk :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasyf_rk_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYCON_3 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsycon_3 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsycon_3_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYCONVF :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyconvf :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyconvf_ :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYCONVF_ROOK :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyconvf_rook :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyconvf_rook_ :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSV_RK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_rk :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_rk_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTF2_RK :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytf2_rk :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytf2_rk_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRF_RK :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_rk :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_rk_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRI_3 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri_3 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri_3_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRI_3X :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri_3x :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri_3x_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRS_3 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_3 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_3_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARFY :: (uplo: *u8, n: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slarfy :: (uplo: *u8, n: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slarfy_ :: (uplo: *u8, n: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

SLASYF_RK :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasyf_rk :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasyf_rk_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYCON_3 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssycon_3 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssycon_3_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYCONVF :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyconvf :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyconvf_ :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYCONVF_ROOK :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyconvf_rook :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyconvf_rook_ :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSV_RK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_rk :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_rk_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTF2_RK :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytf2_rk :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytf2_rk_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRF_RK :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_rk :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_rk_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRI_3 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri_3 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri_3_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRI_3X :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri_3x :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri_3x_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRS_3 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_3 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_3_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHECON_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhecon_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhecon_3_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESV_RK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_rk :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_rk_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETF2_RK :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetf2_rk :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetf2_rk_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRF_RK :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_rk :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_rk_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRI_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri_3_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRI_3X :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri_3x :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri_3x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRS_3 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_3 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_3_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHEF_RK :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahef_rk :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahef_rk_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLARFY :: (uplo: *u8, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfy :: (uplo: *u8, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfy_ :: (uplo: *u8, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLASYF_AA :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, h: *MKL_Complex16, ldh: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlasyf_aa :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, h: *MKL_Complex16, ldh: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlasyf_aa_ :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, h: *MKL_Complex16, ldh: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLASYF_RK :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlasyf_rk :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlasyf_rk_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYCON_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsycon_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsycon_3_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYCONVF :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyconvf :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyconvf_ :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYCONVF_ROOK :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyconvf_rook :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyconvf_rook_ :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSV_AA :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_aa :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_aa_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSV_RK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_rk :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_rk_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTF2_RK :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytf2_rk :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytf2_rk_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRF_AA :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_aa :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_aa_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRF_RK :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_rk :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_rk_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRI_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri_3 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri_3_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRI_3X :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri_3x :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri_3x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRS_3 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_3 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_3_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRS_AA :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_aa :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_aa_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHB2ST_KERNELS :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *MKL_Complex8, lda: *s64, v: *MKL_Complex8, tau: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

chb2st_kernels :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *MKL_Complex8, lda: *s64, v: *MKL_Complex8, tau: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

chb2st_kernels_ :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *MKL_Complex8, lda: *s64, v: *MKL_Complex8, tau: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CHBEV_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chbev_2stage :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chbev_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBEVD_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbevd_2stage :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbevd_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBEVX_2STAGE :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbevx_2stage :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbevx_2stage_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEV_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cheev_2stage :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cheev_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEVD_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevd_2stage :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevd_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEVR_2STAGE :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevr_2stage :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevr_2stage_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEVX_2STAGE :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevx_2stage :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevx_2stage_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEGV_2STAGE :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chegv_2stage :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chegv_2stage_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRD_2STAGE :: (vect: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, hous2: *MKL_Complex8, lhous2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrd_2stage :: (vect: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, hous2: *MKL_Complex8, lhous2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrd_2stage_ :: (vect: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, hous2: *MKL_Complex8, lhous2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRD_HB2ST :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, hous: *MKL_Complex8, lhous: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrd_hb2st :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, hous: *MKL_Complex8, lhous: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrd_hb2st_ :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, hous: *MKL_Complex8, lhous: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRD_HE2HB :: (uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex8, lda: *s64, ab: *MKL_Complex8, ldab: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrd_he2hb :: (uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex8, lda: *s64, ab: *MKL_Complex8, ldab: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrd_he2hb_ :: (uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex8, lda: *s64, ab: *MKL_Complex8, ldab: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSB2ST_KERNELS :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *float64, lda: *s64, v: *float64, tau: *float64, ldvt: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dsb2st_kernels :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *float64, lda: *s64, v: *float64, tau: *float64, ldvt: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dsb2st_kernels_ :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *float64, lda: *s64, v: *float64, tau: *float64, ldvt: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

DSBEV_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbev_2stage :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbev_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBEVD_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbevd_2stage :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbevd_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBEVX_2STAGE :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbevx_2stage :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbevx_2stage_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEV_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyev_2stage :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyev_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEVD_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevd_2stage :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevd_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEVR_2STAGE :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevr_2stage :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevr_2stage_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEVX_2STAGE :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevx_2stage :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevx_2stage_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYGV_2STAGE :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygv_2stage :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygv_2stage_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRD_2STAGE :: (vect: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, hous2: *float64, lhous2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrd_2stage :: (vect: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, hous2: *float64, lhous2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrd_2stage_ :: (vect: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, hous2: *float64, lhous2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRD_SB2ST :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, hous: *float64, lhous: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrd_sb2st :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, hous: *float64, lhous: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrd_sb2st_ :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, hous: *float64, lhous: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRD_SY2SB :: (uplo: *u8, n: *s64, kd: *s64, a: *float64, lda: *s64, ab: *float64, ldab: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrd_sy2sb :: (uplo: *u8, n: *s64, kd: *s64, a: *float64, lda: *s64, ab: *float64, ldab: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrd_sy2sb_ :: (uplo: *u8, n: *s64, kd: *s64, a: *float64, lda: *s64, ab: *float64, ldab: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

IPARAM2STAGE :: (ispec: *s64, name: *u8, opts: *u8, ni: *s64, nbi: *s64, ibi: *s64, nxi: *s64) -> s64 #foreign mkl_intel_ilp64;

iparam2stage :: (ispec: *s64, name: *u8, opts: *u8, ni: *s64, nbi: *s64, ibi: *s64, nxi: *s64) -> s64 #foreign mkl_intel_ilp64;

iparam2stage_ :: (ispec: *s64, name: *u8, opts: *u8, ni: *s64, nbi: *s64, ibi: *s64, nxi: *s64) -> s64 #foreign mkl_intel_ilp64;

SSB2ST_KERNELS :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *float, lda: *s64, v: *float, tau: *float, ldvt: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

ssb2st_kernels :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *float, lda: *s64, v: *float, tau: *float, ldvt: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

ssb2st_kernels_ :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *float, lda: *s64, v: *float, tau: *float, ldvt: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

SSBEV_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbev_2stage :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbev_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBEVD_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbevd_2stage :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbevd_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBEVX_2STAGE :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbevx_2stage :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbevx_2stage_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEV_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyev_2stage :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyev_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEVD_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevd_2stage :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevd_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEVR_2STAGE :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevr_2stage :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevr_2stage_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEVX_2STAGE :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevx_2stage :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevx_2stage_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYGV_2STAGE :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygv_2stage :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygv_2stage_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRD_2STAGE :: (vect: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, hous2: *float, lhous2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrd_2stage :: (vect: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, hous2: *float, lhous2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrd_2stage_ :: (vect: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, hous2: *float, lhous2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRD_SB2ST :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, d: *float, e: *float, hous: *float, lhous: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrd_sb2st :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, d: *float, e: *float, hous: *float, lhous: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrd_sb2st_ :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, d: *float, e: *float, hous: *float, lhous: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRD_SY2SB :: (uplo: *u8, n: *s64, kd: *s64, a: *float, lda: *s64, ab: *float, ldab: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrd_sy2sb :: (uplo: *u8, n: *s64, kd: *s64, a: *float, lda: *s64, ab: *float, ldab: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrd_sy2sb_ :: (uplo: *u8, n: *s64, kd: *s64, a: *float, lda: *s64, ab: *float, ldab: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHB2ST_KERNELS :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *MKL_Complex16, lda: *s64, v: *MKL_Complex16, tau: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zhb2st_kernels :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *MKL_Complex16, lda: *s64, v: *MKL_Complex16, tau: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zhb2st_kernels_ :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *MKL_Complex16, lda: *s64, v: *MKL_Complex16, tau: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZHBEV_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbev_2stage :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbev_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBEVD_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbevd_2stage :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbevd_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBEVX_2STAGE :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbevx_2stage :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbevx_2stage_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEV_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheev_2stage :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheev_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEVD_2STAGE :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevd_2stage :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevd_2stage_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEVR_2STAGE :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevr_2stage :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevr_2stage_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEVX_2STAGE :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevx_2stage :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevx_2stage_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEGV_2STAGE :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegv_2stage :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegv_2stage_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRD_2STAGE :: (vect: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, hous2: *MKL_Complex16, lhous2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrd_2stage :: (vect: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, hous2: *MKL_Complex16, lhous2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrd_2stage_ :: (vect: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, hous2: *MKL_Complex16, lhous2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRD_HB2ST :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, hous: *MKL_Complex16, lhous: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrd_hb2st :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, hous: *MKL_Complex16, lhous: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrd_hb2st_ :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, hous: *MKL_Complex16, lhous: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRD_HE2HB :: (uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex16, lda: *s64, ab: *MKL_Complex16, ldab: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrd_he2hb :: (uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex16, lda: *s64, ab: *MKL_Complex16, ldab: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrd_he2hb_ :: (uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex16, lda: *s64, ab: *MKL_Complex16, ldab: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_CGETRFNP :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_cgetrfnp :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_cgetrfnp_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_DGETRFNP :: (m: *s64, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dgetrfnp :: (m: *s64, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dgetrfnp_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_SGETRFNP :: (m: *s64, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_sgetrfnp :: (m: *s64, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_sgetrfnp_ :: (m: *s64, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_ZGETRFNP :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_zgetrfnp :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_zgetrfnp_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_CGETRINP :: (n: *s64, a: *MKL_Complex8, lda: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_cgetrinp :: (n: *s64, a: *MKL_Complex8, lda: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_cgetrinp_ :: (n: *s64, a: *MKL_Complex8, lda: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_DGETRINP :: (n: *s64, a: *float64, lda: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dgetrinp :: (n: *s64, a: *float64, lda: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dgetrinp_ :: (n: *s64, a: *float64, lda: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_SGETRINP :: (n: *s64, a: *float, lda: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_sgetrinp :: (n: *s64, a: *float, lda: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_sgetrinp_ :: (n: *s64, a: *float, lda: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_ZGETRINP :: (n: *s64, a: *MKL_Complex16, lda: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_zgetrinp :: (n: *s64, a: *MKL_Complex16, lda: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_zgetrinp_ :: (n: *s64, a: *MKL_Complex16, lda: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRF_AA_2STAGE :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_aa_2stage :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_aa_2stage_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESV_AA_2STAGE :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_aa_2stage :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_aa_2stage_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRF_AA_2STAGE :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_aa_2stage :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_aa_2stage_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRS_AA_2STAGE :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_aa_2stage :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_aa_2stage_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSV_AA_2STAGE :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_aa_2stage :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_aa_2stage_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRF_AA_2STAGE :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_aa_2stage :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_aa_2stage_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRS_AA_2STAGE :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_aa_2stage :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_aa_2stage_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESV_AA_2STAGE :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_aa_2stage :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_aa_2stage_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRF_AA_2STAGE :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_aa_2stage :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_aa_2stage_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRS_AA_2STAGE :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_aa_2stage :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_aa_2stage_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSV_AA_2STAGE :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_aa_2stage :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_aa_2stage_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRF_AA_2STAGE :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_aa_2stage :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_aa_2stage_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRS_AA_2STAGE :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_aa_2stage :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_aa_2stage_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRS_AA_2STAGE :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_aa_2stage :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_aa_2stage_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSV_AA_2STAGE :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_aa_2stage :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_aa_2stage_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSV_AA_2STAGE :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_aa_2stage :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_aa_2stage_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRS_AA_2STAGE :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_aa_2stage :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_aa_2stage_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRF_AA_2STAGE :: (uplo: *u8, n: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_aa_2stage :: (uplo: *u8, n: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_aa_2stage_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTREVC3 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrevc3 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrevc3_ :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STREVC3 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strevc3 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strevc3_ :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTREVC3 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrevc3 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrevc3_ :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTREVC3 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrevc3 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrevc3_ :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRF_BATCH_STRIDED :: (m: *s64, n: *s64, a: *float, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrf_batch_strided :: (m: *s64, n: *s64, a: *float, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrf_batch_strided_ :: (m: *s64, n: *s64, a: *float, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRF_BATCH_STRIDED :: (m: *s64, n: *s64, a: *float64, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrf_batch_strided :: (m: *s64, n: *s64, a: *float64, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrf_batch_strided_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRF_BATCH_STRIDED :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrf_batch_strided :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrf_batch_strided_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRF_BATCH_STRIDED :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrf_batch_strided :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrf_batch_strided_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRS_BATCH_STRIDED :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *float, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrs_batch_strided :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *float, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrs_batch_strided_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *float, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRS_BATCH_STRIDED :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *float64, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrs_batch_strided :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *float64, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrs_batch_strided_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *float64, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRS_BATCH_STRIDED :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *MKL_Complex8, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrs_batch_strided :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *MKL_Complex8, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrs_batch_strided_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *MKL_Complex8, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRS_BATCH_STRIDED :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *MKL_Complex16, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrs_batch_strided :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *MKL_Complex16, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrs_batch_strided_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *MKL_Complex16, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRFNP_BATCH_STRIDED :: (m: *s64, n: *s64, a: *float, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrfnp_batch_strided :: (m: *s64, n: *s64, a: *float, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrfnp_batch_strided_ :: (m: *s64, n: *s64, a: *float, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRFNP_BATCH_STRIDED :: (m: *s64, n: *s64, a: *float64, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrfnp_batch_strided :: (m: *s64, n: *s64, a: *float64, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrfnp_batch_strided_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRFNP_BATCH_STRIDED :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrfnp_batch_strided :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrfnp_batch_strided_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRFNP_BATCH_STRIDED :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrfnp_batch_strided :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrfnp_batch_strided_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRSNP_BATCH_STRIDED :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, stride_a: *s64, b: *float, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrsnp_batch_strided :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, stride_a: *s64, b: *float, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrsnp_batch_strided_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, stride_a: *s64, b: *float, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRSNP_BATCH_STRIDED :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, stride_a: *s64, b: *float64, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrsnp_batch_strided :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, stride_a: *s64, b: *float64, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrsnp_batch_strided_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, stride_a: *s64, b: *float64, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRSNP_BATCH_STRIDED :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, b: *MKL_Complex8, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrsnp_batch_strided :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, b: *MKL_Complex8, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrsnp_batch_strided_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, b: *MKL_Complex8, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRSNP_BATCH_STRIDED :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, b: *MKL_Complex16, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrsnp_batch_strided :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, b: *MKL_Complex16, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrsnp_batch_strided_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, b: *MKL_Complex16, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRF_BATCH :: (m: *s64, n: *s64, a: **float64, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrf_batch :: (m: *s64, n: *s64, a: **float64, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrf_batch_ :: (m: *s64, n: *s64, a: **float64, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRF_BATCH :: (m: *s64, n: *s64, a: **float, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrf_batch :: (m: *s64, n: *s64, a: **float, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrf_batch_ :: (m: *s64, n: *s64, a: **float, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRF_BATCH :: (m: *s64, n: *s64, a: **MKL_Complex8, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrf_batch :: (m: *s64, n: *s64, a: **MKL_Complex8, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrf_batch_ :: (m: *s64, n: *s64, a: **MKL_Complex8, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRF_BATCH :: (m: *s64, n: *s64, a: **MKL_Complex16, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrf_batch :: (m: *s64, n: *s64, a: **MKL_Complex16, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrf_batch_ :: (m: *s64, n: *s64, a: **MKL_Complex16, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRI_OOP_BATCH_STRIDED :: (n: *s64, a: *float, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *float, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetri_oop_batch_strided :: (n: *s64, a: *float, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *float, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetri_oop_batch_strided_ :: (n: *s64, a: *float, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *float, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRI_OOP_BATCH_STRIDED :: (n: *s64, a: *float64, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *float64, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetri_oop_batch_strided :: (n: *s64, a: *float64, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *float64, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetri_oop_batch_strided_ :: (n: *s64, a: *float64, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *float64, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRI_OOP_BATCH_STRIDED :: (n: *s64, a: *MKL_Complex8, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *MKL_Complex8, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetri_oop_batch_strided :: (n: *s64, a: *MKL_Complex8, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *MKL_Complex8, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetri_oop_batch_strided_ :: (n: *s64, a: *MKL_Complex8, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *MKL_Complex8, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRI_OOP_BATCH_STRIDED :: (n: *s64, a: *MKL_Complex16, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *MKL_Complex16, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetri_oop_batch_strided :: (n: *s64, a: *MKL_Complex16, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *MKL_Complex16, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetri_oop_batch_strided_ :: (n: *s64, a: *MKL_Complex16, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *MKL_Complex16, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRI_OOP_BATCH :: (n: *s64, a: **float, lda: *s64, ipiv: **s64, ainv: **float, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetri_oop_batch :: (n: *s64, a: **float, lda: *s64, ipiv: **s64, ainv: **float, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetri_oop_batch_ :: (n: *s64, a: **float, lda: *s64, ipiv: **s64, ainv: **float, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRI_OOP_BATCH :: (n: *s64, a: **float64, lda: *s64, ipiv: **s64, ainv: **float64, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetri_oop_batch :: (n: *s64, a: **float64, lda: *s64, ipiv: **s64, ainv: **float64, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetri_oop_batch_ :: (n: *s64, a: **float64, lda: *s64, ipiv: **s64, ainv: **float64, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRI_OOP_BATCH :: (n: *s64, a: **MKL_Complex8, lda: *s64, ipiv: **s64, ainv: **MKL_Complex8, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetri_oop_batch :: (n: *s64, a: **MKL_Complex8, lda: *s64, ipiv: **s64, ainv: **MKL_Complex8, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetri_oop_batch_ :: (n: *s64, a: **MKL_Complex8, lda: *s64, ipiv: **s64, ainv: **MKL_Complex8, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRI_OOP_BATCH :: (n: *s64, a: **MKL_Complex16, lda: *s64, ipiv: **s64, ainv: **MKL_Complex16, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetri_oop_batch :: (n: *s64, a: **MKL_Complex16, lda: *s64, ipiv: **s64, ainv: **MKL_Complex16, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetri_oop_batch_ :: (n: *s64, a: **MKL_Complex16, lda: *s64, ipiv: **s64, ainv: **MKL_Complex16, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/* LAPACK 3.6.0 routines */
CGEJSV :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, sva: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, cwork: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgejsv :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, sva: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, cwork: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgejsv_ :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, sva: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, cwork: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEJSV :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sva: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, cwork: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgejsv :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sva: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, cwork: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgejsv_ :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sva: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, cwork: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESVDX :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvdx :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvdx_ :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESVDX :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvdx :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvdx_ :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESVDX :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvdx :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvdx_ :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESVDX :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvdx :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvdx_ :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESVJ :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, cwork: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvj :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, cwork: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvj_ :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, cwork: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESVJ :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, cwork: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvj :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, cwork: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvj_ :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, cwork: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGSVD3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggsvd3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggsvd3_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGSVD3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggsvd3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggsvd3_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGSVD3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggsvd3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggsvd3_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGSVD3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggsvd3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggsvd3_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGSVP3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, iwork: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggsvp3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, iwork: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggsvp3_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, iwork: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGSVP3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, iwork: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggsvp3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, iwork: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggsvp3_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, iwork: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGSVP3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, iwork: *s64, rwork: *float, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggsvp3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, iwork: *s64, rwork: *float, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggsvp3_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, iwork: *s64, rwork: *float, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGSVP3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, iwork: *s64, rwork: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggsvp3 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, iwork: *s64, rwork: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggsvp3_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, iwork: *s64, rwork: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGSVJ0 :: (jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgsvj0 :: (jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgsvj0_ :: (jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGSVJ0 :: (jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgsvj0 :: (jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgsvj0_ :: (jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGSVJ1 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgsvj1 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgsvj1_ :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGSVJ1 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgsvj1 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgsvj1_ :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOTRF2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotrf2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotrf2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOTRF2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotrf2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotrf2_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOTRF2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spotrf2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
spotrf2_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOTRF2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotrf2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotrf2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DBDSVDX :: (uplo: *u8, jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dbdsvdx :: (uplo: *u8, jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dbdsvdx_ :: (uplo: *u8, jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SBDSVDX :: (uplo: *u8, jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sbdsvdx :: (uplo: *u8, jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sbdsvdx_ :: (uplo: *u8, jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRF2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrf2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrf2_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRF2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrf2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrf2_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRF2 :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrf2 :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrf2_ :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRF2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrf2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrf2_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGEV3 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cggev3 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cggev3_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGEV3 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggev3 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggev3_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGEV3 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggev3 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggev3_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGEV3 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggev3 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggev3_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNM22 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *MKL_Complex8, ldq: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunm22 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *MKL_Complex8, ldq: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunm22_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *MKL_Complex8, ldq: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNM22 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *MKL_Complex16, ldq: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunm22 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *MKL_Complex16, ldq: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunm22_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *MKL_Complex16, ldq: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGHD3 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgghd3 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgghd3_ :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGHD3 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgghd3 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgghd3_ :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGHD3 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgghd3 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgghd3_ :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGHD3 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgghd3 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgghd3_ :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGES3 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgges3 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgges3_ :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGES3 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgges3 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgges3_ :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGES3 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgges3 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgges3_ :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGES3 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgges3 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgges3_ :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORM22 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *float64, ldq: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorm22 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *float64, ldq: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorm22_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *float64, ldq: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORM22 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *float, ldq: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorm22 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *float, ldq: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorm22_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *float, ldq: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/* LAPACK 3.5.0 routines */
CHECON_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

checon_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

checon_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESV_ROOK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_rook :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_rook_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETF2_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetf2_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetf2_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRF_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRI_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRS_ROOK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_rook :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_rook_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAHEF_ROOK :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clahef_rook :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clahef_rook_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLASYF_ROOK :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clasyf_rook :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clasyf_rook_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYCON_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csycon_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csycon_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSV_ROOK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_rook :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_rook_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTF2_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytf2_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytf2_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRF_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRI_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRS_ROOK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_rook :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_rook_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASYF_ROOK :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasyf_rook :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasyf_rook_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYCON_ROOK :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsycon_rook :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsycon_rook_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSV_ROOK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_rook :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_rook_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTF2_ROOK :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytf2_rook :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytf2_rook_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRF_ROOK :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_rook :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_rook_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRI_ROOK :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri_rook :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri_rook_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRS_ROOK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_rook :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_rook_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASYF_ROOK :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasyf_rook :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasyf_rook_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYCON_ROOK :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssycon_rook :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssycon_rook_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSV_ROOK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_rook :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_rook_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTF2_ROOK :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytf2_rook :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytf2_rook_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRF_ROOK :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_rook :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_rook_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRI_ROOK :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri_rook :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri_rook_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRS_ROOK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_rook :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_rook_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHECON_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhecon_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhecon_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESV_ROOK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_rook :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_rook_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETF2_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetf2_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetf2_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRF_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRI_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRS_ROOK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_rook :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_rook_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHEF_ROOK :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahef_rook :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahef_rook_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLASYF_ROOK :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlasyf_rook :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlasyf_rook_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYCON_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsycon_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsycon_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSV_ROOK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_rook :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_rook_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTF2_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytf2_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytf2_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRF_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRI_ROOK :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri_rook :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri_rook_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRS_ROOK :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_rook :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_rook_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB1 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb1 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb1_ :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB2 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb2 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb2_ :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB3 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb3 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb3_ :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB4 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, phantom: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb4 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, phantom: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb4_ :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, phantom: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB5 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, q1: *MKL_Complex8, ldq1: *s64, q2: *MKL_Complex8, ldq2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb5 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, q1: *MKL_Complex8, ldq1: *s64, q2: *MKL_Complex8, ldq2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb5_ :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, q1: *MKL_Complex8, ldq1: *s64, q2: *MKL_Complex8, ldq2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB6 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, q1: *MKL_Complex8, ldq1: *s64, q2: *MKL_Complex8, ldq2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb6 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, q1: *MKL_Complex8, ldq1: *s64, q2: *MKL_Complex8, ldq2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb6_ :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, q1: *MKL_Complex8, ldq1: *s64, q2: *MKL_Complex8, ldq2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNCSD2BY1 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cuncsd2by1 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cuncsd2by1_ :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB1 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb1 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb1_ :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB2 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb2 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb2_ :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB3 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb3 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb3_ :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB4 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, phantom: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb4 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, phantom: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb4_ :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, phantom: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB5 :: (m1: *s64, m2: *s64, n: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, q1: *float64, ldq1: *s64, q2: *float64, ldq2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb5 :: (m1: *s64, m2: *s64, n: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, q1: *float64, ldq1: *s64, q2: *float64, ldq2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb5_ :: (m1: *s64, m2: *s64, n: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, q1: *float64, ldq1: *s64, q2: *float64, ldq2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB6 :: (m1: *s64, m2: *s64, n: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, q1: *float64, ldq1: *s64, q2: *float64, ldq2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb6 :: (m1: *s64, m2: *s64, n: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, q1: *float64, ldq1: *s64, q2: *float64, ldq2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb6_ :: (m1: *s64, m2: *s64, n: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, q1: *float64, ldq1: *s64, q2: *float64, ldq2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORCSD2BY1 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorcsd2by1 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorcsd2by1_ :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB1 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb1 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb1_ :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB2 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb2 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb2_ :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB3 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb3 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb3_ :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB4 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, phantom: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb4 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, phantom: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb4_ :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, phantom: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB5 :: (m1: *s64, m2: *s64, n: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, q1: *float, ldq1: *s64, q2: *float, ldq2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb5 :: (m1: *s64, m2: *s64, n: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, q1: *float, ldq1: *s64, q2: *float, ldq2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb5_ :: (m1: *s64, m2: *s64, n: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, q1: *float, ldq1: *s64, q2: *float, ldq2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB6 :: (m1: *s64, m2: *s64, n: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, q1: *float, ldq1: *s64, q2: *float, ldq2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb6 :: (m1: *s64, m2: *s64, n: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, q1: *float, ldq1: *s64, q2: *float, ldq2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb6_ :: (m1: *s64, m2: *s64, n: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, q1: *float, ldq1: *s64, q2: *float, ldq2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORCSD2BY1 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorcsd2by1 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorcsd2by1_ :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB1 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb1 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb1_ :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB2 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb2 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb2_ :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB3 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb3 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb3_ :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB4 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, phantom: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb4 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, phantom: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb4_ :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, phantom: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB5 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, q1: *MKL_Complex16, ldq1: *s64, q2: *MKL_Complex16, ldq2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb5 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, q1: *MKL_Complex16, ldq1: *s64, q2: *MKL_Complex16, ldq2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb5_ :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, q1: *MKL_Complex16, ldq1: *s64, q2: *MKL_Complex16, ldq2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB6 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, q1: *MKL_Complex16, ldq1: *s64, q2: *MKL_Complex16, ldq2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb6 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, q1: *MKL_Complex16, ldq1: *s64, q2: *MKL_Complex16, ldq2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb6_ :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, q1: *MKL_Complex16, ldq1: *s64, q2: *MKL_Complex16, ldq2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNCSD2BY1 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zuncsd2by1 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zuncsd2by1_ :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/* LAPACK 3.4.0 routines */
CGEMQRT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgemqrt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgemqrt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEMQRT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgemqrt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgemqrt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEMQRT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgemqrt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgemqrt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMQRT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgemqrt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgemqrt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQRT :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrt :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrt_ :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQRT :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrt :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrt_ :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQRT :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrt :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrt_ :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQRT :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrt :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrt_ :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQRT3 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrt3 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrt3_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQRT3 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrt3 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrt3_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQRT3 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrt3 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrt3_ :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQRT3 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrt3 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrt3_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPMQRT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpmqrt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpmqrt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPMQRT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpmqrt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpmqrt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPMQRT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stpmqrt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stpmqrt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPMQRT :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpmqrt :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpmqrt_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPQRT :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpqrt :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpqrt_ :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPQRT :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpqrt :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpqrt_ :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPQRT :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stpqrt :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stpqrt_ :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPQRT :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpqrt :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpqrt_ :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPQRT2 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpqrt2 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpqrt2_ :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPQRT2 :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpqrt2 :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpqrt2_ :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPQRT2 :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stpqrt2 :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stpqrt2_ :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPQRT2 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpqrt2 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpqrt2_ :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/* LAPACK 3.3.0 routines */
CBBCSD :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float, phi: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, v2t: *MKL_Complex8, ldv2t: *s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cbbcsd :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float, phi: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, v2t: *MKL_Complex8, ldv2t: *s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cbbcsd_ :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float, phi: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, v2t: *MKL_Complex8, ldv2t: *s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZBBCSD :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float64, phi: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, v2t: *MKL_Complex16, ldv2t: *s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zbbcsd :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float64, phi: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, v2t: *MKL_Complex16, ldv2t: *s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zbbcsd_ :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float64, phi: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, v2t: *MKL_Complex16, ldv2t: *s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SBBCSD :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float, phi: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, v2t: *float, ldv2t: *s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sbbcsd :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float, phi: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, v2t: *float, ldv2t: *s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sbbcsd_ :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float, phi: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, v2t: *float, ldv2t: *s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DBBCSD :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float64, phi: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, v2t: *float64, ldv2t: *s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dbbcsd :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float64, phi: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, v2t: *float64, ldv2t: *s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dbbcsd_ :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float64, phi: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, v2t: *float64, ldv2t: *s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex8, ldx11: *s64, x12: *MKL_Complex8, ldx12: *s64, x21: *MKL_Complex8, ldx21: *s64, x22: *MKL_Complex8, ldx22: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, tauq2: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex8, ldx11: *s64, x12: *MKL_Complex8, ldx12: *s64, x21: *MKL_Complex8, ldx21: *s64, x22: *MKL_Complex8, ldx22: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, tauq2: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb_ :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex8, ldx11: *s64, x12: *MKL_Complex8, ldx12: *s64, x21: *MKL_Complex8, ldx21: *s64, x22: *MKL_Complex8, ldx22: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, tauq2: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex16, ldx11: *s64, x12: *MKL_Complex16, ldx12: *s64, x21: *MKL_Complex16, ldx21: *s64, x22: *MKL_Complex16, ldx22: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, tauq2: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex16, ldx11: *s64, x12: *MKL_Complex16, ldx12: *s64, x21: *MKL_Complex16, ldx21: *s64, x22: *MKL_Complex16, ldx22: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, tauq2: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb_ :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex16, ldx11: *s64, x12: *MKL_Complex16, ldx12: *s64, x21: *MKL_Complex16, ldx21: *s64, x22: *MKL_Complex16, ldx22: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, tauq2: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float, ldx11: *s64, x12: *float, ldx12: *s64, x21: *float, ldx21: *s64, x22: *float, ldx22: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, tauq2: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float, ldx11: *s64, x12: *float, ldx12: *s64, x21: *float, ldx21: *s64, x22: *float, ldx22: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, tauq2: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb_ :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float, ldx11: *s64, x12: *float, ldx12: *s64, x21: *float, ldx21: *s64, x22: *float, ldx22: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, tauq2: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float64, ldx11: *s64, x12: *float64, ldx12: *s64, x21: *float64, ldx21: *s64, x22: *float64, ldx22: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, tauq2: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float64, ldx11: *s64, x12: *float64, ldx12: *s64, x21: *float64, ldx21: *s64, x22: *float64, ldx22: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, tauq2: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb_ :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float64, ldx11: *s64, x12: *float64, ldx12: *s64, x21: *float64, ldx21: *s64, x22: *float64, ldx22: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, tauq2: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNCSD :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex8, ldx11: *s64, x12: *MKL_Complex8, ldx12: *s64, x21: *MKL_Complex8, ldx21: *s64, x22: *MKL_Complex8, ldx22: *s64, theta: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, v2t: *MKL_Complex8, ldv2t: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cuncsd :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex8, ldx11: *s64, x12: *MKL_Complex8, ldx12: *s64, x21: *MKL_Complex8, ldx21: *s64, x22: *MKL_Complex8, ldx22: *s64, theta: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, v2t: *MKL_Complex8, ldv2t: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cuncsd_ :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex8, ldx11: *s64, x12: *MKL_Complex8, ldx12: *s64, x21: *MKL_Complex8, ldx21: *s64, x22: *MKL_Complex8, ldx22: *s64, theta: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, v2t: *MKL_Complex8, ldv2t: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNCSD :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex16, ldx11: *s64, x12: *MKL_Complex16, ldx12: *s64, x21: *MKL_Complex16, ldx21: *s64, x22: *MKL_Complex16, ldx22: *s64, theta: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, v2t: *MKL_Complex16, ldv2t: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zuncsd :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex16, ldx11: *s64, x12: *MKL_Complex16, ldx12: *s64, x21: *MKL_Complex16, ldx21: *s64, x22: *MKL_Complex16, ldx22: *s64, theta: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, v2t: *MKL_Complex16, ldv2t: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zuncsd_ :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex16, ldx11: *s64, x12: *MKL_Complex16, ldx12: *s64, x21: *MKL_Complex16, ldx21: *s64, x22: *MKL_Complex16, ldx22: *s64, theta: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, v2t: *MKL_Complex16, ldv2t: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORCSD :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float, ldx11: *s64, x12: *float, ldx12: *s64, x21: *float, ldx21: *s64, x22: *float, ldx22: *s64, theta: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, v2t: *float, ldv2t: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorcsd :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float, ldx11: *s64, x12: *float, ldx12: *s64, x21: *float, ldx21: *s64, x22: *float, ldx22: *s64, theta: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, v2t: *float, ldv2t: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorcsd_ :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float, ldx11: *s64, x12: *float, ldx12: *s64, x21: *float, ldx21: *s64, x22: *float, ldx22: *s64, theta: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, v2t: *float, ldv2t: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORCSD :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float64, ldx11: *s64, x12: *float64, ldx12: *s64, x21: *float64, ldx21: *s64, x22: *float64, ldx22: *s64, theta: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, v2t: *float64, ldv2t: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorcsd :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float64, ldx11: *s64, x12: *float64, ldx12: *s64, x21: *float64, ldx21: *s64, x22: *float64, ldx22: *s64, theta: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, v2t: *float64, ldv2t: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorcsd_ :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float64, ldx11: *s64, x12: *float64, ldx12: *s64, x21: *float64, ldx21: *s64, x22: *float64, ldx22: *s64, theta: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, v2t: *float64, ldv2t: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAPMR :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex8, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

clapmr :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex8, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

clapmr_ :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex8, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

DLAPMR :: (forwrd: *s64, m: *s64, n: *s64, x: *float64, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

dlapmr :: (forwrd: *s64, m: *s64, n: *s64, x: *float64, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

dlapmr_ :: (forwrd: *s64, m: *s64, n: *s64, x: *float64, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

ZLAPMR :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex16, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

zlapmr :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex16, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

zlapmr_ :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex16, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

SLAPMR :: (forwrd: *s64, m: *s64, n: *s64, x: *float, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

slapmr :: (forwrd: *s64, m: *s64, n: *s64, x: *float, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

slapmr_ :: (forwrd: *s64, m: *s64, n: *s64, x: *float, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

CSYCONV :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, e: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csyconv :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, e: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csyconv_ :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, e: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYCONV :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, e: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyconv :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, e: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyconv_ :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, e: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYCONV :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyconv :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyconv_ :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYCONV :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyconv :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyconv_ :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSWAPR :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

csyswapr :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

csyswapr_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSWAPR :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

zsyswapr :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

zsyswapr_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

SSYSWAPR :: (uplo: *u8, n: *s64, a: *float, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

ssyswapr :: (uplo: *u8, n: *s64, a: *float, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

ssyswapr_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

DSYSWAPR :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

dsyswapr :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

dsyswapr_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRI2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRI2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRI2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri2_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRI2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri2_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRI2X :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri2x :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri2x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRI2X :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri2x :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri2x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRI2X :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri2x :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri2x_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRI2X :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri2x :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri2x_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARTGP :: (f: *float, g: *float, cs: *float, sn: *float, r: *float) -> void #foreign mkl_intel_ilp64;

slartgp :: (f: *float, g: *float, cs: *float, sn: *float, r: *float) -> void #foreign mkl_intel_ilp64;
slartgp_ :: (f: *float, g: *float, cs: *float, sn: *float, r: *float) -> void #foreign mkl_intel_ilp64;

DLARTGP :: (f: *float64, g: *float64, cs: *float64, sn: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

dlartgp :: (f: *float64, g: *float64, cs: *float64, sn: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
dlartgp_ :: (f: *float64, g: *float64, cs: *float64, sn: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

SLARTGS :: (x: *float, y: *float, sigma: *float, cs: *float, sn: *float) -> void #foreign mkl_intel_ilp64;

slartgs :: (x: *float, y: *float, sigma: *float, cs: *float, sn: *float) -> void #foreign mkl_intel_ilp64;
slartgs_ :: (x: *float, y: *float, sigma: *float, cs: *float, sn: *float) -> void #foreign mkl_intel_ilp64;

DLARTGS :: (x: *float64, y: *float64, sigma: *float64, cs: *float64, sn: *float64) -> void #foreign mkl_intel_ilp64;

dlartgs :: (x: *float64, y: *float64, sigma: *float64, cs: *float64, sn: *float64) -> void #foreign mkl_intel_ilp64;
dlartgs_ :: (x: *float64, y: *float64, sigma: *float64, cs: *float64, sn: *float64) -> void #foreign mkl_intel_ilp64;

CSYTRS2 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs2 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs2_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRS2 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs2 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs2_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRS2 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs2 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs2_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRS2 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs2 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs2_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRS2 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs2 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs2_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRS2 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs2 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs2_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

/* LAPACK 3.2 routines */
CBDSQR :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *MKL_Complex8, ldvt: *s64, u: *MKL_Complex8, ldu: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cbdsqr :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *MKL_Complex8, ldvt: *s64, u: *MKL_Complex8, ldu: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cbdsqr_ :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *MKL_Complex8, ldvt: *s64, u: *MKL_Complex8, ldu: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBBRD :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, pt: *MKL_Complex8, ldpt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbbrd :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, pt: *MKL_Complex8, ldpt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbbrd_ :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, pt: *MKL_Complex8, ldpt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBCON :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbcon :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbcon_ :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBEQUB :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbequb :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbequb_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBEQU :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbequ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbequ_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBRFS :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbrfs :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbrfs_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBRFSX :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbrfsx :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbrfsx_ :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBSV :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbsv :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbsv_ :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBSVX :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbsvx :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbsvx_ :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBSVXX :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbsvxx :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbsvxx_ :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBTF2 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbtf2 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbtf2_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBTRF :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbtrf :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbtrf_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBTRS :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbtrs :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbtrs_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEBAK :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float, m: *s64, v: *MKL_Complex8, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgebak :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float, m: *s64, v: *MKL_Complex8, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgebak_ :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float, m: *s64, v: *MKL_Complex8, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEBAL :: (job: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ilo: *s64, ihi: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgebal :: (job: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ilo: *s64, ihi: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgebal_ :: (job: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ilo: *s64, ihi: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEBD2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgebd2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgebd2_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEBRD :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgebrd :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgebrd_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGECON :: (norm: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgecon :: (norm: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgecon_ :: (norm: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEEQUB :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeequb :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeequb_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEEQU :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeequ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeequ_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEES :: (jobvs: *u8, sort: *u8, select: MKL_C_SELECT_FUNCTION_1, n: *s64, a: *MKL_Complex8, lda: *s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgees :: (jobvs: *u8, sort: *u8, select: MKL_C_SELECT_FUNCTION_1, n: *s64, a: *MKL_Complex8, lda: *s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgees_ :: (jobvs: *u8, sort: *u8, select: MKL_C_SELECT_FUNCTION_1, n: *s64, a: *MKL_Complex8, lda: *s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEESX :: (jobvs: *u8, sort: *u8, select: MKL_C_SELECT_FUNCTION_1, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: *s64, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeesx :: (jobvs: *u8, sort: *u8, select: MKL_C_SELECT_FUNCTION_1, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: *s64, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeesx_ :: (jobvs: *u8, sort: *u8, select: MKL_C_SELECT_FUNCTION_1, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: *s64, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEEV :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeev :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeev_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEEVX :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeevx :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeevx_ :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEGS :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgegs :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgegs_ :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEGV :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgegv :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgegv_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEHD2 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgehd2 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgehd2_ :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEHRD :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgehrd :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgehrd_ :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELQ2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelq2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelq2_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELQF :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelqf :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelqf_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELSD :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelsd :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelsd_ :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELS :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgels :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgels_ :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELSS :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelss :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelss_ :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELSX :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelsx :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelsx_ :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELSY :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelsy :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelsy_ :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQL2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeql2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeql2_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQLF :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqlf :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqlf_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQP3 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqp3 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqp3_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQPF :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqpf :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqpf_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQR2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqr2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqr2_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQR2P :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqr2p :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqr2p_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQRF :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrf :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrf_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQRFP :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrfp :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrfp_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGERFS :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgerfs :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgerfs_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGERFSX :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgerfsx :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgerfsx_ :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGERQ2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgerq2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgerq2_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGERQF :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgerqf :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgerqf_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESC2 :: (n: *s64, a: *MKL_Complex8, lda: *s64, rhs: *MKL_Complex8, ipiv: *s64, jpiv: *s64, scale: *float) -> void #foreign mkl_intel_ilp64;

cgesc2 :: (n: *s64, a: *MKL_Complex8, lda: *s64, rhs: *MKL_Complex8, ipiv: *s64, jpiv: *s64, scale: *float) -> void #foreign mkl_intel_ilp64;

cgesc2_ :: (n: *s64, a: *MKL_Complex8, lda: *s64, rhs: *MKL_Complex8, ipiv: *s64, jpiv: *s64, scale: *float) -> void #foreign mkl_intel_ilp64;

CGESDD :: (jobz: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesdd :: (jobz: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesdd_ :: (jobz: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESVD :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvd :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvd_ :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESV :: (n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesv :: (n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesv_ :: (n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESVX :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvx :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvx_ :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESVXX :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvxx :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvxx_ :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETC2 :: (n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetc2 :: (n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetc2_ :: (n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETF2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetf2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetf2_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRF :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrf :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrf_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_CGETRFNPI :: (m: *s64, n: *s64, nfact: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_cgetrfnpi :: (m: *s64, n: *s64, nfact: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_cgetrfnpi_ :: (m: *s64, n: *s64, nfact: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRI :: (n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetri :: (n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetri_ :: (n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRS :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrs :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrs_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGBAK :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, m: *s64, v: *MKL_Complex8, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggbak :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, m: *s64, v: *MKL_Complex8, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggbak_ :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, m: *s64, v: *MKL_Complex8, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGBAL :: (job: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cggbal :: (job: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cggbal_ :: (job: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGES :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgges :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgges_ :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGESX :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggesx :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggesx_ :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGEV :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cggev :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cggev_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGEVX :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggevx :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggevx_ :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGGLM :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, d: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggglm :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, d: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggglm_ :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, d: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGHRD :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgghrd :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgghrd_ :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGLSE :: (m: *s64, n: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, d: *MKL_Complex8, x: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgglse :: (m: *s64, n: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, d: *MKL_Complex8, x: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgglse_ :: (m: *s64, n: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, d: *MKL_Complex8, x: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGQRF :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, taub: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggqrf :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, taub: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggqrf_ :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, taub: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGRQF :: (m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, taub: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggrqf :: (m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, taub: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggrqf_ :: (m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, taub: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGSVD :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggsvd :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggsvd_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGSVP :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, iwork: *s64, rwork: *float, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cggsvp :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, iwork: *s64, rwork: *float, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cggsvp_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, iwork: *s64, rwork: *float, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTCON :: (norm: *u8, n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgtcon :: (norm: *u8, n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgtcon_ :: (norm: *u8, n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTRFS :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgtrfs :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgtrfs_ :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTSV :: (n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgtsv :: (n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgtsv_ :: (n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTSVX :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgtsvx :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgtsvx_ :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTTRF :: (n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgttrf :: (n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgttrf_ :: (n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTTRS :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgttrs :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgttrs_ :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTTS2 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

cgtts2 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

cgtts2_ :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CHBEVD :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbevd :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbevd_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBEV :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chbev :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chbev_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBEVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbevx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbevx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBGST :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, x: *MKL_Complex8, ldx: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chbgst :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, x: *MKL_Complex8, ldx: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chbgst_ :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, x: *MKL_Complex8, ldx: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBGVD :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbgvd :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbgvd_ :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBGV :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chbgv :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chbgv_ :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBGVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbgvx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbgvx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBTRD :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chbtrd :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chbtrd_ :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHECON :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

checon :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

checon_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEQUB :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cheequb :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cheequb_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEVD :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevd :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevd_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEV :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cheev :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cheev_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEVR :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevr :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevr_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEGS2 :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chegs2 :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chegs2_ :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEGST :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chegst :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chegst_ :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEGVD :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chegvd :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chegvd_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEGV :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chegv :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chegv_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEGVX :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chegvx :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chegvx_ :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHERFS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cherfs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cherfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHERFSX :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cherfsx :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cherfsx_ :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESV :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chesvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chesvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESVXX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chesvxx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chesvxx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETD2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chetd2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chetd2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETF2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetf2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetf2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRD :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrd :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrd_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRF :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRI :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHFRK :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, beta: *float, c: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

chfrk :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, beta: *float, c: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

chfrk_ :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, beta: *float, c: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CHGEQZ :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, t: *MKL_Complex8, ldt: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chgeqz :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, t: *MKL_Complex8, ldt: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chgeqz_ :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, t: *MKL_Complex8, ldt: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHLA_TRANSTYPE :: (ret_val: *u8, ret_val_len: s32, trans: *s64) -> void #foreign mkl_intel_ilp64;

chla_transtype :: (ret_val: *u8, ret_val_len: s32, trans: *s64) -> void #foreign mkl_intel_ilp64;
chla_transtype_ :: (ret_val: *u8, ret_val_len: s32, trans: *s64) -> void #foreign mkl_intel_ilp64;

CHPCON :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chpcon :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chpcon_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPEVD :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpevd :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpevd_ :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPEV :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chpev :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chpev_ :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPEVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpevx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpevx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPGST :: (itype: *s64, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chpgst :: (itype: *s64, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chpgst_ :: (itype: *s64, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPGVD :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpgvd :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpgvd_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPGV :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chpgv :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chpgv_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPGVX :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpgvx :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpgvx_ :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPRFS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chprfs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chprfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPSV :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpsv :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpsv_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chpsvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chpsvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPTRD :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, d: *float, e: *float, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chptrd :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, d: *float, e: *float, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chptrd_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, d: *float, e: *float, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPTRF :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chptrf :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chptrf_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPTRI :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chptri :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chptri_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPTRS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chptrs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chptrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHSEIN :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chsein :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chsein_ :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHSEQR :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chseqr :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chseqr_ :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLABRD :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

clabrd :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

clabrd_ :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

CLACGV :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

clacgv :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;
clacgv_ :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CLACN2 :: (n: *s64, v: *MKL_Complex8, x: *MKL_Complex8, est: *float, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

clacn2 :: (n: *s64, v: *MKL_Complex8, x: *MKL_Complex8, est: *float, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

clacn2_ :: (n: *s64, v: *MKL_Complex8, x: *MKL_Complex8, est: *float, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

CLACON :: (n: *s64, v: *MKL_Complex8, x: *MKL_Complex8, est: *float, kase: *s64) -> void #foreign mkl_intel_ilp64;

clacon :: (n: *s64, v: *MKL_Complex8, x: *MKL_Complex8, est: *float, kase: *s64) -> void #foreign mkl_intel_ilp64;

clacon_ :: (n: *s64, v: *MKL_Complex8, x: *MKL_Complex8, est: *float, kase: *s64) -> void #foreign mkl_intel_ilp64;

CLACP2 :: (uplo: *u8, m: *s64, n: *s64, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

clacp2 :: (uplo: *u8, m: *s64, n: *s64, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

clacp2_ :: (uplo: *u8, m: *s64, n: *s64, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CLACPY :: (uplo: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

clacpy :: (uplo: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

clacpy_ :: (uplo: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CLACRM :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *float, ldb: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float) -> void #foreign mkl_intel_ilp64;

clacrm :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *float, ldb: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float) -> void #foreign mkl_intel_ilp64;

clacrm_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *float, ldb: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float) -> void #foreign mkl_intel_ilp64;

CLACRT :: (n: *s64, cx: *MKL_Complex8, incx: *s64, cy: *MKL_Complex8, incy: *s64, c: *MKL_Complex8, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clacrt :: (n: *s64, cx: *MKL_Complex8, incx: *s64, cy: *MKL_Complex8, incy: *s64, c: *MKL_Complex8, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clacrt_ :: (n: *s64, cx: *MKL_Complex8, incx: *s64, cy: *MKL_Complex8, incy: *s64, c: *MKL_Complex8, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLADIV :: (ret_value: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

cladiv :: (ret_value: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

cladiv_ :: (ret_value: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLAED0 :: (qsiz: *s64, n: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, qstore: *MKL_Complex8, ldqs: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claed0 :: (qsiz: *s64, n: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, qstore: *MKL_Complex8, ldqs: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claed0_ :: (qsiz: *s64, n: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, qstore: *MKL_Complex8, ldqs: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAED7 :: (n: *s64, cutpnt: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float, q: *MKL_Complex8, ldq: *s64, rho: *float, indxq: *s64, qstore: *float, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claed7 :: (n: *s64, cutpnt: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float, q: *MKL_Complex8, ldq: *s64, rho: *float, indxq: *s64, qstore: *float, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claed7_ :: (n: *s64, cutpnt: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float, q: *MKL_Complex8, ldq: *s64, rho: *float, indxq: *s64, qstore: *float, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAED8 :: (k: *s64, n: *s64, qsiz: *s64, q: *MKL_Complex8, ldq: *s64, d: *float, rho: *float, cutpnt: *s64, z: *float, dlamda: *float, q2: *MKL_Complex8, ldq2: *s64, w: *float, indxp: *s64, indx: *s64, indxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

claed8 :: (k: *s64, n: *s64, qsiz: *s64, q: *MKL_Complex8, ldq: *s64, d: *float, rho: *float, cutpnt: *s64, z: *float, dlamda: *float, q2: *MKL_Complex8, ldq2: *s64, w: *float, indxp: *s64, indx: *s64, indxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

claed8_ :: (k: *s64, n: *s64, qsiz: *s64, q: *MKL_Complex8, ldq: *s64, d: *float, rho: *float, cutpnt: *s64, z: *float, dlamda: *float, q2: *MKL_Complex8, ldq2: *s64, w: *float, indxp: *s64, indx: *s64, indxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAEIN :: (rightv: *s64, noinit: *s64, n: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, v: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, rwork: *float, eps3: *float, smlnum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

claein :: (rightv: *s64, noinit: *s64, n: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, v: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, rwork: *float, eps3: *float, smlnum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

claein_ :: (rightv: *s64, noinit: *s64, n: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, v: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, rwork: *float, eps3: *float, smlnum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAESY :: (a: *MKL_Complex8, b: *MKL_Complex8, c: *MKL_Complex8, rt1: *MKL_Complex8, rt2: *MKL_Complex8, evscal: *MKL_Complex8, cs1: *MKL_Complex8, sn1: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

claesy :: (a: *MKL_Complex8, b: *MKL_Complex8, c: *MKL_Complex8, rt1: *MKL_Complex8, rt2: *MKL_Complex8, evscal: *MKL_Complex8, cs1: *MKL_Complex8, sn1: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

claesy_ :: (a: *MKL_Complex8, b: *MKL_Complex8, c: *MKL_Complex8, rt1: *MKL_Complex8, rt2: *MKL_Complex8, evscal: *MKL_Complex8, cs1: *MKL_Complex8, sn1: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLAEV2 :: (a: *MKL_Complex8, b: *MKL_Complex8, c: *MKL_Complex8, rt1: *float, rt2: *float, cs1: *float, sn1: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

claev2 :: (a: *MKL_Complex8, b: *MKL_Complex8, c: *MKL_Complex8, rt1: *float, rt2: *float, cs1: *float, sn1: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

claev2_ :: (a: *MKL_Complex8, b: *MKL_Complex8, c: *MKL_Complex8, rt1: *float, rt2: *float, cs1: *float, sn1: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLAG2Z :: (m: *s64, n: *s64, sa: *MKL_Complex8, ldsa: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clag2z :: (m: *s64, n: *s64, sa: *MKL_Complex8, ldsa: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clag2z_ :: (m: *s64, n: *s64, sa: *MKL_Complex8, ldsa: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAGS2 :: (upper: *s64, a1: *float, a2: *MKL_Complex8, a3: *float, b1: *float, b2: *MKL_Complex8, b3: *float, csu: *float, snu: *MKL_Complex8, csv: *float, snv: *MKL_Complex8, csq: *float, snq: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clags2 :: (upper: *s64, a1: *float, a2: *MKL_Complex8, a3: *float, b1: *float, b2: *MKL_Complex8, b3: *float, csu: *float, snu: *MKL_Complex8, csv: *float, snv: *MKL_Complex8, csq: *float, snq: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clags2_ :: (upper: *s64, a1: *float, a2: *MKL_Complex8, a3: *float, b1: *float, b2: *MKL_Complex8, b3: *float, csu: *float, snu: *MKL_Complex8, csv: *float, snv: *MKL_Complex8, csq: *float, snq: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLAGTM :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, beta: *float, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

clagtm :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, beta: *float, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

clagtm_ :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, beta: *float, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CLAHEF :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clahef :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clahef_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAHQR :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clahqr :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clahqr_ :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAHR2 :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

clahr2 :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

clahr2_ :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

CLAHRD :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

clahrd :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

clahrd_ :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

CLAIC1 :: (job: *s64, j: *s64, x: *MKL_Complex8, sest: *float, w: *MKL_Complex8, gamma: *MKL_Complex8, sestpr: *float, s: *MKL_Complex8, c: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

claic1 :: (job: *s64, j: *s64, x: *MKL_Complex8, sest: *float, w: *MKL_Complex8, gamma: *MKL_Complex8, sestpr: *float, s: *MKL_Complex8, c: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

claic1_ :: (job: *s64, j: *s64, x: *MKL_Complex8, sest: *float, w: *MKL_Complex8, gamma: *MKL_Complex8, sestpr: *float, s: *MKL_Complex8, c: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLALS0 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *MKL_Complex8, ldb: *s64, bx: *MKL_Complex8, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

clals0 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *MKL_Complex8, ldb: *s64, bx: *MKL_Complex8, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

clals0_ :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *MKL_Complex8, ldb: *s64, bx: *MKL_Complex8, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLALSA :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *MKL_Complex8, ldb: *s64, bx: *MKL_Complex8, ldbx: *s64, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clalsa :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *MKL_Complex8, ldb: *s64, bx: *MKL_Complex8, ldbx: *s64, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clalsa_ :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *MKL_Complex8, ldb: *s64, bx: *MKL_Complex8, ldbx: *s64, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLALSD :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float, e: *float, b: *MKL_Complex8, ldb: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clalsd :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float, e: *float, b: *MKL_Complex8, ldb: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clalsd_ :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float, e: *float, b: *MKL_Complex8, ldb: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLANGB :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clangb :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clangb_ :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANGE :: (norm: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clange :: (norm: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clange_ :: (norm: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANGT :: (norm: *u8, n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;

clangt :: (norm: *u8, n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;

clangt_ :: (norm: *u8, n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;

CLANHB :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clanhb :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clanhb_ :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANHE :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clanhe :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clanhe_ :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANHF :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

clanhf :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

clanhf_ :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

CLANHP :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

clanhp :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

clanhp_ :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

CLANHS :: (norm: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clanhs :: (norm: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clanhs_ :: (norm: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANHT :: (norm: *u8, n: *s64, d: *float, e: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;

clanht :: (norm: *u8, n: *s64, d: *float, e: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;

clanht_ :: (norm: *u8, n: *s64, d: *float, e: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;

CLANSB :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clansb :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clansb_ :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANSP :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

clansp :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

clansp_ :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

CLANSY :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clansy :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clansy_ :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANTB :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clantb :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clantb_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANTP :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

clantp :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

clantp_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

CLANTR :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clantr :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clantr_ :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLAPLL :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, ssmin: *float) -> void #foreign mkl_intel_ilp64;

clapll :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, ssmin: *float) -> void #foreign mkl_intel_ilp64;

clapll_ :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, ssmin: *float) -> void #foreign mkl_intel_ilp64;

CLAPMT :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex8, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

clapmt :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex8, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

clapmt_ :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex8, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

CLAQGB :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqgb :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqgb_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQGE :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqge :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqge_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQHB :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqhb :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqhb_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQHE :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqhe :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqhe_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQHP :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqhp :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqhp_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQP2 :: (m: *s64, n: *s64, offset: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, vn1: *float, vn2: *float, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

claqp2 :: (m: *s64, n: *s64, offset: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, vn1: *float, vn2: *float, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

claqp2_ :: (m: *s64, n: *s64, offset: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, vn1: *float, vn2: *float, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLAQPS :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, vn1: *float, vn2: *float, auxv: *MKL_Complex8, f: *MKL_Complex8, ldf: *s64) -> void #foreign mkl_intel_ilp64;

claqps :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, vn1: *float, vn2: *float, auxv: *MKL_Complex8, f: *MKL_Complex8, ldf: *s64) -> void #foreign mkl_intel_ilp64;

claqps_ :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, vn1: *float, vn2: *float, auxv: *MKL_Complex8, f: *MKL_Complex8, ldf: *s64) -> void #foreign mkl_intel_ilp64;

CLAQR0 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqr0 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqr0_ :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAQR1 :: (n: *s64, h: *MKL_Complex8, ldh: *s64, s1: *MKL_Complex8, s2: *MKL_Complex8, v: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

claqr1 :: (n: *s64, h: *MKL_Complex8, ldh: *s64, s1: *MKL_Complex8, s2: *MKL_Complex8, v: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

claqr1_ :: (n: *s64, h: *MKL_Complex8, ldh: *s64, s1: *MKL_Complex8, s2: *MKL_Complex8, v: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLAQR2 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex8, v: *MKL_Complex8, ldv: *s64, nh: *s64, t: *MKL_Complex8, ldt: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, work: *MKL_Complex8, lwork: *s64) -> void #foreign mkl_intel_ilp64;

claqr2 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex8, v: *MKL_Complex8, ldv: *s64, nh: *s64, t: *MKL_Complex8, ldt: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, work: *MKL_Complex8, lwork: *s64) -> void #foreign mkl_intel_ilp64;

claqr2_ :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex8, v: *MKL_Complex8, ldv: *s64, nh: *s64, t: *MKL_Complex8, ldt: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, work: *MKL_Complex8, lwork: *s64) -> void #foreign mkl_intel_ilp64;

CLAQR3 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex8, v: *MKL_Complex8, ldv: *s64, nh: *s64, t: *MKL_Complex8, ldt: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, work: *MKL_Complex8, lwork: *s64) -> void #foreign mkl_intel_ilp64;

claqr3 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex8, v: *MKL_Complex8, ldv: *s64, nh: *s64, t: *MKL_Complex8, ldt: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, work: *MKL_Complex8, lwork: *s64) -> void #foreign mkl_intel_ilp64;

claqr3_ :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex8, v: *MKL_Complex8, ldv: *s64, nh: *s64, t: *MKL_Complex8, ldt: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, work: *MKL_Complex8, lwork: *s64) -> void #foreign mkl_intel_ilp64;

CLAQR4 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqr4 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqr4_ :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAQR5 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, s: *MKL_Complex8, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, v: *MKL_Complex8, ldv: *s64, u: *MKL_Complex8, ldu: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, nh: *s64, wh: *MKL_Complex8, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

claqr5 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, s: *MKL_Complex8, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, v: *MKL_Complex8, ldv: *s64, u: *MKL_Complex8, ldu: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, nh: *s64, wh: *MKL_Complex8, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

claqr5_ :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, s: *MKL_Complex8, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, v: *MKL_Complex8, ldv: *s64, u: *MKL_Complex8, ldu: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, nh: *s64, wh: *MKL_Complex8, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

CLAQSB :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqsb :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqsb_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQSP :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqsp :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqsp_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQSY :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqsy :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqsy_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQZ0 :: (wants: *u8, wantq: *u8, wantz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqz0 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqz0_ :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAQZ1 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, nq: *s64, qstart: *s64, q: *MKL_Complex8, ldq: *s64, nz: *s64, zstart: *s64, z: *MKL_Complex8, ldz: *s64) -> void #foreign mkl_intel_ilp64;

claqz1 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, nq: *s64, qstart: *s64, q: *MKL_Complex8, ldq: *s64, nz: *s64, zstart: *s64, z: *MKL_Complex8, ldz: *s64) -> void #foreign mkl_intel_ilp64;

claqz1_ :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, nq: *s64, qstart: *s64, q: *MKL_Complex8, ldq: *s64, nz: *s64, zstart: *s64, z: *MKL_Complex8, ldz: *s64) -> void #foreign mkl_intel_ilp64;

CLAQZ2 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, qc: *MKL_Complex8, ldqc: *s64, zc: *MKL_Complex8, ldzc: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqz2 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, qc: *MKL_Complex8, ldqc: *s64, zc: *MKL_Complex8, ldzc: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqz2_ :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, qc: *MKL_Complex8, ldqc: *s64, zc: *MKL_Complex8, ldzc: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAQZ3 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, qc: *MKL_Complex8, ldqc: *s64, zc: *MKL_Complex8, ldzc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqz3 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, qc: *MKL_Complex8, ldqc: *s64, zc: *MKL_Complex8, ldzc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqz3_ :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, qc: *MKL_Complex8, ldqc: *s64, zc: *MKL_Complex8, ldzc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAR1V :: (n: *s64, b1: *s64, bn: *s64, lambda: *float, d: *float, l: *float, ld: *float, lld: *float, pivmin: *float, gaptol: *float, z: *MKL_Complex8, wantnc: *s64, negcnt: *s64, ztz: *float, mingma: *float, r: *s64, isuppz: *s64, nrminv: *float, resid: *float, rqcorr: *float, work: *float) -> void #foreign mkl_intel_ilp64;

clar1v :: (n: *s64, b1: *s64, bn: *s64, lambda: *float, d: *float, l: *float, ld: *float, lld: *float, pivmin: *float, gaptol: *float, z: *MKL_Complex8, wantnc: *s64, negcnt: *s64, ztz: *float, mingma: *float, r: *s64, isuppz: *s64, nrminv: *float, resid: *float, rqcorr: *float, work: *float) -> void #foreign mkl_intel_ilp64;

clar1v_ :: (n: *s64, b1: *s64, bn: *s64, lambda: *float, d: *float, l: *float, ld: *float, lld: *float, pivmin: *float, gaptol: *float, z: *MKL_Complex8, wantnc: *s64, negcnt: *s64, ztz: *float, mingma: *float, r: *s64, isuppz: *s64, nrminv: *float, resid: *float, rqcorr: *float, work: *float) -> void #foreign mkl_intel_ilp64;

CLAR2V :: (n: *s64, x: *MKL_Complex8, y: *MKL_Complex8, z: *MKL_Complex8, incx: *s64, c: *float, s: *MKL_Complex8, incc: *s64) -> void #foreign mkl_intel_ilp64;

clar2v :: (n: *s64, x: *MKL_Complex8, y: *MKL_Complex8, z: *MKL_Complex8, incx: *s64, c: *float, s: *MKL_Complex8, incc: *s64) -> void #foreign mkl_intel_ilp64;

clar2v_ :: (n: *s64, x: *MKL_Complex8, y: *MKL_Complex8, z: *MKL_Complex8, incx: *s64, c: *float, s: *MKL_Complex8, incc: *s64) -> void #foreign mkl_intel_ilp64;

CLARCM :: (m: *s64, n: *s64, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float) -> void #foreign mkl_intel_ilp64;

clarcm :: (m: *s64, n: *s64, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float) -> void #foreign mkl_intel_ilp64;

clarcm_ :: (m: *s64, n: *s64, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float) -> void #foreign mkl_intel_ilp64;

CLARFB :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

clarfb :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

clarfb_ :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

CLARF :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarf :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarf_ :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARFG :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfg :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfg_ :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARFGP :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfgp :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfgp_ :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARFP :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfp :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfp_ :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARFT :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64) -> void #foreign mkl_intel_ilp64;

clarft :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64) -> void #foreign mkl_intel_ilp64;

clarft_ :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64) -> void #foreign mkl_intel_ilp64;

CLARFX :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfx :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfx_ :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARGV :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

clargv :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

clargv_ :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

CLARNV :: (idist: *s64, iseed: *s64, n: *s64, x: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarnv :: (idist: *s64, iseed: *s64, n: *s64, x: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarnv_ :: (idist: *s64, iseed: *s64, n: *s64, x: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARRV :: (n: *s64, vl: *float, vu: *float, d: *float, l: *float, pivmin: *float, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float, rtol1: *float, rtol2: *float, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clarrv :: (n: *s64, vl: *float, vu: *float, d: *float, l: *float, pivmin: *float, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float, rtol1: *float, rtol2: *float, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clarrv_ :: (n: *s64, vl: *float, vu: *float, d: *float, l: *float, pivmin: *float, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float, rtol1: *float, rtol2: *float, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLARSCL2 :: (m: *s64, n: *s64, d: *float, x: *MKL_Complex8, ldx: *s64) -> void #foreign mkl_intel_ilp64;

clarscl2 :: (m: *s64, n: *s64, d: *float, x: *MKL_Complex8, ldx: *s64) -> void #foreign mkl_intel_ilp64;

clarscl2_ :: (m: *s64, n: *s64, d: *float, x: *MKL_Complex8, ldx: *s64) -> void #foreign mkl_intel_ilp64;

CLARTG :: (f: *MKL_Complex8, g: *MKL_Complex8, cs: *float, sn: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clartg :: (f: *MKL_Complex8, g: *MKL_Complex8, cs: *float, sn: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clartg_ :: (f: *MKL_Complex8, g: *MKL_Complex8, cs: *float, sn: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARTV :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, s: *MKL_Complex8, incc: *s64) -> void #foreign mkl_intel_ilp64;

clartv :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, s: *MKL_Complex8, incc: *s64) -> void #foreign mkl_intel_ilp64;

clartv_ :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, s: *MKL_Complex8, incc: *s64) -> void #foreign mkl_intel_ilp64;

CLARZB :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

clarzb :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

clarzb_ :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

CLARZ :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarz :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarz_ :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARZT :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64) -> void #foreign mkl_intel_ilp64;

clarzt :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64) -> void #foreign mkl_intel_ilp64;

clarzt_ :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64) -> void #foreign mkl_intel_ilp64;

CLASCL :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float, cto: *float, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clascl :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float, cto: *float, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clascl_ :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float, cto: *float, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLASCL2 :: (m: *s64, n: *s64, d: *float, x: *MKL_Complex8, ldx: *s64) -> void #foreign mkl_intel_ilp64;

clascl2 :: (m: *s64, n: *s64, d: *float, x: *MKL_Complex8, ldx: *s64) -> void #foreign mkl_intel_ilp64;

clascl2_ :: (m: *s64, n: *s64, d: *float, x: *MKL_Complex8, ldx: *s64) -> void #foreign mkl_intel_ilp64;

CLASET :: (uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

claset :: (uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

claset_ :: (uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CLASR :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float, s: *float, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

clasr :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float, s: *float, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

clasr_ :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float, s: *float, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CLASSQ :: (n: *s64, x: *MKL_Complex8, incx: *s64, scale: *float, sumsq: *float) -> void #foreign mkl_intel_ilp64;

classq :: (n: *s64, x: *MKL_Complex8, incx: *s64, scale: *float, sumsq: *float) -> void #foreign mkl_intel_ilp64;

classq_ :: (n: *s64, x: *MKL_Complex8, incx: *s64, scale: *float, sumsq: *float) -> void #foreign mkl_intel_ilp64;

CLASWP :: (n: *s64, a: *MKL_Complex8, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

claswp :: (n: *s64, a: *MKL_Complex8, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

claswp_ :: (n: *s64, a: *MKL_Complex8, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

CLASYF :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clasyf :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clasyf_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATBS :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

clatbs :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

clatbs_ :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATDF :: (ijob: *s64, n: *s64, z: *MKL_Complex8, ldz: *s64, rhs: *MKL_Complex8, rdsum: *float, rdscal: *float, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

clatdf :: (ijob: *s64, n: *s64, z: *MKL_Complex8, ldz: *s64, rhs: *MKL_Complex8, rdsum: *float, rdscal: *float, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

clatdf_ :: (ijob: *s64, n: *s64, z: *MKL_Complex8, ldz: *s64, rhs: *MKL_Complex8, rdsum: *float, rdscal: *float, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

CLATPS :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *MKL_Complex8, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

clatps :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *MKL_Complex8, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

clatps_ :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *MKL_Complex8, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATRD :: (uplo: *u8, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, e: *float, tau: *MKL_Complex8, w: *MKL_Complex8, ldw: *s64) -> void #foreign mkl_intel_ilp64;

clatrd :: (uplo: *u8, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, e: *float, tau: *MKL_Complex8, w: *MKL_Complex8, ldw: *s64) -> void #foreign mkl_intel_ilp64;

clatrd_ :: (uplo: *u8, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, e: *float, tau: *MKL_Complex8, w: *MKL_Complex8, ldw: *s64) -> void #foreign mkl_intel_ilp64;

CLATRS :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

clatrs :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

clatrs_ :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATRZ :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clatrz :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clatrz_ :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLATZM :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c1: *MKL_Complex8, c2: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clatzm :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c1: *MKL_Complex8, c2: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clatzm_ :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c1: *MKL_Complex8, c2: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLAUU2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clauu2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clauu2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAUUM :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clauum :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clauum_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBCON :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbcon :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbcon_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBEQU :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbequ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbequ_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBRFS :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbrfs :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbrfs_ :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBSTF :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbstf :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbstf_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBSV :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbsv :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbsv_ :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBSVX :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbsvx :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbsvx_ :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBTF2 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbtf2 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbtf2_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBTRF :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbtrf :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbtrf_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBTRS :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbtrs :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbtrs_ :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPFTRF :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cpftrf :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cpftrf_ :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CPFTRI :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cpftri :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cpftri_ :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CPFTRS :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpftrs :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpftrs_ :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOCON :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpocon :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpocon_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOEQUB :: (n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpoequb :: (n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpoequb_ :: (n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOEQU :: (n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpoequ :: (n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpoequ_ :: (n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPORFS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cporfs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cporfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPORFSX :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cporfsx :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cporfsx_ :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOSV :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cposv :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cposv_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cposvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cposvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOSVXX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cposvxx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cposvxx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOTF2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotf2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotf2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOTRF :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotrf :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotrf_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOTRI :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotri :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotri_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOTRS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotrs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPCON :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cppcon :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cppcon_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPEQU :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cppequ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cppequ_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPRFS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpprfs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpprfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPSV :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cppsv :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cppsv_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cppsvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cppsvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPTRF :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cpptrf :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cpptrf_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPTRI :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cpptri :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cpptri_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPTRS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpptrs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpptrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPSTF2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpstf2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpstf2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPSTRF :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpstrf :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpstrf_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTCON :: (n: *s64, d: *float, e: *MKL_Complex8, anorm: *float, rcond: *float, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cptcon :: (n: *s64, d: *float, e: *MKL_Complex8, anorm: *float, rcond: *float, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cptcon_ :: (n: *s64, d: *float, e: *MKL_Complex8, anorm: *float, rcond: *float, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTEQR :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpteqr :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpteqr_ :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTRFS :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cptrfs :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cptrfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTSV :: (n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cptsv :: (n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cptsv_ :: (n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTSVX :: (fact: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cptsvx :: (fact: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cptsvx_ :: (fact: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTTRF :: (n: *s64, d: *float, e: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cpttrf :: (n: *s64, d: *float, e: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;
cpttrf_ :: (n: *s64, d: *float, e: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTTRS :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpttrs :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpttrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTTS2 :: (iuplo: *s64, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

cptts2 :: (iuplo: *s64, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

cptts2_ :: (iuplo: *s64, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CROT :: (n: *s64, cx: *MKL_Complex8, incx: *s64, cy: *MKL_Complex8, incy: *s64, c: *float, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

crot :: (n: *s64, cx: *MKL_Complex8, incx: *s64, cy: *MKL_Complex8, incy: *s64, c: *float, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

crot_ :: (n: *s64, cx: *MKL_Complex8, incx: *s64, cy: *MKL_Complex8, incy: *s64, c: *float, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CSPCON :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cspcon :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cspcon_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSPMV :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

cspmv :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

cspmv_ :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CSPR :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, ap: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

cspr :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, ap: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

cspr_ :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, ap: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CSPRFS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csprfs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csprfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSPSV :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cspsv :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cspsv_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSPSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cspsvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cspsvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSPTRF :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csptrf :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csptrf_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSPTRI :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csptri :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csptri_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSPTRS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csptrs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csptrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSRSCL :: (n: *s64, sa: *float, sx: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

csrscl :: (n: *s64, sa: *float, sx: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

csrscl_ :: (n: *s64, sa: *float, sx: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CSTEDC :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cstedc :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cstedc_ :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSTEGR :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cstegr :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cstegr_ :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSTEIN :: (n: *s64, d: *float, e: *float, m: *s64, w: *float, iblock: *s64, isplit: *s64, z: *MKL_Complex8, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cstein :: (n: *s64, d: *float, e: *float, m: *s64, w: *float, iblock: *s64, isplit: *s64, z: *MKL_Complex8, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cstein_ :: (n: *s64, d: *float, e: *float, m: *s64, w: *float, iblock: *s64, isplit: *s64, z: *MKL_Complex8, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSTEMR :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cstemr :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cstemr_ :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSTEQR :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csteqr :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csteqr_ :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYCON :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csycon :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csycon_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYEQUB :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csyequb :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csyequb_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYMV :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

csymv :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

csymv_ :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CSYR :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

csyr :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

csyr_ :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CSYRFS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csyrfs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csyrfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYRFSX :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csyrfsx :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csyrfsx_ :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSV :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csysvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csysvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSVXX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csysvxx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csysvxx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTF2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytf2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytf2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRF :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRI :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTBCON :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctbcon :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctbcon_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTBRFS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctbrfs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctbrfs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTBTRS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctbtrs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctbtrs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTFSM :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ctfsm :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ctfsm_ :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CTFTRI :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctftri :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctftri_ :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTFTTP :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex8, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctfttp :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex8, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctfttp_ :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex8, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTFTTR :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctfttr :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctfttr_ :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGEVC :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *MKL_Complex8, lds: *s64, p: *MKL_Complex8, ldp: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgevc :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *MKL_Complex8, lds: *s64, p: *MKL_Complex8, ldp: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgevc_ :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *MKL_Complex8, lds: *s64, p: *MKL_Complex8, ldp: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGEX2 :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, j1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgex2 :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, j1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgex2_ :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, j1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGEXC :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgexc :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgexc_ :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGSEN :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, m: *s64, pl: *float, pr: *float, dif: *float, work: *MKL_Complex8, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsen :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, m: *s64, pl: *float, pr: *float, dif: *float, work: *MKL_Complex8, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsen_ :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, m: *s64, pl: *float, pr: *float, dif: *float, work: *MKL_Complex8, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGSJA :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsja :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsja_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGSNA :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, s: *float, dif: *float, mm: *s64, m: *s64, work: *MKL_Complex8, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsna :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, s: *float, dif: *float, mm: *s64, m: *s64, work: *MKL_Complex8, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsna_ :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, s: *float, dif: *float, mm: *s64, m: *s64, work: *MKL_Complex8, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGSY2 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, scale: *float, rdsum: *float, rdscal: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsy2 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, scale: *float, rdsum: *float, rdscal: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsy2_ :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, scale: *float, rdsum: *float, rdscal: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGSYL :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, scale: *float, dif: *float, work: *MKL_Complex8, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsyl :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, scale: *float, dif: *float, work: *MKL_Complex8, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsyl_ :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, scale: *float, dif: *float, work: *MKL_Complex8, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPCON :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpcon :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpcon_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPRFS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctprfs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctprfs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPTRI :: (uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctptri :: (uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctptri_ :: (uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPTRS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctptrs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctptrs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPTTF :: (transr: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, arf: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpttf :: (transr: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, arf: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpttf_ :: (transr: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, arf: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPTTR :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpttr :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpttr_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRCON :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrcon :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrcon_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTREVC :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrevc :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrevc_ :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTREXC :: (compq: *u8, n: *s64, t: *MKL_Complex8, ldt: *s64, q: *MKL_Complex8, ldq: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrexc :: (compq: *u8, n: *s64, t: *MKL_Complex8, ldt: *s64, q: *MKL_Complex8, ldq: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrexc_ :: (compq: *u8, n: *s64, t: *MKL_Complex8, ldt: *s64, q: *MKL_Complex8, ldq: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRRFS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrrfs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrrfs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRSEN :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, q: *MKL_Complex8, ldq: *s64, w: *MKL_Complex8, m: *s64, s: *float, sep: *float, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrsen :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, q: *MKL_Complex8, ldq: *s64, w: *MKL_Complex8, m: *s64, s: *float, sep: *float, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrsen_ :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, q: *MKL_Complex8, ldq: *s64, w: *MKL_Complex8, m: *s64, s: *float, sep: *float, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRSNA :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, s: *float, sep: *float, mm: *s64, m: *s64, work: *MKL_Complex8, ldwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrsna :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, s: *float, sep: *float, mm: *s64, m: *s64, work: *MKL_Complex8, ldwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrsna_ :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, s: *float, sep: *float, mm: *s64, m: *s64, work: *MKL_Complex8, ldwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRSYL :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrsyl :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrsyl_ :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRTI2 :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrti2 :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrti2_ :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRTRI :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrtri :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrtri_ :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRTRS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrtrs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrtrs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRTTF :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, arf: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrttf :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, arf: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrttf_ :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, arf: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRTTP :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrttp :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrttp_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTZRQF :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctzrqf :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctzrqf_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTZRZF :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctzrzf :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctzrzf_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNG2L :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cung2l :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cung2l_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNG2R :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cung2r :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cung2r_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGBR :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungbr :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungbr_ :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGHR :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunghr :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunghr_ :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGL2 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cungl2 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cungl2_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGLQ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunglq :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunglq_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGQL :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungql :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungql_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGQR :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungqr :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungqr_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGR2 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cungr2 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cungr2_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGRQ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungrq :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungrq_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGTR :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungtr :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungtr_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNM2L :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunm2l :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunm2l_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNM2R :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunm2r :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunm2r_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMBR :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmbr :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmbr_ :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMHR :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmhr :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmhr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNML2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunml2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunml2_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMLQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmlq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmlq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMQL :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmql :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmql_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMQR :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmqr :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmqr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMR2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmr2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmr2_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMR3 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmr3 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmr3_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMRQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmrq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmrq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMRZ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmrz :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmrz_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMTR :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmtr :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmtr_ :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUPGTR :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, tau: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cupgtr :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, tau: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cupgtr_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, tau: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUPMTR :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *MKL_Complex8, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cupmtr :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *MKL_Complex8, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cupmtr_ :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *MKL_Complex8, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DBDSDC :: (uplo: *u8, compq: *u8, n: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, q: *float64, iq: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dbdsdc :: (uplo: *u8, compq: *u8, n: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, q: *float64, iq: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dbdsdc_ :: (uplo: *u8, compq: *u8, n: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, q: *float64, iq: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DBDSQR :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *float64, ldvt: *s64, u: *float64, ldu: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dbdsqr :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *float64, ldvt: *s64, u: *float64, ldu: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dbdsqr_ :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *float64, ldvt: *s64, u: *float64, ldu: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DDISNA :: (job: *u8, m: *s64, n: *s64, d: *float64, sep: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ddisna :: (job: *u8, m: *s64, n: *s64, d: *float64, sep: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ddisna_ :: (job: *u8, m: *s64, n: *s64, d: *float64, sep: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBBRD :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, pt: *float64, ldpt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbbrd :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, pt: *float64, ldpt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbbrd_ :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, pt: *float64, ldpt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBCON :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbcon :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbcon_ :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBEQUB :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbequb :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbequb_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBEQU :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbequ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbequ_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBRFS :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbrfs :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbrfs_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBRFSX :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbrfsx :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbrfsx_ :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBSV :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbsv :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbsv_ :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBSVX :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbsvx :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbsvx_ :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBSVXX :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbsvxx :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbsvxx_ :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBTF2 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbtf2 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbtf2_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBTRF :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbtrf :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbtrf_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBTRS :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbtrs :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbtrs_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEBAK :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float64, m: *s64, v: *float64, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgebak :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float64, m: *s64, v: *float64, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgebak_ :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float64, m: *s64, v: *float64, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEBAL :: (job: *u8, n: *s64, a: *float64, lda: *s64, ilo: *s64, ihi: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgebal :: (job: *u8, n: *s64, a: *float64, lda: *s64, ilo: *s64, ihi: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgebal_ :: (job: *u8, n: *s64, a: *float64, lda: *s64, ilo: *s64, ihi: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEBD2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgebd2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgebd2_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEBRD :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgebrd :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgebrd_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGECON :: (norm: *u8, n: *s64, a: *float64, lda: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgecon :: (norm: *u8, n: *s64, a: *float64, lda: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgecon_ :: (norm: *u8, n: *s64, a: *float64, lda: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEEQUB :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeequb :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeequb_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEEQU :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeequ :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeequ_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEES :: (jobvs: *u8, sort: *u8, select: MKL_D_SELECT_FUNCTION_2, n: *s64, a: *float64, lda: *s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgees :: (jobvs: *u8, sort: *u8, select: MKL_D_SELECT_FUNCTION_2, n: *s64, a: *float64, lda: *s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgees_ :: (jobvs: *u8, sort: *u8, select: MKL_D_SELECT_FUNCTION_2, n: *s64, a: *float64, lda: *s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEESX :: (jobvs: *u8, sort: *u8, select: MKL_D_SELECT_FUNCTION_2, sense: *u8, n: *s64, a: *float64, lda: *s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: *s64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeesx :: (jobvs: *u8, sort: *u8, select: MKL_D_SELECT_FUNCTION_2, sense: *u8, n: *s64, a: *float64, lda: *s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: *s64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeesx_ :: (jobvs: *u8, sort: *u8, select: MKL_D_SELECT_FUNCTION_2, sense: *u8, n: *s64, a: *float64, lda: *s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: *s64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEEV :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeev :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeev_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEEVX :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float64, lda: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeevx :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float64, lda: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeevx_ :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float64, lda: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEGS :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgegs :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgegs_ :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEGV :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgegv :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgegv_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEHD2 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgehd2 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgehd2_ :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEHRD :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgehrd :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgehrd_ :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEJSV :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, sva: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgejsv :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, sva: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgejsv_ :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, sva: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELQ2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelq2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelq2_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELQF :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelqf :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelqf_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELSD :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelsd :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelsd_ :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELS :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgels :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgels_ :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELSS :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelss :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelss_ :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELSX :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelsx :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelsx_ :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELSY :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelsy :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelsy_ :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQL2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeql2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeql2_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQLF :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqlf :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqlf_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQP3 :: (m: *s64, n: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqp3 :: (m: *s64, n: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqp3_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQPF :: (m: *s64, n: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqpf :: (m: *s64, n: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqpf_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQR2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqr2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqr2_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQR2P :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqr2p :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqr2p_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQRF :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrf :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrf_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQRFP :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrfp :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrfp_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGERFS :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgerfs :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgerfs_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGERFSX :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgerfsx :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgerfsx_ :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGERQ2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgerq2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgerq2_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGERQF :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgerqf :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgerqf_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESC2 :: (n: *s64, a: *float64, lda: *s64, rhs: *float64, ipiv: *s64, jpiv: *s64, scale: *float64) -> void #foreign mkl_intel_ilp64;

dgesc2 :: (n: *s64, a: *float64, lda: *s64, rhs: *float64, ipiv: *s64, jpiv: *s64, scale: *float64) -> void #foreign mkl_intel_ilp64;

dgesc2_ :: (n: *s64, a: *float64, lda: *s64, rhs: *float64, ipiv: *s64, jpiv: *s64, scale: *float64) -> void #foreign mkl_intel_ilp64;

DGESDD :: (jobz: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesdd :: (jobz: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesdd_ :: (jobz: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESVD :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvd :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvd_ :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESV :: (n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesv :: (n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesv_ :: (n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESVJ :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvj :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvj_ :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESVX :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvx :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvx_ :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESVXX :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvxx :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvxx_ :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETC2 :: (n: *s64, a: *float64, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetc2 :: (n: *s64, a: *float64, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetc2_ :: (n: *s64, a: *float64, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETF2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetf2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetf2_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRF :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrf :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrf_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_DGETRFNPI :: (m: *s64, n: *s64, nfact: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dgetrfnpi :: (m: *s64, n: *s64, nfact: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dgetrfnpi_ :: (m: *s64, n: *s64, nfact: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRI :: (n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetri :: (n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetri_ :: (n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRS :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrs :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrs_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGBAK :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, m: *s64, v: *float64, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggbak :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, m: *s64, v: *float64, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggbak_ :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, m: *s64, v: *float64, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGBAL :: (job: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggbal :: (job: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggbal_ :: (job: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGES :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgges :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgges_ :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGESX :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3, sense: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggesx :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3, sense: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggesx_ :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3, sense: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGEV :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggev :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggev_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGEVX :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggevx :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggevx_ :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGGLM :: (n: *s64, m: *s64, p: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, d: *float64, x: *float64, y: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggglm :: (n: *s64, m: *s64, p: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, d: *float64, x: *float64, y: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggglm_ :: (n: *s64, m: *s64, p: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, d: *float64, x: *float64, y: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGHRD :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgghrd :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgghrd_ :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGLSE :: (m: *s64, n: *s64, p: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, d: *float64, x: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgglse :: (m: *s64, n: *s64, p: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, d: *float64, x: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgglse_ :: (m: *s64, n: *s64, p: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, d: *float64, x: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGQRF :: (n: *s64, m: *s64, p: *s64, a: *float64, lda: *s64, taua: *float64, b: *float64, ldb: *s64, taub: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggqrf :: (n: *s64, m: *s64, p: *s64, a: *float64, lda: *s64, taua: *float64, b: *float64, ldb: *s64, taub: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggqrf_ :: (n: *s64, m: *s64, p: *s64, a: *float64, lda: *s64, taua: *float64, b: *float64, ldb: *s64, taub: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGRQF :: (m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, taua: *float64, b: *float64, ldb: *s64, taub: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggrqf :: (m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, taua: *float64, b: *float64, ldb: *s64, taub: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggrqf_ :: (m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, taua: *float64, b: *float64, ldb: *s64, taub: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGSVD :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggsvd :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggsvd_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGSVP :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, iwork: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggsvp :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, iwork: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggsvp_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, iwork: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGSVJ0 :: (jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgsvj0 :: (jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgsvj0_ :: (jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGSVJ1 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *float64, lda: *s64, d: *float64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgsvj1 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *float64, lda: *s64, d: *float64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgsvj1_ :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *float64, lda: *s64, d: *float64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTCON :: (norm: *u8, n: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgtcon :: (norm: *u8, n: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgtcon_ :: (norm: *u8, n: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTRFS :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgtrfs :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgtrfs_ :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTSV :: (n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgtsv :: (n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgtsv_ :: (n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTSVX :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgtsvx :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgtsvx_ :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTTRF :: (n: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgttrf :: (n: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgttrf_ :: (n: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTTRS :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgttrs :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgttrs_ :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTTS2 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dgtts2 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dgtts2_ :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DHGEQZ :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, t: *float64, ldt: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dhgeqz :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, t: *float64, ldt: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dhgeqz_ :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, t: *float64, ldt: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DHSEIN :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dhsein :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dhsein_ :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DHSEQR :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dhseqr :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dhseqr_ :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DISNAN :: (din: *float64) -> s64 #foreign mkl_intel_ilp64;

disnan :: (din: *float64) -> s64 #foreign mkl_intel_ilp64;
disnan_ :: (din: *float64) -> s64 #foreign mkl_intel_ilp64;

DLABAD :: (smallx: *float64, large: *float64) -> void #foreign mkl_intel_ilp64;

dlabad :: (smallx: *float64, large: *float64) -> void #foreign mkl_intel_ilp64;
dlabad_ :: (smallx: *float64, large: *float64) -> void #foreign mkl_intel_ilp64;

DLABRD :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, x: *float64, ldx: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

dlabrd :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, x: *float64, ldx: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

dlabrd_ :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, x: *float64, ldx: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

DLACN2 :: (n: *s64, v: *float64, x: *float64, isgn: *s64, est: *float64, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

dlacn2 :: (n: *s64, v: *float64, x: *float64, isgn: *s64, est: *float64, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

dlacn2_ :: (n: *s64, v: *float64, x: *float64, isgn: *s64, est: *float64, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

DLACON :: (n: *s64, v: *float64, x: *float64, isgn: *s64, est: *float64, kase: *s64) -> void #foreign mkl_intel_ilp64;

dlacon :: (n: *s64, v: *float64, x: *float64, isgn: *s64, est: *float64, kase: *s64) -> void #foreign mkl_intel_ilp64;

dlacon_ :: (n: *s64, v: *float64, x: *float64, isgn: *s64, est: *float64, kase: *s64) -> void #foreign mkl_intel_ilp64;

DLACPY :: (uplo: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dlacpy :: (uplo: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dlacpy_ :: (uplo: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DLADIV :: (a: *float64, b: *float64, c: *float64, d: *float64, p: *float64, q: *float64) -> void #foreign mkl_intel_ilp64;

dladiv :: (a: *float64, b: *float64, c: *float64, d: *float64, p: *float64, q: *float64) -> void #foreign mkl_intel_ilp64;

dladiv_ :: (a: *float64, b: *float64, c: *float64, d: *float64, p: *float64, q: *float64) -> void #foreign mkl_intel_ilp64;

DLAE2 :: (a: *float64, b: *float64, c: *float64, rt1: *float64, rt2: *float64) -> void #foreign mkl_intel_ilp64;

dlae2 :: (a: *float64, b: *float64, c: *float64, rt1: *float64, rt2: *float64) -> void #foreign mkl_intel_ilp64;

dlae2_ :: (a: *float64, b: *float64, c: *float64, rt1: *float64, rt2: *float64) -> void #foreign mkl_intel_ilp64;

DLAEBZ :: (ijob: *s64, nitmax: *s64, n: *s64, mmax: *s64, minp: *s64, nbmin: *s64, abstol: *float64, reltol: *float64, pivmin: *float64, d: *float64, e: *float64, e2: *float64, nval: *s64, ab: *float64, c: *float64, mout: *s64, nab: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaebz :: (ijob: *s64, nitmax: *s64, n: *s64, mmax: *s64, minp: *s64, nbmin: *s64, abstol: *float64, reltol: *float64, pivmin: *float64, d: *float64, e: *float64, e2: *float64, nval: *s64, ab: *float64, c: *float64, mout: *s64, nab: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaebz_ :: (ijob: *s64, nitmax: *s64, n: *s64, mmax: *s64, minp: *s64, nbmin: *s64, abstol: *float64, reltol: *float64, pivmin: *float64, d: *float64, e: *float64, e2: *float64, nval: *s64, ab: *float64, c: *float64, mout: *s64, nab: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED0 :: (icompq: *s64, qsiz: *s64, n: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, qstore: *float64, ldqs: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed0 :: (icompq: *s64, qsiz: *s64, n: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, qstore: *float64, ldqs: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed0_ :: (icompq: *s64, qsiz: *s64, n: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, qstore: *float64, ldqs: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED1 :: (n: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed1 :: (n: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed1_ :: (n: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED2 :: (k: *s64, n: *s64, n1: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, z: *float64, dlamda: *float64, w: *float64, q2: *float64, indx: *s64, indxc: *s64, indxp: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed2 :: (k: *s64, n: *s64, n1: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, z: *float64, dlamda: *float64, w: *float64, q2: *float64, indx: *s64, indxc: *s64, indxp: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed2_ :: (k: *s64, n: *s64, n1: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, z: *float64, dlamda: *float64, w: *float64, q2: *float64, indx: *s64, indxc: *s64, indxp: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED3 :: (k: *s64, n: *s64, n1: *s64, d: *float64, q: *float64, ldq: *s64, rho: *float64, dlamda: *float64, q2: *float64, indx: *s64, ctot: *s64, w: *float64, s: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed3 :: (k: *s64, n: *s64, n1: *s64, d: *float64, q: *float64, ldq: *s64, rho: *float64, dlamda: *float64, q2: *float64, indx: *s64, ctot: *s64, w: *float64, s: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed3_ :: (k: *s64, n: *s64, n1: *s64, d: *float64, q: *float64, ldq: *s64, rho: *float64, dlamda: *float64, q2: *float64, indx: *s64, ctot: *s64, w: *float64, s: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED4 :: (n: *s64, i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dlam: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed4 :: (n: *s64, i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dlam: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed4_ :: (n: *s64, i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dlam: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED5 :: (i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dlam: *float64) -> void #foreign mkl_intel_ilp64;

dlaed5 :: (i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dlam: *float64) -> void #foreign mkl_intel_ilp64;

dlaed5_ :: (i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dlam: *float64) -> void #foreign mkl_intel_ilp64;

DLAED6 :: (kniter: *s64, orgati: *s64, rho: *float64, d: *float64, z: *float64, finit: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed6 :: (kniter: *s64, orgati: *s64, rho: *float64, d: *float64, z: *float64, finit: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed6_ :: (kniter: *s64, orgati: *s64, rho: *float64, d: *float64, z: *float64, finit: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED7 :: (icompq: *s64, n: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, qstore: *float64, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed7 :: (icompq: *s64, n: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, qstore: *float64, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed7_ :: (icompq: *s64, n: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, qstore: *float64, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED8 :: (icompq: *s64, k: *s64, n: *s64, qsiz: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, z: *float64, dlamda: *float64, q2: *float64, ldq2: *s64, w: *float64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, indxp: *s64, indx: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed8 :: (icompq: *s64, k: *s64, n: *s64, qsiz: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, z: *float64, dlamda: *float64, q2: *float64, ldq2: *s64, w: *float64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, indxp: *s64, indx: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed8_ :: (icompq: *s64, k: *s64, n: *s64, qsiz: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, z: *float64, dlamda: *float64, q2: *float64, ldq2: *s64, w: *float64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, indxp: *s64, indx: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED9 :: (k: *s64, kstart: *s64, kstop: *s64, n: *s64, d: *float64, q: *float64, ldq: *s64, rho: *float64, dlamda: *float64, w: *float64, s: *float64, lds: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed9 :: (k: *s64, kstart: *s64, kstop: *s64, n: *s64, d: *float64, q: *float64, ldq: *s64, rho: *float64, dlamda: *float64, w: *float64, s: *float64, lds: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed9_ :: (k: *s64, kstart: *s64, kstop: *s64, n: *s64, d: *float64, q: *float64, ldq: *s64, rho: *float64, dlamda: *float64, w: *float64, s: *float64, lds: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAEDA :: (n: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, q: *float64, qptr: *s64, z: *float64, ztemp: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaeda :: (n: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, q: *float64, qptr: *s64, z: *float64, ztemp: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaeda_ :: (n: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, q: *float64, qptr: *s64, z: *float64, ztemp: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAEIN :: (rightv: *s64, noinit: *s64, n: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, vr: *float64, vi: *float64, b: *float64, ldb: *s64, work: *float64, eps3: *float64, smlnum: *float64, bignum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaein :: (rightv: *s64, noinit: *s64, n: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, vr: *float64, vi: *float64, b: *float64, ldb: *s64, work: *float64, eps3: *float64, smlnum: *float64, bignum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaein_ :: (rightv: *s64, noinit: *s64, n: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, vr: *float64, vi: *float64, b: *float64, ldb: *s64, work: *float64, eps3: *float64, smlnum: *float64, bignum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAEV2 :: (a: *float64, b: *float64, c: *float64, rt1: *float64, rt2: *float64, cs1: *float64, sn1: *float64) -> void #foreign mkl_intel_ilp64;

dlaev2 :: (a: *float64, b: *float64, c: *float64, rt1: *float64, rt2: *float64, cs1: *float64, sn1: *float64) -> void #foreign mkl_intel_ilp64;

dlaev2_ :: (a: *float64, b: *float64, c: *float64, rt1: *float64, rt2: *float64, cs1: *float64, sn1: *float64) -> void #foreign mkl_intel_ilp64;

DLAEXC :: (wantq: *s64, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaexc :: (wantq: *s64, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaexc_ :: (wantq: *s64, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAG2 :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, safmin: *float64, scale1: *float64, scale2: *float64, wr1: *float64, wr2: *float64, wi: *float64) -> void #foreign mkl_intel_ilp64;

dlag2 :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, safmin: *float64, scale1: *float64, scale2: *float64, wr1: *float64, wr2: *float64, wi: *float64) -> void #foreign mkl_intel_ilp64;

dlag2_ :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, safmin: *float64, scale1: *float64, scale2: *float64, wr1: *float64, wr2: *float64, wi: *float64) -> void #foreign mkl_intel_ilp64;

DLAG2S :: (m: *s64, n: *s64, a: *float64, lda: *s64, sa: *float, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlag2s :: (m: *s64, n: *s64, a: *float64, lda: *s64, sa: *float, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlag2s_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, sa: *float, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAGS2 :: (upper: *s64, a1: *float64, a2: *float64, a3: *float64, b1: *float64, b2: *float64, b3: *float64, csu: *float64, snu: *float64, csv: *float64, snv: *float64, csq: *float64, snq: *float64) -> void #foreign mkl_intel_ilp64;

dlags2 :: (upper: *s64, a1: *float64, a2: *float64, a3: *float64, b1: *float64, b2: *float64, b3: *float64, csu: *float64, snu: *float64, csv: *float64, snv: *float64, csq: *float64, snq: *float64) -> void #foreign mkl_intel_ilp64;

dlags2_ :: (upper: *s64, a1: *float64, a2: *float64, a3: *float64, b1: *float64, b2: *float64, b3: *float64, csu: *float64, snu: *float64, csv: *float64, snv: *float64, csq: *float64, snq: *float64) -> void #foreign mkl_intel_ilp64;

DLAGTF :: (n: *s64, a: *float64, lambda: *float64, b: *float64, c: *float64, tol: *float64, d: *float64, in: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlagtf :: (n: *s64, a: *float64, lambda: *float64, b: *float64, c: *float64, tol: *float64, d: *float64, in: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlagtf_ :: (n: *s64, a: *float64, lambda: *float64, b: *float64, c: *float64, tol: *float64, d: *float64, in: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAGTM :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float64, dl: *float64, d: *float64, du: *float64, x: *float64, ldx: *s64, beta: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dlagtm :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float64, dl: *float64, d: *float64, du: *float64, x: *float64, ldx: *s64, beta: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dlagtm_ :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float64, dl: *float64, d: *float64, du: *float64, x: *float64, ldx: *s64, beta: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DLAGTS :: (job: *s64, n: *s64, a: *float64, b: *float64, c: *float64, d: *float64, in: *s64, y: *float64, tol: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlagts :: (job: *s64, n: *s64, a: *float64, b: *float64, c: *float64, d: *float64, in: *s64, y: *float64, tol: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlagts_ :: (job: *s64, n: *s64, a: *float64, b: *float64, c: *float64, d: *float64, in: *s64, y: *float64, tol: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAGV2 :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, csl: *float64, snl: *float64, csr: *float64, snr: *float64) -> void #foreign mkl_intel_ilp64;

dlagv2 :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, csl: *float64, snl: *float64, csr: *float64, snr: *float64) -> void #foreign mkl_intel_ilp64;

dlagv2_ :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, csl: *float64, snl: *float64, csr: *float64, snr: *float64) -> void #foreign mkl_intel_ilp64;

DLAHQR :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlahqr :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlahqr_ :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAHR2 :: (n: *s64, k: *s64, nb: *s64, a: *float64, lda: *s64, tau: *float64, t: *float64, ldt: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

dlahr2 :: (n: *s64, k: *s64, nb: *s64, a: *float64, lda: *s64, tau: *float64, t: *float64, ldt: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

dlahr2_ :: (n: *s64, k: *s64, nb: *s64, a: *float64, lda: *s64, tau: *float64, t: *float64, ldt: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

DLAHRD :: (n: *s64, k: *s64, nb: *s64, a: *float64, lda: *s64, tau: *float64, t: *float64, ldt: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

dlahrd :: (n: *s64, k: *s64, nb: *s64, a: *float64, lda: *s64, tau: *float64, t: *float64, ldt: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

dlahrd_ :: (n: *s64, k: *s64, nb: *s64, a: *float64, lda: *s64, tau: *float64, t: *float64, ldt: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

DLAIC1 :: (job: *s64, j: *s64, x: *float64, sest: *float64, w: *float64, gamma: *float64, sestpr: *float64, s: *float64, c: *float64) -> void #foreign mkl_intel_ilp64;

dlaic1 :: (job: *s64, j: *s64, x: *float64, sest: *float64, w: *float64, gamma: *float64, sestpr: *float64, s: *float64, c: *float64) -> void #foreign mkl_intel_ilp64;

dlaic1_ :: (job: *s64, j: *s64, x: *float64, sest: *float64, w: *float64, gamma: *float64, sestpr: *float64, s: *float64, c: *float64) -> void #foreign mkl_intel_ilp64;

DLAISNAN :: (din1: *float64, din2: *float64) -> s64 #foreign mkl_intel_ilp64;

dlaisnan :: (din1: *float64, din2: *float64) -> s64 #foreign mkl_intel_ilp64;
dlaisnan_ :: (din1: *float64, din2: *float64) -> s64 #foreign mkl_intel_ilp64;

DLALN2 :: (ltrans: *s64, na: *s64, nw: *s64, smin: *float64, ca: *float64, a: *float64, lda: *s64, d1: *float64, d2: *float64, b: *float64, ldb: *s64, wr: *float64, wi: *float64, x: *float64, ldx: *s64, scale: *float64, xnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaln2 :: (ltrans: *s64, na: *s64, nw: *s64, smin: *float64, ca: *float64, a: *float64, lda: *s64, d1: *float64, d2: *float64, b: *float64, ldb: *s64, wr: *float64, wi: *float64, x: *float64, ldx: *s64, scale: *float64, xnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaln2_ :: (ltrans: *s64, na: *s64, nw: *s64, smin: *float64, ca: *float64, a: *float64, lda: *s64, d1: *float64, d2: *float64, b: *float64, ldb: *s64, wr: *float64, wi: *float64, x: *float64, ldx: *s64, scale: *float64, xnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLALS0 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *float64, ldb: *s64, bx: *float64, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlals0 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *float64, ldb: *s64, bx: *float64, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlals0_ :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *float64, ldb: *s64, bx: *float64, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLALSA :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *float64, ldb: *s64, bx: *float64, ldbx: *s64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlalsa :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *float64, ldb: *s64, bx: *float64, ldbx: *s64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlalsa_ :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *float64, ldb: *s64, bx: *float64, ldbx: *s64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLALSD :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, rcond: *float64, rank: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlalsd :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, rcond: *float64, rank: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlalsd_ :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, rcond: *float64, rank: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAMCH :: (cmach: *u8) -> float64 #foreign mkl_intel_ilp64;

dlamch :: (cmach: *u8) -> float64 #foreign mkl_intel_ilp64;
dlamch_ :: (cmach: *u8) -> float64 #foreign mkl_intel_ilp64;

DLAMC1 :: (beta: *s64, t: *s64, rnd: *s64, ieee1: *s64) -> void #foreign mkl_intel_ilp64;

dlamc1 :: (beta: *s64, t: *s64, rnd: *s64, ieee1: *s64) -> void #foreign mkl_intel_ilp64;
dlamc1_ :: (beta: *s64, t: *s64, rnd: *s64, ieee1: *s64) -> void #foreign mkl_intel_ilp64;

DLAMC2 :: (beta: *s64, t: *s64, rnd: *s64, eps: *float64, emin: *s64, rmin: *float64, emax: *s64, rmax: *float64) -> void #foreign mkl_intel_ilp64;

dlamc2 :: (beta: *s64, t: *s64, rnd: *s64, eps: *float64, emin: *s64, rmin: *float64, emax: *s64, rmax: *float64) -> void #foreign mkl_intel_ilp64;

dlamc2_ :: (beta: *s64, t: *s64, rnd: *s64, eps: *float64, emin: *s64, rmin: *float64, emax: *s64, rmax: *float64) -> void #foreign mkl_intel_ilp64;

DLAMC3 :: (a: *float64, b: *float64) -> float64 #foreign mkl_intel_ilp64;

dlamc3 :: (a: *float64, b: *float64) -> float64 #foreign mkl_intel_ilp64;
dlamc3_ :: (a: *float64, b: *float64) -> float64 #foreign mkl_intel_ilp64;

DLAMC4 :: (emin: *s64, start: *float64, base: *s64) -> void #foreign mkl_intel_ilp64;

dlamc4 :: (emin: *s64, start: *float64, base: *s64) -> void #foreign mkl_intel_ilp64;
dlamc4_ :: (emin: *s64, start: *float64, base: *s64) -> void #foreign mkl_intel_ilp64;

DLAMC5 :: (beta: *s64, p: *s64, emin: *s64, ieee: *s64, emax: *s64, rmax: *float64) -> void #foreign mkl_intel_ilp64;

dlamc5 :: (beta: *s64, p: *s64, emin: *s64, ieee: *s64, emax: *s64, rmax: *float64) -> void #foreign mkl_intel_ilp64;

dlamc5_ :: (beta: *s64, p: *s64, emin: *s64, ieee: *s64, emax: *s64, rmax: *float64) -> void #foreign mkl_intel_ilp64;

DLAMRG :: (n1: *s64, n2: *s64, a: *float64, dtrd1: *s64, dtrd2: *s64, index: *s64) -> void #foreign mkl_intel_ilp64;

dlamrg :: (n1: *s64, n2: *s64, a: *float64, dtrd1: *s64, dtrd2: *s64, index: *s64) -> void #foreign mkl_intel_ilp64;

dlamrg_ :: (n1: *s64, n2: *s64, a: *float64, dtrd1: *s64, dtrd2: *s64, index: *s64) -> void #foreign mkl_intel_ilp64;

DLANEG :: (n: *s64, d: *float64, lld: *float64, sigma: *float64, pivmin: *float64, r: *s64) -> s64 #foreign mkl_intel_ilp64;

dlaneg :: (n: *s64, d: *float64, lld: *float64, sigma: *float64, pivmin: *float64, r: *s64) -> s64 #foreign mkl_intel_ilp64;

dlaneg_ :: (n: *s64, d: *float64, lld: *float64, sigma: *float64, pivmin: *float64, r: *s64) -> s64 #foreign mkl_intel_ilp64;

DLANGB :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlangb :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlangb_ :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANGE :: (norm: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlange :: (norm: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlange_ :: (norm: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANGT :: (norm: *u8, n: *s64, dl: *float64, d: *float64, du: *float64) -> float64 #foreign mkl_intel_ilp64;

dlangt :: (norm: *u8, n: *s64, dl: *float64, d: *float64, du: *float64) -> float64 #foreign mkl_intel_ilp64;

dlangt_ :: (norm: *u8, n: *s64, dl: *float64, d: *float64, du: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANHS :: (norm: *u8, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlanhs :: (norm: *u8, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlanhs_ :: (norm: *u8, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANSB :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlansb :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlansb_ :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANSF :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlansf :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlansf_ :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANSP :: (norm: *u8, uplo: *u8, n: *s64, ap: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlansp :: (norm: *u8, uplo: *u8, n: *s64, ap: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlansp_ :: (norm: *u8, uplo: *u8, n: *s64, ap: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANST :: (norm: *u8, n: *s64, d: *float64, e: *float64) -> float64 #foreign mkl_intel_ilp64;

dlanst :: (norm: *u8, n: *s64, d: *float64, e: *float64) -> float64 #foreign mkl_intel_ilp64;

dlanst_ :: (norm: *u8, n: *s64, d: *float64, e: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANSY :: (norm: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlansy :: (norm: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlansy_ :: (norm: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANTB :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlantb :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlantb_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANTP :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlantp :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlantp_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANTR :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlantr :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlantr_ :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANV2 :: (a: *float64, b: *float64, c: *float64, d: *float64, rt1r: *float64, rt1i: *float64, rt2r: *float64, rt2i: *float64, cs: *float64, sn: *float64) -> void #foreign mkl_intel_ilp64;

dlanv2 :: (a: *float64, b: *float64, c: *float64, d: *float64, rt1r: *float64, rt1i: *float64, rt2r: *float64, rt2i: *float64, cs: *float64, sn: *float64) -> void #foreign mkl_intel_ilp64;

dlanv2_ :: (a: *float64, b: *float64, c: *float64, d: *float64, rt1r: *float64, rt1i: *float64, rt2r: *float64, rt2i: *float64, cs: *float64, sn: *float64) -> void #foreign mkl_intel_ilp64;

DLAPLL :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, ssmin: *float64) -> void #foreign mkl_intel_ilp64;

dlapll :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, ssmin: *float64) -> void #foreign mkl_intel_ilp64;

dlapll_ :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, ssmin: *float64) -> void #foreign mkl_intel_ilp64;

DLAPMT :: (forwrd: *s64, m: *s64, n: *s64, x: *float64, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

dlapmt :: (forwrd: *s64, m: *s64, n: *s64, x: *float64, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

dlapmt_ :: (forwrd: *s64, m: *s64, n: *s64, x: *float64, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

DLAPY2 :: (x: *float64, y: *float64) -> float64 #foreign mkl_intel_ilp64;

dlapy2 :: (x: *float64, y: *float64) -> float64 #foreign mkl_intel_ilp64;
dlapy2_ :: (x: *float64, y: *float64) -> float64 #foreign mkl_intel_ilp64;

DLAPY3 :: (x: *float64, y: *float64, z: *float64) -> float64 #foreign mkl_intel_ilp64;

dlapy3 :: (x: *float64, y: *float64, z: *float64) -> float64 #foreign mkl_intel_ilp64;
dlapy3_ :: (x: *float64, y: *float64, z: *float64) -> float64 #foreign mkl_intel_ilp64;

DLAQGB :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqgb :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqgb_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

DLAQGE :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqge :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqge_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

DLAQP2 :: (m: *s64, n: *s64, offset: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, vn1: *float64, vn2: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlaqp2 :: (m: *s64, n: *s64, offset: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, vn1: *float64, vn2: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlaqp2_ :: (m: *s64, n: *s64, offset: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, vn1: *float64, vn2: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLAQPS :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, vn1: *float64, vn2: *float64, auxv: *float64, f: *float64, ldf: *s64) -> void #foreign mkl_intel_ilp64;

dlaqps :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, vn1: *float64, vn2: *float64, auxv: *float64, f: *float64, ldf: *s64) -> void #foreign mkl_intel_ilp64;

dlaqps_ :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, vn1: *float64, vn2: *float64, auxv: *float64, f: *float64, ldf: *s64) -> void #foreign mkl_intel_ilp64;

DLAQR0 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr0 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr0_ :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAQR1 :: (n: *s64, h: *float64, ldh: *s64, sr1: *float64, si1: *float64, sr2: *float64, si2: *float64, v: *float64) -> void #foreign mkl_intel_ilp64;

dlaqr1 :: (n: *s64, h: *float64, ldh: *s64, sr1: *float64, si1: *float64, sr2: *float64, si2: *float64, v: *float64) -> void #foreign mkl_intel_ilp64;

dlaqr1_ :: (n: *s64, h: *float64, ldh: *s64, sr1: *float64, si1: *float64, sr2: *float64, si2: *float64, v: *float64) -> void #foreign mkl_intel_ilp64;

DLAQR2 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, sr: *float64, si: *float64, v: *float64, ldv: *s64, nh: *s64, t: *float64, ldt: *s64, nv: *s64, wv: *float64, ldwv: *s64, work: *float64, lwork: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr2 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, sr: *float64, si: *float64, v: *float64, ldv: *s64, nh: *s64, t: *float64, ldt: *s64, nv: *s64, wv: *float64, ldwv: *s64, work: *float64, lwork: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr2_ :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, sr: *float64, si: *float64, v: *float64, ldv: *s64, nh: *s64, t: *float64, ldt: *s64, nv: *s64, wv: *float64, ldwv: *s64, work: *float64, lwork: *s64) -> void #foreign mkl_intel_ilp64;

DLAQR3 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, sr: *float64, si: *float64, v: *float64, ldv: *s64, nh: *s64, t: *float64, ldt: *s64, nv: *s64, wv: *float64, ldwv: *s64, work: *float64, lwork: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr3 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, sr: *float64, si: *float64, v: *float64, ldv: *s64, nh: *s64, t: *float64, ldt: *s64, nv: *s64, wv: *float64, ldwv: *s64, work: *float64, lwork: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr3_ :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, sr: *float64, si: *float64, v: *float64, ldv: *s64, nh: *s64, t: *float64, ldt: *s64, nv: *s64, wv: *float64, ldwv: *s64, work: *float64, lwork: *s64) -> void #foreign mkl_intel_ilp64;

DLAQR4 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr4 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr4_ :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAQR5 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, sr: *float64, si: *float64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, v: *float64, ldv: *s64, u: *float64, ldu: *s64, nv: *s64, wv: *float64, ldwv: *s64, nh: *s64, wh: *float64, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr5 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, sr: *float64, si: *float64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, v: *float64, ldv: *s64, u: *float64, ldu: *s64, nv: *s64, wv: *float64, ldwv: *s64, nh: *s64, wh: *float64, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr5_ :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, sr: *float64, si: *float64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, v: *float64, ldv: *s64, u: *float64, ldu: *s64, nv: *s64, wv: *float64, ldwv: *s64, nh: *s64, wh: *float64, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

DLAQSB :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqsb :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqsb_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

DLAQSP :: (uplo: *u8, n: *s64, ap: *float64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqsp :: (uplo: *u8, n: *s64, ap: *float64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqsp_ :: (uplo: *u8, n: *s64, ap: *float64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

DLAQSY :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqsy :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqsy_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

DLAQTR :: (ltran: *s64, lreal: *s64, n: *s64, t: *float64, ldt: *s64, b: *float64, w: *float64, scale: *float64, x: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqtr :: (ltran: *s64, lreal: *s64, n: *s64, t: *float64, ldt: *s64, b: *float64, w: *float64, scale: *float64, x: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqtr_ :: (ltran: *s64, lreal: *s64, n: *s64, t: *float64, ldt: *s64, b: *float64, w: *float64, scale: *float64, x: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAQZ0 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqz0 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqz0_ :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAQZ1 :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, sr1: *float64, sr2: *float64, si: *float64, beta1: *float64, beta2: *float64, v: *float64) -> void #foreign mkl_intel_ilp64;

dlaqz1 :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, sr1: *float64, sr2: *float64, si: *float64, beta1: *float64, beta2: *float64, v: *float64) -> void #foreign mkl_intel_ilp64;

dlaqz1_ :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, sr1: *float64, sr2: *float64, si: *float64, beta1: *float64, beta2: *float64, v: *float64) -> void #foreign mkl_intel_ilp64;

DLAQZ2 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, nq: *s64, qstart: *s64, q: *float64, ldq: *s64, nz: *s64, zstart: *s64, z: *float64, ldz: *s64) -> void #foreign mkl_intel_ilp64;

dlaqz2 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, nq: *s64, qstart: *s64, q: *float64, ldq: *s64, nz: *s64, zstart: *s64, z: *float64, ldz: *s64) -> void #foreign mkl_intel_ilp64;

dlaqz2_ :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, nq: *s64, qstart: *s64, q: *float64, ldq: *s64, nz: *s64, zstart: *s64, z: *float64, ldz: *s64) -> void #foreign mkl_intel_ilp64;

DLAQZ3 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, alphar: *float64, alphai: *float64, beta: *float64, qc: *float64, ldqc: *s64, zc: *float64, ldzc: *s64, work: *float64, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqz3 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, alphar: *float64, alphai: *float64, beta: *float64, qc: *float64, ldqc: *s64, zc: *float64, ldzc: *s64, work: *float64, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqz3_ :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, alphar: *float64, alphai: *float64, beta: *float64, qc: *float64, ldqc: *s64, zc: *float64, ldzc: *s64, work: *float64, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAQZ4 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alphar: *float64, alphai: *float64, beta: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, qc: *float64, ldqc: *s64, zc: *float64, ldzc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqz4 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alphar: *float64, alphai: *float64, beta: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, qc: *float64, ldqc: *s64, zc: *float64, ldzc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqz4_ :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alphar: *float64, alphai: *float64, beta: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, qc: *float64, ldqc: *s64, zc: *float64, ldzc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAR1V :: (n: *s64, b1: *s64, bn: *s64, lambda: *float64, d: *float64, l: *float64, ld: *float64, lld: *float64, pivmin: *float64, gaptol: *float64, z: *float64, wantnc: *s64, negcnt: *s64, ztz: *float64, mingma: *float64, r: *s64, isuppz: *s64, nrminv: *float64, resid: *float64, rqcorr: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlar1v :: (n: *s64, b1: *s64, bn: *s64, lambda: *float64, d: *float64, l: *float64, ld: *float64, lld: *float64, pivmin: *float64, gaptol: *float64, z: *float64, wantnc: *s64, negcnt: *s64, ztz: *float64, mingma: *float64, r: *s64, isuppz: *s64, nrminv: *float64, resid: *float64, rqcorr: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlar1v_ :: (n: *s64, b1: *s64, bn: *s64, lambda: *float64, d: *float64, l: *float64, ld: *float64, lld: *float64, pivmin: *float64, gaptol: *float64, z: *float64, wantnc: *s64, negcnt: *s64, ztz: *float64, mingma: *float64, r: *s64, isuppz: *s64, nrminv: *float64, resid: *float64, rqcorr: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLAR2V :: (n: *s64, x: *float64, y: *float64, z: *float64, incx: *s64, c: *float64, s: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

dlar2v :: (n: *s64, x: *float64, y: *float64, z: *float64, incx: *s64, c: *float64, s: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

dlar2v_ :: (n: *s64, x: *float64, y: *float64, z: *float64, incx: *s64, c: *float64, s: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

DLARFB :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

dlarfb :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

dlarfb_ :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

DLARF :: (side: *u8, m: *s64, n: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlarf :: (side: *u8, m: *s64, n: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlarf_ :: (side: *u8, m: *s64, n: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLARFG :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

dlarfg :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

dlarfg_ :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

DLARFGP :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

dlarfgp :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

dlarfgp_ :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

DLARFP :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

dlarfp :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

dlarfp_ :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

DLARFT :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float64, ldv: *s64, tau: *float64, t: *float64, ldt: *s64) -> void #foreign mkl_intel_ilp64;

dlarft :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float64, ldv: *s64, tau: *float64, t: *float64, ldt: *s64) -> void #foreign mkl_intel_ilp64;

dlarft_ :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float64, ldv: *s64, tau: *float64, t: *float64, ldt: *s64) -> void #foreign mkl_intel_ilp64;

DLARFX :: (side: *u8, m: *s64, n: *s64, v: *float64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlarfx :: (side: *u8, m: *s64, n: *s64, v: *float64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlarfx_ :: (side: *u8, m: *s64, n: *s64, v: *float64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLARGV :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

dlargv :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

dlargv_ :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

DLARNV :: (idist: *s64, iseed: *s64, n: *s64, x: *float64) -> void #foreign mkl_intel_ilp64;

dlarnv :: (idist: *s64, iseed: *s64, n: *s64, x: *float64) -> void #foreign mkl_intel_ilp64;

dlarnv_ :: (idist: *s64, iseed: *s64, n: *s64, x: *float64) -> void #foreign mkl_intel_ilp64;

DLARRA :: (n: *s64, d: *float64, e: *float64, e2: *float64, spltol: *float64, tnrm: *float64, nsplit: *s64, isplit: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarra :: (n: *s64, d: *float64, e: *float64, e2: *float64, spltol: *float64, tnrm: *float64, nsplit: *s64, isplit: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarra_ :: (n: *s64, d: *float64, e: *float64, e2: *float64, spltol: *float64, tnrm: *float64, nsplit: *s64, isplit: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRB :: (n: *s64, d: *float64, lld: *float64, ifirst: *s64, ilast: *s64, rtol1: *float64, rtol2: *float64, offset: *s64, w: *float64, wgap: *float64, werr: *float64, work: *float64, iwork: *s64, pivmin: *float64, spdiam: *float64, twist: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrb :: (n: *s64, d: *float64, lld: *float64, ifirst: *s64, ilast: *s64, rtol1: *float64, rtol2: *float64, offset: *s64, w: *float64, wgap: *float64, werr: *float64, work: *float64, iwork: *s64, pivmin: *float64, spdiam: *float64, twist: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrb_ :: (n: *s64, d: *float64, lld: *float64, ifirst: *s64, ilast: *s64, rtol1: *float64, rtol2: *float64, offset: *s64, w: *float64, wgap: *float64, werr: *float64, work: *float64, iwork: *s64, pivmin: *float64, spdiam: *float64, twist: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRC :: (jobt: *u8, n: *s64, vl: *float64, vu: *float64, d: *float64, e: *float64, pivmin: *float64, eigcnt: *s64, lcnt: *s64, rcnt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrc :: (jobt: *u8, n: *s64, vl: *float64, vu: *float64, d: *float64, e: *float64, pivmin: *float64, eigcnt: *s64, lcnt: *s64, rcnt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrc_ :: (jobt: *u8, n: *s64, vl: *float64, vu: *float64, d: *float64, e: *float64, pivmin: *float64, eigcnt: *s64, lcnt: *s64, rcnt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRD :: (range: *u8, order: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, gers: *float64, reltol: *float64, d: *float64, e: *float64, e2: *float64, pivmin: *float64, nsplit: *s64, isplit: *s64, m: *s64, w: *float64, werr: *float64, wl: *float64, wu: *float64, iblock: *s64, indexw: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrd :: (range: *u8, order: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, gers: *float64, reltol: *float64, d: *float64, e: *float64, e2: *float64, pivmin: *float64, nsplit: *s64, isplit: *s64, m: *s64, w: *float64, werr: *float64, wl: *float64, wu: *float64, iblock: *s64, indexw: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrd_ :: (range: *u8, order: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, gers: *float64, reltol: *float64, d: *float64, e: *float64, e2: *float64, pivmin: *float64, nsplit: *s64, isplit: *s64, m: *s64, w: *float64, werr: *float64, wl: *float64, wu: *float64, iblock: *s64, indexw: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRE :: (range: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, d: *float64, e: *float64, e2: *float64, rtol1: *float64, rtol2: *float64, spltol: *float64, nsplit: *s64, isplit: *s64, m: *s64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, pivmin: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarre :: (range: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, d: *float64, e: *float64, e2: *float64, rtol1: *float64, rtol2: *float64, spltol: *float64, nsplit: *s64, isplit: *s64, m: *s64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, pivmin: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarre_ :: (range: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, d: *float64, e: *float64, e2: *float64, rtol1: *float64, rtol2: *float64, spltol: *float64, nsplit: *s64, isplit: *s64, m: *s64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, pivmin: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRF :: (n: *s64, d: *float64, l: *float64, ld: *float64, clstrt: *s64, clend: *s64, w: *float64, wgap: *float64, werr: *float64, spdiam: *float64, clgapl: *float64, clgapr: *float64, pivmin: *float64, sigma: *float64, dplus: *float64, lplus: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrf :: (n: *s64, d: *float64, l: *float64, ld: *float64, clstrt: *s64, clend: *s64, w: *float64, wgap: *float64, werr: *float64, spdiam: *float64, clgapl: *float64, clgapr: *float64, pivmin: *float64, sigma: *float64, dplus: *float64, lplus: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrf_ :: (n: *s64, d: *float64, l: *float64, ld: *float64, clstrt: *s64, clend: *s64, w: *float64, wgap: *float64, werr: *float64, spdiam: *float64, clgapl: *float64, clgapr: *float64, pivmin: *float64, sigma: *float64, dplus: *float64, lplus: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRJ :: (n: *s64, d: *float64, e2: *float64, ifirst: *s64, ilast: *s64, rtol: *float64, offset: *s64, w: *float64, werr: *float64, work: *float64, iwork: *s64, pivmin: *float64, spdiam: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrj :: (n: *s64, d: *float64, e2: *float64, ifirst: *s64, ilast: *s64, rtol: *float64, offset: *s64, w: *float64, werr: *float64, work: *float64, iwork: *s64, pivmin: *float64, spdiam: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrj_ :: (n: *s64, d: *float64, e2: *float64, ifirst: *s64, ilast: *s64, rtol: *float64, offset: *s64, w: *float64, werr: *float64, work: *float64, iwork: *s64, pivmin: *float64, spdiam: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRK :: (n: *s64, iw: *s64, gl: *float64, gu: *float64, d: *float64, e2: *float64, pivmin: *float64, reltol: *float64, w: *float64, werr: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrk :: (n: *s64, iw: *s64, gl: *float64, gu: *float64, d: *float64, e2: *float64, pivmin: *float64, reltol: *float64, w: *float64, werr: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrk_ :: (n: *s64, iw: *s64, gl: *float64, gu: *float64, d: *float64, e2: *float64, pivmin: *float64, reltol: *float64, w: *float64, werr: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRR :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrr :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dlarrr_ :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRV :: (n: *s64, vl: *float64, vu: *float64, d: *float64, l: *float64, pivmin: *float64, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float64, rtol1: *float64, rtol2: *float64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrv :: (n: *s64, vl: *float64, vu: *float64, d: *float64, l: *float64, pivmin: *float64, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float64, rtol1: *float64, rtol2: *float64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrv_ :: (n: *s64, vl: *float64, vu: *float64, d: *float64, l: *float64, pivmin: *float64, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float64, rtol1: *float64, rtol2: *float64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARSCL2 :: (m: *s64, n: *s64, d: *float64, x: *float64, ldx: *s64) -> void #foreign mkl_intel_ilp64;

dlarscl2 :: (m: *s64, n: *s64, d: *float64, x: *float64, ldx: *s64) -> void #foreign mkl_intel_ilp64;

dlarscl2_ :: (m: *s64, n: *s64, d: *float64, x: *float64, ldx: *s64) -> void #foreign mkl_intel_ilp64;

DLARTG :: (f: *float64, g: *float64, cs: *float64, sn: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

dlartg :: (f: *float64, g: *float64, cs: *float64, sn: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

dlartg_ :: (f: *float64, g: *float64, cs: *float64, sn: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

DLARTV :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, s: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

dlartv :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, s: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

dlartv_ :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, s: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

DLARUV :: (iseed: *s64, n: *s64, x: *float64) -> void #foreign mkl_intel_ilp64;

dlaruv :: (iseed: *s64, n: *s64, x: *float64) -> void #foreign mkl_intel_ilp64;
dlaruv_ :: (iseed: *s64, n: *s64, x: *float64) -> void #foreign mkl_intel_ilp64;

DLARZB :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

dlarzb :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

dlarzb_ :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

DLARZ :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlarz :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlarz_ :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLARZT :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float64, ldv: *s64, tau: *float64, t: *float64, ldt: *s64) -> void #foreign mkl_intel_ilp64;

dlarzt :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float64, ldv: *s64, tau: *float64, t: *float64, ldt: *s64) -> void #foreign mkl_intel_ilp64;

dlarzt_ :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float64, ldv: *s64, tau: *float64, t: *float64, ldt: *s64) -> void #foreign mkl_intel_ilp64;

DLAS2 :: (f: *float64, g: *float64, h: *float64, ssmin: *float64, ssmax: *float64) -> void #foreign mkl_intel_ilp64;

dlas2 :: (f: *float64, g: *float64, h: *float64, ssmin: *float64, ssmax: *float64) -> void #foreign mkl_intel_ilp64;

dlas2_ :: (f: *float64, g: *float64, h: *float64, ssmin: *float64, ssmax: *float64) -> void #foreign mkl_intel_ilp64;

DLASCL :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float64, cto: *float64, m: *s64, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlascl :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float64, cto: *float64, m: *s64, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlascl_ :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float64, cto: *float64, m: *s64, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASCL2 :: (m: *s64, n: *s64, d: *float64, x: *float64, ldx: *s64) -> void #foreign mkl_intel_ilp64;

dlascl2 :: (m: *s64, n: *s64, d: *float64, x: *float64, ldx: *s64) -> void #foreign mkl_intel_ilp64;

dlascl2_ :: (m: *s64, n: *s64, d: *float64, x: *float64, ldx: *s64) -> void #foreign mkl_intel_ilp64;

DLASD0 :: (n: *s64, sqre: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, smlsiz: *s64, iwork: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd0 :: (n: *s64, sqre: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, smlsiz: *s64, iwork: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd0_ :: (n: *s64, sqre: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, smlsiz: *s64, iwork: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD1 :: (nl: *s64, nr: *s64, sqre: *s64, d: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, idxq: *s64, iwork: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd1 :: (nl: *s64, nr: *s64, sqre: *s64, d: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, idxq: *s64, iwork: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd1_ :: (nl: *s64, nr: *s64, sqre: *s64, d: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, idxq: *s64, iwork: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD2 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, z: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, dsigma: *float64, u2: *float64, ldu2: *s64, vt2: *float64, ldvt2: *s64, idxp: *s64, idx: *s64, idxc: *s64, idxq: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd2 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, z: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, dsigma: *float64, u2: *float64, ldu2: *s64, vt2: *float64, ldvt2: *s64, idxp: *s64, idx: *s64, idxc: *s64, idxq: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd2_ :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, z: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, dsigma: *float64, u2: *float64, ldu2: *s64, vt2: *float64, ldvt2: *s64, idxp: *s64, idx: *s64, idxc: *s64, idxq: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD3 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, q: *float64, ldq: *s64, dsigma: *float64, u: *float64, ldu: *s64, u2: *float64, ldu2: *s64, vt: *float64, ldvt: *s64, vt2: *float64, ldvt2: *s64, idxc: *s64, ctot: *s64, z: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd3 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, q: *float64, ldq: *s64, dsigma: *float64, u: *float64, ldu: *s64, u2: *float64, ldu2: *s64, vt: *float64, ldvt: *s64, vt2: *float64, ldvt2: *s64, idxc: *s64, ctot: *s64, z: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd3_ :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, q: *float64, ldq: *s64, dsigma: *float64, u: *float64, ldu: *s64, u2: *float64, ldu2: *s64, vt: *float64, ldvt: *s64, vt2: *float64, ldvt2: *s64, idxc: *s64, ctot: *s64, z: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD4 :: (n: *s64, i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, sigma: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd4 :: (n: *s64, i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, sigma: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd4_ :: (n: *s64, i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, sigma: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD5 :: (i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dsigma: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlasd5 :: (i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dsigma: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlasd5_ :: (i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dsigma: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLASD6 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, d: *float64, vf: *float64, vl: *float64, alpha: *float64, beta: *float64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd6 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, d: *float64, vf: *float64, vl: *float64, alpha: *float64, beta: *float64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd6_ :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, d: *float64, vf: *float64, vl: *float64, alpha: *float64, beta: *float64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD7 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, z: *float64, zw: *float64, vf: *float64, vfw: *float64, vl: *float64, vlw: *float64, alpha: *float64, beta: *float64, dsigma: *float64, idx: *s64, idxp: *s64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, c: *float64, s: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd7 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, z: *float64, zw: *float64, vf: *float64, vfw: *float64, vl: *float64, vlw: *float64, alpha: *float64, beta: *float64, dsigma: *float64, idx: *s64, idxp: *s64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, c: *float64, s: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd7_ :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, z: *float64, zw: *float64, vf: *float64, vfw: *float64, vl: *float64, vlw: *float64, alpha: *float64, beta: *float64, dsigma: *float64, idx: *s64, idxp: *s64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, c: *float64, s: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD8 :: (icompq: *s64, k: *s64, d: *float64, z: *float64, vf: *float64, vl: *float64, difl: *float64, difr: *float64, lddifr: *s64, dsigma: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd8 :: (icompq: *s64, k: *s64, d: *float64, z: *float64, vf: *float64, vl: *float64, difl: *float64, difr: *float64, lddifr: *s64, dsigma: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd8_ :: (icompq: *s64, k: *s64, d: *float64, z: *float64, vf: *float64, vl: *float64, difl: *float64, difr: *float64, lddifr: *s64, dsigma: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASDA :: (icompq: *s64, smlsiz: *s64, n: *s64, sqre: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasda :: (icompq: *s64, smlsiz: *s64, n: *s64, sqre: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasda_ :: (icompq: *s64, smlsiz: *s64, n: *s64, sqre: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASDQ :: (uplo: *u8, sqre: *s64, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *float64, ldvt: *s64, u: *float64, ldu: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasdq :: (uplo: *u8, sqre: *s64, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *float64, ldvt: *s64, u: *float64, ldu: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasdq_ :: (uplo: *u8, sqre: *s64, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *float64, ldvt: *s64, u: *float64, ldu: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASDT :: (n: *s64, lvl: *s64, nd: *s64, inode: *s64, ndiml: *s64, ndimr: *s64, msub: *s64) -> void #foreign mkl_intel_ilp64;

dlasdt :: (n: *s64, lvl: *s64, nd: *s64, inode: *s64, ndiml: *s64, ndimr: *s64, msub: *s64) -> void #foreign mkl_intel_ilp64;

dlasdt_ :: (n: *s64, lvl: *s64, nd: *s64, inode: *s64, ndiml: *s64, ndimr: *s64, msub: *s64) -> void #foreign mkl_intel_ilp64;

DLASET :: (uplo: *u8, m: *s64, n: *s64, alpha: *float64, beta: *float64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

dlaset :: (uplo: *u8, m: *s64, n: *s64, alpha: *float64, beta: *float64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

dlaset_ :: (uplo: *u8, m: *s64, n: *s64, alpha: *float64, beta: *float64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

DLASQ1 :: (n: *s64, d: *float64, e: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasq1 :: (n: *s64, d: *float64, e: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasq1_ :: (n: *s64, d: *float64, e: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASQ2 :: (n: *s64, z: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasq2 :: (n: *s64, z: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dlasq2_ :: (n: *s64, z: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASQ3 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, dmin: *float64, sigma: *float64, desig: *float64, qmax: *float64, nfail: *s64, iter: *s64, ndiv: *s64, ieee: *s64, ttype: *s64, dmin1: *float64, dmin2: *float64, dn: *float64, dn1: *float64, dn2: *float64, g: *float64, tau: *float64) -> void #foreign mkl_intel_ilp64;

dlasq3 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, dmin: *float64, sigma: *float64, desig: *float64, qmax: *float64, nfail: *s64, iter: *s64, ndiv: *s64, ieee: *s64, ttype: *s64, dmin1: *float64, dmin2: *float64, dn: *float64, dn1: *float64, dn2: *float64, g: *float64, tau: *float64) -> void #foreign mkl_intel_ilp64;

dlasq3_ :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, dmin: *float64, sigma: *float64, desig: *float64, qmax: *float64, nfail: *s64, iter: *s64, ndiv: *s64, ieee: *s64, ttype: *s64, dmin1: *float64, dmin2: *float64, dn: *float64, dn1: *float64, dn2: *float64, g: *float64, tau: *float64) -> void #foreign mkl_intel_ilp64;

DLASQ4 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, n0in: *s64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dn1: *float64, dn2: *float64, tau: *float64, ttype: *s64, g: *float64) -> void #foreign mkl_intel_ilp64;

dlasq4 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, n0in: *s64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dn1: *float64, dn2: *float64, tau: *float64, ttype: *s64, g: *float64) -> void #foreign mkl_intel_ilp64;

dlasq4_ :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, n0in: *s64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dn1: *float64, dn2: *float64, tau: *float64, ttype: *s64, g: *float64) -> void #foreign mkl_intel_ilp64;

DLASQ5 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, tau: *float64, sigma: *float64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dnm1: *float64, dnm2: *float64, ieee: *s64, eps: *float64) -> void #foreign mkl_intel_ilp64;

dlasq5 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, tau: *float64, sigma: *float64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dnm1: *float64, dnm2: *float64, ieee: *s64, eps: *float64) -> void #foreign mkl_intel_ilp64;

dlasq5_ :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, tau: *float64, sigma: *float64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dnm1: *float64, dnm2: *float64, ieee: *s64, eps: *float64) -> void #foreign mkl_intel_ilp64;

DLASQ6 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dnm1: *float64, dnm2: *float64) -> void #foreign mkl_intel_ilp64;

dlasq6 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dnm1: *float64, dnm2: *float64) -> void #foreign mkl_intel_ilp64;

dlasq6_ :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dnm1: *float64, dnm2: *float64) -> void #foreign mkl_intel_ilp64;

DLASR :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float64, s: *float64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

dlasr :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float64, s: *float64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

dlasr_ :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float64, s: *float64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

DLASRT :: (id: *u8, n: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasrt :: (id: *u8, n: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dlasrt_ :: (id: *u8, n: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASSQ :: (n: *s64, x: *float64, incx: *s64, scale: *float64, sumsq: *float64) -> void #foreign mkl_intel_ilp64;

dlassq :: (n: *s64, x: *float64, incx: *s64, scale: *float64, sumsq: *float64) -> void #foreign mkl_intel_ilp64;

dlassq_ :: (n: *s64, x: *float64, incx: *s64, scale: *float64, sumsq: *float64) -> void #foreign mkl_intel_ilp64;

DLASV2 :: (f: *float64, g: *float64, h: *float64, ssmin: *float64, ssmax: *float64, snr: *float64, csr: *float64, snl: *float64, csl: *float64) -> void #foreign mkl_intel_ilp64;

dlasv2 :: (f: *float64, g: *float64, h: *float64, ssmin: *float64, ssmax: *float64, snr: *float64, csr: *float64, snl: *float64, csl: *float64) -> void #foreign mkl_intel_ilp64;

dlasv2_ :: (f: *float64, g: *float64, h: *float64, ssmin: *float64, ssmax: *float64, snr: *float64, csr: *float64, snl: *float64, csl: *float64) -> void #foreign mkl_intel_ilp64;

DLASWP :: (n: *s64, a: *float64, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dlaswp :: (n: *s64, a: *float64, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dlaswp_ :: (n: *s64, a: *float64, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DLASY2 :: (ltranl: *s64, ltranr: *s64, isgn: *s64, n1: *s64, n2: *s64, tl: *float64, ldtl: *s64, tr: *float64, ldtr: *s64, b: *float64, ldb: *s64, scale: *float64, x: *float64, ldx: *s64, xnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasy2 :: (ltranl: *s64, ltranr: *s64, isgn: *s64, n1: *s64, n2: *s64, tl: *float64, ldtl: *s64, tr: *float64, ldtr: *s64, b: *float64, ldb: *s64, scale: *float64, x: *float64, ldx: *s64, xnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasy2_ :: (ltranl: *s64, ltranr: *s64, isgn: *s64, n1: *s64, n2: *s64, tl: *float64, ldtl: *s64, tr: *float64, ldtr: *s64, b: *float64, ldb: *s64, scale: *float64, x: *float64, ldx: *s64, xnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASYF :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasyf :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasyf_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAT2S :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, sa: *float, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlat2s :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, sa: *float, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlat2s_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, sa: *float, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATBS :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatbs :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatbs_ :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATDF :: (ijob: *s64, n: *s64, z: *float64, ldz: *s64, rhs: *float64, rdsum: *float64, rdscal: *float64, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

dlatdf :: (ijob: *s64, n: *s64, z: *float64, ldz: *s64, rhs: *float64, rdsum: *float64, rdscal: *float64, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

dlatdf_ :: (ijob: *s64, n: *s64, z: *float64, ldz: *s64, rhs: *float64, rdsum: *float64, rdscal: *float64, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

DLATPS :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *float64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatps :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *float64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatps_ :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *float64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATRD :: (uplo: *u8, n: *s64, nb: *s64, a: *float64, lda: *s64, e: *float64, tau: *float64, w: *float64, ldw: *s64) -> void #foreign mkl_intel_ilp64;

dlatrd :: (uplo: *u8, n: *s64, nb: *s64, a: *float64, lda: *s64, e: *float64, tau: *float64, w: *float64, ldw: *s64) -> void #foreign mkl_intel_ilp64;

dlatrd_ :: (uplo: *u8, n: *s64, nb: *s64, a: *float64, lda: *s64, e: *float64, tau: *float64, w: *float64, ldw: *s64) -> void #foreign mkl_intel_ilp64;

DLATRS :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *float64, lda: *s64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatrs :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *float64, lda: *s64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatrs_ :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *float64, lda: *s64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATRZ :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlatrz :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlatrz_ :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLATZM :: (side: *u8, m: *s64, n: *s64, v: *float64, incv: *s64, tau: *float64, c1: *float64, c2: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlatzm :: (side: *u8, m: *s64, n: *s64, v: *float64, incv: *s64, tau: *float64, c1: *float64, c2: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlatzm_ :: (side: *u8, m: *s64, n: *s64, v: *float64, incv: *s64, tau: *float64, c1: *float64, c2: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLAUU2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlauu2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlauu2_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAUUM :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlauum :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlauum_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DOPGTR :: (uplo: *u8, n: *s64, ap: *float64, tau: *float64, q: *float64, ldq: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dopgtr :: (uplo: *u8, n: *s64, ap: *float64, tau: *float64, q: *float64, ldq: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dopgtr_ :: (uplo: *u8, n: *s64, ap: *float64, tau: *float64, q: *float64, ldq: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DOPMTR :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *float64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dopmtr :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *float64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dopmtr_ :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *float64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORG2L :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorg2l :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorg2l_ :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORG2R :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorg2r :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorg2r_ :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGBR :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgbr :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgbr_ :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGHR :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorghr :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorghr_ :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGL2 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgl2 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgl2_ :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGLQ :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorglq :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorglq_ :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGQL :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgql :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgql_ :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGQR :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgqr :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgqr_ :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGR2 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgr2 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgr2_ :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGRQ :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgrq :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgrq_ :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGTR :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgtr :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgtr_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORM2L :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorm2l :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorm2l_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORM2R :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorm2r :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorm2r_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMBR :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormbr :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormbr_ :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMHR :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormhr :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormhr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORML2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorml2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorml2_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMLQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormlq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormlq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMQL :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormql :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormql_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMQR :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormqr :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormqr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMR2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormr2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormr2_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMR3 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormr3 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormr3_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMRQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormrq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormrq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMRZ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormrz :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormrz_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMTR :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormtr :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormtr_ :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBCON :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbcon :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbcon_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBEQU :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbequ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbequ_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBRFS :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbrfs :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbrfs_ :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBSTF :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbstf :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbstf_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBSV :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbsv :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbsv_ :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBSVX :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbsvx :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbsvx_ :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBTF2 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbtf2 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbtf2_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBTRF :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbtrf :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbtrf_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBTRS :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbtrs :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbtrs_ :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPFTRF :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpftrf :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpftrf_ :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPFTRI :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpftri :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpftri_ :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPFTRS :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpftrs :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpftrs_ :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOCON :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpocon :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpocon_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOEQUB :: (n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpoequb :: (n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpoequb_ :: (n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOEQU :: (n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpoequ :: (n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpoequ_ :: (n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPORFS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dporfs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dporfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPORFSX :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dporfsx :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dporfsx_ :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOSV :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dposv :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dposv_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dposvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dposvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOSVXX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dposvxx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dposvxx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOTF2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotf2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotf2_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOTRF :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotrf :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotrf_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOTRI :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotri :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotri_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOTRS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotrs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPCON :: (uplo: *u8, n: *s64, ap: *float64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dppcon :: (uplo: *u8, n: *s64, ap: *float64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dppcon_ :: (uplo: *u8, n: *s64, ap: *float64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPEQU :: (uplo: *u8, n: *s64, ap: *float64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dppequ :: (uplo: *u8, n: *s64, ap: *float64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dppequ_ :: (uplo: *u8, n: *s64, ap: *float64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPRFS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpprfs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpprfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPSV :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dppsv :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dppsv_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dppsvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dppsvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPTRF :: (uplo: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpptrf :: (uplo: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dpptrf_ :: (uplo: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPTRI :: (uplo: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpptri :: (uplo: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dpptri_ :: (uplo: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPTRS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpptrs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpptrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPSTF2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpstf2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpstf2_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPSTRF :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpstrf :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpstrf_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTCON :: (n: *s64, d: *float64, e: *float64, anorm: *float64, rcond: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dptcon :: (n: *s64, d: *float64, e: *float64, anorm: *float64, rcond: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dptcon_ :: (n: *s64, d: *float64, e: *float64, anorm: *float64, rcond: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTEQR :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpteqr :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpteqr_ :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTRFS :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dptrfs :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dptrfs_ :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTSV :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dptsv :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dptsv_ :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTSVX :: (fact: *u8, n: *s64, nrhs: *s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dptsvx :: (fact: *u8, n: *s64, nrhs: *s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dptsvx_ :: (fact: *u8, n: *s64, nrhs: *s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTTRF :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpttrf :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dpttrf_ :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTTRS :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpttrs :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpttrs_ :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTTS2 :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dptts2 :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dptts2_ :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DRSCL :: (n: *s64, sa: *float64, sx: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

drscl :: (n: *s64, sa: *float64, sx: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

drscl_ :: (n: *s64, sa: *float64, sx: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DSBEVD :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbevd :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbevd_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBEV :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbev :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbev_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBEVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbevx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbevx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBGST :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, x: *float64, ldx: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbgst :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, x: *float64, ldx: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbgst_ :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, x: *float64, ldx: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBGVD :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbgvd :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbgvd_ :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBGV :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbgv :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbgv_ :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBGVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbgvx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbgvx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBTRD :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbtrd :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbtrd_ :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSECND :: () -> float64 #foreign mkl_intel_ilp64;

dsecnd :: () -> float64 #foreign mkl_intel_ilp64;
dsecnd_ :: () -> float64 #foreign mkl_intel_ilp64;

DSFRK :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, beta: *float64, c: *float64) -> void #foreign mkl_intel_ilp64;

dsfrk :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, beta: *float64, c: *float64) -> void #foreign mkl_intel_ilp64;

dsfrk_ :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, beta: *float64, c: *float64) -> void #foreign mkl_intel_ilp64;

DSGESV :: (n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, work: *float64, swork: *float, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsgesv :: (n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, work: *float64, swork: *float, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsgesv_ :: (n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, work: *float64, swork: *float, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPCON :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspcon :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspcon_ :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPEVD :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspevd :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspevd_ :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPEV :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspev :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspev_ :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPEVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspevx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspevx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPGST :: (itype: *s64, uplo: *u8, n: *s64, ap: *float64, bp: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspgst :: (itype: *s64, uplo: *u8, n: *s64, ap: *float64, bp: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspgst_ :: (itype: *s64, uplo: *u8, n: *s64, ap: *float64, bp: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPGVD :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspgvd :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspgvd_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPGV :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspgv :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspgv_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPGVX :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspgvx :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspgvx_ :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPOSV :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, work: *float64, swork: *float, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsposv :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, work: *float64, swork: *float, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsposv_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, work: *float64, swork: *float, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPRFS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsprfs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsprfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPSV :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspsv :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspsv_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspsvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspsvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPTRD :: (uplo: *u8, n: *s64, ap: *float64, d: *float64, e: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsptrd :: (uplo: *u8, n: *s64, ap: *float64, d: *float64, e: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsptrd_ :: (uplo: *u8, n: *s64, ap: *float64, d: *float64, e: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPTRF :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsptrf :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsptrf_ :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPTRI :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsptri :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsptri_ :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPTRS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsptrs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsptrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEBZ :: (range: *u8, order: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, d: *float64, e: *float64, m: *s64, nsplit: *s64, w: *float64, iblock: *s64, isplit: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstebz :: (range: *u8, order: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, d: *float64, e: *float64, m: *s64, nsplit: *s64, w: *float64, iblock: *s64, isplit: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstebz_ :: (range: *u8, order: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, d: *float64, e: *float64, m: *s64, nsplit: *s64, w: *float64, iblock: *s64, isplit: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEDC :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstedc :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstedc_ :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEGR :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstegr :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstegr_ :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEIN :: (n: *s64, d: *float64, e: *float64, m: *s64, w: *float64, iblock: *s64, isplit: *s64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstein :: (n: *s64, d: *float64, e: *float64, m: *s64, w: *float64, iblock: *s64, isplit: *s64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstein_ :: (n: *s64, d: *float64, e: *float64, m: *s64, w: *float64, iblock: *s64, isplit: *s64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEMR :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, m: *s64, w: *float64, z: *float64, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstemr :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, m: *s64, w: *float64, z: *float64, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstemr_ :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, m: *s64, w: *float64, z: *float64, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEQR :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsteqr :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsteqr_ :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTERF :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsterf :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dsterf_ :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEVD :: (jobz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstevd :: (jobz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstevd_ :: (jobz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEV :: (jobz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstev :: (jobz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstev_ :: (jobz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEVR :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstevr :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstevr_ :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEVX :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstevx :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstevx_ :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYCON :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsycon :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsycon_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEQUB :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyequb :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyequb_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEVD :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevd :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevd_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEV :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyev :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyev_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEVR :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevr :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevr_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYGS2 :: (itype: *s64, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygs2 :: (itype: *s64, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygs2_ :: (itype: *s64, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYGST :: (itype: *s64, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygst :: (itype: *s64, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygst_ :: (itype: *s64, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYGVD :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygvd :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygvd_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYGV :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygv :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygv_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYGVX :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygvx :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygvx_ :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYRFS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyrfs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyrfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYRFSX :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyrfsx :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyrfsx_ :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSV :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSVXX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysvxx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysvxx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTD2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytd2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytd2_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTF2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytf2 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytf2_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRD :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrd :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrd_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRF :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRI :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTBCON :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtbcon :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtbcon_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTBRFS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtbrfs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtbrfs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTBTRS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtbtrs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtbtrs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTFSM :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dtfsm :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dtfsm_ :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DTFTRI :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtftri :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtftri_ :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTFTTP :: (transr: *u8, uplo: *u8, n: *s64, arf: *float64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtfttp :: (transr: *u8, uplo: *u8, n: *s64, arf: *float64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtfttp_ :: (transr: *u8, uplo: *u8, n: *s64, arf: *float64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTFTTR :: (transr: *u8, uplo: *u8, n: *s64, arf: *float64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtfttr :: (transr: *u8, uplo: *u8, n: *s64, arf: *float64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtfttr_ :: (transr: *u8, uplo: *u8, n: *s64, arf: *float64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGEVC :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *float64, lds: *s64, p: *float64, ldp: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgevc :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *float64, lds: *s64, p: *float64, ldp: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgevc_ :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *float64, lds: *s64, p: *float64, ldp: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGEX2 :: (wantq: *s64, wantz: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgex2 :: (wantq: *s64, wantz: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgex2_ :: (wantq: *s64, wantz: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGEXC :: (wantq: *s64, wantz: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, ifst: *s64, ilst: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgexc :: (wantq: *s64, wantz: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, ifst: *s64, ilst: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgexc_ :: (wantq: *s64, wantz: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, ifst: *s64, ilst: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGSEN :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, m: *s64, pl: *float64, pr: *float64, dif: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsen :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, m: *s64, pl: *float64, pr: *float64, dif: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsen_ :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, m: *s64, pl: *float64, pr: *float64, dif: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGSJA :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsja :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsja_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGSNA :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, s: *float64, dif: *float64, mm: *s64, m: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsna :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, s: *float64, dif: *float64, mm: *s64, m: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsna_ :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, s: *float64, dif: *float64, mm: *s64, m: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGSY2 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, scale: *float64, rdsum: *float64, rdscal: *float64, iwork: *s64, pq: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsy2 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, scale: *float64, rdsum: *float64, rdscal: *float64, iwork: *s64, pq: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsy2_ :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, scale: *float64, rdsum: *float64, rdscal: *float64, iwork: *s64, pq: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGSYL :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, scale: *float64, dif: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsyl :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, scale: *float64, dif: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsyl_ :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, scale: *float64, dif: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPCON :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpcon :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpcon_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPRFS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtprfs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtprfs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPTRI :: (uplo: *u8, diag: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtptri :: (uplo: *u8, diag: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtptri_ :: (uplo: *u8, diag: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPTRS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtptrs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtptrs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPTTF :: (transr: *u8, uplo: *u8, n: *s64, ap: *float64, arf: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpttf :: (transr: *u8, uplo: *u8, n: *s64, ap: *float64, arf: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpttf_ :: (transr: *u8, uplo: *u8, n: *s64, ap: *float64, arf: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPTTR :: (uplo: *u8, n: *s64, ap: *float64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpttr :: (uplo: *u8, n: *s64, ap: *float64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpttr_ :: (uplo: *u8, n: *s64, ap: *float64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRCON :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrcon :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrcon_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTREVC :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrevc :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrevc_ :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTREXC :: (compq: *u8, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, ifst: *s64, ilst: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrexc :: (compq: *u8, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, ifst: *s64, ilst: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrexc_ :: (compq: *u8, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, ifst: *s64, ilst: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRRFS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrrfs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrrfs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRSEN :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, wr: *float64, wi: *float64, m: *s64, s: *float64, sep: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrsen :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, wr: *float64, wi: *float64, m: *s64, s: *float64, sep: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrsen_ :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, wr: *float64, wi: *float64, m: *s64, s: *float64, sep: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRSNA :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, s: *float64, sep: *float64, mm: *s64, m: *s64, work: *float64, ldwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrsna :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, s: *float64, sep: *float64, mm: *s64, m: *s64, work: *float64, ldwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrsna_ :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, s: *float64, sep: *float64, mm: *s64, m: *s64, work: *float64, ldwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRSYL :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrsyl :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrsyl_ :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRTI2 :: (uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrti2 :: (uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrti2_ :: (uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRTRI :: (uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrtri :: (uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrtri_ :: (uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRTRS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrtrs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrtrs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRTTF :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, arf: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrttf :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, arf: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrttf_ :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, arf: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRTTP :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrttp :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrttp_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTZRQF :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtzrqf :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtzrqf_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTZRZF :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtzrzf :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtzrzf_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DZSUM1 :: (n: *s64, cx: *MKL_Complex16, incx: *s64) -> float64 #foreign mkl_intel_ilp64;

dzsum1 :: (n: *s64, cx: *MKL_Complex16, incx: *s64) -> float64 #foreign mkl_intel_ilp64;

dzsum1_ :: (n: *s64, cx: *MKL_Complex16, incx: *s64) -> float64 #foreign mkl_intel_ilp64;

ICMAX1 :: (n: *s64, cx: *MKL_Complex8, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

icmax1 :: (n: *s64, cx: *MKL_Complex8, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

icmax1_ :: (n: *s64, cx: *MKL_Complex8, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

IEEECK :: (ispec: *s64, zero: *float, one: *float) -> s64 #foreign mkl_intel_ilp64;

ieeeck :: (ispec: *s64, zero: *float, one: *float) -> s64 #foreign mkl_intel_ilp64;
ieeeck_ :: (ispec: *s64, zero: *float, one: *float) -> s64 #foreign mkl_intel_ilp64;

ILACLC :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaclc :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaclc_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILACLR :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaclr :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaclr_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILADIAG :: (diag: *u8) -> s64 #foreign mkl_intel_ilp64;

iladiag :: (diag: *u8) -> s64 #foreign mkl_intel_ilp64;
iladiag_ :: (diag: *u8) -> s64 #foreign mkl_intel_ilp64;

ILADLC :: (m: *s64, n: *s64, a: *float64, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

iladlc :: (m: *s64, n: *s64, a: *float64, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

iladlc_ :: (m: *s64, n: *s64, a: *float64, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILADLR :: (m: *s64, n: *s64, a: *float64, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

iladlr :: (m: *s64, n: *s64, a: *float64, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

iladlr_ :: (m: *s64, n: *s64, a: *float64, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILAENV :: (ispec: *s64, name: *u8, opts: *u8, n1: *s64, n2: *s64, n3: *s64, n4: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaenv :: (ispec: *s64, name: *u8, opts: *u8, n1: *s64, n2: *s64, n3: *s64, n4: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaenv_ :: (ispec: *s64, name: *u8, opts: *u8, n1: *s64, n2: *s64, n3: *s64, n4: *s64) -> s64 #foreign mkl_intel_ilp64;

ILAENV2STAGE :: (ispec: *s64, name: *u8, opts: *u8, n1: *s64, n2: *s64, n3: *s64, n4: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaenv2stage :: (ispec: *s64, name: *u8, opts: *u8, n1: *s64, n2: *s64, n3: *s64, n4: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaenv2stage_ :: (ispec: *s64, name: *u8, opts: *u8, n1: *s64, n2: *s64, n3: *s64, n4: *s64) -> s64 #foreign mkl_intel_ilp64;

ILAPREC :: (prec: *u8) -> s64 #foreign mkl_intel_ilp64;

ilaprec :: (prec: *u8) -> s64 #foreign mkl_intel_ilp64;
ilaprec_ :: (prec: *u8) -> s64 #foreign mkl_intel_ilp64;

ILASLC :: (m: *s64, n: *s64, a: *float, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaslc :: (m: *s64, n: *s64, a: *float, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaslc_ :: (m: *s64, n: *s64, a: *float, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILASLR :: (m: *s64, n: *s64, a: *float, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaslr :: (m: *s64, n: *s64, a: *float, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaslr_ :: (m: *s64, n: *s64, a: *float, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILATRANS :: (trans: *u8) -> s64 #foreign mkl_intel_ilp64;

ilatrans :: (trans: *u8) -> s64 #foreign mkl_intel_ilp64;
ilatrans_ :: (trans: *u8) -> s64 #foreign mkl_intel_ilp64;

ILAUPLO :: (uplo: *u8) -> s64 #foreign mkl_intel_ilp64;

ilauplo :: (uplo: *u8) -> s64 #foreign mkl_intel_ilp64;
ilauplo_ :: (uplo: *u8) -> s64 #foreign mkl_intel_ilp64;

ILAVER :: (vers_major: *s64, vers_minor: *s64, vers_patch: *s64) -> void #foreign mkl_intel_ilp64;

ilaver :: (vers_major: *s64, vers_minor: *s64, vers_patch: *s64) -> void #foreign mkl_intel_ilp64;
ilaver_ :: (vers_major: *s64, vers_minor: *s64, vers_patch: *s64) -> void #foreign mkl_intel_ilp64;

ILAZLC :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilazlc :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilazlc_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILAZLR :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilazlr :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilazlr_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

IPARMQ :: (ispec: *s64, name: *u8, opts: *u8, n: *s64, ilo: *s64, ihi: *s64, lwork: *s64) -> s64 #foreign mkl_intel_ilp64;

iparmq :: (ispec: *s64, name: *u8, opts: *u8, n: *s64, ilo: *s64, ihi: *s64, lwork: *s64) -> s64 #foreign mkl_intel_ilp64;

iparmq_ :: (ispec: *s64, name: *u8, opts: *u8, n: *s64, ilo: *s64, ihi: *s64, lwork: *s64) -> s64 #foreign mkl_intel_ilp64;

IZMAX1 :: (n: *s64, cx: *MKL_Complex16, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

izmax1 :: (n: *s64, cx: *MKL_Complex16, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

izmax1_ :: (n: *s64, cx: *MKL_Complex16, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

LSAMEN :: (n: *s64, ca: *u8, cb: *u8) -> s64 #foreign mkl_intel_ilp64;

lsamen :: (n: *s64, ca: *u8, cb: *u8) -> s64 #foreign mkl_intel_ilp64;
lsamen_ :: (n: *s64, ca: *u8, cb: *u8) -> s64 #foreign mkl_intel_ilp64;

SBDSDC :: (uplo: *u8, compq: *u8, n: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, q: *float, iq: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sbdsdc :: (uplo: *u8, compq: *u8, n: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, q: *float, iq: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sbdsdc_ :: (uplo: *u8, compq: *u8, n: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, q: *float, iq: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SBDSQR :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *float, ldvt: *s64, u: *float, ldu: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sbdsqr :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *float, ldvt: *s64, u: *float, ldu: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sbdsqr_ :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *float, ldvt: *s64, u: *float, ldu: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SCSUM1 :: (n: *s64, cx: *MKL_Complex8, incx: *s64) -> float #foreign mkl_intel_ilp64;

scsum1 :: (n: *s64, cx: *MKL_Complex8, incx: *s64) -> float #foreign mkl_intel_ilp64;
scsum1_ :: (n: *s64, cx: *MKL_Complex8, incx: *s64) -> float #foreign mkl_intel_ilp64;

SDISNA :: (job: *u8, m: *s64, n: *s64, d: *float, sep: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sdisna :: (job: *u8, m: *s64, n: *s64, d: *float, sep: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sdisna_ :: (job: *u8, m: *s64, n: *s64, d: *float, sep: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SECOND :: () -> float #foreign mkl_intel_ilp64;

second :: () -> float #foreign mkl_intel_ilp64;
second_ :: () -> float #foreign mkl_intel_ilp64;

SGBBRD :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, d: *float, e: *float, q: *float, ldq: *s64, pt: *float, ldpt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbbrd :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, d: *float, e: *float, q: *float, ldq: *s64, pt: *float, ldpt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbbrd_ :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, d: *float, e: *float, q: *float, ldq: *s64, pt: *float, ldpt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBCON :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbcon :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbcon_ :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBEQUB :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbequb :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbequb_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBEQU :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbequ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbequ_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBRFS :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbrfs :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbrfs_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBRFSX :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbrfsx :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbrfsx_ :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBSV :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbsv :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbsv_ :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBSVX :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbsvx :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbsvx_ :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBSVXX :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbsvxx :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbsvxx_ :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBTF2 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbtf2 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbtf2_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBTRF :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbtrf :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbtrf_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBTRS :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbtrs :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbtrs_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEBAK :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float, m: *s64, v: *float, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgebak :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float, m: *s64, v: *float, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgebak_ :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float, m: *s64, v: *float, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEBAL :: (job: *u8, n: *s64, a: *float, lda: *s64, ilo: *s64, ihi: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgebal :: (job: *u8, n: *s64, a: *float, lda: *s64, ilo: *s64, ihi: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgebal_ :: (job: *u8, n: *s64, a: *float, lda: *s64, ilo: *s64, ihi: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEBD2 :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgebd2 :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgebd2_ :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEBRD :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgebrd :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgebrd_ :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGECON :: (norm: *u8, n: *s64, a: *float, lda: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgecon :: (norm: *u8, n: *s64, a: *float, lda: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgecon_ :: (norm: *u8, n: *s64, a: *float, lda: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEEQUB :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeequb :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeequb_ :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEEQU :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeequ :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeequ_ :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEES :: (jobvs: *u8, sort: *u8, select: MKL_S_SELECT_FUNCTION_2, n: *s64, a: *float, lda: *s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgees :: (jobvs: *u8, sort: *u8, select: MKL_S_SELECT_FUNCTION_2, n: *s64, a: *float, lda: *s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgees_ :: (jobvs: *u8, sort: *u8, select: MKL_S_SELECT_FUNCTION_2, n: *s64, a: *float, lda: *s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEESX :: (jobvs: *u8, sort: *u8, select: MKL_S_SELECT_FUNCTION_2, sense: *u8, n: *s64, a: *float, lda: *s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: *s64, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeesx :: (jobvs: *u8, sort: *u8, select: MKL_S_SELECT_FUNCTION_2, sense: *u8, n: *s64, a: *float, lda: *s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: *s64, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeesx_ :: (jobvs: *u8, sort: *u8, select: MKL_S_SELECT_FUNCTION_2, sense: *u8, n: *s64, a: *float, lda: *s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: *s64, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEEV :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeev :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeev_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEEVX :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float, lda: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeevx :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float, lda: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeevx_ :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float, lda: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEGS :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgegs :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgegs_ :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEGV :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgegv :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgegv_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEHD2 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgehd2 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgehd2_ :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEHRD :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgehrd :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgehrd_ :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEJSV :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *float, lda: *s64, sva: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgejsv :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *float, lda: *s64, sva: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgejsv_ :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *float, lda: *s64, sva: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELQ2 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelq2 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelq2_ :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELQF :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelqf :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelqf_ :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELSD :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelsd :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelsd_ :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELS :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgels :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgels_ :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELSS :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelss :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelss_ :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELSX :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelsx :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelsx_ :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELSY :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelsy :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelsy_ :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQL2 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeql2 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeql2_ :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQLF :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqlf :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqlf_ :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQP3 :: (m: *s64, n: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqp3 :: (m: *s64, n: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqp3_ :: (m: *s64, n: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQPF :: (m: *s64, n: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqpf :: (m: *s64, n: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqpf_ :: (m: *s64, n: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQR2 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqr2 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqr2_ :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQR2P :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqr2p :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqr2p_ :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQRF :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrf :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrf_ :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQRFP :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrfp :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrfp_ :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGERFS :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgerfs :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgerfs_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGERFSX :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgerfsx :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgerfsx_ :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGERQ2 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgerq2 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgerq2_ :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGERQF :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgerqf :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgerqf_ :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESC2 :: (n: *s64, a: *float, lda: *s64, rhs: *float, ipiv: *s64, jpiv: *s64, scale: *float) -> void #foreign mkl_intel_ilp64;

sgesc2 :: (n: *s64, a: *float, lda: *s64, rhs: *float, ipiv: *s64, jpiv: *s64, scale: *float) -> void #foreign mkl_intel_ilp64;

sgesc2_ :: (n: *s64, a: *float, lda: *s64, rhs: *float, ipiv: *s64, jpiv: *s64, scale: *float) -> void #foreign mkl_intel_ilp64;

SGESDD :: (jobz: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesdd :: (jobz: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesdd_ :: (jobz: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESVD :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvd :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvd_ :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESV :: (n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesv :: (n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesv_ :: (n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESVJ :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, sva: *float, mv: *s64, v: *float, ldv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvj :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, sva: *float, mv: *s64, v: *float, ldv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvj_ :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, sva: *float, mv: *s64, v: *float, ldv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESVX :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvx :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvx_ :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESVXX :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvxx :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvxx_ :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETC2 :: (n: *s64, a: *float, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetc2 :: (n: *s64, a: *float, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetc2_ :: (n: *s64, a: *float, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETF2 :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetf2 :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetf2_ :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRF :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrf :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrf_ :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_SGETRFNPI :: (m: *s64, n: *s64, nfact: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_sgetrfnpi :: (m: *s64, n: *s64, nfact: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_sgetrfnpi_ :: (m: *s64, n: *s64, nfact: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRI :: (n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetri :: (n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetri_ :: (n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRS :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrs :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrs_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGBAK :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, m: *s64, v: *float, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggbak :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, m: *s64, v: *float, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggbak_ :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, m: *s64, v: *float, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGBAL :: (job: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sggbal :: (job: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sggbal_ :: (job: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGES :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgges :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgges_ :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGESX :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3, sense: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggesx :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3, sense: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggesx_ :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3, sense: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGEV :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggev :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggev_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGEVX :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggevx :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggevx_ :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGGLM :: (n: *s64, m: *s64, p: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, d: *float, x: *float, y: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggglm :: (n: *s64, m: *s64, p: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, d: *float, x: *float, y: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggglm_ :: (n: *s64, m: *s64, p: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, d: *float, x: *float, y: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGHRD :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgghrd :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgghrd_ :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGLSE :: (m: *s64, n: *s64, p: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, d: *float, x: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgglse :: (m: *s64, n: *s64, p: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, d: *float, x: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgglse_ :: (m: *s64, n: *s64, p: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, d: *float, x: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGQRF :: (n: *s64, m: *s64, p: *s64, a: *float, lda: *s64, taua: *float, b: *float, ldb: *s64, taub: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggqrf :: (n: *s64, m: *s64, p: *s64, a: *float, lda: *s64, taua: *float, b: *float, ldb: *s64, taub: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggqrf_ :: (n: *s64, m: *s64, p: *s64, a: *float, lda: *s64, taua: *float, b: *float, ldb: *s64, taub: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGRQF :: (m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, taua: *float, b: *float, ldb: *s64, taub: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggrqf :: (m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, taua: *float, b: *float, ldb: *s64, taub: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggrqf_ :: (m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, taua: *float, b: *float, ldb: *s64, taub: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGSVD :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggsvd :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggsvd_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGSVP :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, iwork: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sggsvp :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, iwork: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sggsvp_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, iwork: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGSVJ0 :: (jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, d: *float, sva: *float, mv: *s64, v: *float, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgsvj0 :: (jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, d: *float, sva: *float, mv: *s64, v: *float, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgsvj0_ :: (jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, d: *float, sva: *float, mv: *s64, v: *float, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGSVJ1 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *float, lda: *s64, d: *float, sva: *float, mv: *s64, v: *float, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgsvj1 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *float, lda: *s64, d: *float, sva: *float, mv: *s64, v: *float, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgsvj1_ :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *float, lda: *s64, d: *float, sva: *float, mv: *s64, v: *float, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTCON :: (norm: *u8, n: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgtcon :: (norm: *u8, n: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgtcon_ :: (norm: *u8, n: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTRFS :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgtrfs :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgtrfs_ :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTSV :: (n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgtsv :: (n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgtsv_ :: (n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTSVX :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgtsvx :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgtsvx_ :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTTRF :: (n: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgttrf :: (n: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgttrf_ :: (n: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTTRS :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgttrs :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgttrs_ :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTTS2 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

sgtts2 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

sgtts2_ :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

SHGEQZ :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, t: *float, ldt: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

shgeqz :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, t: *float, ldt: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

shgeqz_ :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, t: *float, ldt: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SHSEIN :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

shsein :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

shsein_ :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SHSEQR :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

shseqr :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

shseqr_ :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SISNAN :: (sin: *float) -> s64 #foreign mkl_intel_ilp64;

sisnan :: (sin: *float) -> s64 #foreign mkl_intel_ilp64;
sisnan_ :: (sin: *float) -> s64 #foreign mkl_intel_ilp64;

SLABAD :: (smallx: *float, large: *float) -> void #foreign mkl_intel_ilp64;

slabad :: (smallx: *float, large: *float) -> void #foreign mkl_intel_ilp64;
slabad_ :: (smallx: *float, large: *float) -> void #foreign mkl_intel_ilp64;

SLABRD :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, x: *float, ldx: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

slabrd :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, x: *float, ldx: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

slabrd_ :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, x: *float, ldx: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

SLACN2 :: (n: *s64, v: *float, x: *float, isgn: *s64, est: *float, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

slacn2 :: (n: *s64, v: *float, x: *float, isgn: *s64, est: *float, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

slacn2_ :: (n: *s64, v: *float, x: *float, isgn: *s64, est: *float, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

SLACON :: (n: *s64, v: *float, x: *float, isgn: *s64, est: *float, kase: *s64) -> void #foreign mkl_intel_ilp64;

slacon :: (n: *s64, v: *float, x: *float, isgn: *s64, est: *float, kase: *s64) -> void #foreign mkl_intel_ilp64;

slacon_ :: (n: *s64, v: *float, x: *float, isgn: *s64, est: *float, kase: *s64) -> void #foreign mkl_intel_ilp64;

SLACPY :: (uplo: *u8, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

slacpy :: (uplo: *u8, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

slacpy_ :: (uplo: *u8, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

SLADIV :: (a: *float, b: *float, c: *float, d: *float, p: *float, q: *float) -> void #foreign mkl_intel_ilp64;

sladiv :: (a: *float, b: *float, c: *float, d: *float, p: *float, q: *float) -> void #foreign mkl_intel_ilp64;

sladiv_ :: (a: *float, b: *float, c: *float, d: *float, p: *float, q: *float) -> void #foreign mkl_intel_ilp64;

SLAE2 :: (a: *float, b: *float, c: *float, rt1: *float, rt2: *float) -> void #foreign mkl_intel_ilp64;

slae2 :: (a: *float, b: *float, c: *float, rt1: *float, rt2: *float) -> void #foreign mkl_intel_ilp64;

slae2_ :: (a: *float, b: *float, c: *float, rt1: *float, rt2: *float) -> void #foreign mkl_intel_ilp64;

SLAEBZ :: (ijob: *s64, nitmax: *s64, n: *s64, mmax: *s64, minp: *s64, nbmin: *s64, abstol: *float, reltol: *float, pivmin: *float, d: *float, e: *float, e2: *float, nval: *s64, ab: *float, c: *float, mout: *s64, nab: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaebz :: (ijob: *s64, nitmax: *s64, n: *s64, mmax: *s64, minp: *s64, nbmin: *s64, abstol: *float, reltol: *float, pivmin: *float, d: *float, e: *float, e2: *float, nval: *s64, ab: *float, c: *float, mout: *s64, nab: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaebz_ :: (ijob: *s64, nitmax: *s64, n: *s64, mmax: *s64, minp: *s64, nbmin: *s64, abstol: *float, reltol: *float, pivmin: *float, d: *float, e: *float, e2: *float, nval: *s64, ab: *float, c: *float, mout: *s64, nab: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED0 :: (icompq: *s64, qsiz: *s64, n: *s64, d: *float, e: *float, q: *float, ldq: *s64, qstore: *float, ldqs: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed0 :: (icompq: *s64, qsiz: *s64, n: *s64, d: *float, e: *float, q: *float, ldq: *s64, qstore: *float, ldqs: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed0_ :: (icompq: *s64, qsiz: *s64, n: *s64, d: *float, e: *float, q: *float, ldq: *s64, qstore: *float, ldqs: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED1 :: (n: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed1 :: (n: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed1_ :: (n: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED2 :: (k: *s64, n: *s64, n1: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, z: *float, dlamda: *float, w: *float, q2: *float, indx: *s64, indxc: *s64, indxp: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed2 :: (k: *s64, n: *s64, n1: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, z: *float, dlamda: *float, w: *float, q2: *float, indx: *s64, indxc: *s64, indxp: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed2_ :: (k: *s64, n: *s64, n1: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, z: *float, dlamda: *float, w: *float, q2: *float, indx: *s64, indxc: *s64, indxp: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED3 :: (k: *s64, n: *s64, n1: *s64, d: *float, q: *float, ldq: *s64, rho: *float, dlamda: *float, q2: *float, indx: *s64, ctot: *s64, w: *float, s: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed3 :: (k: *s64, n: *s64, n1: *s64, d: *float, q: *float, ldq: *s64, rho: *float, dlamda: *float, q2: *float, indx: *s64, ctot: *s64, w: *float, s: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed3_ :: (k: *s64, n: *s64, n1: *s64, d: *float, q: *float, ldq: *s64, rho: *float, dlamda: *float, q2: *float, indx: *s64, ctot: *s64, w: *float, s: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED4 :: (n: *s64, i: *s64, d: *float, z: *float, delta: *float, rho: *float, dlam: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed4 :: (n: *s64, i: *s64, d: *float, z: *float, delta: *float, rho: *float, dlam: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed4_ :: (n: *s64, i: *s64, d: *float, z: *float, delta: *float, rho: *float, dlam: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED5 :: (i: *s64, d: *float, z: *float, delta: *float, rho: *float, dlam: *float) -> void #foreign mkl_intel_ilp64;

slaed5 :: (i: *s64, d: *float, z: *float, delta: *float, rho: *float, dlam: *float) -> void #foreign mkl_intel_ilp64;

slaed5_ :: (i: *s64, d: *float, z: *float, delta: *float, rho: *float, dlam: *float) -> void #foreign mkl_intel_ilp64;

SLAED6 :: (kniter: *s64, orgati: *s64, rho: *float, d: *float, z: *float, finit: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed6 :: (kniter: *s64, orgati: *s64, rho: *float, d: *float, z: *float, finit: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed6_ :: (kniter: *s64, orgati: *s64, rho: *float, d: *float, z: *float, finit: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED7 :: (icompq: *s64, n: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, qstore: *float, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed7 :: (icompq: *s64, n: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, qstore: *float, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed7_ :: (icompq: *s64, n: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, qstore: *float, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED8 :: (icompq: *s64, k: *s64, n: *s64, qsiz: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, z: *float, dlamda: *float, q2: *float, ldq2: *s64, w: *float, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, indxp: *s64, indx: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed8 :: (icompq: *s64, k: *s64, n: *s64, qsiz: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, z: *float, dlamda: *float, q2: *float, ldq2: *s64, w: *float, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, indxp: *s64, indx: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed8_ :: (icompq: *s64, k: *s64, n: *s64, qsiz: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, z: *float, dlamda: *float, q2: *float, ldq2: *s64, w: *float, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, indxp: *s64, indx: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED9 :: (k: *s64, kstart: *s64, kstop: *s64, n: *s64, d: *float, q: *float, ldq: *s64, rho: *float, dlamda: *float, w: *float, s: *float, lds: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed9 :: (k: *s64, kstart: *s64, kstop: *s64, n: *s64, d: *float, q: *float, ldq: *s64, rho: *float, dlamda: *float, w: *float, s: *float, lds: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed9_ :: (k: *s64, kstart: *s64, kstop: *s64, n: *s64, d: *float, q: *float, ldq: *s64, rho: *float, dlamda: *float, w: *float, s: *float, lds: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAEDA :: (n: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, q: *float, qptr: *s64, z: *float, ztemp: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaeda :: (n: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, q: *float, qptr: *s64, z: *float, ztemp: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaeda_ :: (n: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, q: *float, qptr: *s64, z: *float, ztemp: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAEIN :: (rightv: *s64, noinit: *s64, n: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, vr: *float, vi: *float, b: *float, ldb: *s64, work: *float, eps3: *float, smlnum: *float, bignum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaein :: (rightv: *s64, noinit: *s64, n: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, vr: *float, vi: *float, b: *float, ldb: *s64, work: *float, eps3: *float, smlnum: *float, bignum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaein_ :: (rightv: *s64, noinit: *s64, n: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, vr: *float, vi: *float, b: *float, ldb: *s64, work: *float, eps3: *float, smlnum: *float, bignum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAEV2 :: (a: *float, b: *float, c: *float, rt1: *float, rt2: *float, cs1: *float, sn1: *float) -> void #foreign mkl_intel_ilp64;

slaev2 :: (a: *float, b: *float, c: *float, rt1: *float, rt2: *float, cs1: *float, sn1: *float) -> void #foreign mkl_intel_ilp64;

slaev2_ :: (a: *float, b: *float, c: *float, rt1: *float, rt2: *float, cs1: *float, sn1: *float) -> void #foreign mkl_intel_ilp64;

SLAEXC :: (wantq: *s64, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaexc :: (wantq: *s64, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaexc_ :: (wantq: *s64, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAG2D :: (m: *s64, n: *s64, sa: *float, ldsa: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slag2d :: (m: *s64, n: *s64, sa: *float, ldsa: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slag2d_ :: (m: *s64, n: *s64, sa: *float, ldsa: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAG2 :: (a: *float, lda: *s64, b: *float, ldb: *s64, safmin: *float, scale1: *float, scale2: *float, wr1: *float, wr2: *float, wi: *float) -> void #foreign mkl_intel_ilp64;

slag2 :: (a: *float, lda: *s64, b: *float, ldb: *s64, safmin: *float, scale1: *float, scale2: *float, wr1: *float, wr2: *float, wi: *float) -> void #foreign mkl_intel_ilp64;

slag2_ :: (a: *float, lda: *s64, b: *float, ldb: *s64, safmin: *float, scale1: *float, scale2: *float, wr1: *float, wr2: *float, wi: *float) -> void #foreign mkl_intel_ilp64;

SLAGS2 :: (upper: *s64, a1: *float, a2: *float, a3: *float, b1: *float, b2: *float, b3: *float, csu: *float, snu: *float, csv: *float, snv: *float, csq: *float, snq: *float) -> void #foreign mkl_intel_ilp64;

slags2 :: (upper: *s64, a1: *float, a2: *float, a3: *float, b1: *float, b2: *float, b3: *float, csu: *float, snu: *float, csv: *float, snv: *float, csq: *float, snq: *float) -> void #foreign mkl_intel_ilp64;

slags2_ :: (upper: *s64, a1: *float, a2: *float, a3: *float, b1: *float, b2: *float, b3: *float, csu: *float, snu: *float, csv: *float, snv: *float, csq: *float, snq: *float) -> void #foreign mkl_intel_ilp64;

SLAGTF :: (n: *s64, a: *float, lambda: *float, b: *float, c: *float, tol: *float, d: *float, in: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slagtf :: (n: *s64, a: *float, lambda: *float, b: *float, c: *float, tol: *float, d: *float, in: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slagtf_ :: (n: *s64, a: *float, lambda: *float, b: *float, c: *float, tol: *float, d: *float, in: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAGTM :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float, dl: *float, d: *float, du: *float, x: *float, ldx: *s64, beta: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

slagtm :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float, dl: *float, d: *float, du: *float, x: *float, ldx: *s64, beta: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

slagtm_ :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float, dl: *float, d: *float, du: *float, x: *float, ldx: *s64, beta: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

SLAGTS :: (job: *s64, n: *s64, a: *float, b: *float, c: *float, d: *float, in: *s64, y: *float, tol: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slagts :: (job: *s64, n: *s64, a: *float, b: *float, c: *float, d: *float, in: *s64, y: *float, tol: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slagts_ :: (job: *s64, n: *s64, a: *float, b: *float, c: *float, d: *float, in: *s64, y: *float, tol: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAGV2 :: (a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, csl: *float, snl: *float, csr: *float, snr: *float) -> void #foreign mkl_intel_ilp64;

slagv2 :: (a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, csl: *float, snl: *float, csr: *float, snr: *float) -> void #foreign mkl_intel_ilp64;

slagv2_ :: (a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, csl: *float, snl: *float, csr: *float, snr: *float) -> void #foreign mkl_intel_ilp64;

SLAHQR :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slahqr :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slahqr_ :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAHR2 :: (n: *s64, k: *s64, nb: *s64, a: *float, lda: *s64, tau: *float, t: *float, ldt: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

slahr2 :: (n: *s64, k: *s64, nb: *s64, a: *float, lda: *s64, tau: *float, t: *float, ldt: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

slahr2_ :: (n: *s64, k: *s64, nb: *s64, a: *float, lda: *s64, tau: *float, t: *float, ldt: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

SLAHRD :: (n: *s64, k: *s64, nb: *s64, a: *float, lda: *s64, tau: *float, t: *float, ldt: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

slahrd :: (n: *s64, k: *s64, nb: *s64, a: *float, lda: *s64, tau: *float, t: *float, ldt: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

slahrd_ :: (n: *s64, k: *s64, nb: *s64, a: *float, lda: *s64, tau: *float, t: *float, ldt: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

SLAIC1 :: (job: *s64, j: *s64, x: *float, sest: *float, w: *float, gamma: *float, sestpr: *float, s: *float, c: *float) -> void #foreign mkl_intel_ilp64;

slaic1 :: (job: *s64, j: *s64, x: *float, sest: *float, w: *float, gamma: *float, sestpr: *float, s: *float, c: *float) -> void #foreign mkl_intel_ilp64;

slaic1_ :: (job: *s64, j: *s64, x: *float, sest: *float, w: *float, gamma: *float, sestpr: *float, s: *float, c: *float) -> void #foreign mkl_intel_ilp64;

SLAISNAN :: (sin1: *float, sin2: *float) -> s64 #foreign mkl_intel_ilp64;

slaisnan :: (sin1: *float, sin2: *float) -> s64 #foreign mkl_intel_ilp64;
slaisnan_ :: (sin1: *float, sin2: *float) -> s64 #foreign mkl_intel_ilp64;

SLALN2 :: (ltrans: *s64, na: *s64, nw: *s64, smin: *float, ca: *float, a: *float, lda: *s64, d1: *float, d2: *float, b: *float, ldb: *s64, wr: *float, wi: *float, x: *float, ldx: *s64, scale: *float, xnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaln2 :: (ltrans: *s64, na: *s64, nw: *s64, smin: *float, ca: *float, a: *float, lda: *s64, d1: *float, d2: *float, b: *float, ldb: *s64, wr: *float, wi: *float, x: *float, ldx: *s64, scale: *float, xnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaln2_ :: (ltrans: *s64, na: *s64, nw: *s64, smin: *float, ca: *float, a: *float, lda: *s64, d1: *float, d2: *float, b: *float, ldb: *s64, wr: *float, wi: *float, x: *float, ldx: *s64, scale: *float, xnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLALS0 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *float, ldb: *s64, bx: *float, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slals0 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *float, ldb: *s64, bx: *float, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slals0_ :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *float, ldb: *s64, bx: *float, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLALSA :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *float, ldb: *s64, bx: *float, ldbx: *s64, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slalsa :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *float, ldb: *s64, bx: *float, ldbx: *s64, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slalsa_ :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *float, ldb: *s64, bx: *float, ldbx: *s64, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLALSD :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, rcond: *float, rank: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slalsd :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, rcond: *float, rank: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slalsd_ :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, rcond: *float, rank: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAMCH :: (cmach: *u8) -> float #foreign mkl_intel_ilp64;

slamch :: (cmach: *u8) -> float #foreign mkl_intel_ilp64;
slamch_ :: (cmach: *u8) -> float #foreign mkl_intel_ilp64;

SLAMC1 :: (beta: *s64, t: *s64, rnd: *s64, ieee1: *s64) -> void #foreign mkl_intel_ilp64;

slamc1 :: (beta: *s64, t: *s64, rnd: *s64, ieee1: *s64) -> void #foreign mkl_intel_ilp64;
slamc1_ :: (beta: *s64, t: *s64, rnd: *s64, ieee1: *s64) -> void #foreign mkl_intel_ilp64;

SLAMC2 :: (beta: *s64, t: *s64, rnd: *s64, eps: *float, emin: *s64, rmin: *float, emax: *s64, rmax: *float) -> void #foreign mkl_intel_ilp64;

slamc2 :: (beta: *s64, t: *s64, rnd: *s64, eps: *float, emin: *s64, rmin: *float, emax: *s64, rmax: *float) -> void #foreign mkl_intel_ilp64;

slamc2_ :: (beta: *s64, t: *s64, rnd: *s64, eps: *float, emin: *s64, rmin: *float, emax: *s64, rmax: *float) -> void #foreign mkl_intel_ilp64;

SLAMC3 :: (a: *float, b: *float) -> float #foreign mkl_intel_ilp64;

slamc3 :: (a: *float, b: *float) -> float #foreign mkl_intel_ilp64;
slamc3_ :: (a: *float, b: *float) -> float #foreign mkl_intel_ilp64;

SLAMC4 :: (emin: *s64, start: *float, base: *s64) -> void #foreign mkl_intel_ilp64;

slamc4 :: (emin: *s64, start: *float, base: *s64) -> void #foreign mkl_intel_ilp64;
slamc4_ :: (emin: *s64, start: *float, base: *s64) -> void #foreign mkl_intel_ilp64;

SLAMC5 :: (beta: *s64, p: *s64, emin: *s64, ieee: *s64, emax: *s64, rmax: *float) -> void #foreign mkl_intel_ilp64;

slamc5 :: (beta: *s64, p: *s64, emin: *s64, ieee: *s64, emax: *s64, rmax: *float) -> void #foreign mkl_intel_ilp64;

slamc5_ :: (beta: *s64, p: *s64, emin: *s64, ieee: *s64, emax: *s64, rmax: *float) -> void #foreign mkl_intel_ilp64;

SLAMRG :: (n1: *s64, n2: *s64, a: *float, strd1: *s64, strd2: *s64, index: *s64) -> void #foreign mkl_intel_ilp64;

slamrg :: (n1: *s64, n2: *s64, a: *float, strd1: *s64, strd2: *s64, index: *s64) -> void #foreign mkl_intel_ilp64;

slamrg_ :: (n1: *s64, n2: *s64, a: *float, strd1: *s64, strd2: *s64, index: *s64) -> void #foreign mkl_intel_ilp64;

SLANEG :: (n: *s64, d: *float, lld: *float, sigma: *float, pivmin: *float, r: *s64) -> s64 #foreign mkl_intel_ilp64;

slaneg :: (n: *s64, d: *float, lld: *float, sigma: *float, pivmin: *float, r: *s64) -> s64 #foreign mkl_intel_ilp64;

slaneg_ :: (n: *s64, d: *float, lld: *float, sigma: *float, pivmin: *float, r: *s64) -> s64 #foreign mkl_intel_ilp64;

SLANGB :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slangb :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slangb_ :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLANGE :: (norm: *u8, m: *s64, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slange :: (norm: *u8, m: *s64, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slange_ :: (norm: *u8, m: *s64, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLANGT :: (norm: *u8, n: *s64, dl: *float, d: *float, du: *float) -> float #foreign mkl_intel_ilp64;

slangt :: (norm: *u8, n: *s64, dl: *float, d: *float, du: *float) -> float #foreign mkl_intel_ilp64;

slangt_ :: (norm: *u8, n: *s64, dl: *float, d: *float, du: *float) -> float #foreign mkl_intel_ilp64;

SLANHS :: (norm: *u8, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slanhs :: (norm: *u8, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slanhs_ :: (norm: *u8, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLANSB :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slansb :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slansb_ :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLANSF :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *float, work: *float) -> float #foreign mkl_intel_ilp64;

slansf :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *float, work: *float) -> float #foreign mkl_intel_ilp64;

slansf_ :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *float, work: *float) -> float #foreign mkl_intel_ilp64;

SLANSP :: (norm: *u8, uplo: *u8, n: *s64, ap: *float, work: *float) -> float #foreign mkl_intel_ilp64;

slansp :: (norm: *u8, uplo: *u8, n: *s64, ap: *float, work: *float) -> float #foreign mkl_intel_ilp64;

slansp_ :: (norm: *u8, uplo: *u8, n: *s64, ap: *float, work: *float) -> float #foreign mkl_intel_ilp64;

SLANST :: (norm: *u8, n: *s64, d: *float, e: *float) -> float #foreign mkl_intel_ilp64;

slanst :: (norm: *u8, n: *s64, d: *float, e: *float) -> float #foreign mkl_intel_ilp64;

slanst_ :: (norm: *u8, n: *s64, d: *float, e: *float) -> float #foreign mkl_intel_ilp64;

SLANSY :: (norm: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slansy :: (norm: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slansy_ :: (norm: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLANTB :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slantb :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slantb_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLANTP :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float, work: *float) -> float #foreign mkl_intel_ilp64;

slantp :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float, work: *float) -> float #foreign mkl_intel_ilp64;

slantp_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float, work: *float) -> float #foreign mkl_intel_ilp64;

SLANTR :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slantr :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slantr_ :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLANV2 :: (a: *float, b: *float, c: *float, d: *float, rt1r: *float, rt1i: *float, rt2r: *float, rt2i: *float, cs: *float, sn: *float) -> void #foreign mkl_intel_ilp64;

slanv2 :: (a: *float, b: *float, c: *float, d: *float, rt1r: *float, rt1i: *float, rt2r: *float, rt2i: *float, cs: *float, sn: *float) -> void #foreign mkl_intel_ilp64;

slanv2_ :: (a: *float, b: *float, c: *float, d: *float, rt1r: *float, rt1i: *float, rt2r: *float, rt2i: *float, cs: *float, sn: *float) -> void #foreign mkl_intel_ilp64;

SLAPLL :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, ssmin: *float) -> void #foreign mkl_intel_ilp64;

slapll :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, ssmin: *float) -> void #foreign mkl_intel_ilp64;

slapll_ :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, ssmin: *float) -> void #foreign mkl_intel_ilp64;

SLAPMT :: (forwrd: *s64, m: *s64, n: *s64, x: *float, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

slapmt :: (forwrd: *s64, m: *s64, n: *s64, x: *float, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

slapmt_ :: (forwrd: *s64, m: *s64, n: *s64, x: *float, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

SLAPY2 :: (x: *float, y: *float) -> float #foreign mkl_intel_ilp64;

slapy2 :: (x: *float, y: *float) -> float #foreign mkl_intel_ilp64;
slapy2_ :: (x: *float, y: *float) -> float #foreign mkl_intel_ilp64;

SLAPY3 :: (x: *float, y: *float, z: *float) -> float #foreign mkl_intel_ilp64;

slapy3 :: (x: *float, y: *float, z: *float) -> float #foreign mkl_intel_ilp64;
slapy3_ :: (x: *float, y: *float, z: *float) -> float #foreign mkl_intel_ilp64;

SLAQGB :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqgb :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqgb_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

SLAQGE :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqge :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqge_ :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

SLAQP2 :: (m: *s64, n: *s64, offset: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, vn1: *float, vn2: *float, work: *float) -> void #foreign mkl_intel_ilp64;

slaqp2 :: (m: *s64, n: *s64, offset: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, vn1: *float, vn2: *float, work: *float) -> void #foreign mkl_intel_ilp64;

slaqp2_ :: (m: *s64, n: *s64, offset: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, vn1: *float, vn2: *float, work: *float) -> void #foreign mkl_intel_ilp64;

SLAQPS :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, vn1: *float, vn2: *float, auxv: *float, f: *float, ldf: *s64) -> void #foreign mkl_intel_ilp64;

slaqps :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, vn1: *float, vn2: *float, auxv: *float, f: *float, ldf: *s64) -> void #foreign mkl_intel_ilp64;

slaqps_ :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, vn1: *float, vn2: *float, auxv: *float, f: *float, ldf: *s64) -> void #foreign mkl_intel_ilp64;

SLAQR0 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqr0 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqr0_ :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAQR1 :: (n: *s64, h: *float, ldh: *s64, sr1: *float, si1: *float, sr2: *float, si2: *float, v: *float) -> void #foreign mkl_intel_ilp64;

slaqr1 :: (n: *s64, h: *float, ldh: *s64, sr1: *float, si1: *float, sr2: *float, si2: *float, v: *float) -> void #foreign mkl_intel_ilp64;

slaqr1_ :: (n: *s64, h: *float, ldh: *s64, sr1: *float, si1: *float, sr2: *float, si2: *float, v: *float) -> void #foreign mkl_intel_ilp64;

SLAQR2 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, ns: *s64, nd: *s64, sr: *float, si: *float, v: *float, ldv: *s64, nh: *s64, t: *float, ldt: *s64, nv: *s64, wv: *float, ldwv: *s64, work: *float, lwork: *s64) -> void #foreign mkl_intel_ilp64;

slaqr2 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, ns: *s64, nd: *s64, sr: *float, si: *float, v: *float, ldv: *s64, nh: *s64, t: *float, ldt: *s64, nv: *s64, wv: *float, ldwv: *s64, work: *float, lwork: *s64) -> void #foreign mkl_intel_ilp64;

slaqr2_ :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, ns: *s64, nd: *s64, sr: *float, si: *float, v: *float, ldv: *s64, nh: *s64, t: *float, ldt: *s64, nv: *s64, wv: *float, ldwv: *s64, work: *float, lwork: *s64) -> void #foreign mkl_intel_ilp64;

SLAQR3 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, ns: *s64, nd: *s64, sr: *float, si: *float, v: *float, ldv: *s64, nh: *s64, t: *float, ldt: *s64, nv: *s64, wv: *float, ldwv: *s64, work: *float, lwork: *s64) -> void #foreign mkl_intel_ilp64;

slaqr3 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, ns: *s64, nd: *s64, sr: *float, si: *float, v: *float, ldv: *s64, nh: *s64, t: *float, ldt: *s64, nv: *s64, wv: *float, ldwv: *s64, work: *float, lwork: *s64) -> void #foreign mkl_intel_ilp64;

slaqr3_ :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, ns: *s64, nd: *s64, sr: *float, si: *float, v: *float, ldv: *s64, nh: *s64, t: *float, ldt: *s64, nv: *s64, wv: *float, ldwv: *s64, work: *float, lwork: *s64) -> void #foreign mkl_intel_ilp64;

SLAQR4 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqr4 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqr4_ :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAQR5 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, sr: *float, si: *float, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, v: *float, ldv: *s64, u: *float, ldu: *s64, nv: *s64, wv: *float, ldwv: *s64, nh: *s64, wh: *float, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

slaqr5 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, sr: *float, si: *float, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, v: *float, ldv: *s64, u: *float, ldu: *s64, nv: *s64, wv: *float, ldwv: *s64, nh: *s64, wh: *float, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

slaqr5_ :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, sr: *float, si: *float, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, v: *float, ldv: *s64, u: *float, ldu: *s64, nv: *s64, wv: *float, ldwv: *s64, nh: *s64, wh: *float, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

SLAQSB :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqsb :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqsb_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

SLAQSP :: (uplo: *u8, n: *s64, ap: *float, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqsp :: (uplo: *u8, n: *s64, ap: *float, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqsp_ :: (uplo: *u8, n: *s64, ap: *float, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

SLAQSY :: (uplo: *u8, n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqsy :: (uplo: *u8, n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqsy_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

SLAQTR :: (ltran: *s64, lreal: *s64, n: *s64, t: *float, ldt: *s64, b: *float, w: *float, scale: *float, x: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqtr :: (ltran: *s64, lreal: *s64, n: *s64, t: *float, ldt: *s64, b: *float, w: *float, scale: *float, x: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqtr_ :: (ltran: *s64, lreal: *s64, n: *s64, t: *float, ldt: *s64, b: *float, w: *float, scale: *float, x: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAQZ0 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqz0 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqz0_ :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAQZ1 :: (a: *float, lda: *s64, b: *float, ldb: *s64, sr1: *float, sr2: *float, si: *float, beta1: *float, beta2: *float, v: *float) -> void #foreign mkl_intel_ilp64;

slaqz1 :: (a: *float, lda: *s64, b: *float, ldb: *s64, sr1: *float, sr2: *float, si: *float, beta1: *float, beta2: *float, v: *float) -> void #foreign mkl_intel_ilp64;

slaqz1_ :: (a: *float, lda: *s64, b: *float, ldb: *s64, sr1: *float, sr2: *float, si: *float, beta1: *float, beta2: *float, v: *float) -> void #foreign mkl_intel_ilp64;

SLAQZ2 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, nq: *s64, qstart: *s64, q: *float, ldq: *s64, nz: *s64, zstart: *s64, z: *float, ldz: *s64) -> void #foreign mkl_intel_ilp64;

slaqz2 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, nq: *s64, qstart: *s64, q: *float, ldq: *s64, nz: *s64, zstart: *s64, z: *float, ldz: *s64) -> void #foreign mkl_intel_ilp64;

slaqz2_ :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, nq: *s64, qstart: *s64, q: *float, ldq: *s64, nz: *s64, zstart: *s64, z: *float, ldz: *s64) -> void #foreign mkl_intel_ilp64;

SLAQZ3 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, ns: *s64, nd: *s64, alphar: *float, alphai: *float, beta: *float, qc: *float, ldqc: *s64, zc: *float, ldzc: *s64, work: *float, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqz3 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, ns: *s64, nd: *s64, alphar: *float, alphai: *float, beta: *float, qc: *float, ldqc: *s64, zc: *float, ldzc: *s64, work: *float, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqz3_ :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, ns: *s64, nd: *s64, alphar: *float, alphai: *float, beta: *float, qc: *float, ldqc: *s64, zc: *float, ldzc: *s64, work: *float, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAQZ4 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alphar: *float, alphai: *float, beta: *float, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, qc: *float, ldqc: *s64, zc: *float, ldzc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqz4 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alphar: *float, alphai: *float, beta: *float, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, qc: *float, ldqc: *s64, zc: *float, ldzc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqz4_ :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alphar: *float, alphai: *float, beta: *float, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, qc: *float, ldqc: *s64, zc: *float, ldzc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAR1V :: (n: *s64, b1: *s64, bn: *s64, lambda: *float, d: *float, l: *float, ld: *float, lld: *float, pivmin: *float, gaptol: *float, z: *float, wantnc: *s64, negcnt: *s64, ztz: *float, mingma: *float, r: *s64, isuppz: *s64, nrminv: *float, resid: *float, rqcorr: *float, work: *float) -> void #foreign mkl_intel_ilp64;

slar1v :: (n: *s64, b1: *s64, bn: *s64, lambda: *float, d: *float, l: *float, ld: *float, lld: *float, pivmin: *float, gaptol: *float, z: *float, wantnc: *s64, negcnt: *s64, ztz: *float, mingma: *float, r: *s64, isuppz: *s64, nrminv: *float, resid: *float, rqcorr: *float, work: *float) -> void #foreign mkl_intel_ilp64;

slar1v_ :: (n: *s64, b1: *s64, bn: *s64, lambda: *float, d: *float, l: *float, ld: *float, lld: *float, pivmin: *float, gaptol: *float, z: *float, wantnc: *s64, negcnt: *s64, ztz: *float, mingma: *float, r: *s64, isuppz: *s64, nrminv: *float, resid: *float, rqcorr: *float, work: *float) -> void #foreign mkl_intel_ilp64;

SLAR2V :: (n: *s64, x: *float, y: *float, z: *float, incx: *s64, c: *float, s: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

slar2v :: (n: *s64, x: *float, y: *float, z: *float, incx: *s64, c: *float, s: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

slar2v_ :: (n: *s64, x: *float, y: *float, z: *float, incx: *s64, c: *float, s: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

SLARFB :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

slarfb :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

slarfb_ :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

SLARF :: (side: *u8, m: *s64, n: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slarf :: (side: *u8, m: *s64, n: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slarf_ :: (side: *u8, m: *s64, n: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

SLARFG :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

slarfg :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

slarfg_ :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

SLARFGP :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

slarfgp :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

slarfgp_ :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

SLARFP :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

slarfp :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

slarfp_ :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

SLARFT :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float, ldv: *s64, tau: *float, t: *float, ldt: *s64) -> void #foreign mkl_intel_ilp64;

slarft :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float, ldv: *s64, tau: *float, t: *float, ldt: *s64) -> void #foreign mkl_intel_ilp64;

slarft_ :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float, ldv: *s64, tau: *float, t: *float, ldt: *s64) -> void #foreign mkl_intel_ilp64;

SLARFX :: (side: *u8, m: *s64, n: *s64, v: *float, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slarfx :: (side: *u8, m: *s64, n: *s64, v: *float, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slarfx_ :: (side: *u8, m: *s64, n: *s64, v: *float, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

SLARGV :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

slargv :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

slargv_ :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

SLARNV :: (idist: *s64, iseed: *s64, n: *s64, x: *float) -> void #foreign mkl_intel_ilp64;

slarnv :: (idist: *s64, iseed: *s64, n: *s64, x: *float) -> void #foreign mkl_intel_ilp64;

slarnv_ :: (idist: *s64, iseed: *s64, n: *s64, x: *float) -> void #foreign mkl_intel_ilp64;

SLARRA :: (n: *s64, d: *float, e: *float, e2: *float, spltol: *float, tnrm: *float, nsplit: *s64, isplit: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarra :: (n: *s64, d: *float, e: *float, e2: *float, spltol: *float, tnrm: *float, nsplit: *s64, isplit: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarra_ :: (n: *s64, d: *float, e: *float, e2: *float, spltol: *float, tnrm: *float, nsplit: *s64, isplit: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRB :: (n: *s64, d: *float, lld: *float, ifirst: *s64, ilast: *s64, rtol1: *float, rtol2: *float, offset: *s64, w: *float, wgap: *float, werr: *float, work: *float, iwork: *s64, pivmin: *float, spdiam: *float, twist: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrb :: (n: *s64, d: *float, lld: *float, ifirst: *s64, ilast: *s64, rtol1: *float, rtol2: *float, offset: *s64, w: *float, wgap: *float, werr: *float, work: *float, iwork: *s64, pivmin: *float, spdiam: *float, twist: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrb_ :: (n: *s64, d: *float, lld: *float, ifirst: *s64, ilast: *s64, rtol1: *float, rtol2: *float, offset: *s64, w: *float, wgap: *float, werr: *float, work: *float, iwork: *s64, pivmin: *float, spdiam: *float, twist: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRC :: (jobt: *u8, n: *s64, vl: *float, vu: *float, d: *float, e: *float, pivmin: *float, eigcnt: *s64, lcnt: *s64, rcnt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrc :: (jobt: *u8, n: *s64, vl: *float, vu: *float, d: *float, e: *float, pivmin: *float, eigcnt: *s64, lcnt: *s64, rcnt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrc_ :: (jobt: *u8, n: *s64, vl: *float, vu: *float, d: *float, e: *float, pivmin: *float, eigcnt: *s64, lcnt: *s64, rcnt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRD :: (range: *u8, order: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, gers: *float, reltol: *float, d: *float, e: *float, e2: *float, pivmin: *float, nsplit: *s64, isplit: *s64, m: *s64, w: *float, werr: *float, wl: *float, wu: *float, iblock: *s64, indexw: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrd :: (range: *u8, order: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, gers: *float, reltol: *float, d: *float, e: *float, e2: *float, pivmin: *float, nsplit: *s64, isplit: *s64, m: *s64, w: *float, werr: *float, wl: *float, wu: *float, iblock: *s64, indexw: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrd_ :: (range: *u8, order: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, gers: *float, reltol: *float, d: *float, e: *float, e2: *float, pivmin: *float, nsplit: *s64, isplit: *s64, m: *s64, w: *float, werr: *float, wl: *float, wu: *float, iblock: *s64, indexw: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRE :: (range: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, d: *float, e: *float, e2: *float, rtol1: *float, rtol2: *float, spltol: *float, nsplit: *s64, isplit: *s64, m: *s64, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, pivmin: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarre :: (range: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, d: *float, e: *float, e2: *float, rtol1: *float, rtol2: *float, spltol: *float, nsplit: *s64, isplit: *s64, m: *s64, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, pivmin: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarre_ :: (range: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, d: *float, e: *float, e2: *float, rtol1: *float, rtol2: *float, spltol: *float, nsplit: *s64, isplit: *s64, m: *s64, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, pivmin: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRF :: (n: *s64, d: *float, l: *float, ld: *float, clstrt: *s64, clend: *s64, w: *float, wgap: *float, werr: *float, spdiam: *float, clgapl: *float, clgapr: *float, pivmin: *float, sigma: *float, dplus: *float, lplus: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrf :: (n: *s64, d: *float, l: *float, ld: *float, clstrt: *s64, clend: *s64, w: *float, wgap: *float, werr: *float, spdiam: *float, clgapl: *float, clgapr: *float, pivmin: *float, sigma: *float, dplus: *float, lplus: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrf_ :: (n: *s64, d: *float, l: *float, ld: *float, clstrt: *s64, clend: *s64, w: *float, wgap: *float, werr: *float, spdiam: *float, clgapl: *float, clgapr: *float, pivmin: *float, sigma: *float, dplus: *float, lplus: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRJ :: (n: *s64, d: *float, e2: *float, ifirst: *s64, ilast: *s64, rtol: *float, offset: *s64, w: *float, werr: *float, work: *float, iwork: *s64, pivmin: *float, spdiam: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrj :: (n: *s64, d: *float, e2: *float, ifirst: *s64, ilast: *s64, rtol: *float, offset: *s64, w: *float, werr: *float, work: *float, iwork: *s64, pivmin: *float, spdiam: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrj_ :: (n: *s64, d: *float, e2: *float, ifirst: *s64, ilast: *s64, rtol: *float, offset: *s64, w: *float, werr: *float, work: *float, iwork: *s64, pivmin: *float, spdiam: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRK :: (n: *s64, iw: *s64, gl: *float, gu: *float, d: *float, e2: *float, pivmin: *float, reltol: *float, w: *float, werr: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrk :: (n: *s64, iw: *s64, gl: *float, gu: *float, d: *float, e2: *float, pivmin: *float, reltol: *float, w: *float, werr: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrk_ :: (n: *s64, iw: *s64, gl: *float, gu: *float, d: *float, e2: *float, pivmin: *float, reltol: *float, w: *float, werr: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRR :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrr :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
slarrr_ :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRV :: (n: *s64, vl: *float, vu: *float, d: *float, l: *float, pivmin: *float, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float, rtol1: *float, rtol2: *float, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrv :: (n: *s64, vl: *float, vu: *float, d: *float, l: *float, pivmin: *float, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float, rtol1: *float, rtol2: *float, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrv_ :: (n: *s64, vl: *float, vu: *float, d: *float, l: *float, pivmin: *float, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float, rtol1: *float, rtol2: *float, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARSCL2 :: (m: *s64, n: *s64, d: *float, x: *float, ldx: *s64) -> void #foreign mkl_intel_ilp64;

slarscl2 :: (m: *s64, n: *s64, d: *float, x: *float, ldx: *s64) -> void #foreign mkl_intel_ilp64;

slarscl2_ :: (m: *s64, n: *s64, d: *float, x: *float, ldx: *s64) -> void #foreign mkl_intel_ilp64;

SLARTG :: (f: *float, g: *float, cs: *float, sn: *float, r: *float) -> void #foreign mkl_intel_ilp64;

slartg :: (f: *float, g: *float, cs: *float, sn: *float, r: *float) -> void #foreign mkl_intel_ilp64;
slartg_ :: (f: *float, g: *float, cs: *float, sn: *float, r: *float) -> void #foreign mkl_intel_ilp64;

SLARTV :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, s: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

slartv :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, s: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

slartv_ :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, s: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

SLARUV :: (iseed: *s64, n: *s64, x: *float) -> void #foreign mkl_intel_ilp64;

slaruv :: (iseed: *s64, n: *s64, x: *float) -> void #foreign mkl_intel_ilp64;
slaruv_ :: (iseed: *s64, n: *s64, x: *float) -> void #foreign mkl_intel_ilp64;

SLARZB :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

slarzb :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

slarzb_ :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

SLARZ :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slarz :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slarz_ :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

SLARZT :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float, ldv: *s64, tau: *float, t: *float, ldt: *s64) -> void #foreign mkl_intel_ilp64;

slarzt :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float, ldv: *s64, tau: *float, t: *float, ldt: *s64) -> void #foreign mkl_intel_ilp64;

slarzt_ :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float, ldv: *s64, tau: *float, t: *float, ldt: *s64) -> void #foreign mkl_intel_ilp64;

SLAS2 :: (f: *float, g: *float, h: *float, ssmin: *float, ssmax: *float) -> void #foreign mkl_intel_ilp64;

slas2 :: (f: *float, g: *float, h: *float, ssmin: *float, ssmax: *float) -> void #foreign mkl_intel_ilp64;

slas2_ :: (f: *float, g: *float, h: *float, ssmin: *float, ssmax: *float) -> void #foreign mkl_intel_ilp64;

SLASCL :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float, cto: *float, m: *s64, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slascl :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float, cto: *float, m: *s64, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slascl_ :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float, cto: *float, m: *s64, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASCL2 :: (m: *s64, n: *s64, d: *float, x: *float, ldx: *s64) -> void #foreign mkl_intel_ilp64;

slascl2 :: (m: *s64, n: *s64, d: *float, x: *float, ldx: *s64) -> void #foreign mkl_intel_ilp64;

slascl2_ :: (m: *s64, n: *s64, d: *float, x: *float, ldx: *s64) -> void #foreign mkl_intel_ilp64;

SLASD0 :: (n: *s64, sqre: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, smlsiz: *s64, iwork: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd0 :: (n: *s64, sqre: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, smlsiz: *s64, iwork: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd0_ :: (n: *s64, sqre: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, smlsiz: *s64, iwork: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD1 :: (nl: *s64, nr: *s64, sqre: *s64, d: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, idxq: *s64, iwork: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd1 :: (nl: *s64, nr: *s64, sqre: *s64, d: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, idxq: *s64, iwork: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd1_ :: (nl: *s64, nr: *s64, sqre: *s64, d: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, idxq: *s64, iwork: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD2 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, z: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, dsigma: *float, u2: *float, ldu2: *s64, vt2: *float, ldvt2: *s64, idxp: *s64, idx: *s64, idxc: *s64, idxq: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd2 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, z: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, dsigma: *float, u2: *float, ldu2: *s64, vt2: *float, ldvt2: *s64, idxp: *s64, idx: *s64, idxc: *s64, idxq: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd2_ :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, z: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, dsigma: *float, u2: *float, ldu2: *s64, vt2: *float, ldvt2: *s64, idxp: *s64, idx: *s64, idxc: *s64, idxq: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD3 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, q: *float, ldq: *s64, dsigma: *float, u: *float, ldu: *s64, u2: *float, ldu2: *s64, vt: *float, ldvt: *s64, vt2: *float, ldvt2: *s64, idxc: *s64, ctot: *s64, z: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd3 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, q: *float, ldq: *s64, dsigma: *float, u: *float, ldu: *s64, u2: *float, ldu2: *s64, vt: *float, ldvt: *s64, vt2: *float, ldvt2: *s64, idxc: *s64, ctot: *s64, z: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd3_ :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, q: *float, ldq: *s64, dsigma: *float, u: *float, ldu: *s64, u2: *float, ldu2: *s64, vt: *float, ldvt: *s64, vt2: *float, ldvt2: *s64, idxc: *s64, ctot: *s64, z: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD4 :: (n: *s64, i: *s64, d: *float, z: *float, delta: *float, rho: *float, sigma: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd4 :: (n: *s64, i: *s64, d: *float, z: *float, delta: *float, rho: *float, sigma: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd4_ :: (n: *s64, i: *s64, d: *float, z: *float, delta: *float, rho: *float, sigma: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD5 :: (i: *s64, d: *float, z: *float, delta: *float, rho: *float, dsigma: *float, work: *float) -> void #foreign mkl_intel_ilp64;

slasd5 :: (i: *s64, d: *float, z: *float, delta: *float, rho: *float, dsigma: *float, work: *float) -> void #foreign mkl_intel_ilp64;

slasd5_ :: (i: *s64, d: *float, z: *float, delta: *float, rho: *float, dsigma: *float, work: *float) -> void #foreign mkl_intel_ilp64;

SLASD6 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, d: *float, vf: *float, vl: *float, alpha: *float, beta: *float, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd6 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, d: *float, vf: *float, vl: *float, alpha: *float, beta: *float, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd6_ :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, d: *float, vf: *float, vl: *float, alpha: *float, beta: *float, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD7 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, z: *float, zw: *float, vf: *float, vfw: *float, vl: *float, vlw: *float, alpha: *float, beta: *float, dsigma: *float, idx: *s64, idxp: *s64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, c: *float, s: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd7 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, z: *float, zw: *float, vf: *float, vfw: *float, vl: *float, vlw: *float, alpha: *float, beta: *float, dsigma: *float, idx: *s64, idxp: *s64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, c: *float, s: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd7_ :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, z: *float, zw: *float, vf: *float, vfw: *float, vl: *float, vlw: *float, alpha: *float, beta: *float, dsigma: *float, idx: *s64, idxp: *s64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, c: *float, s: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD8 :: (icompq: *s64, k: *s64, d: *float, z: *float, vf: *float, vl: *float, difl: *float, difr: *float, lddifr: *s64, dsigma: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd8 :: (icompq: *s64, k: *s64, d: *float, z: *float, vf: *float, vl: *float, difl: *float, difr: *float, lddifr: *s64, dsigma: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd8_ :: (icompq: *s64, k: *s64, d: *float, z: *float, vf: *float, vl: *float, difl: *float, difr: *float, lddifr: *s64, dsigma: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASDA :: (icompq: *s64, smlsiz: *s64, n: *s64, sqre: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasda :: (icompq: *s64, smlsiz: *s64, n: *s64, sqre: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasda_ :: (icompq: *s64, smlsiz: *s64, n: *s64, sqre: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASDQ :: (uplo: *u8, sqre: *s64, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *float, ldvt: *s64, u: *float, ldu: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasdq :: (uplo: *u8, sqre: *s64, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *float, ldvt: *s64, u: *float, ldu: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasdq_ :: (uplo: *u8, sqre: *s64, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *float, ldvt: *s64, u: *float, ldu: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASDT :: (n: *s64, lvl: *s64, nd: *s64, inode: *s64, ndiml: *s64, ndimr: *s64, msub: *s64) -> void #foreign mkl_intel_ilp64;

slasdt :: (n: *s64, lvl: *s64, nd: *s64, inode: *s64, ndiml: *s64, ndimr: *s64, msub: *s64) -> void #foreign mkl_intel_ilp64;

slasdt_ :: (n: *s64, lvl: *s64, nd: *s64, inode: *s64, ndiml: *s64, ndimr: *s64, msub: *s64) -> void #foreign mkl_intel_ilp64;

SLASET :: (uplo: *u8, m: *s64, n: *s64, alpha: *float, beta: *float, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

slaset :: (uplo: *u8, m: *s64, n: *s64, alpha: *float, beta: *float, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

slaset_ :: (uplo: *u8, m: *s64, n: *s64, alpha: *float, beta: *float, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

SLASQ1 :: (n: *s64, d: *float, e: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasq1 :: (n: *s64, d: *float, e: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasq1_ :: (n: *s64, d: *float, e: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASQ2 :: (n: *s64, z: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasq2 :: (n: *s64, z: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
slasq2_ :: (n: *s64, z: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASQ3 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, dmin: *float, sigma: *float, desig: *float, qmax: *float, nfail: *s64, iter: *s64, ndiv: *s64, ieee: *s64, ttype: *s64, dmin1: *float, dmin2: *float, dn: *float, dn1: *float, dn2: *float, g: *float, tau: *float) -> void #foreign mkl_intel_ilp64;

slasq3 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, dmin: *float, sigma: *float, desig: *float, qmax: *float, nfail: *s64, iter: *s64, ndiv: *s64, ieee: *s64, ttype: *s64, dmin1: *float, dmin2: *float, dn: *float, dn1: *float, dn2: *float, g: *float, tau: *float) -> void #foreign mkl_intel_ilp64;

slasq3_ :: (i0: *s64, n0: *s64, z: *float, pp: *s64, dmin: *float, sigma: *float, desig: *float, qmax: *float, nfail: *s64, iter: *s64, ndiv: *s64, ieee: *s64, ttype: *s64, dmin1: *float, dmin2: *float, dn: *float, dn1: *float, dn2: *float, g: *float, tau: *float) -> void #foreign mkl_intel_ilp64;

SLASQ4 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, n0in: *s64, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dn1: *float, dn2: *float, tau: *float, ttype: *s64, g: *float) -> void #foreign mkl_intel_ilp64;

slasq4 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, n0in: *s64, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dn1: *float, dn2: *float, tau: *float, ttype: *s64, g: *float) -> void #foreign mkl_intel_ilp64;

slasq4_ :: (i0: *s64, n0: *s64, z: *float, pp: *s64, n0in: *s64, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dn1: *float, dn2: *float, tau: *float, ttype: *s64, g: *float) -> void #foreign mkl_intel_ilp64;

SLASQ5 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, tau: *float, sigma: *float, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dnm1: *float, dnm2: *float, ieee: *s64, eps: *float) -> void #foreign mkl_intel_ilp64;

slasq5 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, tau: *float, sigma: *float, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dnm1: *float, dnm2: *float, ieee: *s64, eps: *float) -> void #foreign mkl_intel_ilp64;

slasq5_ :: (i0: *s64, n0: *s64, z: *float, pp: *s64, tau: *float, sigma: *float, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dnm1: *float, dnm2: *float, ieee: *s64, eps: *float) -> void #foreign mkl_intel_ilp64;

SLASQ6 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dnm1: *float, dnm2: *float) -> void #foreign mkl_intel_ilp64;

slasq6 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dnm1: *float, dnm2: *float) -> void #foreign mkl_intel_ilp64;

slasq6_ :: (i0: *s64, n0: *s64, z: *float, pp: *s64, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dnm1: *float, dnm2: *float) -> void #foreign mkl_intel_ilp64;

SLASR :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float, s: *float, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

slasr :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float, s: *float, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

slasr_ :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float, s: *float, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

SLASRT :: (id: *u8, n: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasrt :: (id: *u8, n: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
slasrt_ :: (id: *u8, n: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASSQ :: (n: *s64, x: *float, incx: *s64, scale: *float, sumsq: *float) -> void #foreign mkl_intel_ilp64;

slassq :: (n: *s64, x: *float, incx: *s64, scale: *float, sumsq: *float) -> void #foreign mkl_intel_ilp64;

slassq_ :: (n: *s64, x: *float, incx: *s64, scale: *float, sumsq: *float) -> void #foreign mkl_intel_ilp64;

SLASV2 :: (f: *float, g: *float, h: *float, ssmin: *float, ssmax: *float, snr: *float, csr: *float, snl: *float, csl: *float) -> void #foreign mkl_intel_ilp64;

slasv2 :: (f: *float, g: *float, h: *float, ssmin: *float, ssmax: *float, snr: *float, csr: *float, snl: *float, csl: *float) -> void #foreign mkl_intel_ilp64;

slasv2_ :: (f: *float, g: *float, h: *float, ssmin: *float, ssmax: *float, snr: *float, csr: *float, snl: *float, csl: *float) -> void #foreign mkl_intel_ilp64;

SLASWP :: (n: *s64, a: *float, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

slaswp :: (n: *s64, a: *float, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

slaswp_ :: (n: *s64, a: *float, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

SLASY2 :: (ltranl: *s64, ltranr: *s64, isgn: *s64, n1: *s64, n2: *s64, tl: *float, ldtl: *s64, tr: *float, ldtr: *s64, b: *float, ldb: *s64, scale: *float, x: *float, ldx: *s64, xnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasy2 :: (ltranl: *s64, ltranr: *s64, isgn: *s64, n1: *s64, n2: *s64, tl: *float, ldtl: *s64, tr: *float, ldtr: *s64, b: *float, ldb: *s64, scale: *float, x: *float, ldx: *s64, xnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasy2_ :: (ltranl: *s64, ltranr: *s64, isgn: *s64, n1: *s64, n2: *s64, tl: *float, ldtl: *s64, tr: *float, ldtr: *s64, b: *float, ldb: *s64, scale: *float, x: *float, ldx: *s64, xnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASYF :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasyf :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasyf_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATBS :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatbs :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatbs_ :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATDF :: (ijob: *s64, n: *s64, z: *float, ldz: *s64, rhs: *float, rdsum: *float, rdscal: *float, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

slatdf :: (ijob: *s64, n: *s64, z: *float, ldz: *s64, rhs: *float, rdsum: *float, rdscal: *float, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

slatdf_ :: (ijob: *s64, n: *s64, z: *float, ldz: *s64, rhs: *float, rdsum: *float, rdscal: *float, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

SLATPS :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *float, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatps :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *float, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatps_ :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *float, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATRD :: (uplo: *u8, n: *s64, nb: *s64, a: *float, lda: *s64, e: *float, tau: *float, w: *float, ldw: *s64) -> void #foreign mkl_intel_ilp64;

slatrd :: (uplo: *u8, n: *s64, nb: *s64, a: *float, lda: *s64, e: *float, tau: *float, w: *float, ldw: *s64) -> void #foreign mkl_intel_ilp64;

slatrd_ :: (uplo: *u8, n: *s64, nb: *s64, a: *float, lda: *s64, e: *float, tau: *float, w: *float, ldw: *s64) -> void #foreign mkl_intel_ilp64;

SLATRS :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *float, lda: *s64, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatrs :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *float, lda: *s64, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatrs_ :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *float, lda: *s64, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATRZ :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, tau: *float, work: *float) -> void #foreign mkl_intel_ilp64;

slatrz :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, tau: *float, work: *float) -> void #foreign mkl_intel_ilp64;

slatrz_ :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, tau: *float, work: *float) -> void #foreign mkl_intel_ilp64;

SLATZM :: (side: *u8, m: *s64, n: *s64, v: *float, incv: *s64, tau: *float, c1: *float, c2: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slatzm :: (side: *u8, m: *s64, n: *s64, v: *float, incv: *s64, tau: *float, c1: *float, c2: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slatzm_ :: (side: *u8, m: *s64, n: *s64, v: *float, incv: *s64, tau: *float, c1: *float, c2: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

SLAUU2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slauu2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slauu2_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAUUM :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slauum :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slauum_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SOPGTR :: (uplo: *u8, n: *s64, ap: *float, tau: *float, q: *float, ldq: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sopgtr :: (uplo: *u8, n: *s64, ap: *float, tau: *float, q: *float, ldq: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sopgtr_ :: (uplo: *u8, n: *s64, ap: *float, tau: *float, q: *float, ldq: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SOPMTR :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *float, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sopmtr :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *float, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sopmtr_ :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *float, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORG2L :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorg2l :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorg2l_ :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORG2R :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorg2r :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorg2r_ :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGBR :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgbr :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgbr_ :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGHR :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorghr :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorghr_ :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGL2 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgl2 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgl2_ :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGLQ :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorglq :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorglq_ :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGQL :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgql :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgql_ :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGQR :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgqr :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgqr_ :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGR2 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgr2 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgr2_ :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGRQ :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgrq :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgrq_ :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGTR :: (uplo: *u8, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgtr :: (uplo: *u8, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgtr_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORM2L :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorm2l :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorm2l_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORM2R :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorm2r :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorm2r_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMBR :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormbr :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormbr_ :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMHR :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormhr :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormhr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORML2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorml2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorml2_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMLQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormlq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormlq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMQL :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormql :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormql_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMQR :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormqr :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormqr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMR2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sormr2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sormr2_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMR3 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sormr3 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sormr3_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMRQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormrq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormrq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMRZ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormrz :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormrz_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMTR :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormtr :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormtr_ :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBCON :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbcon :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbcon_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBEQU :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spbequ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spbequ_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBRFS :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbrfs :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbrfs_ :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBSTF :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbstf :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbstf_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBSV :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbsv :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbsv_ :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBSVX :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbsvx :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbsvx_ :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBTF2 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbtf2 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbtf2_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBTRF :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbtrf :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbtrf_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBTRS :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbtrs :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbtrs_ :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPFTRF :: (transr: *u8, uplo: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spftrf :: (transr: *u8, uplo: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spftrf_ :: (transr: *u8, uplo: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPFTRI :: (transr: *u8, uplo: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spftri :: (transr: *u8, uplo: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spftri_ :: (transr: *u8, uplo: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPFTRS :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spftrs :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spftrs_ :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOCON :: (uplo: *u8, n: *s64, a: *float, lda: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spocon :: (uplo: *u8, n: *s64, a: *float, lda: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spocon_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOEQUB :: (n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spoequb :: (n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spoequb_ :: (n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOEQU :: (n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spoequ :: (n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spoequ_ :: (n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPORFS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sporfs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sporfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPORFSX :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sporfsx :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sporfsx_ :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOSV :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sposv :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sposv_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sposvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sposvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOSVXX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sposvxx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sposvxx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOTF2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spotf2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spotf2_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOTRF :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spotrf :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spotrf_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOTRI :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spotri :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spotri_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOTRS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spotrs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spotrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPCON :: (uplo: *u8, n: *s64, ap: *float, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sppcon :: (uplo: *u8, n: *s64, ap: *float, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sppcon_ :: (uplo: *u8, n: *s64, ap: *float, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPEQU :: (uplo: *u8, n: *s64, ap: *float, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sppequ :: (uplo: *u8, n: *s64, ap: *float, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sppequ_ :: (uplo: *u8, n: *s64, ap: *float, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPRFS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spprfs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spprfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPSV :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sppsv :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sppsv_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sppsvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sppsvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPTRF :: (uplo: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spptrf :: (uplo: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
spptrf_ :: (uplo: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPTRI :: (uplo: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spptri :: (uplo: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
spptri_ :: (uplo: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPTRS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spptrs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spptrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPSTF2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spstf2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spstf2_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPSTRF :: (uplo: *u8, n: *s64, a: *float, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spstrf :: (uplo: *u8, n: *s64, a: *float, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spstrf_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTCON :: (n: *s64, d: *float, e: *float, anorm: *float, rcond: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sptcon :: (n: *s64, d: *float, e: *float, anorm: *float, rcond: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sptcon_ :: (n: *s64, d: *float, e: *float, anorm: *float, rcond: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTEQR :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spteqr :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spteqr_ :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTRFS :: (n: *s64, nrhs: *s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sptrfs :: (n: *s64, nrhs: *s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sptrfs_ :: (n: *s64, nrhs: *s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTSV :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sptsv :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sptsv_ :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTSVX :: (fact: *u8, n: *s64, nrhs: *s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sptsvx :: (fact: *u8, n: *s64, nrhs: *s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sptsvx_ :: (fact: *u8, n: *s64, nrhs: *s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTTRF :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spttrf :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
spttrf_ :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTTRS :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spttrs :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spttrs_ :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTTS2 :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

sptts2 :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

sptts2_ :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

SRSCL :: (n: *s64, sa: *float, sx: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

srscl :: (n: *s64, sa: *float, sx: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

srscl_ :: (n: *s64, sa: *float, sx: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

SSBEVD :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbevd :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbevd_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBEV :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbev :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbev_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBEVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbevx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbevx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBGST :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, x: *float, ldx: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbgst :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, x: *float, ldx: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbgst_ :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, x: *float, ldx: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBGVD :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbgvd :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbgvd_ :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBGV :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbgv :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbgv_ :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBGVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbgvx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbgvx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBTRD :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, d: *float, e: *float, q: *float, ldq: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbtrd :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, d: *float, e: *float, q: *float, ldq: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbtrd_ :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, d: *float, e: *float, q: *float, ldq: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSFRK :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, beta: *float, c: *float) -> void #foreign mkl_intel_ilp64;

ssfrk :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, beta: *float, c: *float) -> void #foreign mkl_intel_ilp64;

ssfrk_ :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, beta: *float, c: *float) -> void #foreign mkl_intel_ilp64;

SSPCON :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspcon :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspcon_ :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPEVD :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspevd :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspevd_ :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPEV :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sspev :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sspev_ :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPEVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspevx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspevx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPGST :: (itype: *s64, uplo: *u8, n: *s64, ap: *float, bp: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sspgst :: (itype: *s64, uplo: *u8, n: *s64, ap: *float, bp: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sspgst_ :: (itype: *s64, uplo: *u8, n: *s64, ap: *float, bp: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPGVD :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspgvd :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspgvd_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPGV :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sspgv :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sspgv_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPGVX :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspgvx :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspgvx_ :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPRFS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssprfs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssprfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPSV :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspsv :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspsv_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspsvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspsvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPTRD :: (uplo: *u8, n: *s64, ap: *float, d: *float, e: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssptrd :: (uplo: *u8, n: *s64, ap: *float, d: *float, e: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssptrd_ :: (uplo: *u8, n: *s64, ap: *float, d: *float, e: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPTRF :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssptrf :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssptrf_ :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPTRI :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssptri :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssptri_ :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPTRS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssptrs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssptrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEBZ :: (range: *u8, order: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, d: *float, e: *float, m: *s64, nsplit: *s64, w: *float, iblock: *s64, isplit: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstebz :: (range: *u8, order: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, d: *float, e: *float, m: *s64, nsplit: *s64, w: *float, iblock: *s64, isplit: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstebz_ :: (range: *u8, order: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, d: *float, e: *float, m: *s64, nsplit: *s64, w: *float, iblock: *s64, isplit: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEDC :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstedc :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstedc_ :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEGR :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstegr :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstegr_ :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEIN :: (n: *s64, d: *float, e: *float, m: *s64, w: *float, iblock: *s64, isplit: *s64, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstein :: (n: *s64, d: *float, e: *float, m: *s64, w: *float, iblock: *s64, isplit: *s64, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstein_ :: (n: *s64, d: *float, e: *float, m: *s64, w: *float, iblock: *s64, isplit: *s64, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEMR :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, m: *s64, w: *float, z: *float, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstemr :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, m: *s64, w: *float, z: *float, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstemr_ :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, m: *s64, w: *float, z: *float, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEQR :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssteqr :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssteqr_ :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTERF :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssterf :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
ssterf_ :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEVD :: (jobz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstevd :: (jobz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstevd_ :: (jobz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEV :: (jobz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sstev :: (jobz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sstev_ :: (jobz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEVR :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstevr :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstevr_ :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEVX :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstevx :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstevx_ :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYCON :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssycon :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssycon_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEQUB :: (uplo: *u8, n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyequb :: (uplo: *u8, n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyequb_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEVD :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevd :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevd_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEV :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyev :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyev_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEVR :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevr :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevr_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYGS2 :: (itype: *s64, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygs2 :: (itype: *s64, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygs2_ :: (itype: *s64, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYGST :: (itype: *s64, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygst :: (itype: *s64, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygst_ :: (itype: *s64, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYGVD :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygvd :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygvd_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYGV :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygv :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygv_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYGVX :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygvx :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygvx_ :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYRFS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyrfs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyrfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYRFSX :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyrfsx :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyrfsx_ :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSV :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSVXX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysvxx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysvxx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTD2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytd2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytd2_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTF2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytf2 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytf2_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRD :: (uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrd :: (uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrd_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRF :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRI :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STBCON :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stbcon :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stbcon_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STBRFS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stbrfs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stbrfs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STBTRS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stbtrs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stbtrs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STFSM :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

stfsm :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

stfsm_ :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

STFTRI :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stftri :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stftri_ :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STFTTP :: (transr: *u8, uplo: *u8, n: *s64, arf: *float, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stfttp :: (transr: *u8, uplo: *u8, n: *s64, arf: *float, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stfttp_ :: (transr: *u8, uplo: *u8, n: *s64, arf: *float, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STFTTR :: (transr: *u8, uplo: *u8, n: *s64, arf: *float, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stfttr :: (transr: *u8, uplo: *u8, n: *s64, arf: *float, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stfttr_ :: (transr: *u8, uplo: *u8, n: *s64, arf: *float, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGEVC :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *float, lds: *s64, p: *float, ldp: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stgevc :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *float, lds: *s64, p: *float, ldp: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stgevc_ :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *float, lds: *s64, p: *float, ldp: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STGEX2 :: (wantq: *s64, wantz: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgex2 :: (wantq: *s64, wantz: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgex2_ :: (wantq: *s64, wantz: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGEXC :: (wantq: *s64, wantz: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, ifst: *s64, ilst: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgexc :: (wantq: *s64, wantz: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, ifst: *s64, ilst: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgexc_ :: (wantq: *s64, wantz: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, ifst: *s64, ilst: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGSEN :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, m: *s64, pl: *float, pr: *float, dif: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsen :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, m: *s64, pl: *float, pr: *float, dif: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsen_ :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, m: *s64, pl: *float, pr: *float, dif: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGSJA :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsja :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsja_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGSNA :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, s: *float, dif: *float, mm: *s64, m: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsna :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, s: *float, dif: *float, mm: *s64, m: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsna_ :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, s: *float, dif: *float, mm: *s64, m: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGSY2 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, scale: *float, rdsum: *float, rdscal: *float, iwork: *s64, pq: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsy2 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, scale: *float, rdsum: *float, rdscal: *float, iwork: *s64, pq: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsy2_ :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, scale: *float, rdsum: *float, rdscal: *float, iwork: *s64, pq: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGSYL :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, scale: *float, dif: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsyl :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, scale: *float, dif: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsyl_ :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, scale: *float, dif: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPCON :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stpcon :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stpcon_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPRFS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stprfs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stprfs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPTRI :: (uplo: *u8, diag: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stptri :: (uplo: *u8, diag: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stptri_ :: (uplo: *u8, diag: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STPTRS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stptrs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stptrs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPTTF :: (transr: *u8, uplo: *u8, n: *s64, ap: *float, arf: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stpttf :: (transr: *u8, uplo: *u8, n: *s64, ap: *float, arf: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stpttf_ :: (transr: *u8, uplo: *u8, n: *s64, ap: *float, arf: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STPTTR :: (uplo: *u8, n: *s64, ap: *float, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stpttr :: (uplo: *u8, n: *s64, ap: *float, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stpttr_ :: (uplo: *u8, n: *s64, ap: *float, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRCON :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strcon :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strcon_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STREVC :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strevc :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strevc_ :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STREXC :: (compq: *u8, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, ifst: *s64, ilst: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strexc :: (compq: *u8, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, ifst: *s64, ilst: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strexc_ :: (compq: *u8, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, ifst: *s64, ilst: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STRRFS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strrfs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strrfs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRSEN :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, wr: *float, wi: *float, m: *s64, s: *float, sep: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strsen :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, wr: *float, wi: *float, m: *s64, s: *float, sep: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strsen_ :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, wr: *float, wi: *float, m: *s64, s: *float, sep: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRSNA :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, s: *float, sep: *float, mm: *s64, m: *s64, work: *float, ldwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strsna :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, s: *float, sep: *float, mm: *s64, m: *s64, work: *float, ldwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strsna_ :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, s: *float, sep: *float, mm: *s64, m: *s64, work: *float, ldwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRSYL :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strsyl :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strsyl_ :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STRTI2 :: (uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strti2 :: (uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strti2_ :: (uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRTRI :: (uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strtri :: (uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strtri_ :: (uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRTRS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strtrs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strtrs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRTTF :: (transr: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, arf: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strttf :: (transr: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, arf: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strttf_ :: (transr: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, arf: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STRTTP :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strttp :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strttp_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STZRQF :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stzrqf :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stzrqf_ :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STZRZF :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stzrzf :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stzrzf_ :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

XERBLA_ARRAY :: (srname_array: *u8, srname_len: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

xerbla_array :: (srname_array: *u8, srname_len: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

xerbla_array_ :: (srname_array: *u8, srname_len: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZBDSQR :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *MKL_Complex16, ldvt: *s64, u: *MKL_Complex16, ldu: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zbdsqr :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *MKL_Complex16, ldvt: *s64, u: *MKL_Complex16, ldu: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zbdsqr_ :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *MKL_Complex16, ldvt: *s64, u: *MKL_Complex16, ldu: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZCGESV :: (n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, swork: *MKL_Complex8, rwork: *float64, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zcgesv :: (n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, swork: *MKL_Complex8, rwork: *float64, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zcgesv_ :: (n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, swork: *MKL_Complex8, rwork: *float64, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZCPOSV :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, swork: *MKL_Complex8, rwork: *float64, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zcposv :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, swork: *MKL_Complex8, rwork: *float64, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zcposv_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, swork: *MKL_Complex8, rwork: *float64, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZDRSCL :: (n: *s64, sa: *float64, sx: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

zdrscl :: (n: *s64, sa: *float64, sx: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

zdrscl_ :: (n: *s64, sa: *float64, sx: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZGBBRD :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, pt: *MKL_Complex16, ldpt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbbrd :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, pt: *MKL_Complex16, ldpt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbbrd_ :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, pt: *MKL_Complex16, ldpt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBCON :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbcon :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbcon_ :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBEQUB :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbequb :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbequb_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBEQU :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbequ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbequ_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBRFS :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbrfs :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbrfs_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBRFSX :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbrfsx :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbrfsx_ :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBSV :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbsv :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbsv_ :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBSVX :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbsvx :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbsvx_ :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBSVXX :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbsvxx :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbsvxx_ :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBTF2 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbtf2 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbtf2_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBTRF :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbtrf :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbtrf_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBTRS :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbtrs :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbtrs_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEBAK :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float64, m: *s64, v: *MKL_Complex16, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgebak :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float64, m: *s64, v: *MKL_Complex16, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgebak_ :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float64, m: *s64, v: *MKL_Complex16, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEBAL :: (job: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ilo: *s64, ihi: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgebal :: (job: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ilo: *s64, ihi: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgebal_ :: (job: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ilo: *s64, ihi: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEBD2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgebd2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgebd2_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEBRD :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgebrd :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgebrd_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGECON :: (norm: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgecon :: (norm: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgecon_ :: (norm: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEEQUB :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeequb :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeequb_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEEQU :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeequ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeequ_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEES :: (jobvs: *u8, sort: *u8, select: MKL_Z_SELECT_FUNCTION_1, n: *s64, a: *MKL_Complex16, lda: *s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgees :: (jobvs: *u8, sort: *u8, select: MKL_Z_SELECT_FUNCTION_1, n: *s64, a: *MKL_Complex16, lda: *s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgees_ :: (jobvs: *u8, sort: *u8, select: MKL_Z_SELECT_FUNCTION_1, n: *s64, a: *MKL_Complex16, lda: *s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEESX :: (jobvs: *u8, sort: *u8, select: MKL_Z_SELECT_FUNCTION_1, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: *s64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeesx :: (jobvs: *u8, sort: *u8, select: MKL_Z_SELECT_FUNCTION_1, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: *s64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeesx_ :: (jobvs: *u8, sort: *u8, select: MKL_Z_SELECT_FUNCTION_1, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: *s64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEEV :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeev :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeev_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEEVX :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeevx :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeevx_ :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEGS :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgegs :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgegs_ :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEGV :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgegv :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgegv_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEHD2 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgehd2 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgehd2_ :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEHRD :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgehrd :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgehrd_ :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELQ2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelq2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelq2_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELQF :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelqf :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelqf_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELSD :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelsd :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelsd_ :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELS :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgels :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgels_ :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELSS :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelss :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelss_ :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELSX :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelsx :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelsx_ :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELSY :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelsy :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelsy_ :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQL2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeql2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeql2_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQLF :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqlf :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqlf_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQP3 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqp3 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqp3_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQPF :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqpf :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqpf_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQR2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqr2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqr2_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQR2P :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqr2p :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqr2p_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQRF :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrf :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrf_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQRFP :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrfp :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrfp_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGERFS :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgerfs :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgerfs_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGERFSX :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgerfsx :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgerfsx_ :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGERQ2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgerq2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgerq2_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGERQF :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgerqf :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgerqf_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESC2 :: (n: *s64, a: *MKL_Complex16, lda: *s64, rhs: *MKL_Complex16, ipiv: *s64, jpiv: *s64, scale: *float64) -> void #foreign mkl_intel_ilp64;

zgesc2 :: (n: *s64, a: *MKL_Complex16, lda: *s64, rhs: *MKL_Complex16, ipiv: *s64, jpiv: *s64, scale: *float64) -> void #foreign mkl_intel_ilp64;

zgesc2_ :: (n: *s64, a: *MKL_Complex16, lda: *s64, rhs: *MKL_Complex16, ipiv: *s64, jpiv: *s64, scale: *float64) -> void #foreign mkl_intel_ilp64;

ZGESDD :: (jobz: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesdd :: (jobz: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesdd_ :: (jobz: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESVD :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvd :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvd_ :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESV :: (n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesv :: (n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesv_ :: (n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESVX :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvx :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvx_ :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESVXX :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvxx :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvxx_ :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETC2 :: (n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetc2 :: (n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetc2_ :: (n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETF2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetf2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetf2_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRF :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrf :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrf_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_ZGETRFNPI :: (m: *s64, n: *s64, nfact: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_zgetrfnpi :: (m: *s64, n: *s64, nfact: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_zgetrfnpi_ :: (m: *s64, n: *s64, nfact: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRI :: (n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetri :: (n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetri_ :: (n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRS :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrs :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrs_ :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGBAK :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, m: *s64, v: *MKL_Complex16, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggbak :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, m: *s64, v: *MKL_Complex16, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggbak_ :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, m: *s64, v: *MKL_Complex16, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGBAL :: (job: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggbal :: (job: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggbal_ :: (job: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGES :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgges :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgges_ :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGESX :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggesx :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggesx_ :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGEV :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggev :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggev_ :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGEVX :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggevx :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggevx_ :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGGLM :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, d: *MKL_Complex16, x: *MKL_Complex16, y: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggglm :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, d: *MKL_Complex16, x: *MKL_Complex16, y: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggglm_ :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, d: *MKL_Complex16, x: *MKL_Complex16, y: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGHRD :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgghrd :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgghrd_ :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGLSE :: (m: *s64, n: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, d: *MKL_Complex16, x: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgglse :: (m: *s64, n: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, d: *MKL_Complex16, x: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgglse_ :: (m: *s64, n: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, d: *MKL_Complex16, x: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGQRF :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, taub: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggqrf :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, taub: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggqrf_ :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, taub: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGRQF :: (m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, taub: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggrqf :: (m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, taub: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggrqf_ :: (m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, taub: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGSVD :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggsvd :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggsvd_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGSVP :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, iwork: *s64, rwork: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zggsvp :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, iwork: *s64, rwork: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zggsvp_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, iwork: *s64, rwork: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTCON :: (norm: *u8, n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgtcon :: (norm: *u8, n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgtcon_ :: (norm: *u8, n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTRFS :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgtrfs :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgtrfs_ :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTSV :: (n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgtsv :: (n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgtsv_ :: (n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTSVX :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgtsvx :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgtsvx_ :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTTRF :: (n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgttrf :: (n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgttrf_ :: (n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTTRS :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgttrs :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgttrs_ :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTTS2 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zgtts2 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zgtts2_ :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZHBEVD :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbevd :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbevd_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBEV :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbev :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbev_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBEVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbevx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbevx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBGST :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbgst :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbgst_ :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBGVD :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbgvd :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbgvd_ :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBGV :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbgv :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbgv_ :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBGVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbgvx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbgvx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBTRD :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbtrd :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbtrd_ :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHECON :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhecon :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhecon_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEQUB :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zheequb :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zheequb_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEVD :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevd :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevd_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEV :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheev :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheev_ :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEVR :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevr :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevr_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEGS2 :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegs2 :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegs2_ :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEGST :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegst :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegst_ :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEGVD :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegvd :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegvd_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEGV :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegv :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegv_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEGVX :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegvx :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegvx_ :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHERFS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zherfs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zherfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHERFSX :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zherfsx :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zherfsx_ :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESV :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESVXX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesvxx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesvxx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETD2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetd2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetd2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETF2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetf2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetf2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRD :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrd :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrd_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRF :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRI :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHFRK :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, beta: *float64, c: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zhfrk :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, beta: *float64, c: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zhfrk_ :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, beta: *float64, c: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZHGEQZ :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, t: *MKL_Complex16, ldt: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhgeqz :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, t: *MKL_Complex16, ldt: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhgeqz_ :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, t: *MKL_Complex16, ldt: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPCON :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpcon :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpcon_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPEVD :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpevd :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpevd_ :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPEV :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpev :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpev_ :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPEVX :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpevx :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpevx_ :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPGST :: (itype: *s64, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpgst :: (itype: *s64, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpgst_ :: (itype: *s64, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPGVD :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpgvd :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpgvd_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPGV :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpgv :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpgv_ :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPGVX :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpgvx :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpgvx_ :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPRFS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhprfs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhprfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPSV :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpsv :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpsv_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpsvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpsvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPTRD :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, d: *float64, e: *float64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhptrd :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, d: *float64, e: *float64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhptrd_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, d: *float64, e: *float64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPTRF :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhptrf :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhptrf_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPTRI :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhptri :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhptri_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPTRS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhptrs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhptrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHSEIN :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhsein :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhsein_ :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHSEQR :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhseqr :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhseqr_ :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLABRD :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

zlabrd :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

zlabrd_ :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

ZLACGV :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

zlacgv :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;
zlacgv_ :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZLACN2 :: (n: *s64, v: *MKL_Complex16, x: *MKL_Complex16, est: *float64, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

zlacn2 :: (n: *s64, v: *MKL_Complex16, x: *MKL_Complex16, est: *float64, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

zlacn2_ :: (n: *s64, v: *MKL_Complex16, x: *MKL_Complex16, est: *float64, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

ZLACON :: (n: *s64, v: *MKL_Complex16, x: *MKL_Complex16, est: *float64, kase: *s64) -> void #foreign mkl_intel_ilp64;

zlacon :: (n: *s64, v: *MKL_Complex16, x: *MKL_Complex16, est: *float64, kase: *s64) -> void #foreign mkl_intel_ilp64;

zlacon_ :: (n: *s64, v: *MKL_Complex16, x: *MKL_Complex16, est: *float64, kase: *s64) -> void #foreign mkl_intel_ilp64;

ZLACP2 :: (uplo: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zlacp2 :: (uplo: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zlacp2_ :: (uplo: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZLACPY :: (uplo: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zlacpy :: (uplo: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zlacpy_ :: (uplo: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZLACRM :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *float64, ldb: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64) -> void #foreign mkl_intel_ilp64;

zlacrm :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *float64, ldb: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64) -> void #foreign mkl_intel_ilp64;

zlacrm_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *float64, ldb: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64) -> void #foreign mkl_intel_ilp64;

ZLACRT :: (n: *s64, cx: *MKL_Complex16, incx: *s64, cy: *MKL_Complex16, incy: *s64, c: *MKL_Complex16, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlacrt :: (n: *s64, cx: *MKL_Complex16, incx: *s64, cy: *MKL_Complex16, incy: *s64, c: *MKL_Complex16, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlacrt_ :: (n: *s64, cx: *MKL_Complex16, incx: *s64, cy: *MKL_Complex16, incy: *s64, c: *MKL_Complex16, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLADIV :: (ret_value: *MKL_Complex16, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zladiv :: (ret_value: *MKL_Complex16, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zladiv_ :: (ret_value: *MKL_Complex16, x: *MKL_Complex16, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLAED0 :: (qsiz: *s64, n: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, qstore: *MKL_Complex16, ldqs: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaed0 :: (qsiz: *s64, n: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, qstore: *MKL_Complex16, ldqs: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaed0_ :: (qsiz: *s64, n: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, qstore: *MKL_Complex16, ldqs: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAED7 :: (n: *s64, cutpnt: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float64, q: *MKL_Complex16, ldq: *s64, rho: *float64, indxq: *s64, qstore: *float64, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaed7 :: (n: *s64, cutpnt: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float64, q: *MKL_Complex16, ldq: *s64, rho: *float64, indxq: *s64, qstore: *float64, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaed7_ :: (n: *s64, cutpnt: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float64, q: *MKL_Complex16, ldq: *s64, rho: *float64, indxq: *s64, qstore: *float64, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAED8 :: (k: *s64, n: *s64, qsiz: *s64, q: *MKL_Complex16, ldq: *s64, d: *float64, rho: *float64, cutpnt: *s64, z: *float64, dlamda: *float64, q2: *MKL_Complex16, ldq2: *s64, w: *float64, indxp: *s64, indx: *s64, indxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaed8 :: (k: *s64, n: *s64, qsiz: *s64, q: *MKL_Complex16, ldq: *s64, d: *float64, rho: *float64, cutpnt: *s64, z: *float64, dlamda: *float64, q2: *MKL_Complex16, ldq2: *s64, w: *float64, indxp: *s64, indx: *s64, indxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaed8_ :: (k: *s64, n: *s64, qsiz: *s64, q: *MKL_Complex16, ldq: *s64, d: *float64, rho: *float64, cutpnt: *s64, z: *float64, dlamda: *float64, q2: *MKL_Complex16, ldq2: *s64, w: *float64, indxp: *s64, indx: *s64, indxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAEIN :: (rightv: *s64, noinit: *s64, n: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, v: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, rwork: *float64, eps3: *float64, smlnum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaein :: (rightv: *s64, noinit: *s64, n: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, v: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, rwork: *float64, eps3: *float64, smlnum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaein_ :: (rightv: *s64, noinit: *s64, n: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, v: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, rwork: *float64, eps3: *float64, smlnum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAESY :: (a: *MKL_Complex16, b: *MKL_Complex16, c: *MKL_Complex16, rt1: *MKL_Complex16, rt2: *MKL_Complex16, evscal: *MKL_Complex16, cs1: *MKL_Complex16, sn1: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlaesy :: (a: *MKL_Complex16, b: *MKL_Complex16, c: *MKL_Complex16, rt1: *MKL_Complex16, rt2: *MKL_Complex16, evscal: *MKL_Complex16, cs1: *MKL_Complex16, sn1: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlaesy_ :: (a: *MKL_Complex16, b: *MKL_Complex16, c: *MKL_Complex16, rt1: *MKL_Complex16, rt2: *MKL_Complex16, evscal: *MKL_Complex16, cs1: *MKL_Complex16, sn1: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLAEV2 :: (a: *MKL_Complex16, b: *MKL_Complex16, c: *MKL_Complex16, rt1: *float64, rt2: *float64, cs1: *float64, sn1: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlaev2 :: (a: *MKL_Complex16, b: *MKL_Complex16, c: *MKL_Complex16, rt1: *float64, rt2: *float64, cs1: *float64, sn1: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlaev2_ :: (a: *MKL_Complex16, b: *MKL_Complex16, c: *MKL_Complex16, rt1: *float64, rt2: *float64, cs1: *float64, sn1: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLAG2C :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sa: *MKL_Complex8, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlag2c :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sa: *MKL_Complex8, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlag2c_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sa: *MKL_Complex8, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAGS2 :: (upper: *s64, a1: *float64, a2: *MKL_Complex16, a3: *float64, b1: *float64, b2: *MKL_Complex16, b3: *float64, csu: *float64, snu: *MKL_Complex16, csv: *float64, snv: *MKL_Complex16, csq: *float64, snq: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlags2 :: (upper: *s64, a1: *float64, a2: *MKL_Complex16, a3: *float64, b1: *float64, b2: *MKL_Complex16, b3: *float64, csu: *float64, snu: *MKL_Complex16, csv: *float64, snv: *MKL_Complex16, csq: *float64, snq: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlags2_ :: (upper: *s64, a1: *float64, a2: *MKL_Complex16, a3: *float64, b1: *float64, b2: *MKL_Complex16, b3: *float64, csu: *float64, snu: *MKL_Complex16, csv: *float64, snv: *MKL_Complex16, csq: *float64, snq: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLAGTM :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, beta: *float64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zlagtm :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, beta: *float64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zlagtm_ :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, beta: *float64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHEF :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahef :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahef_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHQR :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahqr :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahqr_ :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHR2 :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

zlahr2 :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

zlahr2_ :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHRD :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

zlahrd :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

zlahrd_ :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

ZLAIC1 :: (job: *s64, j: *s64, x: *MKL_Complex16, sest: *float64, w: *MKL_Complex16, gamma: *MKL_Complex16, sestpr: *float64, s: *MKL_Complex16, c: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlaic1 :: (job: *s64, j: *s64, x: *MKL_Complex16, sest: *float64, w: *MKL_Complex16, gamma: *MKL_Complex16, sestpr: *float64, s: *MKL_Complex16, c: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlaic1_ :: (job: *s64, j: *s64, x: *MKL_Complex16, sest: *float64, w: *MKL_Complex16, gamma: *MKL_Complex16, sestpr: *float64, s: *MKL_Complex16, c: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLALS0 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *MKL_Complex16, ldb: *s64, bx: *MKL_Complex16, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlals0 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *MKL_Complex16, ldb: *s64, bx: *MKL_Complex16, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlals0_ :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *MKL_Complex16, ldb: *s64, bx: *MKL_Complex16, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLALSA :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *MKL_Complex16, ldb: *s64, bx: *MKL_Complex16, ldbx: *s64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlalsa :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *MKL_Complex16, ldb: *s64, bx: *MKL_Complex16, ldbx: *s64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlalsa_ :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *MKL_Complex16, ldb: *s64, bx: *MKL_Complex16, ldbx: *s64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLALSD :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *MKL_Complex16, ldb: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlalsd :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *MKL_Complex16, ldb: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlalsd_ :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *MKL_Complex16, ldb: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLANGB :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlangb :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlangb_ :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANGE :: (norm: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlange :: (norm: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlange_ :: (norm: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANGT :: (norm: *u8, n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;

zlangt :: (norm: *u8, n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;

zlangt_ :: (norm: *u8, n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;

ZLANHB :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhb :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhb_ :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANHE :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhe :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhe_ :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANHF :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhf :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhf_ :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANHP :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhp :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhp_ :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANHS :: (norm: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhs :: (norm: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhs_ :: (norm: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANHT :: (norm: *u8, n: *s64, d: *float64, e: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;

zlanht :: (norm: *u8, n: *s64, d: *float64, e: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;

zlanht_ :: (norm: *u8, n: *s64, d: *float64, e: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;

ZLANSB :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlansb :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlansb_ :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANSP :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlansp :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlansp_ :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANSY :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlansy :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlansy_ :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANTB :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlantb :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlantb_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANTP :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlantp :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlantp_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANTR :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlantr :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlantr_ :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLAPLL :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, ssmin: *float64) -> void #foreign mkl_intel_ilp64;

zlapll :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, ssmin: *float64) -> void #foreign mkl_intel_ilp64;

zlapll_ :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, ssmin: *float64) -> void #foreign mkl_intel_ilp64;

ZLAPMT :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex16, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

zlapmt :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex16, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

zlapmt_ :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex16, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQGB :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqgb :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqgb_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQGE :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqge :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqge_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQHB :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqhb :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqhb_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQHE :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqhe :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqhe_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQHP :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqhp :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqhp_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQP2 :: (m: *s64, n: *s64, offset: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, vn1: *float64, vn2: *float64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlaqp2 :: (m: *s64, n: *s64, offset: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, vn1: *float64, vn2: *float64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlaqp2_ :: (m: *s64, n: *s64, offset: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, vn1: *float64, vn2: *float64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLAQPS :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, vn1: *float64, vn2: *float64, auxv: *MKL_Complex16, f: *MKL_Complex16, ldf: *s64) -> void #foreign mkl_intel_ilp64;

zlaqps :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, vn1: *float64, vn2: *float64, auxv: *MKL_Complex16, f: *MKL_Complex16, ldf: *s64) -> void #foreign mkl_intel_ilp64;

zlaqps_ :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, vn1: *float64, vn2: *float64, auxv: *MKL_Complex16, f: *MKL_Complex16, ldf: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQR0 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr0 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr0_ :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQR1 :: (n: *s64, h: *MKL_Complex16, ldh: *s64, s1: *MKL_Complex16, s2: *MKL_Complex16, v: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlaqr1 :: (n: *s64, h: *MKL_Complex16, ldh: *s64, s1: *MKL_Complex16, s2: *MKL_Complex16, v: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlaqr1_ :: (n: *s64, h: *MKL_Complex16, ldh: *s64, s1: *MKL_Complex16, s2: *MKL_Complex16, v: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLAQR2 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex16, v: *MKL_Complex16, ldv: *s64, nh: *s64, t: *MKL_Complex16, ldt: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, work: *MKL_Complex16, lwork: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr2 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex16, v: *MKL_Complex16, ldv: *s64, nh: *s64, t: *MKL_Complex16, ldt: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, work: *MKL_Complex16, lwork: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr2_ :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex16, v: *MKL_Complex16, ldv: *s64, nh: *s64, t: *MKL_Complex16, ldt: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, work: *MKL_Complex16, lwork: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQR3 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex16, v: *MKL_Complex16, ldv: *s64, nh: *s64, t: *MKL_Complex16, ldt: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, work: *MKL_Complex16, lwork: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr3 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex16, v: *MKL_Complex16, ldv: *s64, nh: *s64, t: *MKL_Complex16, ldt: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, work: *MKL_Complex16, lwork: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr3_ :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex16, v: *MKL_Complex16, ldv: *s64, nh: *s64, t: *MKL_Complex16, ldt: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, work: *MKL_Complex16, lwork: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQR4 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr4 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr4_ :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQR5 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, s: *MKL_Complex16, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, v: *MKL_Complex16, ldv: *s64, u: *MKL_Complex16, ldu: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, nh: *s64, wh: *MKL_Complex16, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr5 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, s: *MKL_Complex16, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, v: *MKL_Complex16, ldv: *s64, u: *MKL_Complex16, ldu: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, nh: *s64, wh: *MKL_Complex16, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr5_ :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, s: *MKL_Complex16, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, v: *MKL_Complex16, ldv: *s64, u: *MKL_Complex16, ldu: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, nh: *s64, wh: *MKL_Complex16, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQSB :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqsb :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqsb_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQSP :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqsp :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqsp_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQSY :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqsy :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqsy_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQZ0 :: (wants: *u8, wantq: *u8, wantz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqz0 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqz0_ :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQZ1 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, nq: *s64, qstart: *s64, q: *MKL_Complex8, ldq: *s64, nz: *s64, zstart: *s64, z: *MKL_Complex8, ldz: *s64) -> void #foreign mkl_intel_ilp64;

zlaqz1 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, nq: *s64, qstart: *s64, q: *MKL_Complex16, ldq: *s64, nz: *s64, zstart: *s64, z: *MKL_Complex16, ldz: *s64) -> void #foreign mkl_intel_ilp64;

zlaqz1_ :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, nq: *s64, qstart: *s64, q: *MKL_Complex16, ldq: *s64, nz: *s64, zstart: *s64, z: *MKL_Complex16, ldz: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQZ2 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, qc: *MKL_Complex16, ldqc: *s64, zc: *MKL_Complex16, ldzc: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqz2 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, qc: *MKL_Complex16, ldqc: *s64, zc: *MKL_Complex16, ldzc: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqz2_ :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, qc: *MKL_Complex16, ldqc: *s64, zc: *MKL_Complex16, ldzc: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQZ3 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, qc: *MKL_Complex16, ldqc: *s64, zc: *MKL_Complex16, ldzc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqz3 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, qc: *MKL_Complex16, ldqc: *s64, zc: *MKL_Complex16, ldzc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqz3_ :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, qc: *MKL_Complex16, ldqc: *s64, zc: *MKL_Complex16, ldzc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAR1V :: (n: *s64, b1: *s64, bn: *s64, lambda: *float64, d: *float64, l: *float64, ld: *float64, lld: *float64, pivmin: *float64, gaptol: *float64, z: *MKL_Complex16, wantnc: *s64, negcnt: *s64, ztz: *float64, mingma: *float64, r: *s64, isuppz: *s64, nrminv: *float64, resid: *float64, rqcorr: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

zlar1v :: (n: *s64, b1: *s64, bn: *s64, lambda: *float64, d: *float64, l: *float64, ld: *float64, lld: *float64, pivmin: *float64, gaptol: *float64, z: *MKL_Complex16, wantnc: *s64, negcnt: *s64, ztz: *float64, mingma: *float64, r: *s64, isuppz: *s64, nrminv: *float64, resid: *float64, rqcorr: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

zlar1v_ :: (n: *s64, b1: *s64, bn: *s64, lambda: *float64, d: *float64, l: *float64, ld: *float64, lld: *float64, pivmin: *float64, gaptol: *float64, z: *MKL_Complex16, wantnc: *s64, negcnt: *s64, ztz: *float64, mingma: *float64, r: *s64, isuppz: *s64, nrminv: *float64, resid: *float64, rqcorr: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

ZLAR2V :: (n: *s64, x: *MKL_Complex16, y: *MKL_Complex16, z: *MKL_Complex16, incx: *s64, c: *float64, s: *MKL_Complex16, incc: *s64) -> void #foreign mkl_intel_ilp64;

zlar2v :: (n: *s64, x: *MKL_Complex16, y: *MKL_Complex16, z: *MKL_Complex16, incx: *s64, c: *float64, s: *MKL_Complex16, incc: *s64) -> void #foreign mkl_intel_ilp64;

zlar2v_ :: (n: *s64, x: *MKL_Complex16, y: *MKL_Complex16, z: *MKL_Complex16, incx: *s64, c: *float64, s: *MKL_Complex16, incc: *s64) -> void #foreign mkl_intel_ilp64;

ZLARCM :: (m: *s64, n: *s64, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64) -> void #foreign mkl_intel_ilp64;

zlarcm :: (m: *s64, n: *s64, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64) -> void #foreign mkl_intel_ilp64;

zlarcm_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64) -> void #foreign mkl_intel_ilp64;

ZLARFB :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

zlarfb :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

zlarfb_ :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

ZLARF :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarf :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarf_ :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARFG :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfg :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfg_ :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARFGP :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfgp :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfgp_ :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARFP :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfp :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfp_ :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARFT :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64) -> void #foreign mkl_intel_ilp64;

zlarft :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64) -> void #foreign mkl_intel_ilp64;

zlarft_ :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64) -> void #foreign mkl_intel_ilp64;

ZLARFX :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfx :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfx_ :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARGV :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

zlargv :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

zlargv_ :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

ZLARNV :: (idist: *s64, iseed: *s64, n: *s64, x: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarnv :: (idist: *s64, iseed: *s64, n: *s64, x: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarnv_ :: (idist: *s64, iseed: *s64, n: *s64, x: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARRV :: (n: *s64, vl: *float64, vu: *float64, d: *float64, l: *float64, pivmin: *float64, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float64, rtol1: *float64, rtol2: *float64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlarrv :: (n: *s64, vl: *float64, vu: *float64, d: *float64, l: *float64, pivmin: *float64, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float64, rtol1: *float64, rtol2: *float64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlarrv_ :: (n: *s64, vl: *float64, vu: *float64, d: *float64, l: *float64, pivmin: *float64, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float64, rtol1: *float64, rtol2: *float64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLARSCL2 :: (m: *s64, n: *s64, d: *float64, x: *MKL_Complex16, ldx: *s64) -> void #foreign mkl_intel_ilp64;

zlarscl2 :: (m: *s64, n: *s64, d: *float64, x: *MKL_Complex16, ldx: *s64) -> void #foreign mkl_intel_ilp64;

zlarscl2_ :: (m: *s64, n: *s64, d: *float64, x: *MKL_Complex16, ldx: *s64) -> void #foreign mkl_intel_ilp64;

ZLARTG :: (f: *MKL_Complex16, g: *MKL_Complex16, cs: *float64, sn: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlartg :: (f: *MKL_Complex16, g: *MKL_Complex16, cs: *float64, sn: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlartg_ :: (f: *MKL_Complex16, g: *MKL_Complex16, cs: *float64, sn: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARTV :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, s: *MKL_Complex16, incc: *s64) -> void #foreign mkl_intel_ilp64;

zlartv :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, s: *MKL_Complex16, incc: *s64) -> void #foreign mkl_intel_ilp64;

zlartv_ :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, s: *MKL_Complex16, incc: *s64) -> void #foreign mkl_intel_ilp64;

ZLARZB :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

zlarzb :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

zlarzb_ :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

ZLARZ :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarz :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarz_ :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARZT :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64) -> void #foreign mkl_intel_ilp64;

zlarzt :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64) -> void #foreign mkl_intel_ilp64;

zlarzt_ :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64) -> void #foreign mkl_intel_ilp64;

ZLASCL :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float64, cto: *float64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlascl :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float64, cto: *float64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlascl_ :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float64, cto: *float64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLASCL2 :: (m: *s64, n: *s64, d: *float64, x: *MKL_Complex16, ldx: *s64) -> void #foreign mkl_intel_ilp64;

zlascl2 :: (m: *s64, n: *s64, d: *float64, x: *MKL_Complex16, ldx: *s64) -> void #foreign mkl_intel_ilp64;

zlascl2_ :: (m: *s64, n: *s64, d: *float64, x: *MKL_Complex16, ldx: *s64) -> void #foreign mkl_intel_ilp64;

ZLASET :: (uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zlaset :: (uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zlaset_ :: (uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZLASR :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float64, s: *float64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zlasr :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float64, s: *float64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zlasr_ :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float64, s: *float64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZLASSQ :: (n: *s64, x: *MKL_Complex16, incx: *s64, scale: *float64, sumsq: *float64) -> void #foreign mkl_intel_ilp64;

zlassq :: (n: *s64, x: *MKL_Complex16, incx: *s64, scale: *float64, sumsq: *float64) -> void #foreign mkl_intel_ilp64;

zlassq_ :: (n: *s64, x: *MKL_Complex16, incx: *s64, scale: *float64, sumsq: *float64) -> void #foreign mkl_intel_ilp64;

ZLASWP :: (n: *s64, a: *MKL_Complex16, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

zlaswp :: (n: *s64, a: *MKL_Complex16, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

zlaswp_ :: (n: *s64, a: *MKL_Complex16, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZLASYF :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlasyf :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlasyf_ :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAT2C :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, sa: *MKL_Complex8, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlat2c :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, sa: *MKL_Complex8, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlat2c_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, sa: *MKL_Complex8, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATBS :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatbs :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatbs_ :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATDF :: (ijob: *s64, n: *s64, z: *MKL_Complex16, ldz: *s64, rhs: *MKL_Complex16, rdsum: *float64, rdscal: *float64, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

zlatdf :: (ijob: *s64, n: *s64, z: *MKL_Complex16, ldz: *s64, rhs: *MKL_Complex16, rdsum: *float64, rdscal: *float64, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

zlatdf_ :: (ijob: *s64, n: *s64, z: *MKL_Complex16, ldz: *s64, rhs: *MKL_Complex16, rdsum: *float64, rdscal: *float64, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

ZLATPS :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *MKL_Complex16, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatps :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *MKL_Complex16, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatps_ :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *MKL_Complex16, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATRD :: (uplo: *u8, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, e: *float64, tau: *MKL_Complex16, w: *MKL_Complex16, ldw: *s64) -> void #foreign mkl_intel_ilp64;

zlatrd :: (uplo: *u8, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, e: *float64, tau: *MKL_Complex16, w: *MKL_Complex16, ldw: *s64) -> void #foreign mkl_intel_ilp64;

zlatrd_ :: (uplo: *u8, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, e: *float64, tau: *MKL_Complex16, w: *MKL_Complex16, ldw: *s64) -> void #foreign mkl_intel_ilp64;

ZLATRS :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatrs :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatrs_ :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATRZ :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlatrz :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlatrz_ :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLATZM :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c1: *MKL_Complex16, c2: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlatzm :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c1: *MKL_Complex16, c2: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlatzm_ :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c1: *MKL_Complex16, c2: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLAUU2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlauu2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlauu2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAUUM :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlauum :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlauum_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBCON :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbcon :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbcon_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBEQU :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbequ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbequ_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBRFS :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbrfs :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbrfs_ :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBSTF :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbstf :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbstf_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBSV :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbsv :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbsv_ :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBSVX :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbsvx :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbsvx_ :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBTF2 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbtf2 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbtf2_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBTRF :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbtrf :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbtrf_ :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBTRS :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbtrs :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbtrs_ :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPFTRF :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zpftrf :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zpftrf_ :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPFTRI :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zpftri :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zpftri_ :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPFTRS :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpftrs :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpftrs_ :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOCON :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpocon :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpocon_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOEQUB :: (n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpoequb :: (n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpoequb_ :: (n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOEQU :: (n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpoequ :: (n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpoequ_ :: (n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPORFS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zporfs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zporfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPORFSX :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zporfsx :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zporfsx_ :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOSV :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zposv :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zposv_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zposvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zposvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOSVXX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zposvxx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zposvxx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOTF2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotf2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotf2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOTRF :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotrf :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotrf_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOTRI :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotri :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotri_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOTRS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotrs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPCON :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zppcon :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zppcon_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPEQU :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zppequ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zppequ_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPRFS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpprfs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpprfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPSV :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zppsv :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zppsv_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zppsvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zppsvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPTRF :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zpptrf :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zpptrf_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPTRI :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zpptri :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zpptri_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPTRS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpptrs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpptrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPSTF2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpstf2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpstf2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPSTRF :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpstrf :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpstrf_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTCON :: (n: *s64, d: *float64, e: *MKL_Complex16, anorm: *float64, rcond: *float64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zptcon :: (n: *s64, d: *float64, e: *MKL_Complex16, anorm: *float64, rcond: *float64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zptcon_ :: (n: *s64, d: *float64, e: *MKL_Complex16, anorm: *float64, rcond: *float64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTEQR :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpteqr :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpteqr_ :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTRFS :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zptrfs :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zptrfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTSV :: (n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zptsv :: (n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zptsv_ :: (n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTSVX :: (fact: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zptsvx :: (fact: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zptsvx_ :: (fact: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTTRF :: (n: *s64, d: *float64, e: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zpttrf :: (n: *s64, d: *float64, e: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;
zpttrf_ :: (n: *s64, d: *float64, e: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTTRS :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpttrs :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpttrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTTS2 :: (iuplo: *s64, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zptts2 :: (iuplo: *s64, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zptts2_ :: (iuplo: *s64, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZROT :: (n: *s64, cx: *MKL_Complex16, incx: *s64, cy: *MKL_Complex16, incy: *s64, c: *float64, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zrot :: (n: *s64, cx: *MKL_Complex16, incx: *s64, cy: *MKL_Complex16, incy: *s64, c: *float64, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zrot_ :: (n: *s64, cx: *MKL_Complex16, incx: *s64, cy: *MKL_Complex16, incy: *s64, c: *float64, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZSPCON :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zspcon :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zspcon_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSPMV :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zspmv :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zspmv_ :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZSPR :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, ap: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zspr :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, ap: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zspr_ :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, ap: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZSPRFS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsprfs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsprfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSPSV :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zspsv :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zspsv_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSPSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zspsvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zspsvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSPTRF :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsptrf :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsptrf_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSPTRI :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsptri :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsptri_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSPTRS :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsptrs :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsptrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSTEDC :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zstedc :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zstedc_ :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSTEGR :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zstegr :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zstegr_ :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSTEIN :: (n: *s64, d: *float64, e: *float64, m: *s64, w: *float64, iblock: *s64, isplit: *s64, z: *MKL_Complex16, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zstein :: (n: *s64, d: *float64, e: *float64, m: *s64, w: *float64, iblock: *s64, isplit: *s64, z: *MKL_Complex16, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zstein_ :: (n: *s64, d: *float64, e: *float64, m: *s64, w: *float64, iblock: *s64, isplit: *s64, z: *MKL_Complex16, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSTEMR :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zstemr :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zstemr_ :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSTEQR :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsteqr :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsteqr_ :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYCON :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsycon :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsycon_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYEQUB :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyequb :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyequb_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYMV :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zsymv :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zsymv_ :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZSYR :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zsyr :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zsyr_ :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZSYRFS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyrfs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyrfs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYRFSX :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyrfsx :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyrfsx_ :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSV :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSVX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysvx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysvx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSVXX :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysvxx :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysvxx_ :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTF2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytf2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytf2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRF :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRI :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRS :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_ :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTBCON :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztbcon :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztbcon_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTBRFS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztbrfs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztbrfs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTBTRS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztbtrs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztbtrs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTFSM :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ztfsm :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ztfsm_ :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZTFTRI :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztftri :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztftri_ :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTFTTP :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex16, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztfttp :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex16, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztfttp_ :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex16, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTFTTR :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztfttr :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztfttr_ :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGEVC :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *MKL_Complex16, lds: *s64, p: *MKL_Complex16, ldp: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgevc :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *MKL_Complex16, lds: *s64, p: *MKL_Complex16, ldp: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgevc_ :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *MKL_Complex16, lds: *s64, p: *MKL_Complex16, ldp: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGEX2 :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, j1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgex2 :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, j1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgex2_ :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, j1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGEXC :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgexc :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgexc_ :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGSEN :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, m: *s64, pl: *float64, pr: *float64, dif: *float64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsen :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, m: *s64, pl: *float64, pr: *float64, dif: *float64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsen_ :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, m: *s64, pl: *float64, pr: *float64, dif: *float64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGSJA :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsja :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsja_ :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGSNA :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, s: *float64, dif: *float64, mm: *s64, m: *s64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsna :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, s: *float64, dif: *float64, mm: *s64, m: *s64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsna_ :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, s: *float64, dif: *float64, mm: *s64, m: *s64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGSY2 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, scale: *float64, rdsum: *float64, rdscal: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsy2 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, scale: *float64, rdsum: *float64, rdscal: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsy2_ :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, scale: *float64, rdsum: *float64, rdscal: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGSYL :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, scale: *float64, dif: *float64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsyl :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, scale: *float64, dif: *float64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsyl_ :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, scale: *float64, dif: *float64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPCON :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpcon :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpcon_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPRFS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztprfs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztprfs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPTRI :: (uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztptri :: (uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztptri_ :: (uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPTRS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztptrs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztptrs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPTTF :: (transr: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, arf: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpttf :: (transr: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, arf: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpttf_ :: (transr: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, arf: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPTTR :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpttr :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpttr_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRCON :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrcon :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrcon_ :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTREVC :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrevc :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrevc_ :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTREXC :: (compq: *u8, n: *s64, t: *MKL_Complex16, ldt: *s64, q: *MKL_Complex16, ldq: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrexc :: (compq: *u8, n: *s64, t: *MKL_Complex16, ldt: *s64, q: *MKL_Complex16, ldq: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrexc_ :: (compq: *u8, n: *s64, t: *MKL_Complex16, ldt: *s64, q: *MKL_Complex16, ldq: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRRFS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrrfs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrrfs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSEN :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, q: *MKL_Complex16, ldq: *s64, w: *MKL_Complex16, m: *s64, s: *float64, sep: *float64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrsen :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, q: *MKL_Complex16, ldq: *s64, w: *MKL_Complex16, m: *s64, s: *float64, sep: *float64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrsen_ :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, q: *MKL_Complex16, ldq: *s64, w: *MKL_Complex16, m: *s64, s: *float64, sep: *float64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSNA :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, s: *float64, sep: *float64, mm: *s64, m: *s64, work: *MKL_Complex16, ldwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrsna :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, s: *float64, sep: *float64, mm: *s64, m: *s64, work: *MKL_Complex16, ldwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrsna_ :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, s: *float64, sep: *float64, mm: *s64, m: *s64, work: *MKL_Complex16, ldwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSYL :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrsyl :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrsyl_ :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRTI2 :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrti2 :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrti2_ :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRTRI :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrtri :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrtri_ :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRTRS :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrtrs :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrtrs_ :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRTTF :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, arf: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrttf :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, arf: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrttf_ :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, arf: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRTTP :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrttp :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrttp_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTZRQF :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztzrqf :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztzrqf_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTZRZF :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztzrzf :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztzrzf_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNG2L :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zung2l :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zung2l_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNG2R :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zung2r :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zung2r_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGBR :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungbr :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungbr_ :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGHR :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunghr :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunghr_ :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGL2 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zungl2 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zungl2_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGLQ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunglq :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunglq_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGQL :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungql :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungql_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGQR :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungqr :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungqr_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGR2 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zungr2 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zungr2_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGRQ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungrq :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungrq_ :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGTR :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungtr :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungtr_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNM2L :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunm2l :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunm2l_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNM2R :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunm2r :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunm2r_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMBR :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmbr :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmbr_ :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMHR :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmhr :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmhr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNML2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunml2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunml2_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMLQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmlq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmlq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMQL :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmql :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmql_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMQR :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmqr :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmqr_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMR2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmr2 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmr2_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMR3 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmr3 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmr3_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMRQ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmrq :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmrq_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMRZ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmrz :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmrz_ :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMTR :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmtr :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmtr_ :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUPGTR :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, tau: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zupgtr :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, tau: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zupgtr_ :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, tau: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUPMTR :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *MKL_Complex16, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zupmtr :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *MKL_Complex16, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zupmtr_ :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *MKL_Complex16, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

/* C-declaration of following routines is added in oneMKL 11.2 */
CGEQRT2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrt2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrt2_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESWAPR :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

cheswapr :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

cheswapr_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

CHETRI2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri2 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRI2X :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri2x :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri2x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLA_GBAMV :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, ab: *MKL_Complex8, ldab: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

cla_gbamv :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, ab: *MKL_Complex8, ldab: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

cla_gbamv_ :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, ab: *MKL_Complex8, ldab: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

CLA_GBRCOND_C :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_gbrcond_c :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_gbrcond_c_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_GBRCOND_X :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_gbrcond_x :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_gbrcond_x_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_GBRFSX_EXTENDED :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_gbrfsx_extended :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_gbrfsx_extended_ :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLA_GBRPVGRW :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64) -> float #foreign mkl_intel_ilp64;

cla_gbrpvgrw :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64) -> float #foreign mkl_intel_ilp64;

cla_gbrpvgrw_ :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64) -> float #foreign mkl_intel_ilp64;

CLA_GEAMV :: (trans: *s64, m: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

cla_geamv :: (trans: *s64, m: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

cla_geamv_ :: (trans: *s64, m: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

CLA_GERCOND_C :: (trans: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_gercond_c :: (trans: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_gercond_c_ :: (trans: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_GERCOND_X :: (trans: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_gercond_x :: (trans: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_gercond_x_ :: (trans: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_GERFSX_EXTENDED :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, errs_n: *float, errs_c: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_gerfsx_extended :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, errs_n: *float, errs_c: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_gerfsx_extended_ :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, errs_n: *float, errs_c: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLA_GERPVGRW :: (n: *s64, ncols: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64) -> float #foreign mkl_intel_ilp64;

cla_gerpvgrw :: (n: *s64, ncols: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64) -> float #foreign mkl_intel_ilp64;

cla_gerpvgrw_ :: (n: *s64, ncols: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64) -> float #foreign mkl_intel_ilp64;

CLA_HEAMV :: (uplo: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

cla_heamv :: (uplo: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

cla_heamv_ :: (uplo: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

CLA_HERCOND_C :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_hercond_c :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_hercond_c_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_HERCOND_X :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_hercond_x :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_hercond_x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_HERFSX_EXTENDED :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_herfsx_extended :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_herfsx_extended_ :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLA_HERPVGRW :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

cla_herpvgrw :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

cla_herpvgrw_ :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLA_LIN_BERR :: (n: *s64, nz: *s64, nrhs: *s64, res: *MKL_Complex8, ayb: *float, berr: *float) -> void #foreign mkl_intel_ilp64;

cla_lin_berr :: (n: *s64, nz: *s64, nrhs: *s64, res: *MKL_Complex8, ayb: *float, berr: *float) -> void #foreign mkl_intel_ilp64;

cla_lin_berr_ :: (n: *s64, nz: *s64, nrhs: *s64, res: *MKL_Complex8, ayb: *float, berr: *float) -> void #foreign mkl_intel_ilp64;

CLA_PORCOND_C :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_porcond_c :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_porcond_c_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_PORCOND_X :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_porcond_x :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_porcond_x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_PORFSX_EXTENDED :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_porfsx_extended :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_porfsx_extended_ :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLA_PORPVGRW :: (uplo: *u8, ncols: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

cla_porpvgrw :: (uplo: *u8, ncols: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

cla_porpvgrw_ :: (uplo: *u8, ncols: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLA_SYAMV :: (uplo: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

cla_syamv :: (uplo: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

cla_syamv_ :: (uplo: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

CLA_SYRCOND_C :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_syrcond_c :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_syrcond_c_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_SYRCOND_X :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_syrcond_x :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_syrcond_x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_SYRFSX_EXTENDED :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_syrfsx_extended :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_syrfsx_extended_ :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLA_SYRPVGRW :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

cla_syrpvgrw :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

cla_syrpvgrw_ :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLA_WWADDW :: (n: *s64, x: *MKL_Complex8, y: *MKL_Complex8, w: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

cla_wwaddw :: (n: *s64, x: *MKL_Complex8, y: *MKL_Complex8, w: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

cla_wwaddw_ :: (n: *s64, x: *MKL_Complex8, y: *MKL_Complex8, w: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CTPRFB :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

ctprfb :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

ctprfb_ :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

DGEQRT2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrt2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrt2_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLA_GBAMV :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, ab: *float64, ldab: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dla_gbamv :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, ab: *float64, ldab: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dla_gbamv_ :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, ab: *float64, ldab: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DLA_GBRCOND :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_gbrcond :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_gbrcond_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

DLA_GBRFSX_EXTENDED :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dla_gbrfsx_extended :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dla_gbrfsx_extended_ :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLA_GBRPVGRW :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_gbrpvgrw :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_gbrpvgrw_ :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64) -> float64 #foreign mkl_intel_ilp64;

DLA_GEAMV :: (trans: *s64, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dla_geamv :: (trans: *s64, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dla_geamv_ :: (trans: *s64, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DLA_GERCOND :: (trans: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_gercond :: (trans: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_gercond_ :: (trans: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

DLA_GERFSX_EXTENDED :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, errs_n: *float64, errs_c: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dla_gerfsx_extended :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, errs_n: *float64, errs_c: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dla_gerfsx_extended_ :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, errs_n: *float64, errs_c: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLA_GERPVGRW :: (n: *s64, ncols: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_gerpvgrw :: (n: *s64, ncols: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_gerpvgrw_ :: (n: *s64, ncols: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64) -> float64 #foreign mkl_intel_ilp64;

DLA_LIN_BERR :: (n: *s64, nz: *s64, nrhs: *s64, res: *float64, ayb: *float64, berr: *float64) -> void #foreign mkl_intel_ilp64;

dla_lin_berr :: (n: *s64, nz: *s64, nrhs: *s64, res: *float64, ayb: *float64, berr: *float64) -> void #foreign mkl_intel_ilp64;

dla_lin_berr_ :: (n: *s64, nz: *s64, nrhs: *s64, res: *float64, ayb: *float64, berr: *float64) -> void #foreign mkl_intel_ilp64;

DLA_PORCOND :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_porcond :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_porcond_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

DLA_PORFSX_EXTENDED :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dla_porfsx_extended :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dla_porfsx_extended_ :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLA_PORPVGRW :: (uplo: *u8, ncols: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dla_porpvgrw :: (uplo: *u8, ncols: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dla_porpvgrw_ :: (uplo: *u8, ncols: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLA_SYAMV :: (uplo: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dla_syamv :: (uplo: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dla_syamv_ :: (uplo: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DLA_SYRCOND :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_syrcond :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_syrcond_ :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

DLA_SYRFSX_EXTENDED :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dla_syrfsx_extended :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dla_syrfsx_extended_ :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLA_SYRPVGRW :: (uplo: *u8, n: *s64, info: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dla_syrpvgrw :: (uplo: *u8, n: *s64, info: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dla_syrpvgrw_ :: (uplo: *u8, n: *s64, info: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLA_WWADDW :: (n: *s64, x: *float64, y: *float64, w: *float64) -> void #foreign mkl_intel_ilp64;

dla_wwaddw :: (n: *s64, x: *float64, y: *float64, w: *float64) -> void #foreign mkl_intel_ilp64;
dla_wwaddw_ :: (n: *s64, x: *float64, y: *float64, w: *float64) -> void #foreign mkl_intel_ilp64;

DTPRFB :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

dtprfb :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

dtprfb_ :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

SGEQRT2 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrt2 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrt2_ :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLA_GBAMV :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, ab: *float, ldab: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sla_gbamv :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, ab: *float, ldab: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sla_gbamv_ :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, ab: *float, ldab: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SLA_GBRCOND :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

sla_gbrcond :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

sla_gbrcond_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

SLA_GBRFSX_EXTENDED :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sla_gbrfsx_extended :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sla_gbrfsx_extended_ :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLA_GBRPVGRW :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64) -> float #foreign mkl_intel_ilp64;

sla_gbrpvgrw :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64) -> float #foreign mkl_intel_ilp64;

sla_gbrpvgrw_ :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64) -> float #foreign mkl_intel_ilp64;

SLA_GEAMV :: (trans: *s64, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sla_geamv :: (trans: *s64, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sla_geamv_ :: (trans: *s64, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SLA_GERCOND :: (trans: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

sla_gercond :: (trans: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

sla_gercond_ :: (trans: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

SLA_GERFSX_EXTENDED :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, errs_n: *float, errs_c: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sla_gerfsx_extended :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, errs_n: *float, errs_c: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sla_gerfsx_extended_ :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, errs_n: *float, errs_c: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLA_GERPVGRW :: (n: *s64, ncols: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64) -> float #foreign mkl_intel_ilp64;

sla_gerpvgrw :: (n: *s64, ncols: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64) -> float #foreign mkl_intel_ilp64;

sla_gerpvgrw_ :: (n: *s64, ncols: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64) -> float #foreign mkl_intel_ilp64;

SLA_LIN_BERR :: (n: *s64, nz: *s64, nrhs: *s64, res: *float, ayb: *float, berr: *float) -> void #foreign mkl_intel_ilp64;

sla_lin_berr :: (n: *s64, nz: *s64, nrhs: *s64, res: *float, ayb: *float, berr: *float) -> void #foreign mkl_intel_ilp64;

sla_lin_berr_ :: (n: *s64, nz: *s64, nrhs: *s64, res: *float, ayb: *float, berr: *float) -> void #foreign mkl_intel_ilp64;

SLA_PORCOND :: (uplo: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

sla_porcond :: (uplo: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

sla_porcond_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

SLA_PORFSX_EXTENDED :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sla_porfsx_extended :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sla_porfsx_extended_ :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLA_PORPVGRW :: (uplo: *u8, ncols: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

sla_porpvgrw :: (uplo: *u8, ncols: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

sla_porpvgrw_ :: (uplo: *u8, ncols: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLA_SYAMV :: (uplo: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sla_syamv :: (uplo: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sla_syamv_ :: (uplo: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SLA_SYRCOND :: (uplo: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

sla_syrcond :: (uplo: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

sla_syrcond_ :: (uplo: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

SLA_SYRFSX_EXTENDED :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sla_syrfsx_extended :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sla_syrfsx_extended_ :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLA_SYRPVGRW :: (uplo: *u8, n: *s64, info: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

sla_syrpvgrw :: (uplo: *u8, n: *s64, info: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

sla_syrpvgrw_ :: (uplo: *u8, n: *s64, info: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLA_WWADDW :: (n: *s64, x: *float, y: *float, w: *float) -> void #foreign mkl_intel_ilp64;

sla_wwaddw :: (n: *s64, x: *float, y: *float, w: *float) -> void #foreign mkl_intel_ilp64;
sla_wwaddw_ :: (n: *s64, x: *float, y: *float, w: *float) -> void #foreign mkl_intel_ilp64;

STPRFB :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

stprfb :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

stprfb_ :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQRT2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrt2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrt2_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESWAPR :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

zheswapr :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

zheswapr_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRI2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri2 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri2_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRI2X :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri2x :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri2x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_GBAMV :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, ab: *MKL_Complex16, ldab: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

zla_gbamv :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, ab: *MKL_Complex16, ldab: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

zla_gbamv_ :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, ab: *MKL_Complex16, ldab: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_GBRCOND_C :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_gbrcond_c :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_gbrcond_c_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_GBRCOND_X :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_gbrcond_x :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_gbrcond_x_ :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_GBRFSX_EXTENDED :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_gbrfsx_extended :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_gbrfsx_extended_ :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_GBRPVGRW :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64) -> float64 #foreign mkl_intel_ilp64;

zla_gbrpvgrw :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64) -> float64 #foreign mkl_intel_ilp64;

zla_gbrpvgrw_ :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64) -> float64 #foreign mkl_intel_ilp64;

ZLA_GEAMV :: (trans: *s64, m: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

zla_geamv :: (trans: *s64, m: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

zla_geamv_ :: (trans: *s64, m: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_GERCOND_C :: (trans: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_gercond_c :: (trans: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_gercond_c_ :: (trans: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_GERCOND_X :: (trans: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_gercond_x :: (trans: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_gercond_x_ :: (trans: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_GERFSX_EXTENDED :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, errs_n: *float64, errs_c: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_gerfsx_extended :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, errs_n: *float64, errs_c: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_gerfsx_extended_ :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, errs_n: *float64, errs_c: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_GERPVGRW :: (n: *s64, ncols: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64) -> float64 #foreign mkl_intel_ilp64;

zla_gerpvgrw :: (n: *s64, ncols: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64) -> float64 #foreign mkl_intel_ilp64;

zla_gerpvgrw_ :: (n: *s64, ncols: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64) -> float64 #foreign mkl_intel_ilp64;

ZLA_HEAMV :: (uplo: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

zla_heamv :: (uplo: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

zla_heamv_ :: (uplo: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_HERCOND_C :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_hercond_c :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_hercond_c_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_HERCOND_X :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_hercond_x :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_hercond_x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_HERFSX_EXTENDED :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_herfsx_extended :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_herfsx_extended_ :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_HERPVGRW :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_herpvgrw :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_herpvgrw_ :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_LIN_BERR :: (n: *s64, nz: *s64, nrhs: *s64, res: *MKL_Complex16, ayb: *float64, berr: *float64) -> void #foreign mkl_intel_ilp64;

zla_lin_berr :: (n: *s64, nz: *s64, nrhs: *s64, res: *MKL_Complex16, ayb: *float64, berr: *float64) -> void #foreign mkl_intel_ilp64;

zla_lin_berr_ :: (n: *s64, nz: *s64, nrhs: *s64, res: *MKL_Complex16, ayb: *float64, berr: *float64) -> void #foreign mkl_intel_ilp64;

ZLA_PORCOND_C :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_porcond_c :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_porcond_c_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_PORCOND_X :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_porcond_x :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_porcond_x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_PORFSX_EXTENDED :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_porfsx_extended :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_porfsx_extended_ :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_PORPVGRW :: (uplo: *u8, ncols: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_porpvgrw :: (uplo: *u8, ncols: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_porpvgrw_ :: (uplo: *u8, ncols: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_SYAMV :: (uplo: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

zla_syamv :: (uplo: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

zla_syamv_ :: (uplo: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_SYRCOND_C :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_syrcond_c :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_syrcond_c_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_SYRCOND_X :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_syrcond_x :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_syrcond_x_ :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_SYRFSX_EXTENDED :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_syrfsx_extended :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_syrfsx_extended_ :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_SYRPVGRW :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_syrpvgrw :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_syrpvgrw_ :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_WWADDW :: (n: *s64, x: *MKL_Complex16, y: *MKL_Complex16, w: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zla_wwaddw :: (n: *s64, x: *MKL_Complex16, y: *MKL_Complex16, w: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zla_wwaddw_ :: (n: *s64, x: *MKL_Complex16, y: *MKL_Complex16, w: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZTPRFB :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

ztprfb :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

ztprfb_ :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

/* Tridiagonalization using Successive Bandwidth Reduction */
CHERDB :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cherdb :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cherdb_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYRDB :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyrdb :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyrdb_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYRDB :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyrdb :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyrdb_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHERDB :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zherdb :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zherdb_ :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/* Tridiagonal diagonally-dominant linear equations solver
using the BABE algorithm (Burning At Both Ends) NOTHROW; */
CDTSVB :: (n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cdtsvb :: (n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cdtsvb_ :: (n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CDTTRFB :: (n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cdttrfb :: (n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cdttrfb_ :: (n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CDTTRSB :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cdttrsb :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cdttrsb_ :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DDTSVB :: (n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ddtsvb :: (n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ddtsvb_ :: (n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DDTTRFB :: (n: *s64, dl: *float64, d: *float64, du: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ddttrfb :: (n: *s64, dl: *float64, d: *float64, du: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ddttrfb_ :: (n: *s64, dl: *float64, d: *float64, du: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DDTTRSB :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ddttrsb :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ddttrsb_ :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SDTSVB :: (n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sdtsvb :: (n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sdtsvb_ :: (n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SDTTRFB :: (n: *s64, dl: *float, d: *float, du: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sdttrfb :: (n: *s64, dl: *float, d: *float, du: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sdttrfb_ :: (n: *s64, dl: *float, d: *float, du: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SDTTRSB :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sdttrsb :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sdttrsb_ :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZDTSVB :: (n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zdtsvb :: (n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zdtsvb_ :: (n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZDTTRFB :: (n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zdttrfb :: (n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zdttrfb_ :: (n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZDTTRSB :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zdttrsb :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zdttrsb_ :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/* Converters for standard packed format */
MKL_CTPPACK :: (uplo: *u8, trans: *u8, n: *s64, ap: *MKL_Complex8, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_ctppack :: (uplo: *u8, trans: *u8, n: *s64, ap: *MKL_Complex8, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_ctppack_ :: (uplo: *u8, trans: *u8, n: *s64, ap: *MKL_Complex8, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_DTPPACK :: (uplo: *u8, trans: *u8, n: *s64, ap: *float64, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dtppack :: (uplo: *u8, trans: *u8, n: *s64, ap: *float64, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dtppack_ :: (uplo: *u8, trans: *u8, n: *s64, ap: *float64, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_STPPACK :: (uplo: *u8, trans: *u8, n: *s64, ap: *float, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_stppack :: (uplo: *u8, trans: *u8, n: *s64, ap: *float, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_stppack_ :: (uplo: *u8, trans: *u8, n: *s64, ap: *float, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_ZTPPACK :: (uplo: *u8, trans: *u8, n: *s64, ap: *MKL_Complex16, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_ztppack :: (uplo: *u8, trans: *u8, n: *s64, ap: *MKL_Complex16, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_ztppack_ :: (uplo: *u8, trans: *u8, n: *s64, ap: *MKL_Complex16, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_CTPUNPACK :: (uplo: *u8, trans: *u8, n: *s64, ap: *MKL_Complex8, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_ctpunpack :: (uplo: *u8, trans: *u8, n: *s64, ap: *MKL_Complex8, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_ctpunpack_ :: (uplo: *u8, trans: *u8, n: *s64, ap: *MKL_Complex8, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_DTPUNPACK :: (uplo: *u8, trans: *u8, n: *s64, ap: *float64, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dtpunpack :: (uplo: *u8, trans: *u8, n: *s64, ap: *float64, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_dtpunpack_ :: (uplo: *u8, trans: *u8, n: *s64, ap: *float64, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_STPUNPACK :: (uplo: *u8, trans: *u8, n: *s64, ap: *float, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_stpunpack :: (uplo: *u8, trans: *u8, n: *s64, ap: *float, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_stpunpack_ :: (uplo: *u8, trans: *u8, n: *s64, ap: *float, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

MKL_ZTPUNPACK :: (uplo: *u8, trans: *u8, n: *s64, ap: *MKL_Complex16, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_ztpunpack :: (uplo: *u8, trans: *u8, n: *s64, ap: *MKL_Complex16, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_ztpunpack_ :: (uplo: *u8, trans: *u8, n: *s64, ap: *MKL_Complex16, i: *s64, j: *s64, rows: *s64, cols: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/* LAPACK MATGEN routines */
DLATM1 :: (mode: *s64, cond: *float64, irsign: *s64, idist: *s64, iseed: *s64, d: *float64, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatm1 :: (mode: *s64, cond: *float64, irsign: *s64, idist: *s64, iseed: *s64, d: *float64, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatm1_ :: (mode: *s64, cond: *float64, irsign: *s64, idist: *s64, iseed: *s64, d: *float64, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATM1 :: (mode: *s64, cond: *float, irsign: *s64, idist: *s64, iseed: *s64, d: *float, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slatm1 :: (mode: *s64, cond: *float, irsign: *s64, idist: *s64, iseed: *s64, d: *float, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slatm1_ :: (mode: *s64, cond: *float, irsign: *s64, idist: *s64, iseed: *s64, d: *float, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATM1 :: (mode: *s64, cond: *float, irsign: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clatm1 :: (mode: *s64, cond: *float, irsign: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clatm1_ :: (mode: *s64, cond: *float, irsign: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATM1 :: (mode: *s64, cond: *float64, irsign: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatm1 :: (mode: *s64, cond: *float64, irsign: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatm1_ :: (mode: *s64, cond: *float64, irsign: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATM2 :: (m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float64, igrade: *s64, dl: *float64, dr: *float64, ipvtng: *s64, iwork: *s64, sparse: *float64) -> float64 #foreign mkl_intel_ilp64;

dlatm2 :: (m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float64, igrade: *s64, dl: *float64, dr: *float64, ipvtng: *s64, iwork: *s64, sparse: *float64) -> float64 #foreign mkl_intel_ilp64;

dlatm2_ :: (m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float64, igrade: *s64, dl: *float64, dr: *float64, ipvtng: *s64, iwork: *s64, sparse: *float64) -> float64 #foreign mkl_intel_ilp64;

SLATM2 :: (m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float, igrade: *s64, dl: *float, dr: *float, ipvtng: *s64, iwork: *s64, sparse: *float) -> float #foreign mkl_intel_ilp64;

slatm2 :: (m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float, igrade: *s64, dl: *float, dr: *float, ipvtng: *s64, iwork: *s64, sparse: *float) -> float #foreign mkl_intel_ilp64;

slatm2_ :: (m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float, igrade: *s64, dl: *float, dr: *float, ipvtng: *s64, iwork: *s64, sparse: *float) -> float #foreign mkl_intel_ilp64;

CLATM2 :: (retval: *MKL_Complex8, m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, igrade: *s64, dl: *MKL_Complex8, dr: *MKL_Complex8, ipvtng: *s64, iwork: *s64, sparse: *float) -> void #foreign mkl_intel_ilp64;

clatm2 :: (retval: *MKL_Complex8, m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, igrade: *s64, dl: *MKL_Complex8, dr: *MKL_Complex8, ipvtng: *s64, iwork: *s64, sparse: *float) -> void #foreign mkl_intel_ilp64;

clatm2_ :: (retval: *MKL_Complex8, m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, igrade: *s64, dl: *MKL_Complex8, dr: *MKL_Complex8, ipvtng: *s64, iwork: *s64, sparse: *float) -> void #foreign mkl_intel_ilp64;

ZLATM2 :: (retval: *MKL_Complex16, m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, igrade: *s64, dl: *MKL_Complex16, dr: *MKL_Complex16, ipvtng: *s64, iwork: *s64, sparse: *float64) -> void #foreign mkl_intel_ilp64;

zlatm2 :: (retval: *MKL_Complex16, m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, igrade: *s64, dl: *MKL_Complex16, dr: *MKL_Complex16, ipvtng: *s64, iwork: *s64, sparse: *float64) -> void #foreign mkl_intel_ilp64;

zlatm2_ :: (retval: *MKL_Complex16, m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, igrade: *s64, dl: *MKL_Complex16, dr: *MKL_Complex16, ipvtng: *s64, iwork: *s64, sparse: *float64) -> void #foreign mkl_intel_ilp64;

DLATM3 :: (m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float64, igrade: *s64, dl: *float64, dr: *float64, ipvtng: *s64, iwork: *s64, sparse: *float64) -> float64 #foreign mkl_intel_ilp64;

dlatm3 :: (m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float64, igrade: *s64, dl: *float64, dr: *float64, ipvtng: *s64, iwork: *s64, sparse: *float64) -> float64 #foreign mkl_intel_ilp64;

dlatm3_ :: (m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float64, igrade: *s64, dl: *float64, dr: *float64, ipvtng: *s64, iwork: *s64, sparse: *float64) -> float64 #foreign mkl_intel_ilp64;

SLATM3 :: (m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float, igrade: *s64, dl: *float, dr: *float, ipvtng: *s64, iwork: *s64, sparse: *float) -> float #foreign mkl_intel_ilp64;

slatm3 :: (m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float, igrade: *s64, dl: *float, dr: *float, ipvtng: *s64, iwork: *s64, sparse: *float) -> float #foreign mkl_intel_ilp64;

slatm3_ :: (m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float, igrade: *s64, dl: *float, dr: *float, ipvtng: *s64, iwork: *s64, sparse: *float) -> float #foreign mkl_intel_ilp64;

CLATM3 :: (retval: *MKL_Complex8, m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, igrade: *s64, dl: *MKL_Complex8, dr: *MKL_Complex8, ipvtng: *s64, iwork: *s64, sparse: *float) -> void #foreign mkl_intel_ilp64;

clatm3 :: (retval: *MKL_Complex8, m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, igrade: *s64, dl: *MKL_Complex8, dr: *MKL_Complex8, ipvtng: *s64, iwork: *s64, sparse: *float) -> void #foreign mkl_intel_ilp64;

clatm3_ :: (retval: *MKL_Complex8, m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, igrade: *s64, dl: *MKL_Complex8, dr: *MKL_Complex8, ipvtng: *s64, iwork: *s64, sparse: *float) -> void #foreign mkl_intel_ilp64;

ZLATM3 :: (retval: *MKL_Complex16, m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, igrade: *s64, dl: *MKL_Complex16, dr: *MKL_Complex16, ipvtng: *s64, iwork: *s64, sparse: *float64) -> void #foreign mkl_intel_ilp64;

zlatm3 :: (retval: *MKL_Complex16, m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, igrade: *s64, dl: *MKL_Complex16, dr: *MKL_Complex16, ipvtng: *s64, iwork: *s64, sparse: *float64) -> void #foreign mkl_intel_ilp64;

zlatm3_ :: (retval: *MKL_Complex16, m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, igrade: *s64, dl: *MKL_Complex16, dr: *MKL_Complex16, ipvtng: *s64, iwork: *s64, sparse: *float64) -> void #foreign mkl_intel_ilp64;

DLATM5 :: (prtype: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, r: *float64, ldr: *s64, l: *float64, ldl: *s64, alpha: *float64, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

dlatm5 :: (prtype: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, r: *float64, ldr: *s64, l: *float64, ldl: *s64, alpha: *float64, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

dlatm5_ :: (prtype: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, r: *float64, ldr: *s64, l: *float64, ldl: *s64, alpha: *float64, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

SLATM5 :: (prtype: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, r: *float, ldr: *s64, l: *float, ldl: *s64, alpha: *float, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

slatm5 :: (prtype: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, r: *float, ldr: *s64, l: *float, ldl: *s64, alpha: *float, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

slatm5_ :: (prtype: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, r: *float, ldr: *s64, l: *float, ldl: *s64, alpha: *float, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

CLATM5 :: (prtype: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, r: *MKL_Complex8, ldr: *s64, l: *MKL_Complex8, ldl: *s64, alpha: *float, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

clatm5 :: (prtype: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, r: *MKL_Complex8, ldr: *s64, l: *MKL_Complex8, ldl: *s64, alpha: *float, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

clatm5_ :: (prtype: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, r: *MKL_Complex8, ldr: *s64, l: *MKL_Complex8, ldl: *s64, alpha: *float, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

ZLATM5 :: (prtype: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, r: *MKL_Complex16, ldr: *s64, l: *MKL_Complex16, ldl: *s64, alpha: *float64, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

zlatm5 :: (prtype: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, r: *MKL_Complex16, ldr: *s64, l: *MKL_Complex16, ldl: *s64, alpha: *float64, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

zlatm5_ :: (prtype: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, r: *MKL_Complex16, ldr: *s64, l: *MKL_Complex16, ldl: *s64, alpha: *float64, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

DLATM6 :: (type: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, x: *float64, ldx: *s64, y: *float64, ldy: *s64, alpha: *float64, beta: *float64, wx: *float64, wy: *float64, s: *float64, dif: *float64) -> void #foreign mkl_intel_ilp64;

dlatm6 :: (type: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, x: *float64, ldx: *s64, y: *float64, ldy: *s64, alpha: *float64, beta: *float64, wx: *float64, wy: *float64, s: *float64, dif: *float64) -> void #foreign mkl_intel_ilp64;

dlatm6_ :: (type: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, x: *float64, ldx: *s64, y: *float64, ldy: *s64, alpha: *float64, beta: *float64, wx: *float64, wy: *float64, s: *float64, dif: *float64) -> void #foreign mkl_intel_ilp64;

SLATM6 :: (type: *s64, n: *s64, a: *float, lda: *s64, b: *float, x: *float, ldx: *s64, y: *float, ldy: *s64, alpha: *float, beta: *float, wx: *float, wy: *float, s: *float, dif: *float) -> void #foreign mkl_intel_ilp64;

slatm6 :: (type: *s64, n: *s64, a: *float, lda: *s64, b: *float, x: *float, ldx: *s64, y: *float, ldy: *s64, alpha: *float, beta: *float, wx: *float, wy: *float, s: *float, dif: *float) -> void #foreign mkl_intel_ilp64;

slatm6_ :: (type: *s64, n: *s64, a: *float, lda: *s64, b: *float, x: *float, ldx: *s64, y: *float, ldy: *s64, alpha: *float, beta: *float, wx: *float, wy: *float, s: *float, dif: *float) -> void #foreign mkl_intel_ilp64;

CLATM6 :: (type: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, y: *MKL_Complex8, ldy: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, wx: *MKL_Complex8, wy: *MKL_Complex8, s: *float, dif: *float) -> void #foreign mkl_intel_ilp64;

clatm6 :: (type: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, y: *MKL_Complex8, ldy: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, wx: *MKL_Complex8, wy: *MKL_Complex8, s: *float, dif: *float) -> void #foreign mkl_intel_ilp64;

clatm6_ :: (type: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, y: *MKL_Complex8, ldy: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, wx: *MKL_Complex8, wy: *MKL_Complex8, s: *float, dif: *float) -> void #foreign mkl_intel_ilp64;

ZLATM6 :: (type: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, y: *MKL_Complex16, ldy: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, wx: *MKL_Complex16, wy: *MKL_Complex16, s: *float64, dif: *float64) -> void #foreign mkl_intel_ilp64;

zlatm6 :: (type: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, y: *MKL_Complex16, ldy: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, wx: *MKL_Complex16, wy: *MKL_Complex16, s: *float64, dif: *float64) -> void #foreign mkl_intel_ilp64;

zlatm6_ :: (type: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, y: *MKL_Complex16, ldy: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, wx: *MKL_Complex16, wy: *MKL_Complex16, s: *float64, dif: *float64) -> void #foreign mkl_intel_ilp64;

DLATME :: (n: *s64, dist: *u8, iseed: *s64, d: *float64, mode: *s64, cond: *float64, dmax: *float64, ei: *u8, rsign: *u8, upper: *u8, sim: *u8, ds: *float64, modes: *s64, conds: *float64, kl: *s64, ku: *s64, anorm: *float64, a: *float64, lda: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatme :: (n: *s64, dist: *u8, iseed: *s64, d: *float64, mode: *s64, cond: *float64, dmax: *float64, ei: *u8, rsign: *u8, upper: *u8, sim: *u8, ds: *float64, modes: *s64, conds: *float64, kl: *s64, ku: *s64, anorm: *float64, a: *float64, lda: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatme_ :: (n: *s64, dist: *u8, iseed: *s64, d: *float64, mode: *s64, cond: *float64, dmax: *float64, ei: *u8, rsign: *u8, upper: *u8, sim: *u8, ds: *float64, modes: *s64, conds: *float64, kl: *s64, ku: *s64, anorm: *float64, a: *float64, lda: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATME :: (n: *s64, dist: *u8, iseed: *s64, d: *float, mode: *s64, cond: *float, dmax: *float, ei: *u8, rsign: *u8, upper: *u8, sim: *u8, ds: *float, modes: *s64, conds: *float, kl: *s64, ku: *s64, anorm: *float, a: *float, lda: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatme :: (n: *s64, dist: *u8, iseed: *s64, d: *float, mode: *s64, cond: *float, dmax: *float, ei: *u8, rsign: *u8, upper: *u8, sim: *u8, ds: *float, modes: *s64, conds: *float, kl: *s64, ku: *s64, anorm: *float, a: *float, lda: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatme_ :: (n: *s64, dist: *u8, iseed: *s64, d: *float, mode: *s64, cond: *float, dmax: *float, ei: *u8, rsign: *u8, upper: *u8, sim: *u8, ds: *float, modes: *s64, conds: *float, kl: *s64, ku: *s64, anorm: *float, a: *float, lda: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATME :: (n: *s64, dist: *u8, iseed: *s64, d: *MKL_Complex8, mode: *s64, cond: *float, dmax: *MKL_Complex8, rsign: *u8, upper: *u8, sim: *u8, ds: *float, modes: *s64, conds: *float, kl: *s64, ku: *s64, anorm: *float, a: *MKL_Complex8, lda: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clatme :: (n: *s64, dist: *u8, iseed: *s64, d: *MKL_Complex8, mode: *s64, cond: *float, dmax: *MKL_Complex8, rsign: *u8, upper: *u8, sim: *u8, ds: *float, modes: *s64, conds: *float, kl: *s64, ku: *s64, anorm: *float, a: *MKL_Complex8, lda: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clatme_ :: (n: *s64, dist: *u8, iseed: *s64, d: *MKL_Complex8, mode: *s64, cond: *float, dmax: *MKL_Complex8, rsign: *u8, upper: *u8, sim: *u8, ds: *float, modes: *s64, conds: *float, kl: *s64, ku: *s64, anorm: *float, a: *MKL_Complex8, lda: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATME :: (n: *s64, dist: *u8, iseed: *s64, d: *MKL_Complex16, mode: *s64, cond: *float64, dmax: *MKL_Complex16, rsign: *u8, upper: *u8, sim: *u8, ds: *float64, modes: *s64, conds: *float64, kl: *s64, ku: *s64, anorm: *float64, a: *MKL_Complex16, lda: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatme :: (n: *s64, dist: *u8, iseed: *s64, d: *MKL_Complex16, mode: *s64, cond: *float64, dmax: *MKL_Complex16, rsign: *u8, upper: *u8, sim: *u8, ds: *float64, modes: *s64, conds: *float64, kl: *s64, ku: *s64, anorm: *float64, a: *MKL_Complex16, lda: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatme_ :: (n: *s64, dist: *u8, iseed: *s64, d: *MKL_Complex16, mode: *s64, cond: *float64, dmax: *MKL_Complex16, rsign: *u8, upper: *u8, sim: *u8, ds: *float64, modes: *s64, conds: *float64, kl: *s64, ku: *s64, anorm: *float64, a: *MKL_Complex16, lda: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATMR :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, rsign: *u8, grade: *u8, dl: *float64, model: *s64, condl: *float64, dr: *float64, moder: *s64, condr: *float64, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float64, anorm: *float64, pack: *u8, a: *float64, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatmr :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, rsign: *u8, grade: *u8, dl: *float64, model: *s64, condl: *float64, dr: *float64, moder: *s64, condr: *float64, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float64, anorm: *float64, pack: *u8, a: *float64, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatmr_ :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, rsign: *u8, grade: *u8, dl: *float64, model: *s64, condl: *float64, dr: *float64, moder: *s64, condr: *float64, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float64, anorm: *float64, pack: *u8, a: *float64, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATMR :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, rsign: *u8, grade: *u8, dl: *float, model: *s64, condl: *float, dr: *float, moder: *s64, condr: *float, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float, anorm: *float, pack: *u8, a: *float, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slatmr :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, rsign: *u8, grade: *u8, dl: *float, model: *s64, condl: *float, dr: *float, moder: *s64, condr: *float, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float, anorm: *float, pack: *u8, a: *float, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slatmr_ :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, rsign: *u8, grade: *u8, dl: *float, model: *s64, condl: *float, dr: *float, moder: *s64, condr: *float, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float, anorm: *float, pack: *u8, a: *float, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATMR :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *MKL_Complex8, mode: *s64, cond: *float, dmax: *MKL_Complex8, rsign: *u8, grade: *u8, dl: *MKL_Complex8, model: *s64, condl: *float, dr: *MKL_Complex8, moder: *s64, condr: *float, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float, anorm: *float, pack: *u8, a: *MKL_Complex8, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clatmr :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *MKL_Complex8, mode: *s64, cond: *float, dmax: *MKL_Complex8, rsign: *u8, grade: *u8, dl: *MKL_Complex8, model: *s64, condl: *float, dr: *MKL_Complex8, moder: *s64, condr: *float, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float, anorm: *float, pack: *u8, a: *MKL_Complex8, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clatmr_ :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *MKL_Complex8, mode: *s64, cond: *float, dmax: *MKL_Complex8, rsign: *u8, grade: *u8, dl: *MKL_Complex8, model: *s64, condl: *float, dr: *MKL_Complex8, moder: *s64, condr: *float, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float, anorm: *float, pack: *u8, a: *MKL_Complex8, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATMR :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *MKL_Complex16, mode: *s64, cond: *float64, dmax: *MKL_Complex16, rsign: *u8, grade: *u8, dl: *MKL_Complex16, model: *s64, condl: *float64, dr: *MKL_Complex16, moder: *s64, condr: *float64, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float64, anorm: *float64, pack: *u8, a: *MKL_Complex16, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatmr :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *MKL_Complex16, mode: *s64, cond: *float64, dmax: *MKL_Complex16, rsign: *u8, grade: *u8, dl: *MKL_Complex16, model: *s64, condl: *float64, dr: *MKL_Complex16, moder: *s64, condr: *float64, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float64, anorm: *float64, pack: *u8, a: *MKL_Complex16, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatmr_ :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *MKL_Complex16, mode: *s64, cond: *float64, dmax: *MKL_Complex16, rsign: *u8, grade: *u8, dl: *MKL_Complex16, model: *s64, condl: *float64, dr: *MKL_Complex16, moder: *s64, condr: *float64, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float64, anorm: *float64, pack: *u8, a: *MKL_Complex16, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATMS :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, kl: *s64, ku: *s64, pack: *u8, a: *float64, lda: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatms :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, kl: *s64, ku: *s64, pack: *u8, a: *float64, lda: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatms_ :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, kl: *s64, ku: *s64, pack: *u8, a: *float64, lda: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATMS :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, kl: *s64, ku: *s64, pack: *u8, a: *float, lda: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatms :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, kl: *s64, ku: *s64, pack: *u8, a: *float, lda: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatms_ :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, kl: *s64, ku: *s64, pack: *u8, a: *float, lda: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATMS :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, kl: *s64, ku: *s64, pack: *u8, a: *MKL_Complex8, lda: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clatms :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, kl: *s64, ku: *s64, pack: *u8, a: *MKL_Complex8, lda: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clatms_ :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, kl: *s64, ku: *s64, pack: *u8, a: *MKL_Complex8, lda: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATMS :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, kl: *s64, ku: *s64, pack: *u8, a: *MKL_Complex16, lda: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatms :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, kl: *s64, ku: *s64, pack: *u8, a: *MKL_Complex16, lda: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatms_ :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, kl: *s64, ku: *s64, pack: *u8, a: *MKL_Complex16, lda: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAKF2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, d: *float64, e: *float64, z: *float64, ldz: *s64) -> void #foreign mkl_intel_ilp64;

dlakf2 :: (m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, d: *float64, e: *float64, z: *float64, ldz: *s64) -> void #foreign mkl_intel_ilp64;

dlakf2_ :: (m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, d: *float64, e: *float64, z: *float64, ldz: *s64) -> void #foreign mkl_intel_ilp64;

SLAKF2 :: (m: *s64, n: *s64, a: *float, lda: *s64, b: *float, d: *float, e: *float, z: *float, ldz: *s64) -> void #foreign mkl_intel_ilp64;

slakf2 :: (m: *s64, n: *s64, a: *float, lda: *s64, b: *float, d: *float, e: *float, z: *float, ldz: *s64) -> void #foreign mkl_intel_ilp64;

slakf2_ :: (m: *s64, n: *s64, a: *float, lda: *s64, b: *float, d: *float, e: *float, z: *float, ldz: *s64) -> void #foreign mkl_intel_ilp64;

CLAKF2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, d: *MKL_Complex8, e: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64) -> void #foreign mkl_intel_ilp64;

clakf2 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, d: *MKL_Complex8, e: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64) -> void #foreign mkl_intel_ilp64;

clakf2_ :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, d: *MKL_Complex8, e: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64) -> void #foreign mkl_intel_ilp64;

ZLAKF2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, d: *MKL_Complex16, e: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64) -> void #foreign mkl_intel_ilp64;

zlakf2 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, d: *MKL_Complex16, e: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64) -> void #foreign mkl_intel_ilp64;

zlakf2_ :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, d: *MKL_Complex16, e: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64) -> void #foreign mkl_intel_ilp64;

DLARGE :: (n: *s64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarge :: (n: *s64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarge_ :: (n: *s64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARGE :: (n: *s64, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slarge :: (n: *s64, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slarge_ :: (n: *s64, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLARGE :: (n: *s64, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clarge :: (n: *s64, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clarge_ :: (n: *s64, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLARGE :: (n: *s64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlarge :: (n: *s64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlarge_ :: (n: *s64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARND :: (idist: *s64, iseed: *s64) -> float64 #foreign mkl_intel_ilp64;

dlarnd :: (idist: *s64, iseed: *s64) -> float64 #foreign mkl_intel_ilp64;
dlarnd_ :: (idist: *s64, iseed: *s64) -> float64 #foreign mkl_intel_ilp64;

SLARND :: (idist: *s64, iseed: *s64) -> float #foreign mkl_intel_ilp64;

slarnd :: (idist: *s64, iseed: *s64) -> float #foreign mkl_intel_ilp64;
slarnd_ :: (idist: *s64, iseed: *s64) -> float #foreign mkl_intel_ilp64;

CLARND :: (retval: *MKL_Complex8, idist: *s64, iseed: *s64) -> void #foreign mkl_intel_ilp64;

clarnd :: (retval: *MKL_Complex8, idist: *s64, iseed: *s64) -> void #foreign mkl_intel_ilp64;
clarnd_ :: (retval: *MKL_Complex8, idist: *s64, iseed: *s64) -> void #foreign mkl_intel_ilp64;

ZLARND :: (retval: *MKL_Complex16, idist: *s64, iseed: *s64) -> void #foreign mkl_intel_ilp64;

zlarnd :: (retval: *MKL_Complex16, idist: *s64, iseed: *s64) -> void #foreign mkl_intel_ilp64;
zlarnd_ :: (retval: *MKL_Complex16, idist: *s64, iseed: *s64) -> void #foreign mkl_intel_ilp64;

DLAROR :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, iseed: *s64, x: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaror :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, iseed: *s64, x: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaror_ :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, iseed: *s64, x: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAROR :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *float, lda: *s64, iseed: *s64, x: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaror :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *float, lda: *s64, iseed: *s64, x: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaror_ :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *float, lda: *s64, iseed: *s64, x: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAROR :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, iseed: *s64, x: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

claror :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, iseed: *s64, x: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

claror_ :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, iseed: *s64, x: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAROR :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, iseed: *s64, x: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaror :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, iseed: *s64, x: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaror_ :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, iseed: *s64, x: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAROT :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *float64, s: *float64, a: *float64, lda: *s64, xleft: *float64, xright: *float64) -> void #foreign mkl_intel_ilp64;

dlarot :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *float64, s: *float64, a: *float64, lda: *s64, xleft: *float64, xright: *float64) -> void #foreign mkl_intel_ilp64;

dlarot_ :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *float64, s: *float64, a: *float64, lda: *s64, xleft: *float64, xright: *float64) -> void #foreign mkl_intel_ilp64;

SLAROT :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *float, s: *float, a: *float, lda: *s64, xleft: *float, xright: *float) -> void #foreign mkl_intel_ilp64;

slarot :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *float, s: *float, a: *float, lda: *s64, xleft: *float, xright: *float) -> void #foreign mkl_intel_ilp64;

slarot_ :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *float, s: *float, a: *float, lda: *s64, xleft: *float, xright: *float) -> void #foreign mkl_intel_ilp64;

CLAROT :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *MKL_Complex8, s: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, xleft: *MKL_Complex8, xright: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarot :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *MKL_Complex8, s: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, xleft: *MKL_Complex8, xright: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarot_ :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *MKL_Complex8, s: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, xleft: *MKL_Complex8, xright: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

ZLAROT :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *MKL_Complex16, s: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, xleft: *MKL_Complex16, xright: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarot :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *MKL_Complex16, s: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, xleft: *MKL_Complex16, xright: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarot_ :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *MKL_Complex16, s: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, xleft: *MKL_Complex16, xright: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

DLARAN :: (iseed: *s64) -> float64 #foreign mkl_intel_ilp64;

dlaran :: (iseed: *s64) -> float64 #foreign mkl_intel_ilp64;
dlaran_ :: (iseed: *s64) -> float64 #foreign mkl_intel_ilp64;

SLARAN :: (iseed: *s64) -> float #foreign mkl_intel_ilp64;

slaran :: (iseed: *s64) -> float #foreign mkl_intel_ilp64;
slaran_ :: (iseed: *s64) -> float #foreign mkl_intel_ilp64;

DLAGGE :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlagge :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlagge_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAGGE :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slagge :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slagge_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAGGE :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clagge :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clagge_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAGGE :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlagge :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlagge_ :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAGSY :: (n: *s64, k: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clagsy :: (n: *s64, k: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clagsy_ :: (n: *s64, k: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAGSY :: (n: *s64, k: *s64, d: *float64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlagsy :: (n: *s64, k: *s64, d: *float64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlagsy_ :: (n: *s64, k: *s64, d: *float64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAGSY :: (n: *s64, k: *s64, d: *float, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slagsy :: (n: *s64, k: *s64, d: *float, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slagsy_ :: (n: *s64, k: *s64, d: *float, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAGSY :: (n: *s64, k: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlagsy :: (n: *s64, k: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlagsy_ :: (n: *s64, k: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAGHE :: (n: *s64, k: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

claghe :: (n: *s64, k: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

claghe_ :: (n: *s64, k: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAGHE :: (n: *s64, k: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaghe :: (n: *s64, k: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaghe_ :: (n: *s64, k: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

/* oneMKL extensions */
MKL_CSPFFRT2 :: (ap: *MKL_Complex8, n: *s64, ncolm: *s64, work: *MKL_Complex8, work2: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

mkl_cspffrt2 :: (ap: *MKL_Complex8, n: *s64, ncolm: *s64, work: *MKL_Complex8, work2: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

mkl_cspffrt2_ :: (ap: *MKL_Complex8, n: *s64, ncolm: *s64, work: *MKL_Complex8, work2: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

MKL_CSPFFRTX :: (ap: *MKL_Complex8, n: *s64, ncolm: *s64, work: *MKL_Complex8, work2: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

mkl_cspffrtx :: (ap: *MKL_Complex8, n: *s64, ncolm: *s64, work: *MKL_Complex8, work2: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

mkl_cspffrtx_ :: (ap: *MKL_Complex8, n: *s64, ncolm: *s64, work: *MKL_Complex8, work2: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

MKL_DSPFFRT2 :: (ap: *float64, n: *s64, ncolm: *s64, work: *float64, work2: *float64) -> void #foreign mkl_intel_ilp64;

mkl_dspffrt2 :: (ap: *float64, n: *s64, ncolm: *s64, work: *float64, work2: *float64) -> void #foreign mkl_intel_ilp64;

mkl_dspffrt2_ :: (ap: *float64, n: *s64, ncolm: *s64, work: *float64, work2: *float64) -> void #foreign mkl_intel_ilp64;

MKL_DSPFFRTX :: (ap: *float64, n: *s64, ncolm: *s64, work: *float64, work2: *float64) -> void #foreign mkl_intel_ilp64;

mkl_dspffrtx :: (ap: *float64, n: *s64, ncolm: *s64, work: *float64, work2: *float64) -> void #foreign mkl_intel_ilp64;

mkl_dspffrtx_ :: (ap: *float64, n: *s64, ncolm: *s64, work: *float64, work2: *float64) -> void #foreign mkl_intel_ilp64;

MKL_SSPFFRT2 :: (ap: *float, n: *s64, ncolm: *s64, work: *float, work2: *float) -> void #foreign mkl_intel_ilp64;

mkl_sspffrt2 :: (ap: *float, n: *s64, ncolm: *s64, work: *float, work2: *float) -> void #foreign mkl_intel_ilp64;

mkl_sspffrt2_ :: (ap: *float, n: *s64, ncolm: *s64, work: *float, work2: *float) -> void #foreign mkl_intel_ilp64;

MKL_SSPFFRTX :: (ap: *float, n: *s64, ncolm: *s64, work: *float, work2: *float) -> void #foreign mkl_intel_ilp64;

mkl_sspffrtx :: (ap: *float, n: *s64, ncolm: *s64, work: *float, work2: *float) -> void #foreign mkl_intel_ilp64;

mkl_sspffrtx_ :: (ap: *float, n: *s64, ncolm: *s64, work: *float, work2: *float) -> void #foreign mkl_intel_ilp64;

MKL_ZSPFFRT2 :: (ap: *MKL_Complex16, n: *s64, ncolm: *s64, work: *MKL_Complex16, work2: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

mkl_zspffrt2 :: (ap: *MKL_Complex16, n: *s64, ncolm: *s64, work: *MKL_Complex16, work2: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

mkl_zspffrt2_ :: (ap: *MKL_Complex16, n: *s64, ncolm: *s64, work: *MKL_Complex16, work2: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

MKL_ZSPFFRTX :: (ap: *MKL_Complex16, n: *s64, ncolm: *s64, work: *MKL_Complex16, work2: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

mkl_zspffrtx :: (ap: *MKL_Complex16, n: *s64, ncolm: *s64, work: *MKL_Complex16, work2: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

mkl_zspffrtx_ :: (ap: *MKL_Complex16, n: *s64, ncolm: *s64, work: *MKL_Complex16, work2: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

MKL_PROGRESS :: (thread: *s32, step: *s32, stage: *u8, lstage: s32) -> s32 #foreign mkl_intel_ilp64;
MKL_PROGRESS_ :: (thread: *s32, step: *s32, stage: *u8, lstage: s32) -> s32 #foreign mkl_intel_ilp64;
mkl_progress :: (thread: *s32, step: *s32, stage: *u8, lstage: s32) -> s32 #foreign mkl_intel_ilp64;
mkl_progress_ :: (thread: *s32, step: *s32, stage: *u8, lstage: s32) -> s32 #foreign mkl_intel_ilp64;

/* LAPACK specific types */
MKL_C_SELECT_FUNCTION_1_64 :: #type (a0: *MKL_Complex8) -> s64 #c_call;
MKL_C_SELECT_FUNCTION_2_64 :: #type (a0: *MKL_Complex8, a1: *MKL_Complex8) -> s64 #c_call;
MKL_D_SELECT_FUNCTION_2_64 :: #type (a0: *float64, a1: *float64) -> s64 #c_call;
MKL_D_SELECT_FUNCTION_3_64 :: #type (a0: *float64, a1: *float64, a2: *float64) -> s64 #c_call;
MKL_S_SELECT_FUNCTION_2_64 :: #type (a0: *float, a1: *float) -> s64 #c_call;
MKL_S_SELECT_FUNCTION_3_64 :: #type (a0: *float, a1: *float, a2: *float) -> s64 #c_call;
MKL_Z_SELECT_FUNCTION_1_64 :: #type (a0: *MKL_Complex16) -> s64 #c_call;
MKL_Z_SELECT_FUNCTION_2_64 :: #type (a0: *MKL_Complex16, a1: *MKL_Complex16) -> s64 #c_call;

CGESVDQ_64 :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, cwork: *MKL_Complex8, lcwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
cgesvdq_64 :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, cwork: *MKL_Complex8, lcwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESVDQ_64 :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, work: *float64, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
dgesvdq_64 :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, work: *float64, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESVDQ_64 :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, work: *float, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
sgesvdq_64 :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, work: *float, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESVDQ_64 :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, cwork: *MKL_Complex16, lcwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
zgesvdq_64 :: (joba: *u8, jobp: *u8, jobr: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, numrank: *s64, iwork: *s64, liwork: *s64, cwork: *MKL_Complex16, lcwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAUNHR_COL_GETRFNP2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;
claunhr_col_getrfnp2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAUNHR_COL_GETRFNP_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;
claunhr_col_getrfnp_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAORHR_COL_GETRFNP2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dlaorhr_col_getrfnp2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAORHR_COL_GETRFNP_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dlaorhr_col_getrfnp_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAORHR_COL_GETRFNP2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
slaorhr_col_getrfnp2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAORHR_COL_GETRFNP_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
slaorhr_col_getrfnp_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAUNHR_COL_GETRFNP2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;
zlaunhr_col_getrfnp2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAUNHR_COL_GETRFNP_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;
zlaunhr_col_getrfnp_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGTSQR_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
cungtsqr_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNHR_COL_64 :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;
cunhr_col_64 :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, d: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGTSQR_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
dorgtsqr_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORHR_COL_64 :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dorhr_col_64 :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGTSQR_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
sorgtsqr_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORHR_COL_64 :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
sorhr_col_64 :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGTSQR_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
zungtsqr_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNHR_COL_64 :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;
zunhr_col_64 :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, d: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELQ_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelq_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELQT_64 :: (m: *s64, n: *s64, mb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelqt_64 :: (m: *s64, n: *s64, mb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELQT3_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelqt3_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEMLQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgemlq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEMLQT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgemlqt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQR_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqr_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETSLS_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetsls_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAMSWLQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clamswlq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAMTSQR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clamtsqr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLASWLQ_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claswlq_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATSQR_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clatsqr_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPLQT_64 :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctplqt_64 :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPLQT2_64 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctplqt2_64 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPMLQT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpmlqt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELQ_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelq_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELQT_64 :: (m: *s64, n: *s64, mb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelqt_64 :: (m: *s64, n: *s64, mb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELQT3_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelqt3_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEMLQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgemlq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEMLQT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgemlqt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQR_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqr_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAMSWLQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlamswlq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAMTSQR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlamtsqr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASWLQ_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaswlq_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATSQR_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatsqr_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPLQT_64 :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtplqt_64 :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPLQT2_64 :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtplqt2_64 :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPMLQT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpmlqt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELQ_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelq_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETSLS_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetsls_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELQT_64 :: (m: *s64, n: *s64, mb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelqt_64 :: (m: *s64, n: *s64, mb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELQT3_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelqt3_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEMLQT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgemlqt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQR_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqr_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETSLS_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetsls_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAMTSQR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slamtsqr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASWLQ_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaswlq_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPLQT_64 :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stplqt_64 :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STPMLQT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stpmlqt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELQ_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelq_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEMLQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgemlq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAMSWLQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slamswlq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATSQR_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slatsqr_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPLQT2_64 :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stplqt2_64 :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELQT_64 :: (m: *s64, n: *s64, mb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelqt_64 :: (m: *s64, n: *s64, mb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELQT3_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelqt3_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMLQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgemlq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMLQT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgemlqt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQR_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqr_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETSLS_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetsls_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAMSWLQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlamswlq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAMTSQR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlamtsqr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLASWLQ_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaswlq_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATSQR_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatsqr_64 :: (m: *s64, n: *s64, mb: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPLQT_64 :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztplqt_64 :: (m: *s64, n: *s64, l: *s64, mb: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPLQT2_64 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztplqt2_64 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPMLQT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpmlqt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, mb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESV_AA_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_aa_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRF_AA_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_aa_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRS_AA_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_aa_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAHEF_AA_64 :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, h: *MKL_Complex8, ldh: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clahef_aa_64 :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, h: *MKL_Complex8, ldh: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASYF_AA_64 :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *float64, lda: *s64, ipiv: *s64, h: *float64, ldh: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasyf_aa_64 :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *float64, lda: *s64, ipiv: *s64, h: *float64, ldh: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSV_AA_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_aa_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRF_AA_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_aa_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRS_AA_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_aa_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASYF_AA_64 :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *float, lda: *s64, ipiv: *s64, h: *float, ldh: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasyf_aa_64 :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *float, lda: *s64, ipiv: *s64, h: *float, ldh: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSV_AA_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_aa_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRF_AA_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_aa_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRS_AA_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_aa_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESV_AA_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_aa_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRF_AA_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_aa_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRS_AA_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_aa_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHEF_AA_64 :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, h: *MKL_Complex16, ldh: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahef_aa_64 :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, h: *MKL_Complex16, ldh: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEMQR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgemqr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, tsize: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEMQR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgemqr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, t: *float64, tsize: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEMQR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgemqr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, t: *float, tsize: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMQR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgemqr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, tsize: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHECON_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

checon_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESV_RK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_rk_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETF2_RK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetf2_rk_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRF_RK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_rk_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRI_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRI_3X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri_3x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRS_3_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_3_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAHEF_RK_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clahef_rk_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLARFY_64 :: (uplo: *u8, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfy_64 :: (uplo: *u8, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLASYF_AA_64 :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, h: *MKL_Complex8, ldh: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clasyf_aa_64 :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, h: *MKL_Complex8, ldh: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CLASYF_RK_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clasyf_rk_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYCON_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csycon_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYCONVF_64 :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csyconvf_64 :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYCONVF_ROOK_64 :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csyconvf_rook_64 :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSV_AA_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_aa_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSV_RK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_rk_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTF2_RK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytf2_rk_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRF_AA_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_aa_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRF_RK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_rk_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRI_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRI_3X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri_3x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRS_3_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_3_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRS_AA_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_aa_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARFY_64 :: (uplo: *u8, n: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlarfy_64 :: (uplo: *u8, n: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLASYF_RK_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasyf_rk_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYCON_3_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsycon_3_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYCONVF_64 :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyconvf_64 :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYCONVF_ROOK_64 :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyconvf_rook_64 :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSV_RK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_rk_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTF2_RK_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytf2_rk_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRF_RK_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_rk_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRI_3_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri_3_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRI_3X_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri_3x_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, work: *float64, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRS_3_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_3_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, e: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARFY_64 :: (uplo: *u8, n: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slarfy_64 :: (uplo: *u8, n: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

SLASYF_RK_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasyf_rk_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYCON_3_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssycon_3_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYCONVF_64 :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyconvf_64 :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYCONVF_ROOK_64 :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyconvf_rook_64 :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSV_RK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_rk_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTF2_RK_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytf2_rk_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRF_RK_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_rk_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRI_3_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri_3_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRI_3X_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri_3x_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, work: *float, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRS_3_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_3_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, e: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHECON_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhecon_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESV_RK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_rk_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETF2_RK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetf2_rk_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRF_RK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_rk_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRI_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRI_3X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri_3x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRS_3_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_3_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHEF_RK_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahef_rk_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLARFY_64 :: (uplo: *u8, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfy_64 :: (uplo: *u8, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLASYF_AA_64 :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, h: *MKL_Complex16, ldh: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlasyf_aa_64 :: (uplo: *u8, j1: *s64, m: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, h: *MKL_Complex16, ldh: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLASYF_RK_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlasyf_rk_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYCON_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsycon_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYCONVF_64 :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyconvf_64 :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYCONVF_ROOK_64 :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyconvf_rook_64 :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSV_AA_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_aa_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSV_RK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_rk_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTF2_RK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytf2_rk_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRF_AA_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_aa_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRF_RK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_rk_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRI_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri_3_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRI_3X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri_3x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRS_3_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_3_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRS_AA_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_aa_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHB2ST_KERNELS_64 :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *MKL_Complex8, lda: *s64, v: *MKL_Complex8, tau: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

chb2st_kernels_64 :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *MKL_Complex8, lda: *s64, v: *MKL_Complex8, tau: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CHBEV_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chbev_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBEVD_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbevd_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBEVX_2STAGE_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbevx_2stage_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEV_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cheev_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEVD_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevd_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEVR_2STAGE_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevr_2stage_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEVX_2STAGE_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevx_2stage_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEGV_2STAGE_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chegv_2stage_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRD_2STAGE_64 :: (vect: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, hous2: *MKL_Complex8, lhous2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrd_2stage_64 :: (vect: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, hous2: *MKL_Complex8, lhous2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRD_HB2ST_64 :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, hous: *MKL_Complex8, lhous: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrd_hb2st_64 :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, hous: *MKL_Complex8, lhous: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRD_HE2HB_64 :: (uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex8, lda: *s64, ab: *MKL_Complex8, ldab: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrd_he2hb_64 :: (uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex8, lda: *s64, ab: *MKL_Complex8, ldab: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSB2ST_KERNELS_64 :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *float64, lda: *s64, v: *float64, tau: *float64, ldvt: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dsb2st_kernels_64 :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *float64, lda: *s64, v: *float64, tau: *float64, ldvt: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

DSBEV_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbev_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBEVD_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbevd_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBEVX_2STAGE_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbevx_2stage_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEV_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyev_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEVD_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevd_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEVR_2STAGE_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevr_2stage_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEVX_2STAGE_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevx_2stage_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYGV_2STAGE_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygv_2stage_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRD_2STAGE_64 :: (vect: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, hous2: *float64, lhous2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrd_2stage_64 :: (vect: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, hous2: *float64, lhous2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRD_SB2ST_64 :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, hous: *float64, lhous: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrd_sb2st_64 :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, hous: *float64, lhous: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRD_SY2SB_64 :: (uplo: *u8, n: *s64, kd: *s64, a: *float64, lda: *s64, ab: *float64, ldab: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrd_sy2sb_64 :: (uplo: *u8, n: *s64, kd: *s64, a: *float64, lda: *s64, ab: *float64, ldab: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

IPARAM2STAGE_64 :: (ispec: *s64, name: *u8, opts: *u8, ni: *s64, nbi: *s64, ibi: *s64, nxi: *s64) -> s64 #foreign mkl_intel_ilp64;

iparam2stage_64 :: (ispec: *s64, name: *u8, opts: *u8, ni: *s64, nbi: *s64, ibi: *s64, nxi: *s64) -> s64 #foreign mkl_intel_ilp64;

SSB2ST_KERNELS_64 :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *float, lda: *s64, v: *float, tau: *float, ldvt: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

ssb2st_kernels_64 :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *float, lda: *s64, v: *float, tau: *float, ldvt: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

SSBEV_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbev_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBEVD_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbevd_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBEVX_2STAGE_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbevx_2stage_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEV_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyev_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEVD_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevd_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEVR_2STAGE_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevr_2stage_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEVX_2STAGE_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevx_2stage_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYGV_2STAGE_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygv_2stage_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRD_2STAGE_64 :: (vect: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, hous2: *float, lhous2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrd_2stage_64 :: (vect: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, hous2: *float, lhous2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRD_SB2ST_64 :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, d: *float, e: *float, hous: *float, lhous: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrd_sb2st_64 :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, d: *float, e: *float, hous: *float, lhous: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRD_SY2SB_64 :: (uplo: *u8, n: *s64, kd: *s64, a: *float, lda: *s64, ab: *float, ldab: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrd_sy2sb_64 :: (uplo: *u8, n: *s64, kd: *s64, a: *float, lda: *s64, ab: *float, ldab: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHB2ST_KERNELS_64 :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *MKL_Complex16, lda: *s64, v: *MKL_Complex16, tau: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zhb2st_kernels_64 :: (uplo: *u8, wantz: *s64, ttype: *s64, st: *s64, ed: *s64, sweep: *s64, n: *s64, nb: *s64, ib: *s64, a: *MKL_Complex16, lda: *s64, v: *MKL_Complex16, tau: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZHBEV_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbev_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBEVD_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbevd_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBEVX_2STAGE_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbevx_2stage_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEV_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheev_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEVD_2STAGE_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevd_2stage_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEVR_2STAGE_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevr_2stage_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEVX_2STAGE_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevx_2stage_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEGV_2STAGE_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegv_2stage_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRD_2STAGE_64 :: (vect: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, hous2: *MKL_Complex16, lhous2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrd_2stage_64 :: (vect: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, hous2: *MKL_Complex16, lhous2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRD_HB2ST_64 :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, hous: *MKL_Complex16, lhous: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrd_hb2st_64 :: (stage1: *u8, vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, hous: *MKL_Complex16, lhous: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRD_HE2HB_64 :: (uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex16, lda: *s64, ab: *MKL_Complex16, ldab: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrd_he2hb_64 :: (uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex16, lda: *s64, ab: *MKL_Complex16, ldab: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRF_AA_2STAGE_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_aa_2stage_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESV_AA_2STAGE_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_aa_2stage_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRF_AA_2STAGE_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_aa_2stage_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRS_AA_2STAGE_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_aa_2stage_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSV_AA_2STAGE_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_aa_2stage_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRF_AA_2STAGE_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_aa_2stage_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRS_AA_2STAGE_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_aa_2stage_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, tb: *MKL_Complex8, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESV_AA_2STAGE_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_aa_2stage_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRF_AA_2STAGE_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_aa_2stage_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRS_AA_2STAGE_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_aa_2stage_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSV_AA_2STAGE_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_aa_2stage_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRF_AA_2STAGE_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_aa_2stage_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRS_AA_2STAGE_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_aa_2stage_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, tb: *MKL_Complex16, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRS_AA_2STAGE_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_aa_2stage_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSV_AA_2STAGE_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_aa_2stage_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, tb: *float64, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSV_AA_2STAGE_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_aa_2stage_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRS_AA_2STAGE_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_aa_2stage_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRF_AA_2STAGE_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_aa_2stage_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, tb: *float, ltb: *s64, ipiv: *s64, ipiv2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTREVC3_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrevc3_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STREVC3_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strevc3_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTREVC3_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrevc3_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTREVC3_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrevc3_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRF_BATCH_STRIDED_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrf_batch_strided_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRF_BATCH_STRIDED_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrf_batch_strided_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRF_BATCH_STRIDED_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrf_batch_strided_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRF_BATCH_STRIDED_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrf_batch_strided_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRS_BATCH_STRIDED_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *float, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrs_batch_strided_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *float, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRS_BATCH_STRIDED_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *float64, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrs_batch_strided_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *float64, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRS_BATCH_STRIDED_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *MKL_Complex8, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrs_batch_strided_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *MKL_Complex8, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRS_BATCH_STRIDED_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *MKL_Complex16, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrs_batch_strided_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, ipiv: *s64, stride_ipiv: *s64, b: *MKL_Complex16, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRFNP_BATCH_STRIDED_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrfnp_batch_strided_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRFNP_BATCH_STRIDED_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrfnp_batch_strided_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRFNP_BATCH_STRIDED_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrfnp_batch_strided_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRFNP_BATCH_STRIDED_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrfnp_batch_strided_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRSNP_BATCH_STRIDED_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, stride_a: *s64, b: *float, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrsnp_batch_strided_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, stride_a: *s64, b: *float, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRSNP_BATCH_STRIDED_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, stride_a: *s64, b: *float64, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrsnp_batch_strided_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, stride_a: *s64, b: *float64, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRSNP_BATCH_STRIDED_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, b: *MKL_Complex8, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrsnp_batch_strided_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, stride_a: *s64, b: *MKL_Complex8, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRSNP_BATCH_STRIDED_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, b: *MKL_Complex16, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrsnp_batch_strided_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, stride_a: *s64, b: *MKL_Complex16, ldb: *s64, stride_b: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRF_BATCH_64 :: (m: *s64, n: *s64, a: **float64, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrf_batch_64 :: (m: *s64, n: *s64, a: **float64, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRF_BATCH_64 :: (m: *s64, n: *s64, a: **float, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrf_batch_64 :: (m: *s64, n: *s64, a: **float, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRF_BATCH_64 :: (m: *s64, n: *s64, a: **MKL_Complex8, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrf_batch_64 :: (m: *s64, n: *s64, a: **MKL_Complex8, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRF_BATCH_64 :: (m: *s64, n: *s64, a: **MKL_Complex16, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrf_batch_64 :: (m: *s64, n: *s64, a: **MKL_Complex16, lda: *s64, ipiv: **s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRI_OOP_BATCH_STRIDED_64 :: (n: *s64, a: *float, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *float, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetri_oop_batch_strided_64 :: (n: *s64, a: *float, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *float, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRI_OOP_BATCH_STRIDED_64 :: (n: *s64, a: *float64, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *float64, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetri_oop_batch_strided_64 :: (n: *s64, a: *float64, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *float64, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRI_OOP_BATCH_STRIDED_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *MKL_Complex8, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetri_oop_batch_strided_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *MKL_Complex8, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRI_OOP_BATCH_STRIDED_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *MKL_Complex16, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetri_oop_batch_strided_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, stridea: *s64, ipiv: *s64, stride_ipiv: *s64, ainv: *MKL_Complex16, ldainv: *s64, stride_ainv: *s64, batch_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRI_OOP_BATCH_64 :: (n: *s64, a: **float, lda: *s64, ipiv: **s64, ainv: **float, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetri_oop_batch_64 :: (n: *s64, a: **float, lda: *s64, ipiv: **s64, ainv: **float, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRI_OOP_BATCH_64 :: (n: *s64, a: **float64, lda: *s64, ipiv: **s64, ainv: **float64, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetri_oop_batch_64 :: (n: *s64, a: **float64, lda: *s64, ipiv: **s64, ainv: **float64, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRI_OOP_BATCH_64 :: (n: *s64, a: **MKL_Complex8, lda: *s64, ipiv: **s64, ainv: **MKL_Complex8, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetri_oop_batch_64 :: (n: *s64, a: **MKL_Complex8, lda: *s64, ipiv: **s64, ainv: **MKL_Complex8, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRI_OOP_BATCH_64 :: (n: *s64, a: **MKL_Complex16, lda: *s64, ipiv: **s64, ainv: **MKL_Complex16, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetri_oop_batch_64 :: (n: *s64, a: **MKL_Complex16, lda: *s64, ipiv: **s64, ainv: **MKL_Complex16, ldainv: *s64, group_count: *s64, group_size: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/* LAPACK 3.6.0 routines */
CGEJSV_64 :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, sva: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, cwork: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgejsv_64 :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, sva: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, cwork: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEJSV_64 :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sva: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, cwork: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgejsv_64 :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sva: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, cwork: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESVDX_64 :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvdx_64 :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESVDX_64 :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvdx_64 :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESVDX_64 :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvdx_64 :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESVDX_64 :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvdx_64 :: (jobu: *u8, jobvt: *u8, range: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESVJ_64 :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, cwork: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvj_64 :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, cwork: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESVJ_64 :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, cwork: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvj_64 :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, cwork: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGSVD3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggsvd3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGSVD3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggsvd3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGSVD3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggsvd3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGSVD3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggsvd3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGSVP3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, iwork: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggsvp3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, iwork: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGSVP3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, iwork: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggsvp3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, iwork: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGSVP3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, iwork: *s64, rwork: *float, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggsvp3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, iwork: *s64, rwork: *float, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGSVP3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, iwork: *s64, rwork: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggsvp3_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, iwork: *s64, rwork: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGSVJ0_64 :: (jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgsvj0_64 :: (jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGSVJ0_64 :: (jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgsvj0_64 :: (jobv: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGSVJ1_64 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgsvj1_64 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *MKL_Complex8, lda: *s64, d: *MKL_Complex8, sva: *float, mv: *s64, v: *MKL_Complex8, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGSVJ1_64 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgsvj1_64 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *MKL_Complex16, lda: *s64, d: *MKL_Complex16, sva: *float64, mv: *s64, v: *MKL_Complex16, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOTRF2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotrf2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOTRF2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotrf2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOTRF2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;
spotrf2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOTRF2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotrf2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DBDSVDX_64 :: (uplo: *u8, jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dbdsvdx_64 :: (uplo: *u8, jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, ns: *s64, s: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SBDSVDX_64 :: (uplo: *u8, jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sbdsvdx_64 :: (uplo: *u8, jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, ns: *s64, s: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRF2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrf2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRF2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrf2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRF2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrf2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRF2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrf2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGEV3_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cggev3_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGEV3_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggev3_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGEV3_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggev3_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGEV3_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggev3_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNM22_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *MKL_Complex8, ldq: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunm22_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *MKL_Complex8, ldq: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNM22_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *MKL_Complex16, ldq: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunm22_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *MKL_Complex16, ldq: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGHD3_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgghd3_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGHD3_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgghd3_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGHD3_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgghd3_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGHD3_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgghd3_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGES3_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2_64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgges3_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2_64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGES3_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2_64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgges3_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2_64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGES3_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3_64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgges3_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3_64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGES3_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3_64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgges3_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3_64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORM22_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *float64, ldq: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorm22_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *float64, ldq: *s64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORM22_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *float, ldq: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorm22_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, n1: *s64, n2: *s64, q: *float, ldq: *s64, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/* LAPACK 3.5.0 routines */
CHECON_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

checon_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESV_ROOK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_rook_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETF2_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetf2_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRF_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRI_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRS_ROOK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_rook_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAHEF_ROOK_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clahef_rook_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLASYF_ROOK_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clasyf_rook_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYCON_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csycon_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSV_ROOK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_rook_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTF2_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytf2_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRF_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRI_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRS_ROOK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_rook_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASYF_ROOK_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasyf_rook_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYCON_ROOK_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsycon_rook_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSV_ROOK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_rook_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTF2_ROOK_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytf2_rook_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRF_ROOK_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_rook_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRI_ROOK_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri_rook_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRS_ROOK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_rook_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASYF_ROOK_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasyf_rook_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYCON_ROOK_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssycon_rook_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSV_ROOK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_rook_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTF2_ROOK_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytf2_rook_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRF_ROOK_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_rook_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRI_ROOK_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri_rook_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRS_ROOK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_rook_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHECON_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhecon_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESV_ROOK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_rook_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETF2_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetf2_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRF_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRI_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRS_ROOK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_rook_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHEF_ROOK_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahef_rook_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLASYF_ROOK_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlasyf_rook_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYCON_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsycon_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSV_ROOK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_rook_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTF2_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytf2_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRF_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRI_ROOK_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri_rook_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRS_ROOK_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_rook_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB1_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb1_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB2_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb2_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB3_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb3_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB4_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, phantom: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb4_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, phantom: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB5_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, q1: *MKL_Complex8, ldq1: *s64, q2: *MKL_Complex8, ldq2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb5_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, q1: *MKL_Complex8, ldq1: *s64, q2: *MKL_Complex8, ldq2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB6_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, q1: *MKL_Complex8, ldq1: *s64, q2: *MKL_Complex8, ldq2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb6_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex8, incx1: *s64, x2: *MKL_Complex8, incx2: *s64, q1: *MKL_Complex8, ldq1: *s64, q2: *MKL_Complex8, ldq2: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNCSD2BY1_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cuncsd2by1_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *MKL_Complex8, ldx11: *s64, x21: *MKL_Complex8, ldx21: *s64, theta: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB1_64 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb1_64 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB2_64 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb2_64 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB3_64 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb3_64 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB4_64 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, phantom: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb4_64 :: (m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, phantom: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB5_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, q1: *float64, ldq1: *s64, q2: *float64, ldq2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb5_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, q1: *float64, ldq1: *s64, q2: *float64, ldq2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB6_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, q1: *float64, ldq1: *s64, q2: *float64, ldq2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb6_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *float64, incx1: *s64, x2: *float64, incx2: *s64, q1: *float64, ldq1: *s64, q2: *float64, ldq2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORCSD2BY1_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorcsd2by1_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *float64, ldx11: *s64, x21: *float64, ldx21: *s64, theta: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB1_64 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb1_64 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB2_64 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb2_64 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB3_64 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb3_64 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB4_64 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, phantom: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb4_64 :: (m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, phantom: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB5_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, q1: *float, ldq1: *s64, q2: *float, ldq2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb5_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, q1: *float, ldq1: *s64, q2: *float, ldq2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB6_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, q1: *float, ldq1: *s64, q2: *float, ldq2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb6_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *float, incx1: *s64, x2: *float, incx2: *s64, q1: *float, ldq1: *s64, q2: *float, ldq2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORCSD2BY1_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorcsd2by1_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *float, ldx11: *s64, x21: *float, ldx21: *s64, theta: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB1_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb1_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB2_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb2_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB3_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb3_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB4_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, phantom: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb4_64 :: (m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, phantom: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB5_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, q1: *MKL_Complex16, ldq1: *s64, q2: *MKL_Complex16, ldq2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb5_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, q1: *MKL_Complex16, ldq1: *s64, q2: *MKL_Complex16, ldq2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB6_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, q1: *MKL_Complex16, ldq1: *s64, q2: *MKL_Complex16, ldq2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb6_64 :: (m1: *s64, m2: *s64, n: *s64, x1: *MKL_Complex16, incx1: *s64, x2: *MKL_Complex16, incx2: *s64, q1: *MKL_Complex16, ldq1: *s64, q2: *MKL_Complex16, ldq2: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNCSD2BY1_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zuncsd2by1_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, m: *s64, p: *s64, q: *s64, x11: *MKL_Complex16, ldx11: *s64, x21: *MKL_Complex16, ldx21: *s64, theta: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/* LAPACK 3.4.0 routines */
CGEMQRT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgemqrt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEMQRT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgemqrt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEMQRT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgemqrt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEMQRT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgemqrt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, nb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQRT_64 :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrt_64 :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQRT_64 :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrt_64 :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQRT_64 :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrt_64 :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQRT_64 :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrt_64 :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQRT3_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrt3_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQRT3_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrt3_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQRT3_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrt3_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQRT3_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrt3_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPMQRT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpmqrt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPMQRT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpmqrt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPMQRT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stpmqrt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPMQRT_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpmqrt_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, nb: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPQRT_64 :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpqrt_64 :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPQRT_64 :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpqrt_64 :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPQRT_64 :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stpqrt_64 :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPQRT_64 :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpqrt_64 :: (m: *s64, n: *s64, l: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPQRT2_64 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpqrt2_64 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPQRT2_64 :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpqrt2_64 :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPQRT2_64 :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stpqrt2_64 :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPQRT2_64 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpqrt2_64 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/* LAPACK 3.3.0 routines */
CBBCSD_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float, phi: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, v2t: *MKL_Complex8, ldv2t: *s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cbbcsd_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float, phi: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, v2t: *MKL_Complex8, ldv2t: *s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZBBCSD_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float64, phi: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, v2t: *MKL_Complex16, ldv2t: *s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zbbcsd_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float64, phi: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, v2t: *MKL_Complex16, ldv2t: *s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SBBCSD_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float, phi: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, v2t: *float, ldv2t: *s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sbbcsd_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float, phi: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, v2t: *float, ldv2t: *s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float, rwork: *float, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DBBCSD_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float64, phi: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, v2t: *float64, ldv2t: *s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dbbcsd_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, M: *s64, P: *s64, Q: *s64, theta: *float64, phi: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, v2t: *float64, ldv2t: *s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64, rwork: *float64, lrwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNBDB_64 :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex8, ldx11: *s64, x12: *MKL_Complex8, ldx12: *s64, x21: *MKL_Complex8, ldx21: *s64, x22: *MKL_Complex8, ldx22: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, tauq2: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunbdb_64 :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex8, ldx11: *s64, x12: *MKL_Complex8, ldx12: *s64, x21: *MKL_Complex8, ldx21: *s64, x22: *MKL_Complex8, ldx22: *s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, tauq2: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNBDB_64 :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex16, ldx11: *s64, x12: *MKL_Complex16, ldx12: *s64, x21: *MKL_Complex16, ldx21: *s64, x22: *MKL_Complex16, ldx22: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, tauq2: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunbdb_64 :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex16, ldx11: *s64, x12: *MKL_Complex16, ldx12: *s64, x21: *MKL_Complex16, ldx21: *s64, x22: *MKL_Complex16, ldx22: *s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, tauq2: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORBDB_64 :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float, ldx11: *s64, x12: *float, ldx12: *s64, x21: *float, ldx21: *s64, x22: *float, ldx22: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, tauq2: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorbdb_64 :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float, ldx11: *s64, x12: *float, ldx12: *s64, x21: *float, ldx21: *s64, x22: *float, ldx22: *s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, tauq2: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORBDB_64 :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float64, ldx11: *s64, x12: *float64, ldx12: *s64, x21: *float64, ldx21: *s64, x22: *float64, ldx22: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, tauq2: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorbdb_64 :: (trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float64, ldx11: *s64, x12: *float64, ldx12: *s64, x21: *float64, ldx21: *s64, x22: *float64, ldx22: *s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, tauq2: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNCSD_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex8, ldx11: *s64, x12: *MKL_Complex8, ldx12: *s64, x21: *MKL_Complex8, ldx21: *s64, x22: *MKL_Complex8, ldx22: *s64, theta: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, v2t: *MKL_Complex8, ldv2t: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cuncsd_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex8, ldx11: *s64, x12: *MKL_Complex8, ldx12: *s64, x21: *MKL_Complex8, ldx21: *s64, x22: *MKL_Complex8, ldx22: *s64, theta: *float, u1: *MKL_Complex8, ldu1: *s64, u2: *MKL_Complex8, ldu2: *s64, v1t: *MKL_Complex8, ldv1t: *s64, v2t: *MKL_Complex8, ldv2t: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNCSD_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex16, ldx11: *s64, x12: *MKL_Complex16, ldx12: *s64, x21: *MKL_Complex16, ldx21: *s64, x22: *MKL_Complex16, ldx22: *s64, theta: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, v2t: *MKL_Complex16, ldv2t: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zuncsd_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *MKL_Complex16, ldx11: *s64, x12: *MKL_Complex16, ldx12: *s64, x21: *MKL_Complex16, ldx21: *s64, x22: *MKL_Complex16, ldx22: *s64, theta: *float64, u1: *MKL_Complex16, ldu1: *s64, u2: *MKL_Complex16, ldu2: *s64, v1t: *MKL_Complex16, ldv1t: *s64, v2t: *MKL_Complex16, ldv2t: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORCSD_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float, ldx11: *s64, x12: *float, ldx12: *s64, x21: *float, ldx21: *s64, x22: *float, ldx22: *s64, theta: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, v2t: *float, ldv2t: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorcsd_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float, ldx11: *s64, x12: *float, ldx12: *s64, x21: *float, ldx21: *s64, x22: *float, ldx22: *s64, theta: *float, u1: *float, ldu1: *s64, u2: *float, ldu2: *s64, v1t: *float, ldv1t: *s64, v2t: *float, ldv2t: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORCSD_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float64, ldx11: *s64, x12: *float64, ldx12: *s64, x21: *float64, ldx21: *s64, x22: *float64, ldx22: *s64, theta: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, v2t: *float64, ldv2t: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorcsd_64 :: (jobu1: *u8, jobu2: *u8, jobv1t: *u8, jobv2t: *u8, trans: *u8, signs: *u8, M: *s64, P: *s64, Q: *s64, x11: *float64, ldx11: *s64, x12: *float64, ldx12: *s64, x21: *float64, ldx21: *s64, x22: *float64, ldx22: *s64, theta: *float64, u1: *float64, ldu1: *s64, u2: *float64, ldu2: *s64, v1t: *float64, ldv1t: *s64, v2t: *float64, ldv2t: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAPMR_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex8, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

clapmr_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex8, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

DLAPMR_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *float64, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

dlapmr_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *float64, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

ZLAPMR_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex16, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

zlapmr_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex16, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

SLAPMR_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *float, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

slapmr_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *float, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

CSYCONV_64 :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, e: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csyconv_64 :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, e: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYCONV_64 :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, e: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyconv_64 :: (uplo: *u8, way: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, e: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYCONV_64 :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyconv_64 :: (uplo: *u8, way: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYCONV_64 :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyconv_64 :: (uplo: *u8, way: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSWAPR_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

csyswapr_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSWAPR_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

zsyswapr_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

SSYSWAPR_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

ssyswapr_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

DSYSWAPR_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

dsyswapr_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRI2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRI2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRI2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRI2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRI2X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri2x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRI2X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri2x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRI2X_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri2x_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRI2X_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri2x_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRS2_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs2_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRS2_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs2_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRS2_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs2_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRS2_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs2_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRS2_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs2_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRS2_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs2_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

/* LAPACK 3.2 routines */
CBDSQR_64 :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *MKL_Complex8, ldvt: *s64, u: *MKL_Complex8, ldu: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cbdsqr_64 :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *MKL_Complex8, ldvt: *s64, u: *MKL_Complex8, ldu: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBBRD_64 :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, pt: *MKL_Complex8, ldpt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbbrd_64 :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, pt: *MKL_Complex8, ldpt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBCON_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbcon_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBEQUB_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbequb_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBEQU_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbequ_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBRFS_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbrfs_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBRFSX_64 :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbrfsx_64 :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBSV_64 :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbsv_64 :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBSVX_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbsvx_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBSVXX_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbsvxx_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBTF2_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbtf2_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBTRF_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbtrf_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGBTRS_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgbtrs_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEBAK_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float, m: *s64, v: *MKL_Complex8, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgebak_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float, m: *s64, v: *MKL_Complex8, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEBAL_64 :: (job: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ilo: *s64, ihi: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgebal_64 :: (job: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ilo: *s64, ihi: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEBD2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgebd2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEBRD_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgebrd_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGECON_64 :: (norm: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgecon_64 :: (norm: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEEQUB_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeequb_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEEQU_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeequ_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEES_64 :: (jobvs: *u8, sort: *u8, select: MKL_C_SELECT_FUNCTION_1_64, n: *s64, a: *MKL_Complex8, lda: *s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgees_64 :: (jobvs: *u8, sort: *u8, select: MKL_C_SELECT_FUNCTION_1_64, n: *s64, a: *MKL_Complex8, lda: *s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEESX_64 :: (jobvs: *u8, sort: *u8, select: MKL_C_SELECT_FUNCTION_1_64, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: *s64, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeesx_64 :: (jobvs: *u8, sort: *u8, select: MKL_C_SELECT_FUNCTION_1_64, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: *s64, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEEV_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeev_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEEVX_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeevx_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEGS_64 :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgegs_64 :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEGV_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgegv_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEHD2_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgehd2_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEHRD_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgehrd_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELQ2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelq2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELQF_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelqf_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELSD_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelsd_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELS_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgels_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELSS_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelss_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELSX_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelsx_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGELSY_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgelsy_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQL2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeql2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQLF_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqlf_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQP3_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqp3_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQPF_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqpf_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQR2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqr2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQR2P_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqr2p_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQRF_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrf_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGEQRFP_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrfp_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGERFS_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgerfs_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGERFSX_64 :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgerfsx_64 :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGERQ2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgerq2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGERQF_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgerqf_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESC2_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, rhs: *MKL_Complex8, ipiv: *s64, jpiv: *s64, scale: *float) -> void #foreign mkl_intel_ilp64;

cgesc2_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, rhs: *MKL_Complex8, ipiv: *s64, jpiv: *s64, scale: *float) -> void #foreign mkl_intel_ilp64;

CGESDD_64 :: (jobz: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesdd_64 :: (jobz: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESVD_64 :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvd_64 :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, u: *MKL_Complex8, ldu: *s64, vt: *MKL_Complex8, ldvt: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESV_64 :: (n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesv_64 :: (n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESVX_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvx_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGESVXX_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgesvxx_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETC2_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetc2_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETF2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetf2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRF_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrf_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRI_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetri_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGETRS_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgetrs_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGBAK_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, m: *s64, v: *MKL_Complex8, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggbak_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, m: *s64, v: *MKL_Complex8, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGBAL_64 :: (job: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cggbal_64 :: (job: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGES_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2_64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgges_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2_64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGESX_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2_64, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggesx_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_C_SELECT_FUNCTION_2_64, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: *s64, vsr: *MKL_Complex8, ldvsr: *s64, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGEV_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cggev_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGEVX_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggevx_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGGLM_64 :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, d: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggglm_64 :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, d: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGHRD_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgghrd_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGLSE_64 :: (m: *s64, n: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, d: *MKL_Complex8, x: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgglse_64 :: (m: *s64, n: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, d: *MKL_Complex8, x: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGQRF_64 :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, taub: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggqrf_64 :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex8, lda: *s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, taub: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGRQF_64 :: (m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, taub: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggrqf_64 :: (m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, taub: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGSVD_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cggsvd_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGGSVP_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, iwork: *s64, rwork: *float, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cggsvp_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, iwork: *s64, rwork: *float, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTCON_64 :: (norm: *u8, n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cgtcon_64 :: (norm: *u8, n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTRFS_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgtrfs_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTSV_64 :: (n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgtsv_64 :: (n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTSVX_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cgtsvx_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTTRF_64 :: (n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgttrf_64 :: (n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTTRS_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgttrs_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CGTTS2_64 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

cgtts2_64 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CHBEVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbevd_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBEV_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chbev_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBEVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbevx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBGST_64 :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, x: *MKL_Complex8, ldx: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chbgst_64 :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, x: *MKL_Complex8, ldx: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBGVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbgvd_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBGV_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chbgv_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBGVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chbgvx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex8, ldab: *s64, bb: *MKL_Complex8, ldbb: *s64, q: *MKL_Complex8, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHBTRD_64 :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chbtrd_64 :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHECON_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

checon_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEQUB_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cheequb_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevd_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEV_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cheev_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEVR_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevr_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEEVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cheevx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEGS2_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chegs2_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEGST_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chegst_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEGVD_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chegvd_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEGV_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chegv_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, w: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHEGVX_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chegvx_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHERFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cherfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHERFSX_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cherfsx_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chesv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chesvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESVXX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chesvxx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETD2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chetd2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETF2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetf2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRD_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrd_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRF_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrf_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRI_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHFRK_64 :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, beta: *float, c: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

chfrk_64 :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, beta: *float, c: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CHGEQZ_64 :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, t: *MKL_Complex8, ldt: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chgeqz_64 :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, t: *MKL_Complex8, ldt: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHLA_TRANSTYPE_64 :: (ret_val: *u8, ret_val_len: s32, trans: *s64) -> void #foreign mkl_intel_ilp64;
chla_transtype_64 :: (ret_val: *u8, ret_val_len: s32, trans: *s64) -> void #foreign mkl_intel_ilp64;

CHPCON_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chpcon_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPEVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpevd_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPEV_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chpev_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPEVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpevx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPGST_64 :: (itype: *s64, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chpgst_64 :: (itype: *s64, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPGVD_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpgvd_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPGV_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chpgv_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPGVX_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpgvx_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, bp: *MKL_Complex8, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chprfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chpsv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

chpsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPTRD_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, d: *float, e: *float, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chptrd_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, d: *float, e: *float, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPTRF_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chptrf_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPTRI_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

chptri_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CHPTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chptrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHSEIN_64 :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chsein_64 :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHSEQR_64 :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chseqr_64 :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLABRD_64 :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

clabrd_64 :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

CLACGV_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;
clacgv_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CLACN2_64 :: (n: *s64, v: *MKL_Complex8, x: *MKL_Complex8, est: *float, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

clacn2_64 :: (n: *s64, v: *MKL_Complex8, x: *MKL_Complex8, est: *float, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

CLACON_64 :: (n: *s64, v: *MKL_Complex8, x: *MKL_Complex8, est: *float, kase: *s64) -> void #foreign mkl_intel_ilp64;

clacon_64 :: (n: *s64, v: *MKL_Complex8, x: *MKL_Complex8, est: *float, kase: *s64) -> void #foreign mkl_intel_ilp64;

CLACP2_64 :: (uplo: *u8, m: *s64, n: *s64, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

clacp2_64 :: (uplo: *u8, m: *s64, n: *s64, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CLACPY_64 :: (uplo: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

clacpy_64 :: (uplo: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CLACRM_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *float, ldb: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float) -> void #foreign mkl_intel_ilp64;

clacrm_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *float, ldb: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float) -> void #foreign mkl_intel_ilp64;

CLACRT_64 :: (n: *s64, cx: *MKL_Complex8, incx: *s64, cy: *MKL_Complex8, incy: *s64, c: *MKL_Complex8, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clacrt_64 :: (n: *s64, cx: *MKL_Complex8, incx: *s64, cy: *MKL_Complex8, incy: *s64, c: *MKL_Complex8, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLADIV_64 :: (ret_value: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

cladiv_64 :: (ret_value: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLAED0_64 :: (qsiz: *s64, n: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, qstore: *MKL_Complex8, ldqs: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claed0_64 :: (qsiz: *s64, n: *s64, d: *float, e: *float, q: *MKL_Complex8, ldq: *s64, qstore: *MKL_Complex8, ldqs: *s64, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAED7_64 :: (n: *s64, cutpnt: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float, q: *MKL_Complex8, ldq: *s64, rho: *float, indxq: *s64, qstore: *float, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claed7_64 :: (n: *s64, cutpnt: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float, q: *MKL_Complex8, ldq: *s64, rho: *float, indxq: *s64, qstore: *float, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAED8_64 :: (k: *s64, n: *s64, qsiz: *s64, q: *MKL_Complex8, ldq: *s64, d: *float, rho: *float, cutpnt: *s64, z: *float, dlamda: *float, q2: *MKL_Complex8, ldq2: *s64, w: *float, indxp: *s64, indx: *s64, indxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

claed8_64 :: (k: *s64, n: *s64, qsiz: *s64, q: *MKL_Complex8, ldq: *s64, d: *float, rho: *float, cutpnt: *s64, z: *float, dlamda: *float, q2: *MKL_Complex8, ldq2: *s64, w: *float, indxp: *s64, indx: *s64, indxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAEIN_64 :: (rightv: *s64, noinit: *s64, n: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, v: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, rwork: *float, eps3: *float, smlnum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

claein_64 :: (rightv: *s64, noinit: *s64, n: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, v: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, rwork: *float, eps3: *float, smlnum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAG2Z_64 :: (m: *s64, n: *s64, sa: *MKL_Complex8, ldsa: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clag2z_64 :: (m: *s64, n: *s64, sa: *MKL_Complex8, ldsa: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAGS2_64 :: (upper: *s64, a1: *float, a2: *MKL_Complex8, a3: *float, b1: *float, b2: *MKL_Complex8, b3: *float, csu: *float, snu: *MKL_Complex8, csv: *float, snv: *MKL_Complex8, csq: *float, snq: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clags2_64 :: (upper: *s64, a1: *float, a2: *MKL_Complex8, a3: *float, b1: *float, b2: *MKL_Complex8, b3: *float, csu: *float, snu: *MKL_Complex8, csv: *float, snv: *MKL_Complex8, csq: *float, snq: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLAGTM_64 :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, beta: *float, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

clagtm_64 :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, beta: *float, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CLAHEF_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clahef_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAHQR_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clahqr_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAHR2_64 :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

clahr2_64 :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

CLAHRD_64 :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

clahrd_64 :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64, y: *MKL_Complex8, ldy: *s64) -> void #foreign mkl_intel_ilp64;

CLAIC1_64 :: (job: *s64, j: *s64, x: *MKL_Complex8, sest: *float, w: *MKL_Complex8, gamma: *MKL_Complex8, sestpr: *float, s: *MKL_Complex8, c: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

claic1_64 :: (job: *s64, j: *s64, x: *MKL_Complex8, sest: *float, w: *MKL_Complex8, gamma: *MKL_Complex8, sestpr: *float, s: *MKL_Complex8, c: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLALS0_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *MKL_Complex8, ldb: *s64, bx: *MKL_Complex8, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

clals0_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *MKL_Complex8, ldb: *s64, bx: *MKL_Complex8, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLALSA_64 :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *MKL_Complex8, ldb: *s64, bx: *MKL_Complex8, ldbx: *s64, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clalsa_64 :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *MKL_Complex8, ldb: *s64, bx: *MKL_Complex8, ldbx: *s64, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLALSD_64 :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float, e: *float, b: *MKL_Complex8, ldb: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clalsd_64 :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float, e: *float, b: *MKL_Complex8, ldb: *s64, rcond: *float, rank: *s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLANGB_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clangb_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANGE_64 :: (norm: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clange_64 :: (norm: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANGT_64 :: (norm: *u8, n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;

clangt_64 :: (norm: *u8, n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;

CLANHB_64 :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clanhb_64 :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANHE_64 :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clanhe_64 :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANHF_64 :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

clanhf_64 :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

CLANHP_64 :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

clanhp_64 :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

CLANHS_64 :: (norm: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clanhs_64 :: (norm: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANHT_64 :: (norm: *u8, n: *s64, d: *float, e: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;

clanht_64 :: (norm: *u8, n: *s64, d: *float, e: *MKL_Complex8) -> float #foreign mkl_intel_ilp64;

CLANSB_64 :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clansb_64 :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANSP_64 :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

clansp_64 :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

CLANSY_64 :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clansy_64 :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANTB_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clantb_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *MKL_Complex8, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLANTP_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

clantp_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, work: *float) -> float #foreign mkl_intel_ilp64;

CLANTR_64 :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

clantr_64 :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLAPLL_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, ssmin: *float) -> void #foreign mkl_intel_ilp64;

clapll_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, ssmin: *float) -> void #foreign mkl_intel_ilp64;

CLAPMT_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex8, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

clapmt_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex8, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

CLAQGB_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqgb_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQGE_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqge_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQHB_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqhb_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQHE_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqhe_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQHP_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqhp_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQP2_64 :: (m: *s64, n: *s64, offset: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, vn1: *float, vn2: *float, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

claqp2_64 :: (m: *s64, n: *s64, offset: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, vn1: *float, vn2: *float, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLAQPS_64 :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, vn1: *float, vn2: *float, auxv: *MKL_Complex8, f: *MKL_Complex8, ldf: *s64) -> void #foreign mkl_intel_ilp64;

claqps_64 :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, jpvt: *s64, tau: *MKL_Complex8, vn1: *float, vn2: *float, auxv: *MKL_Complex8, f: *MKL_Complex8, ldf: *s64) -> void #foreign mkl_intel_ilp64;

CLAQR0_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqr0_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAQR1_64 :: (n: *s64, h: *MKL_Complex8, ldh: *s64, s1: *MKL_Complex8, s2: *MKL_Complex8, v: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

claqr1_64 :: (n: *s64, h: *MKL_Complex8, ldh: *s64, s1: *MKL_Complex8, s2: *MKL_Complex8, v: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLAQR2_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex8, v: *MKL_Complex8, ldv: *s64, nh: *s64, t: *MKL_Complex8, ldt: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, work: *MKL_Complex8, lwork: *s64) -> void #foreign mkl_intel_ilp64;

claqr2_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex8, v: *MKL_Complex8, ldv: *s64, nh: *s64, t: *MKL_Complex8, ldt: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, work: *MKL_Complex8, lwork: *s64) -> void #foreign mkl_intel_ilp64;

CLAQR3_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex8, v: *MKL_Complex8, ldv: *s64, nh: *s64, t: *MKL_Complex8, ldt: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, work: *MKL_Complex8, lwork: *s64) -> void #foreign mkl_intel_ilp64;

claqr3_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex8, v: *MKL_Complex8, ldv: *s64, nh: *s64, t: *MKL_Complex8, ldt: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, work: *MKL_Complex8, lwork: *s64) -> void #foreign mkl_intel_ilp64;

CLAQR4_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqr4_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex8, ldh: *s64, w: *MKL_Complex8, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAQR5_64 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, s: *MKL_Complex8, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, v: *MKL_Complex8, ldv: *s64, u: *MKL_Complex8, ldu: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, nh: *s64, wh: *MKL_Complex8, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

claqr5_64 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, s: *MKL_Complex8, h: *MKL_Complex8, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex8, ldz: *s64, v: *MKL_Complex8, ldv: *s64, u: *MKL_Complex8, ldu: *s64, nv: *s64, wv: *MKL_Complex8, ldwv: *s64, nh: *s64, wh: *MKL_Complex8, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

CLAQSB_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqsb_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQSP_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqsp_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQSY_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

claqsy_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

CLAQZ0_64 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqz0_64 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAQZ1_64 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, nq: *s64, qstart: *s64, q: *MKL_Complex8, ldq: *s64, nz: *s64, zstart: *s64, z: *MKL_Complex8, ldz: *s64) -> void #foreign mkl_intel_ilp64;

claqz1_64 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, nq: *s64, qstart: *s64, q: *MKL_Complex8, ldq: *s64, nz: *s64, zstart: *s64, z: *MKL_Complex8, ldz: *s64) -> void #foreign mkl_intel_ilp64;

CLAQZ2_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, qc: *MKL_Complex8, ldqc: *s64, zc: *MKL_Complex8, ldzc: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqz2_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, ns: *s64, nd: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, qc: *MKL_Complex8, ldqc: *s64, zc: *MKL_Complex8, ldzc: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAQZ3_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, qc: *MKL_Complex8, ldqc: *s64, zc: *MKL_Complex8, ldzc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

claqz3_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, qc: *MKL_Complex8, ldqc: *s64, zc: *MKL_Complex8, ldzc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAR1V_64 :: (n: *s64, b1: *s64, bn: *s64, lambda: *float, d: *float, l: *float, ld: *float, lld: *float, pivmin: *float, gaptol: *float, z: *MKL_Complex8, wantnc: *s64, negcnt: *s64, ztz: *float, mingma: *float, r: *s64, isuppz: *s64, nrminv: *float, resid: *float, rqcorr: *float, work: *float) -> void #foreign mkl_intel_ilp64;

clar1v_64 :: (n: *s64, b1: *s64, bn: *s64, lambda: *float, d: *float, l: *float, ld: *float, lld: *float, pivmin: *float, gaptol: *float, z: *MKL_Complex8, wantnc: *s64, negcnt: *s64, ztz: *float, mingma: *float, r: *s64, isuppz: *s64, nrminv: *float, resid: *float, rqcorr: *float, work: *float) -> void #foreign mkl_intel_ilp64;

CLAR2V_64 :: (n: *s64, x: *MKL_Complex8, y: *MKL_Complex8, z: *MKL_Complex8, incx: *s64, c: *float, s: *MKL_Complex8, incc: *s64) -> void #foreign mkl_intel_ilp64;

clar2v_64 :: (n: *s64, x: *MKL_Complex8, y: *MKL_Complex8, z: *MKL_Complex8, incx: *s64, c: *float, s: *MKL_Complex8, incc: *s64) -> void #foreign mkl_intel_ilp64;

CLARCM_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float) -> void #foreign mkl_intel_ilp64;

clarcm_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, rwork: *float) -> void #foreign mkl_intel_ilp64;

CLARFB_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

clarfb_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

CLARF_64 :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarf_64 :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARFG_64 :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfg_64 :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARFGP_64 :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfgp_64 :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARFP_64 :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfp_64 :: (n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, tau: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARFT_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64) -> void #foreign mkl_intel_ilp64;

clarft_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64) -> void #foreign mkl_intel_ilp64;

CLARFX_64 :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarfx_64 :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARGV_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

clargv_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

CLARNV_64 :: (idist: *s64, iseed: *s64, n: *s64, x: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarnv_64 :: (idist: *s64, iseed: *s64, n: *s64, x: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARRV_64 :: (n: *s64, vl: *float, vu: *float, d: *float, l: *float, pivmin: *float, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float, rtol1: *float, rtol2: *float, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clarrv_64 :: (n: *s64, vl: *float, vu: *float, d: *float, l: *float, pivmin: *float, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float, rtol1: *float, rtol2: *float, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLARSCL2_64 :: (m: *s64, n: *s64, d: *float, x: *MKL_Complex8, ldx: *s64) -> void #foreign mkl_intel_ilp64;

clarscl2_64 :: (m: *s64, n: *s64, d: *float, x: *MKL_Complex8, ldx: *s64) -> void #foreign mkl_intel_ilp64;

CLARTV_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, s: *MKL_Complex8, incc: *s64) -> void #foreign mkl_intel_ilp64;

clartv_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, y: *MKL_Complex8, incy: *s64, c: *float, s: *MKL_Complex8, incc: *s64) -> void #foreign mkl_intel_ilp64;

CLARZB_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

clarzb_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

CLARZ_64 :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarz_64 :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLARZT_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64) -> void #foreign mkl_intel_ilp64;

clarzt_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex8, ldv: *s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: *s64) -> void #foreign mkl_intel_ilp64;

CLASCL_64 :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float, cto: *float, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clascl_64 :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float, cto: *float, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLASCL2_64 :: (m: *s64, n: *s64, d: *float, x: *MKL_Complex8, ldx: *s64) -> void #foreign mkl_intel_ilp64;

clascl2_64 :: (m: *s64, n: *s64, d: *float, x: *MKL_Complex8, ldx: *s64) -> void #foreign mkl_intel_ilp64;

CLASET_64 :: (uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

claset_64 :: (uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CLASR_64 :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float, s: *float, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

clasr_64 :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float, s: *float, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CLASSQ_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, scale: *float, sumsq: *float) -> void #foreign mkl_intel_ilp64;

classq_64 :: (n: *s64, x: *MKL_Complex8, incx: *s64, scale: *float, sumsq: *float) -> void #foreign mkl_intel_ilp64;

CLASWP_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

claswp_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

CLASYF_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clasyf_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, w: *MKL_Complex8, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATBS_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

clatbs_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATDF_64 :: (ijob: *s64, n: *s64, z: *MKL_Complex8, ldz: *s64, rhs: *MKL_Complex8, rdsum: *float, rdscal: *float, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

clatdf_64 :: (ijob: *s64, n: *s64, z: *MKL_Complex8, ldz: *s64, rhs: *MKL_Complex8, rdsum: *float, rdscal: *float, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

CLATPS_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *MKL_Complex8, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

clatps_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *MKL_Complex8, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATRD_64 :: (uplo: *u8, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, e: *float, tau: *MKL_Complex8, w: *MKL_Complex8, ldw: *s64) -> void #foreign mkl_intel_ilp64;

clatrd_64 :: (uplo: *u8, n: *s64, nb: *s64, a: *MKL_Complex8, lda: *s64, e: *float, tau: *MKL_Complex8, w: *MKL_Complex8, ldw: *s64) -> void #foreign mkl_intel_ilp64;

CLATRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

clatrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATRZ_64 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clatrz_64 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLATZM_64 :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c1: *MKL_Complex8, c2: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clatzm_64 :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex8, incv: *s64, tau: *MKL_Complex8, c1: *MKL_Complex8, c2: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CLAUU2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clauu2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAUUM_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clauum_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBCON_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbcon_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBEQU_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbequ_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBRFS_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbrfs_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBSTF_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbstf_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBSV_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbsv_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBTF2_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbtf2_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBTRF_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbtrf_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPBTRS_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpbtrs_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPFTRF_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cpftrf_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CPFTRI_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cpftri_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CPFTRS_64 :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpftrs_64 :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOCON_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpocon_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOEQUB_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpoequb_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOEQU_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpoequ_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPORFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cporfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPORFSX_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cporfsx_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cposv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cposvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOSVXX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cposvxx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOTF2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotf2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOTRF_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotrf_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOTRI_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotri_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPOTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpotrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPCON_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cppcon_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, anorm: *float, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPEQU_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cppequ_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpprfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cppsv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cppsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPTRF_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cpptrf_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPTRI_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cpptri_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CPPTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpptrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPSTF2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpstf2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPSTRF_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpstrf_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTCON_64 :: (n: *s64, d: *float, e: *MKL_Complex8, anorm: *float, rcond: *float, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cptcon_64 :: (n: *s64, d: *float, e: *MKL_Complex8, anorm: *float, rcond: *float, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTEQR_64 :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cpteqr_64 :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cptrfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTSV_64 :: (n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cptsv_64 :: (n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTSVX_64 :: (fact: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cptsvx_64 :: (fact: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTTRF_64 :: (n: *s64, d: *float, e: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;
cpttrf_64 :: (n: *s64, d: *float, e: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cpttrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CPTTS2_64 :: (iuplo: *s64, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

cptts2_64 :: (iuplo: *s64, n: *s64, nrhs: *s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CROT_64 :: (n: *s64, cx: *MKL_Complex8, incx: *s64, cy: *MKL_Complex8, incy: *s64, c: *float, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

crot_64 :: (n: *s64, cx: *MKL_Complex8, incx: *s64, cy: *MKL_Complex8, incy: *s64, c: *float, s: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CSPCON_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cspcon_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSPMV_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

cspmv_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, ap: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CSPR_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, ap: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

cspr_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, ap: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CSPRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csprfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSPSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cspsv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSPSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cspsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSPTRF_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csptrf_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSPTRI_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csptri_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSPTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csptrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSRSCL_64 :: (n: *s64, sa: *float, sx: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

csrscl_64 :: (n: *s64, sa: *float, sx: *MKL_Complex8, incx: *s64) -> void #foreign mkl_intel_ilp64;

CSTEDC_64 :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cstedc_64 :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, rwork: *float, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSTEGR_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cstegr_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSTEIN_64 :: (n: *s64, d: *float, e: *float, m: *s64, w: *float, iblock: *s64, isplit: *s64, z: *MKL_Complex8, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cstein_64 :: (n: *s64, d: *float, e: *float, m: *s64, w: *float, iblock: *s64, isplit: *s64, z: *MKL_Complex8, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSTEMR_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cstemr_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, m: *s64, w: *float, z: *MKL_Complex8, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSTEQR_64 :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csteqr_64 :: (compz: *u8, n: *s64, d: *float, e: *float, z: *MKL_Complex8, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYCON_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csycon_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYEQUB_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csyequb_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, s: *float, scond: *float, amax: *float, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYMV_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

csymv_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *MKL_Complex8, y: *MKL_Complex8, incy: *s64) -> void #foreign mkl_intel_ilp64;

CSYR_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

csyr_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: *s64, a: *MKL_Complex8, lda: *s64) -> void #foreign mkl_intel_ilp64;

CSYRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csyrfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYRFSX_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csyrfsx_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csysv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csysvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, lwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYSVXX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

csysvxx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTF2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytf2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRF_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrf_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRI_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

csytri_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CSYTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

csytrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTBCON_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctbcon_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *MKL_Complex8, ldab: *s64, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTBRFS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctbrfs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTBTRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctbtrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTFSM_64 :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ctfsm_64 :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex8, a: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64) -> void #foreign mkl_intel_ilp64;

CTFTRI_64 :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctftri_64 :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTFTTP_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex8, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctfttp_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex8, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTFTTR_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctfttr_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGEVC_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *MKL_Complex8, lds: *s64, p: *MKL_Complex8, ldp: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgevc_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *MKL_Complex8, lds: *s64, p: *MKL_Complex8, ldp: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGEX2_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, j1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgex2_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, j1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGEXC_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgexc_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGSEN_64 :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, m: *s64, pl: *float, pr: *float, dif: *float, work: *MKL_Complex8, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsen_64 :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, z: *MKL_Complex8, ldz: *s64, m: *s64, pl: *float, pr: *float, dif: *float, work: *MKL_Complex8, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGSJA_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsja_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, tola: *float, tolb: *float, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: *s64, v: *MKL_Complex8, ldv: *s64, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGSNA_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, s: *float, dif: *float, mm: *s64, m: *s64, work: *MKL_Complex8, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsna_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, s: *float, dif: *float, mm: *s64, m: *s64, work: *MKL_Complex8, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGSY2_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, scale: *float, rdsum: *float, rdscal: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsy2_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, scale: *float, rdsum: *float, rdscal: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTGSYL_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, scale: *float, dif: *float, work: *MKL_Complex8, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctgsyl_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, scale: *float, dif: *float, work: *MKL_Complex8, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPCON_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpcon_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPRFS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctprfs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPTRI_64 :: (uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctptri_64 :: (uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPTRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctptrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPTTF_64 :: (transr: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, arf: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpttf_64 :: (transr: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex8, arf: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTPTTR_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctpttr_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRCON_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrcon_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, rcond: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTREVC_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrevc_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTREXC_64 :: (compq: *u8, n: *s64, t: *MKL_Complex8, ldt: *s64, q: *MKL_Complex8, ldq: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrexc_64 :: (compq: *u8, n: *s64, t: *MKL_Complex8, ldt: *s64, q: *MKL_Complex8, ldq: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRRFS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrrfs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, x: *MKL_Complex8, ldx: *s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRSEN_64 :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, q: *MKL_Complex8, ldq: *s64, w: *MKL_Complex8, m: *s64, s: *float, sep: *float, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrsen_64 :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, q: *MKL_Complex8, ldq: *s64, w: *MKL_Complex8, m: *s64, s: *float, sep: *float, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRSNA_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, s: *float, sep: *float, mm: *s64, m: *s64, work: *MKL_Complex8, ldwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrsna_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex8, ldt: *s64, vl: *MKL_Complex8, ldvl: *s64, vr: *MKL_Complex8, ldvr: *s64, s: *float, sep: *float, mm: *s64, m: *s64, work: *MKL_Complex8, ldwork: *s64, rwork: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRSYL_64 :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrsyl_64 :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRTI2_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrti2_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRTRI_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrtri_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRTRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrtrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRTTF_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, arf: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrttf_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, arf: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTRTTP_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctrttp_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ap: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTZRQF_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ctzrqf_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CTZRZF_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ctzrzf_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNG2L_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cung2l_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNG2R_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cung2r_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGBR_64 :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungbr_64 :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGHR_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunghr_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGL2_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cungl2_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGLQ_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunglq_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGQL_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungql_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGQR_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungqr_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGR2_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cungr2_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGRQ_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungrq_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNGTR_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cungtr_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNM2L_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunm2l_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNM2R_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunm2r_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMBR_64 :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmbr_64 :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMHR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmhr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNML2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunml2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMLQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmlq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMQL_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmql_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMQR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmqr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMR2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmr2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMR3_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmr3_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMRQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmrq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMRZ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmrz_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUNMTR_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cunmtr_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CUPGTR_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, tau: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cupgtr_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex8, tau: *MKL_Complex8, q: *MKL_Complex8, ldq: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CUPMTR_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *MKL_Complex8, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cupmtr_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *MKL_Complex8, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DBDSDC_64 :: (uplo: *u8, compq: *u8, n: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, q: *float64, iq: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dbdsdc_64 :: (uplo: *u8, compq: *u8, n: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, q: *float64, iq: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DBDSQR_64 :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *float64, ldvt: *s64, u: *float64, ldu: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dbdsqr_64 :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *float64, ldvt: *s64, u: *float64, ldu: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DDISNA_64 :: (job: *u8, m: *s64, n: *s64, d: *float64, sep: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ddisna_64 :: (job: *u8, m: *s64, n: *s64, d: *float64, sep: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBBRD_64 :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, pt: *float64, ldpt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbbrd_64 :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, pt: *float64, ldpt: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBCON_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbcon_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBEQUB_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbequb_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBEQU_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbequ_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBRFS_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbrfs_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBRFSX_64 :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbrfsx_64 :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBSV_64 :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbsv_64 :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBSVX_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbsvx_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBSVXX_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbsvxx_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBTF2_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbtf2_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBTRF_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbtrf_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGBTRS_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgbtrs_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEBAK_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float64, m: *s64, v: *float64, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgebak_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float64, m: *s64, v: *float64, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEBAL_64 :: (job: *u8, n: *s64, a: *float64, lda: *s64, ilo: *s64, ihi: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgebal_64 :: (job: *u8, n: *s64, a: *float64, lda: *s64, ilo: *s64, ihi: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEBD2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgebd2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEBRD_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgebrd_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGECON_64 :: (norm: *u8, n: *s64, a: *float64, lda: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgecon_64 :: (norm: *u8, n: *s64, a: *float64, lda: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEEQUB_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeequb_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEEQU_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeequ_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEES_64 :: (jobvs: *u8, sort: *u8, select: MKL_D_SELECT_FUNCTION_2_64, n: *s64, a: *float64, lda: *s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgees_64 :: (jobvs: *u8, sort: *u8, select: MKL_D_SELECT_FUNCTION_2_64, n: *s64, a: *float64, lda: *s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEESX_64 :: (jobvs: *u8, sort: *u8, select: MKL_D_SELECT_FUNCTION_2_64, sense: *u8, n: *s64, a: *float64, lda: *s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: *s64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeesx_64 :: (jobvs: *u8, sort: *u8, select: MKL_D_SELECT_FUNCTION_2_64, sense: *u8, n: *s64, a: *float64, lda: *s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: *s64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEEV_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeev_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEEVX_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float64, lda: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeevx_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float64, lda: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEGS_64 :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgegs_64 :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEGV_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgegv_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEHD2_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgehd2_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEHRD_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgehrd_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEJSV_64 :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, sva: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgejsv_64 :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, sva: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELQ2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelq2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELQF_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelqf_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELSD_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelsd_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELS_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgels_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELSS_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelss_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELSX_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelsx_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGELSY_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgelsy_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQL2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeql2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQLF_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqlf_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQP3_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqp3_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQPF_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqpf_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQR2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqr2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQR2P_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqr2p_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQRF_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrf_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGEQRFP_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrfp_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGERFS_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgerfs_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGERFSX_64 :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgerfsx_64 :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGERQ2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgerq2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGERQF_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgerqf_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESC2_64 :: (n: *s64, a: *float64, lda: *s64, rhs: *float64, ipiv: *s64, jpiv: *s64, scale: *float64) -> void #foreign mkl_intel_ilp64;

dgesc2_64 :: (n: *s64, a: *float64, lda: *s64, rhs: *float64, ipiv: *s64, jpiv: *s64, scale: *float64) -> void #foreign mkl_intel_ilp64;

DGESDD_64 :: (jobz: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesdd_64 :: (jobz: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESVD_64 :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvd_64 :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, s: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESV_64 :: (n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesv_64 :: (n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESVJ_64 :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvj_64 :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESVX_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvx_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGESVXX_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgesvxx_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETC2_64 :: (n: *s64, a: *float64, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetc2_64 :: (n: *s64, a: *float64, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETF2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetf2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRF_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrf_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRI_64 :: (n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetri_64 :: (n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGETRS_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgetrs_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGBAK_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, m: *s64, v: *float64, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggbak_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, m: *s64, v: *float64, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGBAL_64 :: (job: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggbal_64 :: (job: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGES_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3_64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgges_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3_64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, work: *float64, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGESX_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3_64, sense: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggesx_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_D_SELECT_FUNCTION_3_64, sense: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: *s64, vsr: *float64, ldvsr: *s64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGEV_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggev_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGEVX_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggevx_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64, work: *float64, lwork: *s64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGGLM_64 :: (n: *s64, m: *s64, p: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, d: *float64, x: *float64, y: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggglm_64 :: (n: *s64, m: *s64, p: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, d: *float64, x: *float64, y: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGHRD_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgghrd_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGLSE_64 :: (m: *s64, n: *s64, p: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, d: *float64, x: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgglse_64 :: (m: *s64, n: *s64, p: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, d: *float64, x: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGQRF_64 :: (n: *s64, m: *s64, p: *s64, a: *float64, lda: *s64, taua: *float64, b: *float64, ldb: *s64, taub: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggqrf_64 :: (n: *s64, m: *s64, p: *s64, a: *float64, lda: *s64, taua: *float64, b: *float64, ldb: *s64, taub: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGRQF_64 :: (m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, taua: *float64, b: *float64, ldb: *s64, taub: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggrqf_64 :: (m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, taua: *float64, b: *float64, ldb: *s64, taub: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGSVD_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggsvd_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGGSVP_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, iwork: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dggsvp_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, iwork: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGSVJ0_64 :: (jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgsvj0_64 :: (jobv: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, d: *float64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGSVJ1_64 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *float64, lda: *s64, d: *float64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgsvj1_64 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *float64, lda: *s64, d: *float64, sva: *float64, mv: *s64, v: *float64, ldv: *s64, eps: *float64, sfmin: *float64, tol: *float64, nsweep: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTCON_64 :: (norm: *u8, n: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgtcon_64 :: (norm: *u8, n: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTRFS_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgtrfs_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTSV_64 :: (n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgtsv_64 :: (n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTSVX_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgtsvx_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTTRF_64 :: (n: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgttrf_64 :: (n: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTTRS_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgttrs_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DGTTS2_64 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dgtts2_64 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DHGEQZ_64 :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, t: *float64, ldt: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dhgeqz_64 :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, t: *float64, ldt: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DHSEIN_64 :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dhsein_64 :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DHSEQR_64 :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dhseqr_64 :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLABRD_64 :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, x: *float64, ldx: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

dlabrd_64 :: (m: *s64, n: *s64, nb: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, x: *float64, ldx: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

DLACN2_64 :: (n: *s64, v: *float64, x: *float64, isgn: *s64, est: *float64, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

dlacn2_64 :: (n: *s64, v: *float64, x: *float64, isgn: *s64, est: *float64, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

DLACON_64 :: (n: *s64, v: *float64, x: *float64, isgn: *s64, est: *float64, kase: *s64) -> void #foreign mkl_intel_ilp64;

dlacon_64 :: (n: *s64, v: *float64, x: *float64, isgn: *s64, est: *float64, kase: *s64) -> void #foreign mkl_intel_ilp64;

DLACPY_64 :: (uplo: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dlacpy_64 :: (uplo: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DLAEBZ_64 :: (ijob: *s64, nitmax: *s64, n: *s64, mmax: *s64, minp: *s64, nbmin: *s64, abstol: *float64, reltol: *float64, pivmin: *float64, d: *float64, e: *float64, e2: *float64, nval: *s64, ab: *float64, c: *float64, mout: *s64, nab: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaebz_64 :: (ijob: *s64, nitmax: *s64, n: *s64, mmax: *s64, minp: *s64, nbmin: *s64, abstol: *float64, reltol: *float64, pivmin: *float64, d: *float64, e: *float64, e2: *float64, nval: *s64, ab: *float64, c: *float64, mout: *s64, nab: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED0_64 :: (icompq: *s64, qsiz: *s64, n: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, qstore: *float64, ldqs: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed0_64 :: (icompq: *s64, qsiz: *s64, n: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, qstore: *float64, ldqs: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED1_64 :: (n: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed1_64 :: (n: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED2_64 :: (k: *s64, n: *s64, n1: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, z: *float64, dlamda: *float64, w: *float64, q2: *float64, indx: *s64, indxc: *s64, indxp: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed2_64 :: (k: *s64, n: *s64, n1: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, z: *float64, dlamda: *float64, w: *float64, q2: *float64, indx: *s64, indxc: *s64, indxp: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED3_64 :: (k: *s64, n: *s64, n1: *s64, d: *float64, q: *float64, ldq: *s64, rho: *float64, dlamda: *float64, q2: *float64, indx: *s64, ctot: *s64, w: *float64, s: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed3_64 :: (k: *s64, n: *s64, n1: *s64, d: *float64, q: *float64, ldq: *s64, rho: *float64, dlamda: *float64, q2: *float64, indx: *s64, ctot: *s64, w: *float64, s: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED4_64 :: (n: *s64, i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dlam: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed4_64 :: (n: *s64, i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dlam: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED5_64 :: (i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dlam: *float64) -> void #foreign mkl_intel_ilp64;

dlaed5_64 :: (i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dlam: *float64) -> void #foreign mkl_intel_ilp64;

DLAED6_64 :: (kniter: *s64, orgati: *s64, rho: *float64, d: *float64, z: *float64, finit: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed6_64 :: (kniter: *s64, orgati: *s64, rho: *float64, d: *float64, z: *float64, finit: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED7_64 :: (icompq: *s64, n: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, qstore: *float64, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed7_64 :: (icompq: *s64, n: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, qstore: *float64, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED8_64 :: (icompq: *s64, k: *s64, n: *s64, qsiz: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, z: *float64, dlamda: *float64, q2: *float64, ldq2: *s64, w: *float64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, indxp: *s64, indx: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed8_64 :: (icompq: *s64, k: *s64, n: *s64, qsiz: *s64, d: *float64, q: *float64, ldq: *s64, indxq: *s64, rho: *float64, cutpnt: *s64, z: *float64, dlamda: *float64, q2: *float64, ldq2: *s64, w: *float64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, indxp: *s64, indx: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAED9_64 :: (k: *s64, kstart: *s64, kstop: *s64, n: *s64, d: *float64, q: *float64, ldq: *s64, rho: *float64, dlamda: *float64, w: *float64, s: *float64, lds: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaed9_64 :: (k: *s64, kstart: *s64, kstop: *s64, n: *s64, d: *float64, q: *float64, ldq: *s64, rho: *float64, dlamda: *float64, w: *float64, s: *float64, lds: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAEDA_64 :: (n: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, q: *float64, qptr: *s64, z: *float64, ztemp: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaeda_64 :: (n: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, q: *float64, qptr: *s64, z: *float64, ztemp: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAEIN_64 :: (rightv: *s64, noinit: *s64, n: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, vr: *float64, vi: *float64, b: *float64, ldb: *s64, work: *float64, eps3: *float64, smlnum: *float64, bignum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaein_64 :: (rightv: *s64, noinit: *s64, n: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, vr: *float64, vi: *float64, b: *float64, ldb: *s64, work: *float64, eps3: *float64, smlnum: *float64, bignum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAEXC_64 :: (wantq: *s64, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaexc_64 :: (wantq: *s64, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAG2_64 :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, safmin: *float64, scale1: *float64, scale2: *float64, wr1: *float64, wr2: *float64, wi: *float64) -> void #foreign mkl_intel_ilp64;

dlag2_64 :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, safmin: *float64, scale1: *float64, scale2: *float64, wr1: *float64, wr2: *float64, wi: *float64) -> void #foreign mkl_intel_ilp64;

DLAG2S_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, sa: *float, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlag2s_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, sa: *float, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAGS2_64 :: (upper: *s64, a1: *float64, a2: *float64, a3: *float64, b1: *float64, b2: *float64, b3: *float64, csu: *float64, snu: *float64, csv: *float64, snv: *float64, csq: *float64, snq: *float64) -> void #foreign mkl_intel_ilp64;

dlags2_64 :: (upper: *s64, a1: *float64, a2: *float64, a3: *float64, b1: *float64, b2: *float64, b3: *float64, csu: *float64, snu: *float64, csv: *float64, snv: *float64, csq: *float64, snq: *float64) -> void #foreign mkl_intel_ilp64;

DLAGTF_64 :: (n: *s64, a: *float64, lambda: *float64, b: *float64, c: *float64, tol: *float64, d: *float64, in: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlagtf_64 :: (n: *s64, a: *float64, lambda: *float64, b: *float64, c: *float64, tol: *float64, d: *float64, in: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAGTM_64 :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float64, dl: *float64, d: *float64, du: *float64, x: *float64, ldx: *s64, beta: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dlagtm_64 :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float64, dl: *float64, d: *float64, du: *float64, x: *float64, ldx: *s64, beta: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DLAGTS_64 :: (job: *s64, n: *s64, a: *float64, b: *float64, c: *float64, d: *float64, in: *s64, y: *float64, tol: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlagts_64 :: (job: *s64, n: *s64, a: *float64, b: *float64, c: *float64, d: *float64, in: *s64, y: *float64, tol: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAGV2_64 :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, csl: *float64, snl: *float64, csr: *float64, snr: *float64) -> void #foreign mkl_intel_ilp64;

dlagv2_64 :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, csl: *float64, snl: *float64, csr: *float64, snr: *float64) -> void #foreign mkl_intel_ilp64;

DLAHQR_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlahqr_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAHR2_64 :: (n: *s64, k: *s64, nb: *s64, a: *float64, lda: *s64, tau: *float64, t: *float64, ldt: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

dlahr2_64 :: (n: *s64, k: *s64, nb: *s64, a: *float64, lda: *s64, tau: *float64, t: *float64, ldt: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

DLAHRD_64 :: (n: *s64, k: *s64, nb: *s64, a: *float64, lda: *s64, tau: *float64, t: *float64, ldt: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

dlahrd_64 :: (n: *s64, k: *s64, nb: *s64, a: *float64, lda: *s64, tau: *float64, t: *float64, ldt: *s64, y: *float64, ldy: *s64) -> void #foreign mkl_intel_ilp64;

DLAIC1_64 :: (job: *s64, j: *s64, x: *float64, sest: *float64, w: *float64, gamma: *float64, sestpr: *float64, s: *float64, c: *float64) -> void #foreign mkl_intel_ilp64;

dlaic1_64 :: (job: *s64, j: *s64, x: *float64, sest: *float64, w: *float64, gamma: *float64, sestpr: *float64, s: *float64, c: *float64) -> void #foreign mkl_intel_ilp64;

DLALN2_64 :: (ltrans: *s64, na: *s64, nw: *s64, smin: *float64, ca: *float64, a: *float64, lda: *s64, d1: *float64, d2: *float64, b: *float64, ldb: *s64, wr: *float64, wi: *float64, x: *float64, ldx: *s64, scale: *float64, xnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaln2_64 :: (ltrans: *s64, na: *s64, nw: *s64, smin: *float64, ca: *float64, a: *float64, lda: *s64, d1: *float64, d2: *float64, b: *float64, ldb: *s64, wr: *float64, wi: *float64, x: *float64, ldx: *s64, scale: *float64, xnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLALS0_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *float64, ldb: *s64, bx: *float64, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlals0_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *float64, ldb: *s64, bx: *float64, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLALSA_64 :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *float64, ldb: *s64, bx: *float64, ldbx: *s64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlalsa_64 :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *float64, ldb: *s64, bx: *float64, ldbx: *s64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLALSD_64 :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, rcond: *float64, rank: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlalsd_64 :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, rcond: *float64, rank: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAMC1_64 :: (beta: *s64, t: *s64, rnd: *s64, ieee1: *s64) -> void #foreign mkl_intel_ilp64;
dlamc1_64 :: (beta: *s64, t: *s64, rnd: *s64, ieee1: *s64) -> void #foreign mkl_intel_ilp64;

DLAMC2_64 :: (beta: *s64, t: *s64, rnd: *s64, eps: *float64, emin: *s64, rmin: *float64, emax: *s64, rmax: *float64) -> void #foreign mkl_intel_ilp64;

dlamc2_64 :: (beta: *s64, t: *s64, rnd: *s64, eps: *float64, emin: *s64, rmin: *float64, emax: *s64, rmax: *float64) -> void #foreign mkl_intel_ilp64;

DLAMC4_64 :: (emin: *s64, start: *float64, base: *s64) -> void #foreign mkl_intel_ilp64;
dlamc4_64 :: (emin: *s64, start: *float64, base: *s64) -> void #foreign mkl_intel_ilp64;

DLAMC5_64 :: (beta: *s64, p: *s64, emin: *s64, ieee: *s64, emax: *s64, rmax: *float64) -> void #foreign mkl_intel_ilp64;

dlamc5_64 :: (beta: *s64, p: *s64, emin: *s64, ieee: *s64, emax: *s64, rmax: *float64) -> void #foreign mkl_intel_ilp64;

DLAMRG_64 :: (n1: *s64, n2: *s64, a: *float64, dtrd1: *s64, dtrd2: *s64, index: *s64) -> void #foreign mkl_intel_ilp64;

dlamrg_64 :: (n1: *s64, n2: *s64, a: *float64, dtrd1: *s64, dtrd2: *s64, index: *s64) -> void #foreign mkl_intel_ilp64;

DLANEG_64 :: (n: *s64, d: *float64, lld: *float64, sigma: *float64, pivmin: *float64, r: *s64) -> s64 #foreign mkl_intel_ilp64;

dlaneg_64 :: (n: *s64, d: *float64, lld: *float64, sigma: *float64, pivmin: *float64, r: *s64) -> s64 #foreign mkl_intel_ilp64;

DLANGB_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlangb_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANGE_64 :: (norm: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlange_64 :: (norm: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANGT_64 :: (norm: *u8, n: *s64, dl: *float64, d: *float64, du: *float64) -> float64 #foreign mkl_intel_ilp64;

dlangt_64 :: (norm: *u8, n: *s64, dl: *float64, d: *float64, du: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANHS_64 :: (norm: *u8, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlanhs_64 :: (norm: *u8, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANSB_64 :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlansb_64 :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANSF_64 :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlansf_64 :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANSP_64 :: (norm: *u8, uplo: *u8, n: *s64, ap: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlansp_64 :: (norm: *u8, uplo: *u8, n: *s64, ap: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANST_64 :: (norm: *u8, n: *s64, d: *float64, e: *float64) -> float64 #foreign mkl_intel_ilp64;

dlanst_64 :: (norm: *u8, n: *s64, d: *float64, e: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANSY_64 :: (norm: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlansy_64 :: (norm: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANTB_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlantb_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *float64, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANTP_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlantp_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLANTR_64 :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dlantr_64 :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLAPLL_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, ssmin: *float64) -> void #foreign mkl_intel_ilp64;

dlapll_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, ssmin: *float64) -> void #foreign mkl_intel_ilp64;

DLAPMT_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *float64, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

dlapmt_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *float64, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

DLAQGB_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqgb_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

DLAQGE_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqge_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

DLAQP2_64 :: (m: *s64, n: *s64, offset: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, vn1: *float64, vn2: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlaqp2_64 :: (m: *s64, n: *s64, offset: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, vn1: *float64, vn2: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLAQPS_64 :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, vn1: *float64, vn2: *float64, auxv: *float64, f: *float64, ldf: *s64) -> void #foreign mkl_intel_ilp64;

dlaqps_64 :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, jpvt: *s64, tau: *float64, vn1: *float64, vn2: *float64, auxv: *float64, f: *float64, ldf: *s64) -> void #foreign mkl_intel_ilp64;

DLAQR0_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr0_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAQR1_64 :: (n: *s64, h: *float64, ldh: *s64, sr1: *float64, si1: *float64, sr2: *float64, si2: *float64, v: *float64) -> void #foreign mkl_intel_ilp64;

dlaqr1_64 :: (n: *s64, h: *float64, ldh: *s64, sr1: *float64, si1: *float64, sr2: *float64, si2: *float64, v: *float64) -> void #foreign mkl_intel_ilp64;

DLAQR2_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, sr: *float64, si: *float64, v: *float64, ldv: *s64, nh: *s64, t: *float64, ldt: *s64, nv: *s64, wv: *float64, ldwv: *s64, work: *float64, lwork: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr2_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, sr: *float64, si: *float64, v: *float64, ldv: *s64, nh: *s64, t: *float64, ldt: *s64, nv: *s64, wv: *float64, ldwv: *s64, work: *float64, lwork: *s64) -> void #foreign mkl_intel_ilp64;

DLAQR3_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, sr: *float64, si: *float64, v: *float64, ldv: *s64, nh: *s64, t: *float64, ldt: *s64, nv: *s64, wv: *float64, ldwv: *s64, work: *float64, lwork: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr3_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, sr: *float64, si: *float64, v: *float64, ldv: *s64, nh: *s64, t: *float64, ldt: *s64, nv: *s64, wv: *float64, ldwv: *s64, work: *float64, lwork: *s64) -> void #foreign mkl_intel_ilp64;

DLAQR4_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr4_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float64, ldh: *s64, wr: *float64, wi: *float64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAQR5_64 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, sr: *float64, si: *float64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, v: *float64, ldv: *s64, u: *float64, ldu: *s64, nv: *s64, wv: *float64, ldwv: *s64, nh: *s64, wh: *float64, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

dlaqr5_64 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, sr: *float64, si: *float64, h: *float64, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float64, ldz: *s64, v: *float64, ldv: *s64, u: *float64, ldu: *s64, nv: *s64, wv: *float64, ldwv: *s64, nh: *s64, wh: *float64, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

DLAQSB_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqsb_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

DLAQSP_64 :: (uplo: *u8, n: *s64, ap: *float64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqsp_64 :: (uplo: *u8, n: *s64, ap: *float64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

DLAQSY_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

dlaqsy_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

DLAQTR_64 :: (ltran: *s64, lreal: *s64, n: *s64, t: *float64, ldt: *s64, b: *float64, w: *float64, scale: *float64, x: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqtr_64 :: (ltran: *s64, lreal: *s64, n: *s64, t: *float64, ldt: *s64, b: *float64, w: *float64, scale: *float64, x: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAQZ0_64 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqz0_64 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAQZ1_64 :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, sr1: *float64, sr2: *float64, si: *float64, beta1: *float64, beta2: *float64, v: *float64) -> void #foreign mkl_intel_ilp64;

dlaqz1_64 :: (a: *float64, lda: *s64, b: *float64, ldb: *s64, sr1: *float64, sr2: *float64, si: *float64, beta1: *float64, beta2: *float64, v: *float64) -> void #foreign mkl_intel_ilp64;

DLAQZ2_64 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, nq: *s64, qstart: *s64, q: *float64, ldq: *s64, nz: *s64, zstart: *s64, z: *float64, ldz: *s64) -> void #foreign mkl_intel_ilp64;

dlaqz2_64 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, nq: *s64, qstart: *s64, q: *float64, ldq: *s64, nz: *s64, zstart: *s64, z: *float64, ldz: *s64) -> void #foreign mkl_intel_ilp64;

DLAQZ3_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, alphar: *float64, alphai: *float64, beta: *float64, qc: *float64, ldqc: *s64, zc: *float64, ldzc: *s64, work: *float64, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqz3_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, ns: *s64, nd: *s64, alphar: *float64, alphai: *float64, beta: *float64, qc: *float64, ldqc: *s64, zc: *float64, ldzc: *s64, work: *float64, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAQZ4_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alphar: *float64, alphai: *float64, beta: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, qc: *float64, ldqc: *s64, zc: *float64, ldzc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaqz4_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alphar: *float64, alphai: *float64, beta: *float64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, qc: *float64, ldqc: *s64, zc: *float64, ldzc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAR1V_64 :: (n: *s64, b1: *s64, bn: *s64, lambda: *float64, d: *float64, l: *float64, ld: *float64, lld: *float64, pivmin: *float64, gaptol: *float64, z: *float64, wantnc: *s64, negcnt: *s64, ztz: *float64, mingma: *float64, r: *s64, isuppz: *s64, nrminv: *float64, resid: *float64, rqcorr: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlar1v_64 :: (n: *s64, b1: *s64, bn: *s64, lambda: *float64, d: *float64, l: *float64, ld: *float64, lld: *float64, pivmin: *float64, gaptol: *float64, z: *float64, wantnc: *s64, negcnt: *s64, ztz: *float64, mingma: *float64, r: *s64, isuppz: *s64, nrminv: *float64, resid: *float64, rqcorr: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLAR2V_64 :: (n: *s64, x: *float64, y: *float64, z: *float64, incx: *s64, c: *float64, s: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

dlar2v_64 :: (n: *s64, x: *float64, y: *float64, z: *float64, incx: *s64, c: *float64, s: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

DLARFB_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

dlarfb_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

DLARF_64 :: (side: *u8, m: *s64, n: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlarf_64 :: (side: *u8, m: *s64, n: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLARFG_64 :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

dlarfg_64 :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

DLARFGP_64 :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

dlarfgp_64 :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

DLARFP_64 :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

dlarfp_64 :: (n: *s64, alpha: *float64, x: *float64, incx: *s64, tau: *float64) -> void #foreign mkl_intel_ilp64;

DLARFT_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float64, ldv: *s64, tau: *float64, t: *float64, ldt: *s64) -> void #foreign mkl_intel_ilp64;

dlarft_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float64, ldv: *s64, tau: *float64, t: *float64, ldt: *s64) -> void #foreign mkl_intel_ilp64;

DLARFX_64 :: (side: *u8, m: *s64, n: *s64, v: *float64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlarfx_64 :: (side: *u8, m: *s64, n: *s64, v: *float64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLARGV_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

dlargv_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

DLARNV_64 :: (idist: *s64, iseed: *s64, n: *s64, x: *float64) -> void #foreign mkl_intel_ilp64;

dlarnv_64 :: (idist: *s64, iseed: *s64, n: *s64, x: *float64) -> void #foreign mkl_intel_ilp64;

DLARRA_64 :: (n: *s64, d: *float64, e: *float64, e2: *float64, spltol: *float64, tnrm: *float64, nsplit: *s64, isplit: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarra_64 :: (n: *s64, d: *float64, e: *float64, e2: *float64, spltol: *float64, tnrm: *float64, nsplit: *s64, isplit: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRB_64 :: (n: *s64, d: *float64, lld: *float64, ifirst: *s64, ilast: *s64, rtol1: *float64, rtol2: *float64, offset: *s64, w: *float64, wgap: *float64, werr: *float64, work: *float64, iwork: *s64, pivmin: *float64, spdiam: *float64, twist: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrb_64 :: (n: *s64, d: *float64, lld: *float64, ifirst: *s64, ilast: *s64, rtol1: *float64, rtol2: *float64, offset: *s64, w: *float64, wgap: *float64, werr: *float64, work: *float64, iwork: *s64, pivmin: *float64, spdiam: *float64, twist: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRC_64 :: (jobt: *u8, n: *s64, vl: *float64, vu: *float64, d: *float64, e: *float64, pivmin: *float64, eigcnt: *s64, lcnt: *s64, rcnt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrc_64 :: (jobt: *u8, n: *s64, vl: *float64, vu: *float64, d: *float64, e: *float64, pivmin: *float64, eigcnt: *s64, lcnt: *s64, rcnt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRD_64 :: (range: *u8, order: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, gers: *float64, reltol: *float64, d: *float64, e: *float64, e2: *float64, pivmin: *float64, nsplit: *s64, isplit: *s64, m: *s64, w: *float64, werr: *float64, wl: *float64, wu: *float64, iblock: *s64, indexw: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrd_64 :: (range: *u8, order: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, gers: *float64, reltol: *float64, d: *float64, e: *float64, e2: *float64, pivmin: *float64, nsplit: *s64, isplit: *s64, m: *s64, w: *float64, werr: *float64, wl: *float64, wu: *float64, iblock: *s64, indexw: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRE_64 :: (range: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, d: *float64, e: *float64, e2: *float64, rtol1: *float64, rtol2: *float64, spltol: *float64, nsplit: *s64, isplit: *s64, m: *s64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, pivmin: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarre_64 :: (range: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, d: *float64, e: *float64, e2: *float64, rtol1: *float64, rtol2: *float64, spltol: *float64, nsplit: *s64, isplit: *s64, m: *s64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, pivmin: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRF_64 :: (n: *s64, d: *float64, l: *float64, ld: *float64, clstrt: *s64, clend: *s64, w: *float64, wgap: *float64, werr: *float64, spdiam: *float64, clgapl: *float64, clgapr: *float64, pivmin: *float64, sigma: *float64, dplus: *float64, lplus: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrf_64 :: (n: *s64, d: *float64, l: *float64, ld: *float64, clstrt: *s64, clend: *s64, w: *float64, wgap: *float64, werr: *float64, spdiam: *float64, clgapl: *float64, clgapr: *float64, pivmin: *float64, sigma: *float64, dplus: *float64, lplus: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRJ_64 :: (n: *s64, d: *float64, e2: *float64, ifirst: *s64, ilast: *s64, rtol: *float64, offset: *s64, w: *float64, werr: *float64, work: *float64, iwork: *s64, pivmin: *float64, spdiam: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrj_64 :: (n: *s64, d: *float64, e2: *float64, ifirst: *s64, ilast: *s64, rtol: *float64, offset: *s64, w: *float64, werr: *float64, work: *float64, iwork: *s64, pivmin: *float64, spdiam: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRK_64 :: (n: *s64, iw: *s64, gl: *float64, gu: *float64, d: *float64, e2: *float64, pivmin: *float64, reltol: *float64, w: *float64, werr: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrk_64 :: (n: *s64, iw: *s64, gl: *float64, gu: *float64, d: *float64, e2: *float64, pivmin: *float64, reltol: *float64, w: *float64, werr: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRR_64 :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dlarrr_64 :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARRV_64 :: (n: *s64, vl: *float64, vu: *float64, d: *float64, l: *float64, pivmin: *float64, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float64, rtol1: *float64, rtol2: *float64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarrv_64 :: (n: *s64, vl: *float64, vu: *float64, d: *float64, l: *float64, pivmin: *float64, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float64, rtol1: *float64, rtol2: *float64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARSCL2_64 :: (m: *s64, n: *s64, d: *float64, x: *float64, ldx: *s64) -> void #foreign mkl_intel_ilp64;

dlarscl2_64 :: (m: *s64, n: *s64, d: *float64, x: *float64, ldx: *s64) -> void #foreign mkl_intel_ilp64;

DLARTV_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, s: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

dlartv_64 :: (n: *s64, x: *float64, incx: *s64, y: *float64, incy: *s64, c: *float64, s: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

DLARUV_64 :: (iseed: *s64, n: *s64, x: *float64) -> void #foreign mkl_intel_ilp64;
dlaruv_64 :: (iseed: *s64, n: *s64, x: *float64) -> void #foreign mkl_intel_ilp64;

DLARZB_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

dlarzb_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, c: *float64, ldc: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

DLARZ_64 :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlarz_64 :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *float64, incv: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLARZT_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float64, ldv: *s64, tau: *float64, t: *float64, ldt: *s64) -> void #foreign mkl_intel_ilp64;

dlarzt_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float64, ldv: *s64, tau: *float64, t: *float64, ldt: *s64) -> void #foreign mkl_intel_ilp64;

DLASCL_64 :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float64, cto: *float64, m: *s64, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlascl_64 :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float64, cto: *float64, m: *s64, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASCL2_64 :: (m: *s64, n: *s64, d: *float64, x: *float64, ldx: *s64) -> void #foreign mkl_intel_ilp64;

dlascl2_64 :: (m: *s64, n: *s64, d: *float64, x: *float64, ldx: *s64) -> void #foreign mkl_intel_ilp64;

DLASD0_64 :: (n: *s64, sqre: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, smlsiz: *s64, iwork: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd0_64 :: (n: *s64, sqre: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, smlsiz: *s64, iwork: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD1_64 :: (nl: *s64, nr: *s64, sqre: *s64, d: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, idxq: *s64, iwork: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd1_64 :: (nl: *s64, nr: *s64, sqre: *s64, d: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, idxq: *s64, iwork: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD2_64 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, z: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, dsigma: *float64, u2: *float64, ldu2: *s64, vt2: *float64, ldvt2: *s64, idxp: *s64, idx: *s64, idxc: *s64, idxq: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd2_64 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, z: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, vt: *float64, ldvt: *s64, dsigma: *float64, u2: *float64, ldu2: *s64, vt2: *float64, ldvt2: *s64, idxp: *s64, idx: *s64, idxc: *s64, idxq: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD3_64 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, q: *float64, ldq: *s64, dsigma: *float64, u: *float64, ldu: *s64, u2: *float64, ldu2: *s64, vt: *float64, ldvt: *s64, vt2: *float64, ldvt2: *s64, idxc: *s64, ctot: *s64, z: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd3_64 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, q: *float64, ldq: *s64, dsigma: *float64, u: *float64, ldu: *s64, u2: *float64, ldu2: *s64, vt: *float64, ldvt: *s64, vt2: *float64, ldvt2: *s64, idxc: *s64, ctot: *s64, z: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD4_64 :: (n: *s64, i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, sigma: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd4_64 :: (n: *s64, i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, sigma: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD5_64 :: (i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dsigma: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlasd5_64 :: (i: *s64, d: *float64, z: *float64, delta: *float64, rho: *float64, dsigma: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLASD6_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, d: *float64, vf: *float64, vl: *float64, alpha: *float64, beta: *float64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd6_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, d: *float64, vf: *float64, vl: *float64, alpha: *float64, beta: *float64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD7_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, z: *float64, zw: *float64, vf: *float64, vfw: *float64, vl: *float64, vlw: *float64, alpha: *float64, beta: *float64, dsigma: *float64, idx: *s64, idxp: *s64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, c: *float64, s: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd7_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float64, z: *float64, zw: *float64, vf: *float64, vfw: *float64, vl: *float64, vlw: *float64, alpha: *float64, beta: *float64, dsigma: *float64, idx: *s64, idxp: *s64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, c: *float64, s: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASD8_64 :: (icompq: *s64, k: *s64, d: *float64, z: *float64, vf: *float64, vl: *float64, difl: *float64, difr: *float64, lddifr: *s64, dsigma: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasd8_64 :: (icompq: *s64, k: *s64, d: *float64, z: *float64, vf: *float64, vl: *float64, difl: *float64, difr: *float64, lddifr: *s64, dsigma: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASDA_64 :: (icompq: *s64, smlsiz: *s64, n: *s64, sqre: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasda_64 :: (icompq: *s64, smlsiz: *s64, n: *s64, sqre: *s64, d: *float64, e: *float64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASDQ_64 :: (uplo: *u8, sqre: *s64, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *float64, ldvt: *s64, u: *float64, ldu: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasdq_64 :: (uplo: *u8, sqre: *s64, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *float64, ldvt: *s64, u: *float64, ldu: *s64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASDT_64 :: (n: *s64, lvl: *s64, nd: *s64, inode: *s64, ndiml: *s64, ndimr: *s64, msub: *s64) -> void #foreign mkl_intel_ilp64;

dlasdt_64 :: (n: *s64, lvl: *s64, nd: *s64, inode: *s64, ndiml: *s64, ndimr: *s64, msub: *s64) -> void #foreign mkl_intel_ilp64;

DLASET_64 :: (uplo: *u8, m: *s64, n: *s64, alpha: *float64, beta: *float64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

dlaset_64 :: (uplo: *u8, m: *s64, n: *s64, alpha: *float64, beta: *float64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

DLASQ1_64 :: (n: *s64, d: *float64, e: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasq1_64 :: (n: *s64, d: *float64, e: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASQ2_64 :: (n: *s64, z: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dlasq2_64 :: (n: *s64, z: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASQ3_64 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, dmin: *float64, sigma: *float64, desig: *float64, qmax: *float64, nfail: *s64, iter: *s64, ndiv: *s64, ieee: *s64, ttype: *s64, dmin1: *float64, dmin2: *float64, dn: *float64, dn1: *float64, dn2: *float64, g: *float64, tau: *float64) -> void #foreign mkl_intel_ilp64;

dlasq3_64 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, dmin: *float64, sigma: *float64, desig: *float64, qmax: *float64, nfail: *s64, iter: *s64, ndiv: *s64, ieee: *s64, ttype: *s64, dmin1: *float64, dmin2: *float64, dn: *float64, dn1: *float64, dn2: *float64, g: *float64, tau: *float64) -> void #foreign mkl_intel_ilp64;

DLASQ4_64 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, n0in: *s64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dn1: *float64, dn2: *float64, tau: *float64, ttype: *s64, g: *float64) -> void #foreign mkl_intel_ilp64;

dlasq4_64 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, n0in: *s64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dn1: *float64, dn2: *float64, tau: *float64, ttype: *s64, g: *float64) -> void #foreign mkl_intel_ilp64;

DLASQ5_64 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, tau: *float64, sigma: *float64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dnm1: *float64, dnm2: *float64, ieee: *s64, eps: *float64) -> void #foreign mkl_intel_ilp64;

dlasq5_64 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, tau: *float64, sigma: *float64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dnm1: *float64, dnm2: *float64, ieee: *s64, eps: *float64) -> void #foreign mkl_intel_ilp64;

DLASQ6_64 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dnm1: *float64, dnm2: *float64) -> void #foreign mkl_intel_ilp64;

dlasq6_64 :: (i0: *s64, n0: *s64, z: *float64, pp: *s64, dmin: *float64, dmin1: *float64, dmin2: *float64, dn: *float64, dnm1: *float64, dnm2: *float64) -> void #foreign mkl_intel_ilp64;

DLASR_64 :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float64, s: *float64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

dlasr_64 :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float64, s: *float64, a: *float64, lda: *s64) -> void #foreign mkl_intel_ilp64;

DLASRT_64 :: (id: *u8, n: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dlasrt_64 :: (id: *u8, n: *s64, d: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASSQ_64 :: (n: *s64, x: *float64, incx: *s64, scale: *float64, sumsq: *float64) -> void #foreign mkl_intel_ilp64;

dlassq_64 :: (n: *s64, x: *float64, incx: *s64, scale: *float64, sumsq: *float64) -> void #foreign mkl_intel_ilp64;

DLASWP_64 :: (n: *s64, a: *float64, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

dlaswp_64 :: (n: *s64, a: *float64, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DLASY2_64 :: (ltranl: *s64, ltranr: *s64, isgn: *s64, n1: *s64, n2: *s64, tl: *float64, ldtl: *s64, tr: *float64, ldtr: *s64, b: *float64, ldb: *s64, scale: *float64, x: *float64, ldx: *s64, xnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasy2_64 :: (ltranl: *s64, ltranr: *s64, isgn: *s64, n1: *s64, n2: *s64, tl: *float64, ldtl: *s64, tr: *float64, ldtr: *s64, b: *float64, ldb: *s64, scale: *float64, x: *float64, ldx: *s64, xnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLASYF_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlasyf_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float64, lda: *s64, ipiv: *s64, w: *float64, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAT2S_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, sa: *float, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlat2s_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, sa: *float, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATBS_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatbs_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATDF_64 :: (ijob: *s64, n: *s64, z: *float64, ldz: *s64, rhs: *float64, rdsum: *float64, rdscal: *float64, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

dlatdf_64 :: (ijob: *s64, n: *s64, z: *float64, ldz: *s64, rhs: *float64, rdsum: *float64, rdscal: *float64, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

DLATPS_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *float64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatps_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *float64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATRD_64 :: (uplo: *u8, n: *s64, nb: *s64, a: *float64, lda: *s64, e: *float64, tau: *float64, w: *float64, ldw: *s64) -> void #foreign mkl_intel_ilp64;

dlatrd_64 :: (uplo: *u8, n: *s64, nb: *s64, a: *float64, lda: *s64, e: *float64, tau: *float64, w: *float64, ldw: *s64) -> void #foreign mkl_intel_ilp64;

DLATRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *float64, lda: *s64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *float64, lda: *s64, x: *float64, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATRZ_64 :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlatrz_64 :: (m: *s64, n: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLATZM_64 :: (side: *u8, m: *s64, n: *s64, v: *float64, incv: *s64, tau: *float64, c1: *float64, c2: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

dlatzm_64 :: (side: *u8, m: *s64, n: *s64, v: *float64, incv: *s64, tau: *float64, c1: *float64, c2: *float64, ldc: *s64, work: *float64) -> void #foreign mkl_intel_ilp64;

DLAUU2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlauu2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAUUM_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlauum_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DOPGTR_64 :: (uplo: *u8, n: *s64, ap: *float64, tau: *float64, q: *float64, ldq: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dopgtr_64 :: (uplo: *u8, n: *s64, ap: *float64, tau: *float64, q: *float64, ldq: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DOPMTR_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *float64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dopmtr_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *float64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORG2L_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorg2l_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORG2R_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorg2r_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGBR_64 :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgbr_64 :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGHR_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorghr_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGL2_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgl2_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGLQ_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorglq_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGQL_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgql_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGQR_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgqr_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGR2_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgr2_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGRQ_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgrq_64 :: (m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORGTR_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorgtr_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORM2L_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorm2l_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORM2R_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorm2r_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMBR_64 :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormbr_64 :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMHR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormhr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORML2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dorml2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMLQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormlq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMQL_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormql_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMQR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormqr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMR2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormr2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMR3_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormr3_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMRQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormrq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMRZ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormrz_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DORMTR_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dormtr_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, c: *float64, ldc: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBCON_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbcon_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBEQU_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbequ_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBRFS_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbrfs_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBSTF_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbstf_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBSV_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbsv_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBTF2_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbtf2_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBTRF_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbtrf_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPBTRS_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpbtrs_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPFTRF_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpftrf_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPFTRI_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpftri_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPFTRS_64 :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpftrs_64 :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOCON_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpocon_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOEQUB_64 :: (n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpoequb_64 :: (n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOEQU_64 :: (n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpoequ_64 :: (n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPORFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dporfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPORFSX_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dporfsx_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dposv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dposvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOSVXX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dposvxx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOTF2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotf2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOTRF_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotrf_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOTRI_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotri_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPOTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpotrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPCON_64 :: (uplo: *u8, n: *s64, ap: *float64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dppcon_64 :: (uplo: *u8, n: *s64, ap: *float64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPEQU_64 :: (uplo: *u8, n: *s64, ap: *float64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dppequ_64 :: (uplo: *u8, n: *s64, ap: *float64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpprfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dppsv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dppsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPTRF_64 :: (uplo: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dpptrf_64 :: (uplo: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPTRI_64 :: (uplo: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dpptri_64 :: (uplo: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPPTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpptrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPSTF2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpstf2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPSTRF_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpstrf_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTCON_64 :: (n: *s64, d: *float64, e: *float64, anorm: *float64, rcond: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dptcon_64 :: (n: *s64, d: *float64, e: *float64, anorm: *float64, rcond: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTEQR_64 :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpteqr_64 :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTRFS_64 :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dptrfs_64 :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTSV_64 :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dptsv_64 :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTSVX_64 :: (fact: *u8, n: *s64, nrhs: *s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dptsvx_64 :: (fact: *u8, n: *s64, nrhs: *s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTTRF_64 :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dpttrf_64 :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTTRS_64 :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dpttrs_64 :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DPTTS2_64 :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dptts2_64 :: (n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DRSCL_64 :: (n: *s64, sa: *float64, sx: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

drscl_64 :: (n: *s64, sa: *float64, sx: *float64, incx: *s64) -> void #foreign mkl_intel_ilp64;

DSBEVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbevd_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBEV_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbev_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBEVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbevx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBGST_64 :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, x: *float64, ldx: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbgst_64 :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, x: *float64, ldx: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBGVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbgvd_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBGV_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbgv_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBGVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbgvx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float64, ldab: *s64, bb: *float64, ldbb: *s64, q: *float64, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSBTRD_64 :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsbtrd_64 :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, d: *float64, e: *float64, q: *float64, ldq: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSFRK_64 :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, beta: *float64, c: *float64) -> void #foreign mkl_intel_ilp64;

dsfrk_64 :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *float64, lda: *s64, beta: *float64, c: *float64) -> void #foreign mkl_intel_ilp64;

DSGESV_64 :: (n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, work: *float64, swork: *float, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsgesv_64 :: (n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, work: *float64, swork: *float, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPCON_64 :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspcon_64 :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPEVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspevd_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPEV_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspev_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPEVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspevx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPGST_64 :: (itype: *s64, uplo: *u8, n: *s64, ap: *float64, bp: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspgst_64 :: (itype: *s64, uplo: *u8, n: *s64, ap: *float64, bp: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPGVD_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspgvd_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPGV_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspgv_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPGVX_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspgvx_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float64, bp: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPOSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, work: *float64, swork: *float, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsposv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, work: *float64, swork: *float, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsprfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspsv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dspsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPTRD_64 :: (uplo: *u8, n: *s64, ap: *float64, d: *float64, e: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsptrd_64 :: (uplo: *u8, n: *s64, ap: *float64, d: *float64, e: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPTRF_64 :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsptrf_64 :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPTRI_64 :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsptri_64 :: (uplo: *u8, n: *s64, ap: *float64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSPTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsptrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEBZ_64 :: (range: *u8, order: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, d: *float64, e: *float64, m: *s64, nsplit: *s64, w: *float64, iblock: *s64, isplit: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstebz_64 :: (range: *u8, order: *u8, n: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, d: *float64, e: *float64, m: *s64, nsplit: *s64, w: *float64, iblock: *s64, isplit: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEDC_64 :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstedc_64 :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEGR_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstegr_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEIN_64 :: (n: *s64, d: *float64, e: *float64, m: *s64, w: *float64, iblock: *s64, isplit: *s64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstein_64 :: (n: *s64, d: *float64, e: *float64, m: *s64, w: *float64, iblock: *s64, isplit: *s64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEMR_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, m: *s64, w: *float64, z: *float64, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstemr_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, m: *s64, w: *float64, z: *float64, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEQR_64 :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsteqr_64 :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTERF_64 :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
dsterf_64 :: (n: *s64, d: *float64, e: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEVD_64 :: (jobz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstevd_64 :: (jobz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEV_64 :: (jobz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstev_64 :: (jobz: *u8, n: *s64, d: *float64, e: *float64, z: *float64, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEVR_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstevr_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSTEVX_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dstevx_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYCON_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsycon_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEQUB_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyequb_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevd_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEV_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyev_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEVR_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevr_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYEVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyevx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYGS2_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygs2_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYGST_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygst_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYGVD_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygvd_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYGV_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygv_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, w: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYGVX_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsygvx_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyrfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYRFSX_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyrfsx_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYSVXX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsysvxx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTD2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytd2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTF2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytf2_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRD_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrd_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRF_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrf_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRI_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytri_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ipiv: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsytrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, ipiv: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTBCON_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtbcon_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *float64, ldab: *s64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTBRFS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtbrfs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTBTRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtbtrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float64, ldab: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTFSM_64 :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

dtfsm_64 :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float64, a: *float64, b: *float64, ldb: *s64) -> void #foreign mkl_intel_ilp64;

DTFTRI_64 :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtftri_64 :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTFTTP_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *float64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtfttp_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *float64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTFTTR_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *float64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtfttr_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *float64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGEVC_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *float64, lds: *s64, p: *float64, ldp: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgevc_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *float64, lds: *s64, p: *float64, ldp: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGEX2_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgex2_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGEXC_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, ifst: *s64, ilst: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgexc_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, ifst: *s64, ilst: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGSEN_64 :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, m: *s64, pl: *float64, pr: *float64, dif: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsen_64 :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: *s64, z: *float64, ldz: *s64, m: *s64, pl: *float64, pr: *float64, dif: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGSJA_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsja_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, tola: *float64, tolb: *float64, alpha: *float64, beta: *float64, u: *float64, ldu: *s64, v: *float64, ldv: *s64, q: *float64, ldq: *s64, work: *float64, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGSNA_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, s: *float64, dif: *float64, mm: *s64, m: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsna_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, s: *float64, dif: *float64, mm: *s64, m: *s64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGSY2_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, scale: *float64, rdsum: *float64, rdscal: *float64, iwork: *s64, pq: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsy2_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, scale: *float64, rdsum: *float64, rdscal: *float64, iwork: *s64, pq: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTGSYL_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, scale: *float64, dif: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtgsyl_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, scale: *float64, dif: *float64, work: *float64, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPCON_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpcon_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPRFS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtprfs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPTRI_64 :: (uplo: *u8, diag: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtptri_64 :: (uplo: *u8, diag: *u8, n: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPTRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtptrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPTTF_64 :: (transr: *u8, uplo: *u8, n: *s64, ap: *float64, arf: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpttf_64 :: (transr: *u8, uplo: *u8, n: *s64, ap: *float64, arf: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTPTTR_64 :: (uplo: *u8, n: *s64, ap: *float64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtpttr_64 :: (uplo: *u8, n: *s64, ap: *float64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRCON_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrcon_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, rcond: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTREVC_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrevc_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, mm: *s64, m: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTREXC_64 :: (compq: *u8, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, ifst: *s64, ilst: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrexc_64 :: (compq: *u8, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, ifst: *s64, ilst: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRRFS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrrfs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, x: *float64, ldx: *s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRSEN_64 :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, wr: *float64, wi: *float64, m: *s64, s: *float64, sep: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrsen_64 :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, q: *float64, ldq: *s64, wr: *float64, wi: *float64, m: *s64, s: *float64, sep: *float64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRSNA_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, s: *float64, sep: *float64, mm: *s64, m: *s64, work: *float64, ldwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrsna_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *float64, ldt: *s64, vl: *float64, ldvl: *s64, vr: *float64, ldvr: *s64, s: *float64, sep: *float64, mm: *s64, m: *s64, work: *float64, ldwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRSYL_64 :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrsyl_64 :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRTI2_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrti2_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRTRI_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrtri_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRTRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrtrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRTTF_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, arf: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrttf_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *float64, lda: *s64, arf: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTRTTP_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtrttp_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, ap: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTZRQF_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtzrqf_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DTZRZF_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dtzrzf_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, tau: *float64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DZSUM1_64 :: (n: *s64, cx: *MKL_Complex16, incx: *s64) -> float64 #foreign mkl_intel_ilp64;

dzsum1_64 :: (n: *s64, cx: *MKL_Complex16, incx: *s64) -> float64 #foreign mkl_intel_ilp64;

ICMAX1_64 :: (n: *s64, cx: *MKL_Complex8, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

icmax1_64 :: (n: *s64, cx: *MKL_Complex8, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

IEEECK_64 :: (ispec: *s64, zero: *float, one: *float) -> s64 #foreign mkl_intel_ilp64;
ieeeck_64 :: (ispec: *s64, zero: *float, one: *float) -> s64 #foreign mkl_intel_ilp64;

ILACLC_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaclc_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILACLR_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaclr_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILADLC_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

iladlc_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILADLR_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

iladlr_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILAENV_64 :: (ispec: *s64, name: *u8, opts: *u8, n1: *s64, n2: *s64, n3: *s64, n4: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaenv_64 :: (ispec: *s64, name: *u8, opts: *u8, n1: *s64, n2: *s64, n3: *s64, n4: *s64) -> s64 #foreign mkl_intel_ilp64;

ILAENV2STAGE_64 :: (ispec: *s64, name: *u8, opts: *u8, n1: *s64, n2: *s64, n3: *s64, n4: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaenv2stage_64 :: (ispec: *s64, name: *u8, opts: *u8, n1: *s64, n2: *s64, n3: *s64, n4: *s64) -> s64 #foreign mkl_intel_ilp64;

ILASLC_64 :: (m: *s64, n: *s64, a: *float, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaslc_64 :: (m: *s64, n: *s64, a: *float, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILASLR_64 :: (m: *s64, n: *s64, a: *float, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilaslr_64 :: (m: *s64, n: *s64, a: *float, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILAVER_64 :: (vers_major: *s64, vers_minor: *s64, vers_patch: *s64) -> void #foreign mkl_intel_ilp64;
ilaver_64 :: (vers_major: *s64, vers_minor: *s64, vers_patch: *s64) -> void #foreign mkl_intel_ilp64;

ILAZLC_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilazlc_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ILAZLR_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

ilazlr_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64) -> s64 #foreign mkl_intel_ilp64;

IPARMQ_64 :: (ispec: *s64, name: *u8, opts: *u8, n: *s64, ilo: *s64, ihi: *s64, lwork: *s64) -> s64 #foreign mkl_intel_ilp64;

iparmq_64 :: (ispec: *s64, name: *u8, opts: *u8, n: *s64, ilo: *s64, ihi: *s64, lwork: *s64) -> s64 #foreign mkl_intel_ilp64;

IZMAX1_64 :: (n: *s64, cx: *MKL_Complex16, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

izmax1_64 :: (n: *s64, cx: *MKL_Complex16, incx: *s64) -> s64 #foreign mkl_intel_ilp64;

LSAMEN_64 :: (n: *s64, ca: *u8, cb: *u8) -> s64 #foreign mkl_intel_ilp64;
lsamen_64 :: (n: *s64, ca: *u8, cb: *u8) -> s64 #foreign mkl_intel_ilp64;

SBDSDC_64 :: (uplo: *u8, compq: *u8, n: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, q: *float, iq: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sbdsdc_64 :: (uplo: *u8, compq: *u8, n: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, q: *float, iq: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SBDSQR_64 :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *float, ldvt: *s64, u: *float, ldu: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sbdsqr_64 :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *float, ldvt: *s64, u: *float, ldu: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SCSUM1_64 :: (n: *s64, cx: *MKL_Complex8, incx: *s64) -> float #foreign mkl_intel_ilp64;
scsum1_64 :: (n: *s64, cx: *MKL_Complex8, incx: *s64) -> float #foreign mkl_intel_ilp64;

SDISNA_64 :: (job: *u8, m: *s64, n: *s64, d: *float, sep: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sdisna_64 :: (job: *u8, m: *s64, n: *s64, d: *float, sep: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBBRD_64 :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, d: *float, e: *float, q: *float, ldq: *s64, pt: *float, ldpt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbbrd_64 :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, d: *float, e: *float, q: *float, ldq: *s64, pt: *float, ldpt: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBCON_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbcon_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBEQUB_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbequb_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBEQU_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbequ_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBRFS_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbrfs_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBRFSX_64 :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbrfsx_64 :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBSV_64 :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbsv_64 :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBSVX_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbsvx_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBSVXX_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbsvxx_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBTF2_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbtf2_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBTRF_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbtrf_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGBTRS_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgbtrs_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEBAK_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float, m: *s64, v: *float, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgebak_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float, m: *s64, v: *float, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEBAL_64 :: (job: *u8, n: *s64, a: *float, lda: *s64, ilo: *s64, ihi: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgebal_64 :: (job: *u8, n: *s64, a: *float, lda: *s64, ilo: *s64, ihi: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEBD2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgebd2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEBRD_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgebrd_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGECON_64 :: (norm: *u8, n: *s64, a: *float, lda: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgecon_64 :: (norm: *u8, n: *s64, a: *float, lda: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEEQUB_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeequb_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEEQU_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeequ_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEES_64 :: (jobvs: *u8, sort: *u8, select: MKL_S_SELECT_FUNCTION_2_64, n: *s64, a: *float, lda: *s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgees_64 :: (jobvs: *u8, sort: *u8, select: MKL_S_SELECT_FUNCTION_2_64, n: *s64, a: *float, lda: *s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEESX_64 :: (jobvs: *u8, sort: *u8, select: MKL_S_SELECT_FUNCTION_2_64, sense: *u8, n: *s64, a: *float, lda: *s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: *s64, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeesx_64 :: (jobvs: *u8, sort: *u8, select: MKL_S_SELECT_FUNCTION_2_64, sense: *u8, n: *s64, a: *float, lda: *s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: *s64, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEEV_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeev_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEEVX_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float, lda: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeevx_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float, lda: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEGS_64 :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgegs_64 :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEGV_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgegv_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEHD2_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgehd2_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEHRD_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgehrd_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEJSV_64 :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *float, lda: *s64, sva: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgejsv_64 :: (joba: *u8, jobu: *u8, jobv: *u8, jobr: *u8, jobt: *u8, jobp: *u8, m: *s64, n: *s64, a: *float, lda: *s64, sva: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELQ2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelq2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELQF_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelqf_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELSD_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelsd_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELS_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgels_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELSS_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelss_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, s: *float, rcond: *float, rank: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELSX_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelsx_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGELSY_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgelsy_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, jpvt: *s64, rcond: *float, rank: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQL2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeql2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQLF_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqlf_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQP3_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqp3_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQPF_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqpf_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQR2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqr2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQR2P_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqr2p_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQRF_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrf_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGEQRFP_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrfp_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGERFS_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgerfs_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGERFSX_64 :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgerfsx_64 :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGERQ2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sgerq2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGERQF_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgerqf_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESC2_64 :: (n: *s64, a: *float, lda: *s64, rhs: *float, ipiv: *s64, jpiv: *s64, scale: *float) -> void #foreign mkl_intel_ilp64;

sgesc2_64 :: (n: *s64, a: *float, lda: *s64, rhs: *float, ipiv: *s64, jpiv: *s64, scale: *float) -> void #foreign mkl_intel_ilp64;

SGESDD_64 :: (jobz: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesdd_64 :: (jobz: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESVD_64 :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvd_64 :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *float, lda: *s64, s: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESV_64 :: (n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesv_64 :: (n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESVJ_64 :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, sva: *float, mv: *s64, v: *float, ldv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvj_64 :: (joba: *u8, jobu: *u8, jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, sva: *float, mv: *s64, v: *float, ldv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESVX_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvx_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGESVXX_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgesvxx_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETC2_64 :: (n: *s64, a: *float, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetc2_64 :: (n: *s64, a: *float, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETF2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetf2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRF_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrf_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRI_64 :: (n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetri_64 :: (n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGETRS_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgetrs_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGBAK_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, m: *s64, v: *float, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggbak_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, m: *s64, v: *float, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGBAL_64 :: (job: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sggbal_64 :: (job: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGES_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3_64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgges_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3_64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, work: *float, lwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGESX_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3_64, sense: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggesx_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_S_SELECT_FUNCTION_3_64, sense: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: *s64, vsr: *float, ldvsr: *s64, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGEV_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggev_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGEVX_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggevx_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float, work: *float, lwork: *s64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGGLM_64 :: (n: *s64, m: *s64, p: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, d: *float, x: *float, y: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggglm_64 :: (n: *s64, m: *s64, p: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, d: *float, x: *float, y: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGHRD_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgghrd_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGLSE_64 :: (m: *s64, n: *s64, p: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, d: *float, x: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgglse_64 :: (m: *s64, n: *s64, p: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, d: *float, x: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGQRF_64 :: (n: *s64, m: *s64, p: *s64, a: *float, lda: *s64, taua: *float, b: *float, ldb: *s64, taub: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggqrf_64 :: (n: *s64, m: *s64, p: *s64, a: *float, lda: *s64, taua: *float, b: *float, ldb: *s64, taub: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGRQF_64 :: (m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, taua: *float, b: *float, ldb: *s64, taub: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggrqf_64 :: (m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, taua: *float, b: *float, ldb: *s64, taub: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGSVD_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sggsvd_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGGSVP_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, iwork: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sggsvp_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, k: *s64, l: *s64, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, iwork: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SGSVJ0_64 :: (jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, d: *float, sva: *float, mv: *s64, v: *float, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgsvj0_64 :: (jobv: *u8, m: *s64, n: *s64, a: *float, lda: *s64, d: *float, sva: *float, mv: *s64, v: *float, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGSVJ1_64 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *float, lda: *s64, d: *float, sva: *float, mv: *s64, v: *float, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgsvj1_64 :: (jobv: *u8, m: *s64, n: *s64, n1: *s64, a: *float, lda: *s64, d: *float, sva: *float, mv: *s64, v: *float, ldv: *s64, eps: *float, sfmin: *float, tol: *float, nsweep: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTCON_64 :: (norm: *u8, n: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgtcon_64 :: (norm: *u8, n: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTRFS_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgtrfs_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTSV_64 :: (n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgtsv_64 :: (n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTSVX_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgtsvx_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTTRF_64 :: (n: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgttrf_64 :: (n: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTTRS_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgttrs_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SGTTS2_64 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

sgtts2_64 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

SHGEQZ_64 :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, t: *float, ldt: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

shgeqz_64 :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, t: *float, ldt: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SHSEIN_64 :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

shsein_64 :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SHSEQR_64 :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

shseqr_64 :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLABRD_64 :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, x: *float, ldx: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

slabrd_64 :: (m: *s64, n: *s64, nb: *s64, a: *float, lda: *s64, d: *float, e: *float, tauq: *float, taup: *float, x: *float, ldx: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

SLACN2_64 :: (n: *s64, v: *float, x: *float, isgn: *s64, est: *float, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

slacn2_64 :: (n: *s64, v: *float, x: *float, isgn: *s64, est: *float, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

SLACON_64 :: (n: *s64, v: *float, x: *float, isgn: *s64, est: *float, kase: *s64) -> void #foreign mkl_intel_ilp64;

slacon_64 :: (n: *s64, v: *float, x: *float, isgn: *s64, est: *float, kase: *s64) -> void #foreign mkl_intel_ilp64;

SLACPY_64 :: (uplo: *u8, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

slacpy_64 :: (uplo: *u8, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

SLAEBZ_64 :: (ijob: *s64, nitmax: *s64, n: *s64, mmax: *s64, minp: *s64, nbmin: *s64, abstol: *float, reltol: *float, pivmin: *float, d: *float, e: *float, e2: *float, nval: *s64, ab: *float, c: *float, mout: *s64, nab: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaebz_64 :: (ijob: *s64, nitmax: *s64, n: *s64, mmax: *s64, minp: *s64, nbmin: *s64, abstol: *float, reltol: *float, pivmin: *float, d: *float, e: *float, e2: *float, nval: *s64, ab: *float, c: *float, mout: *s64, nab: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED0_64 :: (icompq: *s64, qsiz: *s64, n: *s64, d: *float, e: *float, q: *float, ldq: *s64, qstore: *float, ldqs: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed0_64 :: (icompq: *s64, qsiz: *s64, n: *s64, d: *float, e: *float, q: *float, ldq: *s64, qstore: *float, ldqs: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED1_64 :: (n: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed1_64 :: (n: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED2_64 :: (k: *s64, n: *s64, n1: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, z: *float, dlamda: *float, w: *float, q2: *float, indx: *s64, indxc: *s64, indxp: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed2_64 :: (k: *s64, n: *s64, n1: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, z: *float, dlamda: *float, w: *float, q2: *float, indx: *s64, indxc: *s64, indxp: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED3_64 :: (k: *s64, n: *s64, n1: *s64, d: *float, q: *float, ldq: *s64, rho: *float, dlamda: *float, q2: *float, indx: *s64, ctot: *s64, w: *float, s: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed3_64 :: (k: *s64, n: *s64, n1: *s64, d: *float, q: *float, ldq: *s64, rho: *float, dlamda: *float, q2: *float, indx: *s64, ctot: *s64, w: *float, s: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED4_64 :: (n: *s64, i: *s64, d: *float, z: *float, delta: *float, rho: *float, dlam: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed4_64 :: (n: *s64, i: *s64, d: *float, z: *float, delta: *float, rho: *float, dlam: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED5_64 :: (i: *s64, d: *float, z: *float, delta: *float, rho: *float, dlam: *float) -> void #foreign mkl_intel_ilp64;

slaed5_64 :: (i: *s64, d: *float, z: *float, delta: *float, rho: *float, dlam: *float) -> void #foreign mkl_intel_ilp64;

SLAED6_64 :: (kniter: *s64, orgati: *s64, rho: *float, d: *float, z: *float, finit: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed6_64 :: (kniter: *s64, orgati: *s64, rho: *float, d: *float, z: *float, finit: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED7_64 :: (icompq: *s64, n: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, qstore: *float, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed7_64 :: (icompq: *s64, n: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, qstore: *float, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED8_64 :: (icompq: *s64, k: *s64, n: *s64, qsiz: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, z: *float, dlamda: *float, q2: *float, ldq2: *s64, w: *float, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, indxp: *s64, indx: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed8_64 :: (icompq: *s64, k: *s64, n: *s64, qsiz: *s64, d: *float, q: *float, ldq: *s64, indxq: *s64, rho: *float, cutpnt: *s64, z: *float, dlamda: *float, q2: *float, ldq2: *s64, w: *float, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, indxp: *s64, indx: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAED9_64 :: (k: *s64, kstart: *s64, kstop: *s64, n: *s64, d: *float, q: *float, ldq: *s64, rho: *float, dlamda: *float, w: *float, s: *float, lds: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaed9_64 :: (k: *s64, kstart: *s64, kstop: *s64, n: *s64, d: *float, q: *float, ldq: *s64, rho: *float, dlamda: *float, w: *float, s: *float, lds: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAEDA_64 :: (n: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, q: *float, qptr: *s64, z: *float, ztemp: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaeda_64 :: (n: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float, q: *float, qptr: *s64, z: *float, ztemp: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAEIN_64 :: (rightv: *s64, noinit: *s64, n: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, vr: *float, vi: *float, b: *float, ldb: *s64, work: *float, eps3: *float, smlnum: *float, bignum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaein_64 :: (rightv: *s64, noinit: *s64, n: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, vr: *float, vi: *float, b: *float, ldb: *s64, work: *float, eps3: *float, smlnum: *float, bignum: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAEXC_64 :: (wantq: *s64, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaexc_64 :: (wantq: *s64, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAG2D_64 :: (m: *s64, n: *s64, sa: *float, ldsa: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slag2d_64 :: (m: *s64, n: *s64, sa: *float, ldsa: *s64, a: *float64, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAG2_64 :: (a: *float, lda: *s64, b: *float, ldb: *s64, safmin: *float, scale1: *float, scale2: *float, wr1: *float, wr2: *float, wi: *float) -> void #foreign mkl_intel_ilp64;

slag2_64 :: (a: *float, lda: *s64, b: *float, ldb: *s64, safmin: *float, scale1: *float, scale2: *float, wr1: *float, wr2: *float, wi: *float) -> void #foreign mkl_intel_ilp64;

SLAGS2_64 :: (upper: *s64, a1: *float, a2: *float, a3: *float, b1: *float, b2: *float, b3: *float, csu: *float, snu: *float, csv: *float, snv: *float, csq: *float, snq: *float) -> void #foreign mkl_intel_ilp64;

slags2_64 :: (upper: *s64, a1: *float, a2: *float, a3: *float, b1: *float, b2: *float, b3: *float, csu: *float, snu: *float, csv: *float, snv: *float, csq: *float, snq: *float) -> void #foreign mkl_intel_ilp64;

SLAGTF_64 :: (n: *s64, a: *float, lambda: *float, b: *float, c: *float, tol: *float, d: *float, in: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slagtf_64 :: (n: *s64, a: *float, lambda: *float, b: *float, c: *float, tol: *float, d: *float, in: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAGTM_64 :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float, dl: *float, d: *float, du: *float, x: *float, ldx: *s64, beta: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

slagtm_64 :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float, dl: *float, d: *float, du: *float, x: *float, ldx: *s64, beta: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

SLAGTS_64 :: (job: *s64, n: *s64, a: *float, b: *float, c: *float, d: *float, in: *s64, y: *float, tol: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slagts_64 :: (job: *s64, n: *s64, a: *float, b: *float, c: *float, d: *float, in: *s64, y: *float, tol: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAGV2_64 :: (a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, csl: *float, snl: *float, csr: *float, snr: *float) -> void #foreign mkl_intel_ilp64;

slagv2_64 :: (a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, csl: *float, snl: *float, csr: *float, snr: *float) -> void #foreign mkl_intel_ilp64;

SLAHQR_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slahqr_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAHR2_64 :: (n: *s64, k: *s64, nb: *s64, a: *float, lda: *s64, tau: *float, t: *float, ldt: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

slahr2_64 :: (n: *s64, k: *s64, nb: *s64, a: *float, lda: *s64, tau: *float, t: *float, ldt: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

SLAHRD_64 :: (n: *s64, k: *s64, nb: *s64, a: *float, lda: *s64, tau: *float, t: *float, ldt: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

slahrd_64 :: (n: *s64, k: *s64, nb: *s64, a: *float, lda: *s64, tau: *float, t: *float, ldt: *s64, y: *float, ldy: *s64) -> void #foreign mkl_intel_ilp64;

SLAIC1_64 :: (job: *s64, j: *s64, x: *float, sest: *float, w: *float, gamma: *float, sestpr: *float, s: *float, c: *float) -> void #foreign mkl_intel_ilp64;

slaic1_64 :: (job: *s64, j: *s64, x: *float, sest: *float, w: *float, gamma: *float, sestpr: *float, s: *float, c: *float) -> void #foreign mkl_intel_ilp64;

SLALN2_64 :: (ltrans: *s64, na: *s64, nw: *s64, smin: *float, ca: *float, a: *float, lda: *s64, d1: *float, d2: *float, b: *float, ldb: *s64, wr: *float, wi: *float, x: *float, ldx: *s64, scale: *float, xnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaln2_64 :: (ltrans: *s64, na: *s64, nw: *s64, smin: *float, ca: *float, a: *float, lda: *s64, d1: *float, d2: *float, b: *float, ldb: *s64, wr: *float, wi: *float, x: *float, ldx: *s64, scale: *float, xnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLALS0_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *float, ldb: *s64, bx: *float, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slals0_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *float, ldb: *s64, bx: *float, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLALSA_64 :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *float, ldb: *s64, bx: *float, ldbx: *s64, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slalsa_64 :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *float, ldb: *s64, bx: *float, ldbx: *s64, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLALSD_64 :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, rcond: *float, rank: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slalsd_64 :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, rcond: *float, rank: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAMC1_64 :: (beta: *s64, t: *s64, rnd: *s64, ieee1: *s64) -> void #foreign mkl_intel_ilp64;
slamc1_64 :: (beta: *s64, t: *s64, rnd: *s64, ieee1: *s64) -> void #foreign mkl_intel_ilp64;

SLAMC2_64 :: (beta: *s64, t: *s64, rnd: *s64, eps: *float, emin: *s64, rmin: *float, emax: *s64, rmax: *float) -> void #foreign mkl_intel_ilp64;

slamc2_64 :: (beta: *s64, t: *s64, rnd: *s64, eps: *float, emin: *s64, rmin: *float, emax: *s64, rmax: *float) -> void #foreign mkl_intel_ilp64;

SLAMC4_64 :: (emin: *s64, start: *float, base: *s64) -> void #foreign mkl_intel_ilp64;
slamc4_64 :: (emin: *s64, start: *float, base: *s64) -> void #foreign mkl_intel_ilp64;

SLAMC5_64 :: (beta: *s64, p: *s64, emin: *s64, ieee: *s64, emax: *s64, rmax: *float) -> void #foreign mkl_intel_ilp64;

slamc5_64 :: (beta: *s64, p: *s64, emin: *s64, ieee: *s64, emax: *s64, rmax: *float) -> void #foreign mkl_intel_ilp64;

SLAMRG_64 :: (n1: *s64, n2: *s64, a: *float, strd1: *s64, strd2: *s64, index: *s64) -> void #foreign mkl_intel_ilp64;

slamrg_64 :: (n1: *s64, n2: *s64, a: *float, strd1: *s64, strd2: *s64, index: *s64) -> void #foreign mkl_intel_ilp64;

SLANEG_64 :: (n: *s64, d: *float, lld: *float, sigma: *float, pivmin: *float, r: *s64) -> s64 #foreign mkl_intel_ilp64;

slaneg_64 :: (n: *s64, d: *float, lld: *float, sigma: *float, pivmin: *float, r: *s64) -> s64 #foreign mkl_intel_ilp64;

SLANGB_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slangb_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLANGE_64 :: (norm: *u8, m: *s64, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slange_64 :: (norm: *u8, m: *s64, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLANGT_64 :: (norm: *u8, n: *s64, dl: *float, d: *float, du: *float) -> float #foreign mkl_intel_ilp64;

slangt_64 :: (norm: *u8, n: *s64, dl: *float, d: *float, du: *float) -> float #foreign mkl_intel_ilp64;

SLANHS_64 :: (norm: *u8, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slanhs_64 :: (norm: *u8, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLANSB_64 :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slansb_64 :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLANSF_64 :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *float, work: *float) -> float #foreign mkl_intel_ilp64;

slansf_64 :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *float, work: *float) -> float #foreign mkl_intel_ilp64;

SLANSP_64 :: (norm: *u8, uplo: *u8, n: *s64, ap: *float, work: *float) -> float #foreign mkl_intel_ilp64;

slansp_64 :: (norm: *u8, uplo: *u8, n: *s64, ap: *float, work: *float) -> float #foreign mkl_intel_ilp64;

SLANST_64 :: (norm: *u8, n: *s64, d: *float, e: *float) -> float #foreign mkl_intel_ilp64;

slanst_64 :: (norm: *u8, n: *s64, d: *float, e: *float) -> float #foreign mkl_intel_ilp64;

SLANSY_64 :: (norm: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slansy_64 :: (norm: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLANTB_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slantb_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *float, ldab: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLANTP_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float, work: *float) -> float #foreign mkl_intel_ilp64;

slantp_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float, work: *float) -> float #foreign mkl_intel_ilp64;

SLANTR_64 :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

slantr_64 :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *float, lda: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLAPLL_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, ssmin: *float) -> void #foreign mkl_intel_ilp64;

slapll_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, ssmin: *float) -> void #foreign mkl_intel_ilp64;

SLAPMT_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *float, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

slapmt_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *float, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

SLAQGB_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqgb_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

SLAQGE_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqge_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

SLAQP2_64 :: (m: *s64, n: *s64, offset: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, vn1: *float, vn2: *float, work: *float) -> void #foreign mkl_intel_ilp64;

slaqp2_64 :: (m: *s64, n: *s64, offset: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, vn1: *float, vn2: *float, work: *float) -> void #foreign mkl_intel_ilp64;

SLAQPS_64 :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, vn1: *float, vn2: *float, auxv: *float, f: *float, ldf: *s64) -> void #foreign mkl_intel_ilp64;

slaqps_64 :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, jpvt: *s64, tau: *float, vn1: *float, vn2: *float, auxv: *float, f: *float, ldf: *s64) -> void #foreign mkl_intel_ilp64;

SLAQR0_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqr0_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAQR1_64 :: (n: *s64, h: *float, ldh: *s64, sr1: *float, si1: *float, sr2: *float, si2: *float, v: *float) -> void #foreign mkl_intel_ilp64;

slaqr1_64 :: (n: *s64, h: *float, ldh: *s64, sr1: *float, si1: *float, sr2: *float, si2: *float, v: *float) -> void #foreign mkl_intel_ilp64;

SLAQR2_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, ns: *s64, nd: *s64, sr: *float, si: *float, v: *float, ldv: *s64, nh: *s64, t: *float, ldt: *s64, nv: *s64, wv: *float, ldwv: *s64, work: *float, lwork: *s64) -> void #foreign mkl_intel_ilp64;

slaqr2_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, ns: *s64, nd: *s64, sr: *float, si: *float, v: *float, ldv: *s64, nh: *s64, t: *float, ldt: *s64, nv: *s64, wv: *float, ldwv: *s64, work: *float, lwork: *s64) -> void #foreign mkl_intel_ilp64;

SLAQR3_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, ns: *s64, nd: *s64, sr: *float, si: *float, v: *float, ldv: *s64, nh: *s64, t: *float, ldt: *s64, nv: *s64, wv: *float, ldwv: *s64, work: *float, lwork: *s64) -> void #foreign mkl_intel_ilp64;

slaqr3_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, ns: *s64, nd: *s64, sr: *float, si: *float, v: *float, ldv: *s64, nh: *s64, t: *float, ldt: *s64, nv: *s64, wv: *float, ldwv: *s64, work: *float, lwork: *s64) -> void #foreign mkl_intel_ilp64;

SLAQR4_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqr4_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *float, ldh: *s64, wr: *float, wi: *float, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAQR5_64 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, sr: *float, si: *float, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, v: *float, ldv: *s64, u: *float, ldu: *s64, nv: *s64, wv: *float, ldwv: *s64, nh: *s64, wh: *float, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

slaqr5_64 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, sr: *float, si: *float, h: *float, ldh: *s64, iloz: *s64, ihiz: *s64, z: *float, ldz: *s64, v: *float, ldv: *s64, u: *float, ldu: *s64, nv: *s64, wv: *float, ldwv: *s64, nh: *s64, wh: *float, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

SLAQSB_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqsb_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

SLAQSP_64 :: (uplo: *u8, n: *s64, ap: *float, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqsp_64 :: (uplo: *u8, n: *s64, ap: *float, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

SLAQSY_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

slaqsy_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, equed: *u8) -> void #foreign mkl_intel_ilp64;

SLAQTR_64 :: (ltran: *s64, lreal: *s64, n: *s64, t: *float, ldt: *s64, b: *float, w: *float, scale: *float, x: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqtr_64 :: (ltran: *s64, lreal: *s64, n: *s64, t: *float, ldt: *s64, b: *float, w: *float, scale: *float, x: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAQZ0_64 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqz0_64 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, work: *float, lwork: *s64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAQZ1_64 :: (a: *float, lda: *s64, b: *float, ldb: *s64, sr1: *float, sr2: *float, si: *float, beta1: *float, beta2: *float, v: *float) -> void #foreign mkl_intel_ilp64;

slaqz1_64 :: (a: *float, lda: *s64, b: *float, ldb: *s64, sr1: *float, sr2: *float, si: *float, beta1: *float, beta2: *float, v: *float) -> void #foreign mkl_intel_ilp64;

SLAQZ2_64 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, nq: *s64, qstart: *s64, q: *float, ldq: *s64, nz: *s64, zstart: *s64, z: *float, ldz: *s64) -> void #foreign mkl_intel_ilp64;

slaqz2_64 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, nq: *s64, qstart: *s64, q: *float, ldq: *s64, nz: *s64, zstart: *s64, z: *float, ldz: *s64) -> void #foreign mkl_intel_ilp64;

SLAQZ4_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alphar: *float, alphai: *float, beta: *float, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, qc: *float, ldqc: *s64, zc: *float, ldzc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slaqz4_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alphar: *float, alphai: *float, beta: *float, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, qc: *float, ldqc: *s64, zc: *float, ldzc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAR1V_64 :: (n: *s64, b1: *s64, bn: *s64, lambda: *float, d: *float, l: *float, ld: *float, lld: *float, pivmin: *float, gaptol: *float, z: *float, wantnc: *s64, negcnt: *s64, ztz: *float, mingma: *float, r: *s64, isuppz: *s64, nrminv: *float, resid: *float, rqcorr: *float, work: *float) -> void #foreign mkl_intel_ilp64;

slar1v_64 :: (n: *s64, b1: *s64, bn: *s64, lambda: *float, d: *float, l: *float, ld: *float, lld: *float, pivmin: *float, gaptol: *float, z: *float, wantnc: *s64, negcnt: *s64, ztz: *float, mingma: *float, r: *s64, isuppz: *s64, nrminv: *float, resid: *float, rqcorr: *float, work: *float) -> void #foreign mkl_intel_ilp64;

SLAR2V_64 :: (n: *s64, x: *float, y: *float, z: *float, incx: *s64, c: *float, s: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

slar2v_64 :: (n: *s64, x: *float, y: *float, z: *float, incx: *s64, c: *float, s: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

SLARFB_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

slarfb_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

SLARF_64 :: (side: *u8, m: *s64, n: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slarf_64 :: (side: *u8, m: *s64, n: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

SLARFG_64 :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

slarfg_64 :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

SLARFGP_64 :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

slarfgp_64 :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

SLARFP_64 :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

slarfp_64 :: (n: *s64, alpha: *float, x: *float, incx: *s64, tau: *float) -> void #foreign mkl_intel_ilp64;

SLARFT_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float, ldv: *s64, tau: *float, t: *float, ldt: *s64) -> void #foreign mkl_intel_ilp64;

slarft_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float, ldv: *s64, tau: *float, t: *float, ldt: *s64) -> void #foreign mkl_intel_ilp64;

SLARFX_64 :: (side: *u8, m: *s64, n: *s64, v: *float, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slarfx_64 :: (side: *u8, m: *s64, n: *s64, v: *float, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

SLARGV_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

slargv_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

SLARNV_64 :: (idist: *s64, iseed: *s64, n: *s64, x: *float) -> void #foreign mkl_intel_ilp64;

slarnv_64 :: (idist: *s64, iseed: *s64, n: *s64, x: *float) -> void #foreign mkl_intel_ilp64;

SLARRA_64 :: (n: *s64, d: *float, e: *float, e2: *float, spltol: *float, tnrm: *float, nsplit: *s64, isplit: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarra_64 :: (n: *s64, d: *float, e: *float, e2: *float, spltol: *float, tnrm: *float, nsplit: *s64, isplit: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRB_64 :: (n: *s64, d: *float, lld: *float, ifirst: *s64, ilast: *s64, rtol1: *float, rtol2: *float, offset: *s64, w: *float, wgap: *float, werr: *float, work: *float, iwork: *s64, pivmin: *float, spdiam: *float, twist: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrb_64 :: (n: *s64, d: *float, lld: *float, ifirst: *s64, ilast: *s64, rtol1: *float, rtol2: *float, offset: *s64, w: *float, wgap: *float, werr: *float, work: *float, iwork: *s64, pivmin: *float, spdiam: *float, twist: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRC_64 :: (jobt: *u8, n: *s64, vl: *float, vu: *float, d: *float, e: *float, pivmin: *float, eigcnt: *s64, lcnt: *s64, rcnt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrc_64 :: (jobt: *u8, n: *s64, vl: *float, vu: *float, d: *float, e: *float, pivmin: *float, eigcnt: *s64, lcnt: *s64, rcnt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRD_64 :: (range: *u8, order: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, gers: *float, reltol: *float, d: *float, e: *float, e2: *float, pivmin: *float, nsplit: *s64, isplit: *s64, m: *s64, w: *float, werr: *float, wl: *float, wu: *float, iblock: *s64, indexw: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrd_64 :: (range: *u8, order: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, gers: *float, reltol: *float, d: *float, e: *float, e2: *float, pivmin: *float, nsplit: *s64, isplit: *s64, m: *s64, w: *float, werr: *float, wl: *float, wu: *float, iblock: *s64, indexw: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRE_64 :: (range: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, d: *float, e: *float, e2: *float, rtol1: *float, rtol2: *float, spltol: *float, nsplit: *s64, isplit: *s64, m: *s64, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, pivmin: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarre_64 :: (range: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, d: *float, e: *float, e2: *float, rtol1: *float, rtol2: *float, spltol: *float, nsplit: *s64, isplit: *s64, m: *s64, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, pivmin: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRF_64 :: (n: *s64, d: *float, l: *float, ld: *float, clstrt: *s64, clend: *s64, w: *float, wgap: *float, werr: *float, spdiam: *float, clgapl: *float, clgapr: *float, pivmin: *float, sigma: *float, dplus: *float, lplus: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrf_64 :: (n: *s64, d: *float, l: *float, ld: *float, clstrt: *s64, clend: *s64, w: *float, wgap: *float, werr: *float, spdiam: *float, clgapl: *float, clgapr: *float, pivmin: *float, sigma: *float, dplus: *float, lplus: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRJ_64 :: (n: *s64, d: *float, e2: *float, ifirst: *s64, ilast: *s64, rtol: *float, offset: *s64, w: *float, werr: *float, work: *float, iwork: *s64, pivmin: *float, spdiam: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrj_64 :: (n: *s64, d: *float, e2: *float, ifirst: *s64, ilast: *s64, rtol: *float, offset: *s64, w: *float, werr: *float, work: *float, iwork: *s64, pivmin: *float, spdiam: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRK_64 :: (n: *s64, iw: *s64, gl: *float, gu: *float, d: *float, e2: *float, pivmin: *float, reltol: *float, w: *float, werr: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrk_64 :: (n: *s64, iw: *s64, gl: *float, gu: *float, d: *float, e2: *float, pivmin: *float, reltol: *float, w: *float, werr: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRR_64 :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
slarrr_64 :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARRV_64 :: (n: *s64, vl: *float, vu: *float, d: *float, l: *float, pivmin: *float, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float, rtol1: *float, rtol2: *float, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slarrv_64 :: (n: *s64, vl: *float, vu: *float, d: *float, l: *float, pivmin: *float, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float, rtol1: *float, rtol2: *float, w: *float, werr: *float, wgap: *float, iblock: *s64, indexw: *s64, gers: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARSCL2_64 :: (m: *s64, n: *s64, d: *float, x: *float, ldx: *s64) -> void #foreign mkl_intel_ilp64;

slarscl2_64 :: (m: *s64, n: *s64, d: *float, x: *float, ldx: *s64) -> void #foreign mkl_intel_ilp64;

SLARTV_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, s: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

slartv_64 :: (n: *s64, x: *float, incx: *s64, y: *float, incy: *s64, c: *float, s: *float, incc: *s64) -> void #foreign mkl_intel_ilp64;

SLARUV_64 :: (iseed: *s64, n: *s64, x: *float) -> void #foreign mkl_intel_ilp64;
slaruv_64 :: (iseed: *s64, n: *s64, x: *float) -> void #foreign mkl_intel_ilp64;

SLARZB_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

slarzb_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, c: *float, ldc: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

SLARZ_64 :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slarz_64 :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *float, incv: *s64, tau: *float, c: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

SLARZT_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float, ldv: *s64, tau: *float, t: *float, ldt: *s64) -> void #foreign mkl_intel_ilp64;

slarzt_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *float, ldv: *s64, tau: *float, t: *float, ldt: *s64) -> void #foreign mkl_intel_ilp64;

SLASCL_64 :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float, cto: *float, m: *s64, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slascl_64 :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float, cto: *float, m: *s64, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASCL2_64 :: (m: *s64, n: *s64, d: *float, x: *float, ldx: *s64) -> void #foreign mkl_intel_ilp64;

slascl2_64 :: (m: *s64, n: *s64, d: *float, x: *float, ldx: *s64) -> void #foreign mkl_intel_ilp64;

SLASD0_64 :: (n: *s64, sqre: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, smlsiz: *s64, iwork: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd0_64 :: (n: *s64, sqre: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, smlsiz: *s64, iwork: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD1_64 :: (nl: *s64, nr: *s64, sqre: *s64, d: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, idxq: *s64, iwork: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd1_64 :: (nl: *s64, nr: *s64, sqre: *s64, d: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, idxq: *s64, iwork: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD2_64 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, z: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, dsigma: *float, u2: *float, ldu2: *s64, vt2: *float, ldvt2: *s64, idxp: *s64, idx: *s64, idxc: *s64, idxq: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd2_64 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, z: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, vt: *float, ldvt: *s64, dsigma: *float, u2: *float, ldu2: *s64, vt2: *float, ldvt2: *s64, idxp: *s64, idx: *s64, idxc: *s64, idxq: *s64, coltyp: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD3_64 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, q: *float, ldq: *s64, dsigma: *float, u: *float, ldu: *s64, u2: *float, ldu2: *s64, vt: *float, ldvt: *s64, vt2: *float, ldvt2: *s64, idxc: *s64, ctot: *s64, z: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd3_64 :: (nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, q: *float, ldq: *s64, dsigma: *float, u: *float, ldu: *s64, u2: *float, ldu2: *s64, vt: *float, ldvt: *s64, vt2: *float, ldvt2: *s64, idxc: *s64, ctot: *s64, z: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD4_64 :: (n: *s64, i: *s64, d: *float, z: *float, delta: *float, rho: *float, sigma: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd4_64 :: (n: *s64, i: *s64, d: *float, z: *float, delta: *float, rho: *float, sigma: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD5_64 :: (i: *s64, d: *float, z: *float, delta: *float, rho: *float, dsigma: *float, work: *float) -> void #foreign mkl_intel_ilp64;

slasd5_64 :: (i: *s64, d: *float, z: *float, delta: *float, rho: *float, dsigma: *float, work: *float) -> void #foreign mkl_intel_ilp64;

SLASD6_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, d: *float, vf: *float, vl: *float, alpha: *float, beta: *float, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd6_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, d: *float, vf: *float, vl: *float, alpha: *float, beta: *float, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, poles: *float, difl: *float, difr: *float, z: *float, k: *s64, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD7_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, z: *float, zw: *float, vf: *float, vfw: *float, vl: *float, vlw: *float, alpha: *float, beta: *float, dsigma: *float, idx: *s64, idxp: *s64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, c: *float, s: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd7_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, k: *s64, d: *float, z: *float, zw: *float, vf: *float, vfw: *float, vl: *float, vlw: *float, alpha: *float, beta: *float, dsigma: *float, idx: *s64, idxp: *s64, idxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float, ldgnum: *s64, c: *float, s: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASD8_64 :: (icompq: *s64, k: *s64, d: *float, z: *float, vf: *float, vl: *float, difl: *float, difr: *float, lddifr: *s64, dsigma: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasd8_64 :: (icompq: *s64, k: *s64, d: *float, z: *float, vf: *float, vl: *float, difl: *float, difr: *float, lddifr: *s64, dsigma: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASDA_64 :: (icompq: *s64, smlsiz: *s64, n: *s64, sqre: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasda_64 :: (icompq: *s64, smlsiz: *s64, n: *s64, sqre: *s64, d: *float, e: *float, u: *float, ldu: *s64, vt: *float, k: *s64, difl: *float, difr: *float, z: *float, poles: *float, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float, c: *float, s: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASDQ_64 :: (uplo: *u8, sqre: *s64, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *float, ldvt: *s64, u: *float, ldu: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasdq_64 :: (uplo: *u8, sqre: *s64, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float, e: *float, vt: *float, ldvt: *s64, u: *float, ldu: *s64, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASDT_64 :: (n: *s64, lvl: *s64, nd: *s64, inode: *s64, ndiml: *s64, ndimr: *s64, msub: *s64) -> void #foreign mkl_intel_ilp64;

slasdt_64 :: (n: *s64, lvl: *s64, nd: *s64, inode: *s64, ndiml: *s64, ndimr: *s64, msub: *s64) -> void #foreign mkl_intel_ilp64;

SLASET_64 :: (uplo: *u8, m: *s64, n: *s64, alpha: *float, beta: *float, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

slaset_64 :: (uplo: *u8, m: *s64, n: *s64, alpha: *float, beta: *float, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

SLASQ1_64 :: (n: *s64, d: *float, e: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasq1_64 :: (n: *s64, d: *float, e: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASQ2_64 :: (n: *s64, z: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
slasq2_64 :: (n: *s64, z: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASQ3_64 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, dmin: *float, sigma: *float, desig: *float, qmax: *float, nfail: *s64, iter: *s64, ndiv: *s64, ieee: *s64, ttype: *s64, dmin1: *float, dmin2: *float, dn: *float, dn1: *float, dn2: *float, g: *float, tau: *float) -> void #foreign mkl_intel_ilp64;

slasq3_64 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, dmin: *float, sigma: *float, desig: *float, qmax: *float, nfail: *s64, iter: *s64, ndiv: *s64, ieee: *s64, ttype: *s64, dmin1: *float, dmin2: *float, dn: *float, dn1: *float, dn2: *float, g: *float, tau: *float) -> void #foreign mkl_intel_ilp64;

SLASQ4_64 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, n0in: *s64, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dn1: *float, dn2: *float, tau: *float, ttype: *s64, g: *float) -> void #foreign mkl_intel_ilp64;

slasq4_64 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, n0in: *s64, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dn1: *float, dn2: *float, tau: *float, ttype: *s64, g: *float) -> void #foreign mkl_intel_ilp64;

SLASQ5_64 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, tau: *float, sigma: *float, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dnm1: *float, dnm2: *float, ieee: *s64, eps: *float) -> void #foreign mkl_intel_ilp64;

slasq5_64 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, tau: *float, sigma: *float, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dnm1: *float, dnm2: *float, ieee: *s64, eps: *float) -> void #foreign mkl_intel_ilp64;

SLASQ6_64 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dnm1: *float, dnm2: *float) -> void #foreign mkl_intel_ilp64;

slasq6_64 :: (i0: *s64, n0: *s64, z: *float, pp: *s64, dmin: *float, dmin1: *float, dmin2: *float, dn: *float, dnm1: *float, dnm2: *float) -> void #foreign mkl_intel_ilp64;

SLASR_64 :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float, s: *float, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

slasr_64 :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float, s: *float, a: *float, lda: *s64) -> void #foreign mkl_intel_ilp64;

SLASRT_64 :: (id: *u8, n: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
slasrt_64 :: (id: *u8, n: *s64, d: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASSQ_64 :: (n: *s64, x: *float, incx: *s64, scale: *float, sumsq: *float) -> void #foreign mkl_intel_ilp64;

slassq_64 :: (n: *s64, x: *float, incx: *s64, scale: *float, sumsq: *float) -> void #foreign mkl_intel_ilp64;

SLASWP_64 :: (n: *s64, a: *float, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

slaswp_64 :: (n: *s64, a: *float, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

SLASY2_64 :: (ltranl: *s64, ltranr: *s64, isgn: *s64, n1: *s64, n2: *s64, tl: *float, ldtl: *s64, tr: *float, ldtr: *s64, b: *float, ldb: *s64, scale: *float, x: *float, ldx: *s64, xnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slasy2_64 :: (ltranl: *s64, ltranr: *s64, isgn: *s64, n1: *s64, n2: *s64, tl: *float, ldtl: *s64, tr: *float, ldtr: *s64, b: *float, ldb: *s64, scale: *float, x: *float, ldx: *s64, xnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLASYF_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slasyf_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *float, lda: *s64, ipiv: *s64, w: *float, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATBS_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatbs_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATDF_64 :: (ijob: *s64, n: *s64, z: *float, ldz: *s64, rhs: *float, rdsum: *float, rdscal: *float, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

slatdf_64 :: (ijob: *s64, n: *s64, z: *float, ldz: *s64, rhs: *float, rdsum: *float, rdscal: *float, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

SLATPS_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *float, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatps_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *float, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATRD_64 :: (uplo: *u8, n: *s64, nb: *s64, a: *float, lda: *s64, e: *float, tau: *float, w: *float, ldw: *s64) -> void #foreign mkl_intel_ilp64;

slatrd_64 :: (uplo: *u8, n: *s64, nb: *s64, a: *float, lda: *s64, e: *float, tau: *float, w: *float, ldw: *s64) -> void #foreign mkl_intel_ilp64;

SLATRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *float, lda: *s64, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *float, lda: *s64, x: *float, scale: *float, cnorm: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATRZ_64 :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, tau: *float, work: *float) -> void #foreign mkl_intel_ilp64;

slatrz_64 :: (m: *s64, n: *s64, l: *s64, a: *float, lda: *s64, tau: *float, work: *float) -> void #foreign mkl_intel_ilp64;

SLATZM_64 :: (side: *u8, m: *s64, n: *s64, v: *float, incv: *s64, tau: *float, c1: *float, c2: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

slatzm_64 :: (side: *u8, m: *s64, n: *s64, v: *float, incv: *s64, tau: *float, c1: *float, c2: *float, ldc: *s64, work: *float) -> void #foreign mkl_intel_ilp64;

SLAUU2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slauu2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAUUM_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slauum_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SOPGTR_64 :: (uplo: *u8, n: *s64, ap: *float, tau: *float, q: *float, ldq: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sopgtr_64 :: (uplo: *u8, n: *s64, ap: *float, tau: *float, q: *float, ldq: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SOPMTR_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *float, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sopmtr_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *float, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORG2L_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorg2l_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORG2R_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorg2r_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGBR_64 :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgbr_64 :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGHR_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorghr_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGL2_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgl2_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGLQ_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorglq_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGQL_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgql_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGQR_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgqr_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGR2_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgr2_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGRQ_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgrq_64 :: (m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORGTR_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sorgtr_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORM2L_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorm2l_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORM2R_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorm2r_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMBR_64 :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormbr_64 :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMHR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormhr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORML2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sorml2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMLQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormlq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMQL_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormql_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMQR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormqr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMR2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sormr2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMR3_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sormr3_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMRQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormrq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMRZ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormrz_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SORMTR_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sormtr_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, c: *float, ldc: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBCON_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbcon_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBEQU_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spbequ_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBRFS_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbrfs_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBSTF_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbstf_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBSV_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbsv_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBTF2_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbtf2_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBTRF_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbtrf_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPBTRS_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spbtrs_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPFTRF_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spftrf_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPFTRI_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spftri_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPFTRS_64 :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spftrs_64 :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOCON_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spocon_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOEQUB_64 :: (n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spoequb_64 :: (n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOEQU_64 :: (n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spoequ_64 :: (n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPORFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sporfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPORFSX_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sporfsx_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sposv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sposvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOSVXX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sposvxx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOTF2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spotf2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOTRF_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spotrf_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOTRI_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spotri_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPOTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spotrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPCON_64 :: (uplo: *u8, n: *s64, ap: *float, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sppcon_64 :: (uplo: *u8, n: *s64, ap: *float, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPEQU_64 :: (uplo: *u8, n: *s64, ap: *float, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sppequ_64 :: (uplo: *u8, n: *s64, ap: *float, s: *float, scond: *float, amax: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spprfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sppsv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sppsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPTRF_64 :: (uplo: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
spptrf_64 :: (uplo: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPTRI_64 :: (uplo: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
spptri_64 :: (uplo: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPPTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spptrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPSTF2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spstf2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPSTRF_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spstrf_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, piv: *s64, rank: *s64, tol: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTCON_64 :: (n: *s64, d: *float, e: *float, anorm: *float, rcond: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sptcon_64 :: (n: *s64, d: *float, e: *float, anorm: *float, rcond: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTEQR_64 :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

spteqr_64 :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTRFS_64 :: (n: *s64, nrhs: *s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sptrfs_64 :: (n: *s64, nrhs: *s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTSV_64 :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sptsv_64 :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTSVX_64 :: (fact: *u8, n: *s64, nrhs: *s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sptsvx_64 :: (fact: *u8, n: *s64, nrhs: *s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTTRF_64 :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
spttrf_64 :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTTRS_64 :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

spttrs_64 :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SPTTS2_64 :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

sptts2_64 :: (n: *s64, nrhs: *s64, d: *float, e: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

SRSCL_64 :: (n: *s64, sa: *float, sx: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

srscl_64 :: (n: *s64, sa: *float, sx: *float, incx: *s64) -> void #foreign mkl_intel_ilp64;

SSBEVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbevd_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBEV_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbev_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBEVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbevx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBGST_64 :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, x: *float, ldx: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbgst_64 :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, x: *float, ldx: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBGVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbgvd_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBGV_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbgv_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBGVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbgvx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *float, ldab: *s64, bb: *float, ldbb: *s64, q: *float, ldq: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSBTRD_64 :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, d: *float, e: *float, q: *float, ldq: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssbtrd_64 :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, d: *float, e: *float, q: *float, ldq: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSFRK_64 :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, beta: *float, c: *float) -> void #foreign mkl_intel_ilp64;

ssfrk_64 :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float, a: *float, lda: *s64, beta: *float, c: *float) -> void #foreign mkl_intel_ilp64;

SSPCON_64 :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspcon_64 :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPEVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspevd_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPEV_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sspev_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *float, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPEVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspevx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPGST_64 :: (itype: *s64, uplo: *u8, n: *s64, ap: *float, bp: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sspgst_64 :: (itype: *s64, uplo: *u8, n: *s64, ap: *float, bp: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPGVD_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspgvd_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPGV_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sspgv_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, w: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPGVX_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspgvx_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *float, bp: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssprfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspsv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sspsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPTRD_64 :: (uplo: *u8, n: *s64, ap: *float, d: *float, e: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssptrd_64 :: (uplo: *u8, n: *s64, ap: *float, d: *float, e: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPTRF_64 :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssptrf_64 :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPTRI_64 :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssptri_64 :: (uplo: *u8, n: *s64, ap: *float, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSPTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssptrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *float, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEBZ_64 :: (range: *u8, order: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, d: *float, e: *float, m: *s64, nsplit: *s64, w: *float, iblock: *s64, isplit: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstebz_64 :: (range: *u8, order: *u8, n: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, d: *float, e: *float, m: *s64, nsplit: *s64, w: *float, iblock: *s64, isplit: *s64, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEDC_64 :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstedc_64 :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEGR_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstegr_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEIN_64 :: (n: *s64, d: *float, e: *float, m: *s64, w: *float, iblock: *s64, isplit: *s64, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstein_64 :: (n: *s64, d: *float, e: *float, m: *s64, w: *float, iblock: *s64, isplit: *s64, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEMR_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, m: *s64, w: *float, z: *float, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstemr_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, m: *s64, w: *float, z: *float, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEQR_64 :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssteqr_64 :: (compz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTERF_64 :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
ssterf_64 :: (n: *s64, d: *float, e: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEVD_64 :: (jobz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstevd_64 :: (jobz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEV_64 :: (jobz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sstev_64 :: (jobz: *u8, n: *s64, d: *float, e: *float, z: *float, ldz: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEVR_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstevr_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSTEVX_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sstevx_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float, e: *float, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYCON_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssycon_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, anorm: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEQUB_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyequb_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, s: *float, scond: *float, amax: *float, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevd_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEV_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyev_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEVR_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevr_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, isuppz: *s64, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYEVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyevx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYGS2_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygs2_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYGST_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygst_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYGVD_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygvd_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYGV_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygv_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, w: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYGVX_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssygvx_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, vl: *float, vu: *float, il: *s64, iu: *s64, abstol: *float, m: *s64, w: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyrfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYRFSX_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyrfsx_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, ferr: *float, berr: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYSVXX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssysvxx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: *s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: *s64, params: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTD2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytd2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTF2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytf2_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRD_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrd_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRF_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrf_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRI_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytri_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ipiv: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssytrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, ipiv: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STBCON_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stbcon_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *float, ldab: *s64, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STBRFS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stbrfs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STBTRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stbtrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *float, ldab: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STFSM_64 :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

stfsm_64 :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *float, a: *float, b: *float, ldb: *s64) -> void #foreign mkl_intel_ilp64;

STFTRI_64 :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stftri_64 :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STFTTP_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *float, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stfttp_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *float, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STFTTR_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *float, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stfttr_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *float, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGEVC_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *float, lds: *s64, p: *float, ldp: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stgevc_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *float, lds: *s64, p: *float, ldp: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STGEX2_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgex2_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, j1: *s64, n1: *s64, n2: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGEXC_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, ifst: *s64, ilst: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgexc_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, q: *float, ldq: *s64, z: *float, ldz: *s64, ifst: *s64, ilst: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGSEN_64 :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, m: *s64, pl: *float, pr: *float, dif: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsen_64 :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: *s64, z: *float, ldz: *s64, m: *s64, pl: *float, pr: *float, dif: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGSJA_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsja_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, tola: *float, tolb: *float, alpha: *float, beta: *float, u: *float, ldu: *s64, v: *float, ldv: *s64, q: *float, ldq: *s64, work: *float, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGSNA_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, s: *float, dif: *float, mm: *s64, m: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsna_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, s: *float, dif: *float, mm: *s64, m: *s64, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGSY2_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, scale: *float, rdsum: *float, rdscal: *float, iwork: *s64, pq: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsy2_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, scale: *float, rdsum: *float, rdscal: *float, iwork: *s64, pq: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STGSYL_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, scale: *float, dif: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stgsyl_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, scale: *float, dif: *float, work: *float, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPCON_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stpcon_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *float, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPRFS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stprfs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPTRI_64 :: (uplo: *u8, diag: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stptri_64 :: (uplo: *u8, diag: *u8, n: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STPTRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stptrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STPTTF_64 :: (transr: *u8, uplo: *u8, n: *s64, ap: *float, arf: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stpttf_64 :: (transr: *u8, uplo: *u8, n: *s64, ap: *float, arf: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STPTTR_64 :: (uplo: *u8, n: *s64, ap: *float, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stpttr_64 :: (uplo: *u8, n: *s64, ap: *float, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRCON_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strcon_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, rcond: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STREVC_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strevc_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, mm: *s64, m: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STREXC_64 :: (compq: *u8, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, ifst: *s64, ilst: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strexc_64 :: (compq: *u8, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, ifst: *s64, ilst: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STRRFS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strrfs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, x: *float, ldx: *s64, ferr: *float, berr: *float, work: *float, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRSEN_64 :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, wr: *float, wi: *float, m: *s64, s: *float, sep: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strsen_64 :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, q: *float, ldq: *s64, wr: *float, wi: *float, m: *s64, s: *float, sep: *float, work: *float, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRSNA_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, s: *float, sep: *float, mm: *s64, m: *s64, work: *float, ldwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strsna_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *float, ldt: *s64, vl: *float, ldvl: *s64, vr: *float, ldvr: *s64, s: *float, sep: *float, mm: *s64, m: *s64, work: *float, ldwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRSYL_64 :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strsyl_64 :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, scale: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STRTI2_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strti2_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRTRI_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strtri_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *float, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRTRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

strtrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

STRTTF_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, arf: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strttf_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *float, lda: *s64, arf: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STRTTP_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

strttp_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, ap: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STZRQF_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

stzrqf_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

STZRZF_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

stzrzf_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, tau: *float, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

XERBLA_ARRAY_64 :: (srname_array: *u8, srname_len: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

xerbla_array_64 :: (srname_array: *u8, srname_len: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZBDSQR_64 :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *MKL_Complex16, ldvt: *s64, u: *MKL_Complex16, ldu: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zbdsqr_64 :: (uplo: *u8, n: *s64, ncvt: *s64, nru: *s64, ncc: *s64, d: *float64, e: *float64, vt: *MKL_Complex16, ldvt: *s64, u: *MKL_Complex16, ldu: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZCGESV_64 :: (n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, swork: *MKL_Complex8, rwork: *float64, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zcgesv_64 :: (n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, swork: *MKL_Complex8, rwork: *float64, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZCPOSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, swork: *MKL_Complex8, rwork: *float64, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zcposv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, swork: *MKL_Complex8, rwork: *float64, iter: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZDRSCL_64 :: (n: *s64, sa: *float64, sx: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

zdrscl_64 :: (n: *s64, sa: *float64, sx: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZGBBRD_64 :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, pt: *MKL_Complex16, ldpt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbbrd_64 :: (vect: *u8, m: *s64, n: *s64, ncc: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, pt: *MKL_Complex16, ldpt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBCON_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbcon_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBEQUB_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbequb_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBEQU_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbequ_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBRFS_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbrfs_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBRFSX_64 :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbrfsx_64 :: (trans: *u8, equed: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBSV_64 :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbsv_64 :: (n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBSVX_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbsvx_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBSVXX_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbsvxx_64 :: (fact: *u8, trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBTF2_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbtf2_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBTRF_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbtrf_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGBTRS_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgbtrs_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEBAK_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float64, m: *s64, v: *MKL_Complex16, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgebak_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, scale: *float64, m: *s64, v: *MKL_Complex16, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEBAL_64 :: (job: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ilo: *s64, ihi: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgebal_64 :: (job: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ilo: *s64, ihi: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEBD2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgebd2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEBRD_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgebrd_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGECON_64 :: (norm: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgecon_64 :: (norm: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEEQUB_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeequb_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEEQU_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeequ_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEES_64 :: (jobvs: *u8, sort: *u8, select: MKL_Z_SELECT_FUNCTION_1_64, n: *s64, a: *MKL_Complex16, lda: *s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgees_64 :: (jobvs: *u8, sort: *u8, select: MKL_Z_SELECT_FUNCTION_1_64, n: *s64, a: *MKL_Complex16, lda: *s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEESX_64 :: (jobvs: *u8, sort: *u8, select: MKL_Z_SELECT_FUNCTION_1_64, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: *s64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeesx_64 :: (jobvs: *u8, sort: *u8, select: MKL_Z_SELECT_FUNCTION_1_64, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: *s64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEEV_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeev_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEEVX_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeevx_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEGS_64 :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgegs_64 :: (jobvsl: *u8, jobvsr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEGV_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgegv_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEHD2_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgehd2_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEHRD_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgehrd_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELQ2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelq2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELQF_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelqf_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELSD_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelsd_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELS_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgels_64 :: (trans: *u8, m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELSS_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelss_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, s: *float64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELSX_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelsx_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGELSY_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgelsy_64 :: (m: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, jpvt: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQL2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeql2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQLF_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqlf_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQP3_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqp3_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQPF_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqpf_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQR2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqr2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQR2P_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqr2p_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQRF_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrf_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQRFP_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrfp_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGERFS_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgerfs_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGERFSX_64 :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgerfsx_64 :: (trans: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGERQ2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgerq2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGERQF_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgerqf_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESC2_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, rhs: *MKL_Complex16, ipiv: *s64, jpiv: *s64, scale: *float64) -> void #foreign mkl_intel_ilp64;

zgesc2_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, rhs: *MKL_Complex16, ipiv: *s64, jpiv: *s64, scale: *float64) -> void #foreign mkl_intel_ilp64;

ZGESDD_64 :: (jobz: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesdd_64 :: (jobz: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESVD_64 :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvd_64 :: (jobu: *u8, jobvt: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, u: *MKL_Complex16, ldu: *s64, vt: *MKL_Complex16, ldvt: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESV_64 :: (n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesv_64 :: (n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESVX_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvx_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGESVXX_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgesvxx_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETC2_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetc2_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, jpiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETF2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetf2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRF_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrf_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRI_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetri_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGETRS_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgetrs_64 :: (trans: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGBAK_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, m: *s64, v: *MKL_Complex16, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggbak_64 :: (job: *u8, side: *u8, n: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, m: *s64, v: *MKL_Complex16, ldv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGBAL_64 :: (job: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggbal_64 :: (job: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGES_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2_64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgges_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2_64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGESX_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2_64, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggesx_64 :: (jobvsl: *u8, jobvsr: *u8, sort: *u8, selctg: MKL_Z_SELECT_FUNCTION_2_64, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: *s64, vsr: *MKL_Complex16, ldvsr: *s64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, liwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGEV_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggev_64 :: (jobvl: *u8, jobvr: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGEVX_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggevx_64 :: (balanc: *u8, jobvl: *u8, jobvr: *u8, sense: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, bwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGGLM_64 :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, d: *MKL_Complex16, x: *MKL_Complex16, y: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggglm_64 :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, d: *MKL_Complex16, x: *MKL_Complex16, y: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGHRD_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgghrd_64 :: (compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGLSE_64 :: (m: *s64, n: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, d: *MKL_Complex16, x: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgglse_64 :: (m: *s64, n: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, d: *MKL_Complex16, x: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGQRF_64 :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, taub: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggqrf_64 :: (n: *s64, m: *s64, p: *s64, a: *MKL_Complex16, lda: *s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, taub: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGRQF_64 :: (m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, taub: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggrqf_64 :: (m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, taub: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGSVD_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zggsvd_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, n: *s64, p: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGGSVP_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, iwork: *s64, rwork: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zggsvp_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, iwork: *s64, rwork: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTCON_64 :: (norm: *u8, n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zgtcon_64 :: (norm: *u8, n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTRFS_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgtrfs_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTSV_64 :: (n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgtsv_64 :: (n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTSVX_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgtsvx_64 :: (fact: *u8, trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTTRF_64 :: (n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgttrf_64 :: (n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTTRS_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgttrs_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZGTTS2_64 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zgtts2_64 :: (itrans: *s64, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZHBEVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbevd_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBEV_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbev_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBEVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbevx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBGST_64 :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbgst_64 :: (vect: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, x: *MKL_Complex16, ldx: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBGVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbgvd_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBGV_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbgv_64 :: (jobz: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBGVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbgvx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ka: *s64, kb: *s64, ab: *MKL_Complex16, ldab: *s64, bb: *MKL_Complex16, ldbb: *s64, q: *MKL_Complex16, ldq: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHBTRD_64 :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhbtrd_64 :: (vect: *u8, uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHECON_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhecon_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEQUB_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zheequb_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevd_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEV_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheev_64 :: (jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEVR_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevr_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEEVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zheevx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEGS2_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegs2_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEGST_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegst_64 :: (itype: *s64, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEGVD_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegvd_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEGV_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegv_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, w: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHEGVX_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhegvx_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHERFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zherfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHERFSX_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zherfsx_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESVXX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhesvxx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETD2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetd2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETF2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetf2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRD_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrd_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRF_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrf_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRI_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHFRK_64 :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, beta: *float64, c: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zhfrk_64 :: (transr: *u8, uplo: *u8, trans: *u8, n: *s64, k: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, beta: *float64, c: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZHGEQZ_64 :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, t: *MKL_Complex16, ldt: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhgeqz_64 :: (job: *u8, compq: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, t: *MKL_Complex16, ldt: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPCON_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpcon_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPEVD_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpevd_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPEV_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpev_64 :: (jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPEVX_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpevx_64 :: (jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPGST_64 :: (itype: *s64, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpgst_64 :: (itype: *s64, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPGVD_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpgvd_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPGV_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpgv_64 :: (itype: *s64, jobz: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPGVX_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpgvx_64 :: (itype: *s64, jobz: *u8, range: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, bp: *MKL_Complex16, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhprfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpsv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhpsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPTRD_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, d: *float64, e: *float64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhptrd_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, d: *float64, e: *float64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPTRF_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhptrf_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPTRI_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zhptri_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHPTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhptrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHSEIN_64 :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhsein_64 :: (side: *u8, eigsrc: *u8, initv: *u8, select: *s64, n: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, ifaill: *s64, ifailr: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHSEQR_64 :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhseqr_64 :: (job: *u8, compz: *u8, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLABRD_64 :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

zlabrd_64 :: (m: *s64, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

ZLACGV_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;
zlacgv_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZLACN2_64 :: (n: *s64, v: *MKL_Complex16, x: *MKL_Complex16, est: *float64, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

zlacn2_64 :: (n: *s64, v: *MKL_Complex16, x: *MKL_Complex16, est: *float64, kase: *s64, isave: *s64) -> void #foreign mkl_intel_ilp64;

ZLACON_64 :: (n: *s64, v: *MKL_Complex16, x: *MKL_Complex16, est: *float64, kase: *s64) -> void #foreign mkl_intel_ilp64;

zlacon_64 :: (n: *s64, v: *MKL_Complex16, x: *MKL_Complex16, est: *float64, kase: *s64) -> void #foreign mkl_intel_ilp64;

ZLACP2_64 :: (uplo: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zlacp2_64 :: (uplo: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZLACPY_64 :: (uplo: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zlacpy_64 :: (uplo: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZLACRM_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *float64, ldb: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64) -> void #foreign mkl_intel_ilp64;

zlacrm_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *float64, ldb: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64) -> void #foreign mkl_intel_ilp64;

ZLACRT_64 :: (n: *s64, cx: *MKL_Complex16, incx: *s64, cy: *MKL_Complex16, incy: *s64, c: *MKL_Complex16, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlacrt_64 :: (n: *s64, cx: *MKL_Complex16, incx: *s64, cy: *MKL_Complex16, incy: *s64, c: *MKL_Complex16, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLAED0_64 :: (qsiz: *s64, n: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, qstore: *MKL_Complex16, ldqs: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaed0_64 :: (qsiz: *s64, n: *s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: *s64, qstore: *MKL_Complex16, ldqs: *s64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAED7_64 :: (n: *s64, cutpnt: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float64, q: *MKL_Complex16, ldq: *s64, rho: *float64, indxq: *s64, qstore: *float64, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaed7_64 :: (n: *s64, cutpnt: *s64, qsiz: *s64, tlvls: *s64, curlvl: *s64, curpbm: *s64, d: *float64, q: *MKL_Complex16, ldq: *s64, rho: *float64, indxq: *s64, qstore: *float64, qptr: *s64, prmptr: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAED8_64 :: (k: *s64, n: *s64, qsiz: *s64, q: *MKL_Complex16, ldq: *s64, d: *float64, rho: *float64, cutpnt: *s64, z: *float64, dlamda: *float64, q2: *MKL_Complex16, ldq2: *s64, w: *float64, indxp: *s64, indx: *s64, indxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaed8_64 :: (k: *s64, n: *s64, qsiz: *s64, q: *MKL_Complex16, ldq: *s64, d: *float64, rho: *float64, cutpnt: *s64, z: *float64, dlamda: *float64, q2: *MKL_Complex16, ldq2: *s64, w: *float64, indxp: *s64, indx: *s64, indxq: *s64, perm: *s64, givptr: *s64, givcol: *s64, givnum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAEIN_64 :: (rightv: *s64, noinit: *s64, n: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, v: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, rwork: *float64, eps3: *float64, smlnum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaein_64 :: (rightv: *s64, noinit: *s64, n: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, v: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, rwork: *float64, eps3: *float64, smlnum: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAG2C_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sa: *MKL_Complex8, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlag2c_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, sa: *MKL_Complex8, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAGS2_64 :: (upper: *s64, a1: *float64, a2: *MKL_Complex16, a3: *float64, b1: *float64, b2: *MKL_Complex16, b3: *float64, csu: *float64, snu: *MKL_Complex16, csv: *float64, snv: *MKL_Complex16, csq: *float64, snq: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlags2_64 :: (upper: *s64, a1: *float64, a2: *MKL_Complex16, a3: *float64, b1: *float64, b2: *MKL_Complex16, b3: *float64, csu: *float64, snu: *MKL_Complex16, csv: *float64, snv: *MKL_Complex16, csq: *float64, snq: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLAGTM_64 :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, beta: *float64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zlagtm_64 :: (trans: *u8, n: *s64, nrhs: *s64, alpha: *float64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, beta: *float64, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHEF_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahef_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHQR_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlahqr_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHR2_64 :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

zlahr2_64 :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

ZLAHRD_64 :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

zlahrd_64 :: (n: *s64, k: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64, y: *MKL_Complex16, ldy: *s64) -> void #foreign mkl_intel_ilp64;

ZLAIC1_64 :: (job: *s64, j: *s64, x: *MKL_Complex16, sest: *float64, w: *MKL_Complex16, gamma: *MKL_Complex16, sestpr: *float64, s: *MKL_Complex16, c: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlaic1_64 :: (job: *s64, j: *s64, x: *MKL_Complex16, sest: *float64, w: *MKL_Complex16, gamma: *MKL_Complex16, sestpr: *float64, s: *MKL_Complex16, c: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLALS0_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *MKL_Complex16, ldb: *s64, bx: *MKL_Complex16, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlals0_64 :: (icompq: *s64, nl: *s64, nr: *s64, sqre: *s64, nrhs: *s64, b: *MKL_Complex16, ldb: *s64, bx: *MKL_Complex16, ldbx: *s64, perm: *s64, givptr: *s64, givcol: *s64, ldgcol: *s64, givnum: *float64, ldgnum: *s64, poles: *float64, difl: *float64, difr: *float64, z: *float64, k: *s64, c: *float64, s: *float64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLALSA_64 :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *MKL_Complex16, ldb: *s64, bx: *MKL_Complex16, ldbx: *s64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlalsa_64 :: (icompq: *s64, smlsiz: *s64, n: *s64, nrhs: *s64, b: *MKL_Complex16, ldb: *s64, bx: *MKL_Complex16, ldbx: *s64, u: *float64, ldu: *s64, vt: *float64, k: *s64, difl: *float64, difr: *float64, z: *float64, poles: *float64, givptr: *s64, givcol: *s64, ldgcol: *s64, perm: *s64, givnum: *float64, c: *float64, s: *float64, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLALSD_64 :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *MKL_Complex16, ldb: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlalsd_64 :: (uplo: *u8, smlsiz: *s64, n: *s64, nrhs: *s64, d: *float64, e: *float64, b: *MKL_Complex16, ldb: *s64, rcond: *float64, rank: *s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLANGB_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlangb_64 :: (norm: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANGE_64 :: (norm: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlange_64 :: (norm: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANGT_64 :: (norm: *u8, n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;

zlangt_64 :: (norm: *u8, n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;

ZLANHB_64 :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhb_64 :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANHE_64 :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhe_64 :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANHF_64 :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhf_64 :: (norm: *u8, transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANHP_64 :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhp_64 :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANHS_64 :: (norm: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlanhs_64 :: (norm: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANHT_64 :: (norm: *u8, n: *s64, d: *float64, e: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;

zlanht_64 :: (norm: *u8, n: *s64, d: *float64, e: *MKL_Complex16) -> float64 #foreign mkl_intel_ilp64;

ZLANSB_64 :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlansb_64 :: (norm: *u8, uplo: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANSP_64 :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlansp_64 :: (norm: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANSY_64 :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlansy_64 :: (norm: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANTB_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlantb_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, k: *s64, ab: *MKL_Complex16, ldab: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANTP_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlantp_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLANTR_64 :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zlantr_64 :: (norm: *u8, uplo: *u8, diag: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLAPLL_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, ssmin: *float64) -> void #foreign mkl_intel_ilp64;

zlapll_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, ssmin: *float64) -> void #foreign mkl_intel_ilp64;

ZLAPMT_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex16, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

zlapmt_64 :: (forwrd: *s64, m: *s64, n: *s64, x: *MKL_Complex16, ldx: *s64, k: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQGB_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqgb_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQGE_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqge_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQHB_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqhb_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQHE_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqhe_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQHP_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqhp_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQP2_64 :: (m: *s64, n: *s64, offset: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, vn1: *float64, vn2: *float64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlaqp2_64 :: (m: *s64, n: *s64, offset: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, vn1: *float64, vn2: *float64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLAQPS_64 :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, vn1: *float64, vn2: *float64, auxv: *MKL_Complex16, f: *MKL_Complex16, ldf: *s64) -> void #foreign mkl_intel_ilp64;

zlaqps_64 :: (m: *s64, n: *s64, offset: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, jpvt: *s64, tau: *MKL_Complex16, vn1: *float64, vn2: *float64, auxv: *MKL_Complex16, f: *MKL_Complex16, ldf: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQR0_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr0_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQR1_64 :: (n: *s64, h: *MKL_Complex16, ldh: *s64, s1: *MKL_Complex16, s2: *MKL_Complex16, v: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlaqr1_64 :: (n: *s64, h: *MKL_Complex16, ldh: *s64, s1: *MKL_Complex16, s2: *MKL_Complex16, v: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLAQR2_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex16, v: *MKL_Complex16, ldv: *s64, nh: *s64, t: *MKL_Complex16, ldt: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, work: *MKL_Complex16, lwork: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr2_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex16, v: *MKL_Complex16, ldv: *s64, nh: *s64, t: *MKL_Complex16, ldt: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, work: *MKL_Complex16, lwork: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQR3_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex16, v: *MKL_Complex16, ldv: *s64, nh: *s64, t: *MKL_Complex16, ldt: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, work: *MKL_Complex16, lwork: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr3_64 :: (wantt: *s64, wantz: *s64, n: *s64, ktop: *s64, kbot: *s64, nw: *s64, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, sh: *MKL_Complex16, v: *MKL_Complex16, ldv: *s64, nh: *s64, t: *MKL_Complex16, ldt: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, work: *MKL_Complex16, lwork: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQR4_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr4_64 :: (wantt: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, h: *MKL_Complex16, ldh: *s64, w: *MKL_Complex16, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQR5_64 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, s: *MKL_Complex16, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, v: *MKL_Complex16, ldv: *s64, u: *MKL_Complex16, ldu: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, nh: *s64, wh: *MKL_Complex16, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

zlaqr5_64 :: (wantt: *s64, wantz: *s64, kacc22: *s64, n: *s64, ktop: *s64, kbot: *s64, nshfts: *s64, s: *MKL_Complex16, h: *MKL_Complex16, ldh: *s64, iloz: *s64, ihiz: *s64, z: *MKL_Complex16, ldz: *s64, v: *MKL_Complex16, ldv: *s64, u: *MKL_Complex16, ldu: *s64, nv: *s64, wv: *MKL_Complex16, ldwv: *s64, nh: *s64, wh: *MKL_Complex16, ldwh: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQSB_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqsb_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQSP_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqsp_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQSY_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

zlaqsy_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, equed: *u8) -> void #foreign mkl_intel_ilp64;

ZLAQZ0_64 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqz0_64 :: (wants: *s64, wantq: *s64, wantz: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQZ1_64 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, nq: *s64, qstart: *s64, q: *MKL_Complex16, ldq: *s64, nz: *s64, zstart: *s64, z: *MKL_Complex16, ldz: *s64) -> void #foreign mkl_intel_ilp64;

zlaqz1_64 :: (ilq: *s64, ilz: *s64, k: *s64, istartm: *s64, istopm: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, nq: *s64, qstart: *s64, q: *MKL_Complex16, ldq: *s64, nz: *s64, zstart: *s64, z: *MKL_Complex16, ldz: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQZ2_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, qc: *MKL_Complex16, ldqc: *s64, zc: *MKL_Complex16, ldzc: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqz2_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nw: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, ns: *s64, nd: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, qc: *MKL_Complex16, ldqc: *s64, zc: *MKL_Complex16, ldzc: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, rec: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAQZ3_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, qc: *MKL_Complex16, ldqc: *s64, zc: *MKL_Complex16, ldzc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaqz3_64 :: (ilschur: *s64, ilq: *s64, ilz: *s64, n: *s64, ilo: *s64, ihi: *s64, nshifts: *s64, nb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, qc: *MKL_Complex16, ldqc: *s64, zc: *MKL_Complex16, ldzc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAR1V_64 :: (n: *s64, b1: *s64, bn: *s64, lambda: *float64, d: *float64, l: *float64, ld: *float64, lld: *float64, pivmin: *float64, gaptol: *float64, z: *MKL_Complex16, wantnc: *s64, negcnt: *s64, ztz: *float64, mingma: *float64, r: *s64, isuppz: *s64, nrminv: *float64, resid: *float64, rqcorr: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

zlar1v_64 :: (n: *s64, b1: *s64, bn: *s64, lambda: *float64, d: *float64, l: *float64, ld: *float64, lld: *float64, pivmin: *float64, gaptol: *float64, z: *MKL_Complex16, wantnc: *s64, negcnt: *s64, ztz: *float64, mingma: *float64, r: *s64, isuppz: *s64, nrminv: *float64, resid: *float64, rqcorr: *float64, work: *float64) -> void #foreign mkl_intel_ilp64;

ZLAR2V_64 :: (n: *s64, x: *MKL_Complex16, y: *MKL_Complex16, z: *MKL_Complex16, incx: *s64, c: *float64, s: *MKL_Complex16, incc: *s64) -> void #foreign mkl_intel_ilp64;

zlar2v_64 :: (n: *s64, x: *MKL_Complex16, y: *MKL_Complex16, z: *MKL_Complex16, incx: *s64, c: *float64, s: *MKL_Complex16, incc: *s64) -> void #foreign mkl_intel_ilp64;

ZLARCM_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64) -> void #foreign mkl_intel_ilp64;

zlarcm_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, rwork: *float64) -> void #foreign mkl_intel_ilp64;

ZLARFB_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

zlarfb_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

ZLARF_64 :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarf_64 :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARFG_64 :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfg_64 :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARFGP_64 :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfgp_64 :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARFP_64 :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfp_64 :: (n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, tau: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARFT_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64) -> void #foreign mkl_intel_ilp64;

zlarft_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64) -> void #foreign mkl_intel_ilp64;

ZLARFX_64 :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarfx_64 :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARGV_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

zlargv_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, incc: *s64) -> void #foreign mkl_intel_ilp64;

ZLARNV_64 :: (idist: *s64, iseed: *s64, n: *s64, x: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarnv_64 :: (idist: *s64, iseed: *s64, n: *s64, x: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARRV_64 :: (n: *s64, vl: *float64, vu: *float64, d: *float64, l: *float64, pivmin: *float64, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float64, rtol1: *float64, rtol2: *float64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlarrv_64 :: (n: *s64, vl: *float64, vu: *float64, d: *float64, l: *float64, pivmin: *float64, isplit: *s64, m: *s64, dol: *s64, dou: *s64, minrgp: *float64, rtol1: *float64, rtol2: *float64, w: *float64, werr: *float64, wgap: *float64, iblock: *s64, indexw: *s64, gers: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *float64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLARSCL2_64 :: (m: *s64, n: *s64, d: *float64, x: *MKL_Complex16, ldx: *s64) -> void #foreign mkl_intel_ilp64;

zlarscl2_64 :: (m: *s64, n: *s64, d: *float64, x: *MKL_Complex16, ldx: *s64) -> void #foreign mkl_intel_ilp64;

ZLARTV_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, s: *MKL_Complex16, incc: *s64) -> void #foreign mkl_intel_ilp64;

zlartv_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, y: *MKL_Complex16, incy: *s64, c: *float64, s: *MKL_Complex16, incc: *s64) -> void #foreign mkl_intel_ilp64;

ZLARZB_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

zlarzb_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

ZLARZ_64 :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarz_64 :: (side: *u8, m: *s64, n: *s64, l: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLARZT_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64) -> void #foreign mkl_intel_ilp64;

zlarzt_64 :: (direct: *u8, storev: *u8, n: *s64, k: *s64, v: *MKL_Complex16, ldv: *s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: *s64) -> void #foreign mkl_intel_ilp64;

ZLASCL_64 :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float64, cto: *float64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlascl_64 :: (type: *u8, kl: *s64, ku: *s64, cfrom: *float64, cto: *float64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLASCL2_64 :: (m: *s64, n: *s64, d: *float64, x: *MKL_Complex16, ldx: *s64) -> void #foreign mkl_intel_ilp64;

zlascl2_64 :: (m: *s64, n: *s64, d: *float64, x: *MKL_Complex16, ldx: *s64) -> void #foreign mkl_intel_ilp64;

ZLASET_64 :: (uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zlaset_64 :: (uplo: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZLASR_64 :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float64, s: *float64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zlasr_64 :: (side: *u8, pivot: *u8, direct: *u8, m: *s64, n: *s64, c: *float64, s: *float64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZLASSQ_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, scale: *float64, sumsq: *float64) -> void #foreign mkl_intel_ilp64;

zlassq_64 :: (n: *s64, x: *MKL_Complex16, incx: *s64, scale: *float64, sumsq: *float64) -> void #foreign mkl_intel_ilp64;

ZLASWP_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

zlaswp_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, k1: *s64, k2: *s64, ipiv: *s64, incx: *s64) -> void #foreign mkl_intel_ilp64;

ZLASYF_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlasyf_64 :: (uplo: *u8, n: *s64, nb: *s64, kb: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, w: *MKL_Complex16, ldw: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAT2C_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, sa: *MKL_Complex8, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlat2c_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, sa: *MKL_Complex8, ldsa: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATBS_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatbs_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATDF_64 :: (ijob: *s64, n: *s64, z: *MKL_Complex16, ldz: *s64, rhs: *MKL_Complex16, rdsum: *float64, rdscal: *float64, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

zlatdf_64 :: (ijob: *s64, n: *s64, z: *MKL_Complex16, ldz: *s64, rhs: *MKL_Complex16, rdsum: *float64, rdscal: *float64, ipiv: *s64, jpiv: *s64) -> void #foreign mkl_intel_ilp64;

ZLATPS_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *MKL_Complex16, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatps_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, ap: *MKL_Complex16, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATRD_64 :: (uplo: *u8, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, e: *float64, tau: *MKL_Complex16, w: *MKL_Complex16, ldw: *s64) -> void #foreign mkl_intel_ilp64;

zlatrd_64 :: (uplo: *u8, n: *s64, nb: *s64, a: *MKL_Complex16, lda: *s64, e: *float64, tau: *MKL_Complex16, w: *MKL_Complex16, ldw: *s64) -> void #foreign mkl_intel_ilp64;

ZLATRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, normin: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, scale: *float64, cnorm: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATRZ_64 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlatrz_64 :: (m: *s64, n: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLATZM_64 :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c1: *MKL_Complex16, c2: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlatzm_64 :: (side: *u8, m: *s64, n: *s64, v: *MKL_Complex16, incv: *s64, tau: *MKL_Complex16, c1: *MKL_Complex16, c2: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZLAUU2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlauu2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAUUM_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlauum_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBCON_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbcon_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBEQU_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbequ_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBRFS_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbrfs_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBSTF_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbstf_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBSV_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbsv_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBTF2_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbtf2_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBTRF_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbtrf_64 :: (uplo: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPBTRS_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpbtrs_64 :: (uplo: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPFTRF_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zpftrf_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPFTRI_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zpftri_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPFTRS_64 :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpftrs_64 :: (transr: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOCON_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpocon_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOEQUB_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpoequb_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOEQU_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpoequ_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPORFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zporfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPORFSX_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zporfsx_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zposv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zposvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOSVXX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zposvxx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOTF2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotf2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOTRF_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotrf_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOTRI_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotri_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPOTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpotrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPCON_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zppcon_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, anorm: *float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPEQU_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zppequ_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpprfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zppsv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zppsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPTRF_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zpptrf_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPTRI_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zpptri_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPPTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpptrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPSTF2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpstf2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPSTRF_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpstrf_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, piv: *s64, rank: *s64, tol: *float64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTCON_64 :: (n: *s64, d: *float64, e: *MKL_Complex16, anorm: *float64, rcond: *float64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zptcon_64 :: (n: *s64, d: *float64, e: *MKL_Complex16, anorm: *float64, rcond: *float64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTEQR_64 :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpteqr_64 :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zptrfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTSV_64 :: (n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zptsv_64 :: (n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTSVX_64 :: (fact: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zptsvx_64 :: (fact: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTTRF_64 :: (n: *s64, d: *float64, e: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;
zpttrf_64 :: (n: *s64, d: *float64, e: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zpttrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZPTTS2_64 :: (iuplo: *s64, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

zptts2_64 :: (iuplo: *s64, n: *s64, nrhs: *s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZROT_64 :: (n: *s64, cx: *MKL_Complex16, incx: *s64, cy: *MKL_Complex16, incy: *s64, c: *float64, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zrot_64 :: (n: *s64, cx: *MKL_Complex16, incx: *s64, cy: *MKL_Complex16, incy: *s64, c: *float64, s: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZSPCON_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zspcon_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSPMV_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zspmv_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, ap: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZSPR_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, ap: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zspr_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, ap: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZSPRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsprfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSPSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zspsv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSPSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zspsvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSPTRF_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsptrf_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSPTRI_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsptri_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSPTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsptrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSTEDC_64 :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zstedc_64 :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, lrwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSTEGR_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zstegr_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, abstol: *float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, isuppz: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSTEIN_64 :: (n: *s64, d: *float64, e: *float64, m: *s64, w: *float64, iblock: *s64, isplit: *s64, z: *MKL_Complex16, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zstein_64 :: (n: *s64, d: *float64, e: *float64, m: *s64, w: *float64, iblock: *s64, isplit: *s64, z: *MKL_Complex16, ldz: *s64, work: *float64, iwork: *s64, ifail: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSTEMR_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zstemr_64 :: (jobz: *u8, range: *u8, n: *s64, d: *float64, e: *float64, vl: *float64, vu: *float64, il: *s64, iu: *s64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: *s64, nzc: *s64, isuppz: *s64, tryrac: *s64, work: *float64, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSTEQR_64 :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsteqr_64 :: (compz: *u8, n: *s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYCON_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsycon_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, anorm: *float64, rcond: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYEQUB_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyequb_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, s: *float64, scond: *float64, amax: *float64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYMV_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

zsymv_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *MKL_Complex16, y: *MKL_Complex16, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZSYR_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

zsyr_64 :: (uplo: *u8, n: *s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: *s64, a: *MKL_Complex16, lda: *s64) -> void #foreign mkl_intel_ilp64;

ZSYRFS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyrfs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYRFSX_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsyrfsx_64 :: (uplo: *u8, equed: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSV_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysv_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSVX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysvx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, lwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYSVXX_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsysvxx_64 :: (fact: *u8, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: *s64, params: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTF2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytf2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRF_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrf_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRI_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytri_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZSYTRS_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zsytrs_64 :: (uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTBCON_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztbcon_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, kd: *s64, ab: *MKL_Complex16, ldab: *s64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTBRFS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztbrfs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTBTRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztbtrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, kd: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTFSM_64 :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ztfsm_64 :: (transr: *u8, side: *u8, uplo: *u8, trans: *u8, diag: *u8, m: *s64, n: *s64, alpha: *MKL_Complex16, a: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64) -> void #foreign mkl_intel_ilp64;

ZTFTRI_64 :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztftri_64 :: (transr: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTFTTP_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex16, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztfttp_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex16, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTFTTR_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztfttr_64 :: (transr: *u8, uplo: *u8, n: *s64, arf: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGEVC_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *MKL_Complex16, lds: *s64, p: *MKL_Complex16, ldp: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgevc_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, s: *MKL_Complex16, lds: *s64, p: *MKL_Complex16, ldp: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGEX2_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, j1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgex2_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, j1: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGEXC_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgexc_64 :: (wantq: *s64, wantz: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGSEN_64 :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, m: *s64, pl: *float64, pr: *float64, dif: *float64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsen_64 :: (ijob: *s64, wantq: *s64, wantz: *s64, select: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, z: *MKL_Complex16, ldz: *s64, m: *s64, pl: *float64, pr: *float64, dif: *float64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, liwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGSJA_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsja_64 :: (jobu: *u8, jobv: *u8, jobq: *u8, m: *s64, p: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, tola: *float64, tolb: *float64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: *s64, v: *MKL_Complex16, ldv: *s64, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, ncycle: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGSNA_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, s: *float64, dif: *float64, mm: *s64, m: *s64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsna_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, s: *float64, dif: *float64, mm: *s64, m: *s64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGSY2_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, scale: *float64, rdsum: *float64, rdscal: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsy2_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, scale: *float64, rdsum: *float64, rdscal: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTGSYL_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, scale: *float64, dif: *float64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztgsyl_64 :: (trans: *u8, ijob: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, scale: *float64, dif: *float64, work: *MKL_Complex16, lwork: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPCON_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpcon_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPRFS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztprfs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPTRI_64 :: (uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztptri_64 :: (uplo: *u8, diag: *u8, n: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPTRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztptrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPTTF_64 :: (transr: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, arf: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpttf_64 :: (transr: *u8, uplo: *u8, n: *s64, ap: *MKL_Complex16, arf: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTPTTR_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztpttr_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRCON_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrcon_64 :: (norm: *u8, uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, rcond: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTREVC_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrevc_64 :: (side: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, mm: *s64, m: *s64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTREXC_64 :: (compq: *u8, n: *s64, t: *MKL_Complex16, ldt: *s64, q: *MKL_Complex16, ldq: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrexc_64 :: (compq: *u8, n: *s64, t: *MKL_Complex16, ldt: *s64, q: *MKL_Complex16, ldq: *s64, ifst: *s64, ilst: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRRFS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrrfs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, x: *MKL_Complex16, ldx: *s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSEN_64 :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, q: *MKL_Complex16, ldq: *s64, w: *MKL_Complex16, m: *s64, s: *float64, sep: *float64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrsen_64 :: (job: *u8, compq: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, q: *MKL_Complex16, ldq: *s64, w: *MKL_Complex16, m: *s64, s: *float64, sep: *float64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSNA_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, s: *float64, sep: *float64, mm: *s64, m: *s64, work: *MKL_Complex16, ldwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrsna_64 :: (job: *u8, howmny: *u8, select: *s64, n: *s64, t: *MKL_Complex16, ldt: *s64, vl: *MKL_Complex16, ldvl: *s64, vr: *MKL_Complex16, ldvr: *s64, s: *float64, sep: *float64, mm: *s64, m: *s64, work: *MKL_Complex16, ldwork: *s64, rwork: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRSYL_64 :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrsyl_64 :: (trana: *u8, tranb: *u8, isgn: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, scale: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRTI2_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrti2_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRTRI_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrtri_64 :: (uplo: *u8, diag: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRTRS_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrtrs_64 :: (uplo: *u8, trans: *u8, diag: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRTTF_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, arf: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrttf_64 :: (transr: *u8, uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, arf: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTRTTP_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztrttp_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ap: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTZRQF_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ztzrqf_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZTZRZF_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ztzrzf_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNG2L_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zung2l_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNG2R_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zung2r_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGBR_64 :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungbr_64 :: (vect: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGHR_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunghr_64 :: (n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGL2_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zungl2_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGLQ_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunglq_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGQL_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungql_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGQR_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungqr_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGR2_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zungr2_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGRQ_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungrq_64 :: (m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNGTR_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zungtr_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNM2L_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunm2l_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNM2R_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunm2r_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMBR_64 :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmbr_64 :: (vect: *u8, side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMHR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmhr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, ilo: *s64, ihi: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNML2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunml2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMLQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmlq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMQL_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmql_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMQR_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmqr_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMR2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmr2_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMR3_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmr3_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMRQ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmrq_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMRZ_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmrz_64 :: (side: *u8, trans: *u8, m: *s64, n: *s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUNMTR_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zunmtr_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUPGTR_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, tau: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zupgtr_64 :: (uplo: *u8, n: *s64, ap: *MKL_Complex16, tau: *MKL_Complex16, q: *MKL_Complex16, ldq: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZUPMTR_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *MKL_Complex16, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zupmtr_64 :: (side: *u8, uplo: *u8, trans: *u8, m: *s64, n: *s64, ap: *MKL_Complex16, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

/* C-declaration of following routines is added in oneMKL 11.2 */
CGEQRT2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cgeqrt2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, t: *MKL_Complex8, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHESWAPR_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

cheswapr_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

CHETRI2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CHETRI2X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

chetri2x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, ipiv: *s64, work: *MKL_Complex8, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLA_GBAMV_64 :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, ab: *MKL_Complex8, ldab: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

cla_gbamv_64 :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, ab: *MKL_Complex8, ldab: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

CLA_GBRCOND_C_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_gbrcond_c_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_GBRCOND_X_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_gbrcond_x_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_GBRFSX_EXTENDED_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_gbrfsx_extended_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLA_GBRPVGRW_64 :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64) -> float #foreign mkl_intel_ilp64;

cla_gbrpvgrw_64 :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *MKL_Complex8, ldab: *s64, afb: *MKL_Complex8, ldafb: *s64) -> float #foreign mkl_intel_ilp64;

CLA_GEAMV_64 :: (trans: *s64, m: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

cla_geamv_64 :: (trans: *s64, m: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

CLA_GERCOND_C_64 :: (trans: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_gercond_c_64 :: (trans: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_GERCOND_X_64 :: (trans: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_gercond_x_64 :: (trans: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_GERFSX_EXTENDED_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, errs_n: *float, errs_c: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_gerfsx_extended_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, errs_n: *float, errs_c: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLA_GERPVGRW_64 :: (n: *s64, ncols: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64) -> float #foreign mkl_intel_ilp64;

cla_gerpvgrw_64 :: (n: *s64, ncols: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64) -> float #foreign mkl_intel_ilp64;

CLA_HEAMV_64 :: (uplo: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

cla_heamv_64 :: (uplo: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

CLA_HERCOND_C_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_hercond_c_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_HERCOND_X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_hercond_x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_HERFSX_EXTENDED_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_herfsx_extended_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLA_HERPVGRW_64 :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

cla_herpvgrw_64 :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLA_LIN_BERR_64 :: (n: *s64, nz: *s64, nrhs: *s64, res: *MKL_Complex8, ayb: *float, berr: *float) -> void #foreign mkl_intel_ilp64;

cla_lin_berr_64 :: (n: *s64, nz: *s64, nrhs: *s64, res: *MKL_Complex8, ayb: *float, berr: *float) -> void #foreign mkl_intel_ilp64;

CLA_PORCOND_C_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_porcond_c_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_PORCOND_X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_porcond_x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_PORFSX_EXTENDED_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_porfsx_extended_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLA_PORPVGRW_64 :: (uplo: *u8, ncols: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

cla_porpvgrw_64 :: (uplo: *u8, ncols: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLA_SYAMV_64 :: (uplo: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

cla_syamv_64 :: (uplo: *s64, n: *s64, alpha: *float, a: *MKL_Complex8, lda: *s64, x: *MKL_Complex8, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

CLA_SYRCOND_C_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_syrcond_c_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, c: *float, capply: *s64, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_SYRCOND_X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

cla_syrcond_x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, x: *MKL_Complex8, info: *s64, work: *MKL_Complex8, rwork: *float) -> float #foreign mkl_intel_ilp64;

CLA_SYRFSX_EXTENDED_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cla_syrfsx_extended_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *MKL_Complex8, ldb: *s64, y: *MKL_Complex8, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *MKL_Complex8, ayb: *float, dy: *MKL_Complex8, y_tail: *MKL_Complex8, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLA_SYRPVGRW_64 :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

cla_syrpvgrw_64 :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex8, lda: *s64, af: *MKL_Complex8, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

CLA_WWADDW_64 :: (n: *s64, x: *MKL_Complex8, y: *MKL_Complex8, w: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

cla_wwaddw_64 :: (n: *s64, x: *MKL_Complex8, y: *MKL_Complex8, w: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

CTPRFB_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

ctprfb_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex8, ldv: *s64, t: *MKL_Complex8, ldt: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, work: *MKL_Complex8, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

DGEQRT2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dgeqrt2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, t: *float64, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLA_GBAMV_64 :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, ab: *float64, ldab: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dla_gbamv_64 :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, ab: *float64, ldab: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DLA_GBRCOND_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_gbrcond_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

DLA_GBRFSX_EXTENDED_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dla_gbrfsx_extended_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLA_GBRPVGRW_64 :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_gbrpvgrw_64 :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *float64, ldab: *s64, afb: *float64, ldafb: *s64) -> float64 #foreign mkl_intel_ilp64;

DLA_GEAMV_64 :: (trans: *s64, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dla_geamv_64 :: (trans: *s64, m: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DLA_GERCOND_64 :: (trans: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_gercond_64 :: (trans: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

DLA_GERFSX_EXTENDED_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, errs_n: *float64, errs_c: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dla_gerfsx_extended_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, errs_n: *float64, errs_c: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLA_GERPVGRW_64 :: (n: *s64, ncols: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_gerpvgrw_64 :: (n: *s64, ncols: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64) -> float64 #foreign mkl_intel_ilp64;

DLA_LIN_BERR_64 :: (n: *s64, nz: *s64, nrhs: *s64, res: *float64, ayb: *float64, berr: *float64) -> void #foreign mkl_intel_ilp64;

dla_lin_berr_64 :: (n: *s64, nz: *s64, nrhs: *s64, res: *float64, ayb: *float64, berr: *float64) -> void #foreign mkl_intel_ilp64;

DLA_PORCOND_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_porcond_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

DLA_PORFSX_EXTENDED_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dla_porfsx_extended_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLA_PORPVGRW_64 :: (uplo: *u8, ncols: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dla_porpvgrw_64 :: (uplo: *u8, ncols: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLA_SYAMV_64 :: (uplo: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

dla_syamv_64 :: (uplo: *s64, n: *s64, alpha: *float64, a: *float64, lda: *s64, x: *float64, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

DLA_SYRCOND_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

dla_syrcond_64 :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float64, info: *s64, work: *float64, iwork: *s64) -> float64 #foreign mkl_intel_ilp64;

DLA_SYRFSX_EXTENDED_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dla_syrfsx_extended_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *float64, ldb: *s64, y: *float64, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *float64, ayb: *float64, dy: *float64, y_tail: *float64, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLA_SYRPVGRW_64 :: (uplo: *u8, n: *s64, info: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

dla_syrpvgrw_64 :: (uplo: *u8, n: *s64, info: *s64, a: *float64, lda: *s64, af: *float64, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

DLA_WWADDW_64 :: (n: *s64, x: *float64, y: *float64, w: *float64) -> void #foreign mkl_intel_ilp64;
dla_wwaddw_64 :: (n: *s64, x: *float64, y: *float64, w: *float64) -> void #foreign mkl_intel_ilp64;

DTPRFB_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

dtprfb_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float64, ldv: *s64, t: *float64, ldt: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, work: *float64, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

SGEQRT2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sgeqrt2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, t: *float, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLA_GBAMV_64 :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, ab: *float, ldab: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sla_gbamv_64 :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float, ab: *float, ldab: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SLA_GBRCOND_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

sla_gbrcond_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

SLA_GBRFSX_EXTENDED_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sla_gbrfsx_extended_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLA_GBRPVGRW_64 :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64) -> float #foreign mkl_intel_ilp64;

sla_gbrpvgrw_64 :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *float, ldab: *s64, afb: *float, ldafb: *s64) -> float #foreign mkl_intel_ilp64;

SLA_GEAMV_64 :: (trans: *s64, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sla_geamv_64 :: (trans: *s64, m: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SLA_GERCOND_64 :: (trans: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

sla_gercond_64 :: (trans: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

SLA_GERFSX_EXTENDED_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, errs_n: *float, errs_c: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sla_gerfsx_extended_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, errs_n: *float, errs_c: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLA_GERPVGRW_64 :: (n: *s64, ncols: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64) -> float #foreign mkl_intel_ilp64;

sla_gerpvgrw_64 :: (n: *s64, ncols: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64) -> float #foreign mkl_intel_ilp64;

SLA_LIN_BERR_64 :: (n: *s64, nz: *s64, nrhs: *s64, res: *float, ayb: *float, berr: *float) -> void #foreign mkl_intel_ilp64;

sla_lin_berr_64 :: (n: *s64, nz: *s64, nrhs: *s64, res: *float, ayb: *float, berr: *float) -> void #foreign mkl_intel_ilp64;

SLA_PORCOND_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

sla_porcond_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

SLA_PORFSX_EXTENDED_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sla_porfsx_extended_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLA_PORPVGRW_64 :: (uplo: *u8, ncols: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

sla_porpvgrw_64 :: (uplo: *u8, ncols: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLA_SYAMV_64 :: (uplo: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

sla_syamv_64 :: (uplo: *s64, n: *s64, alpha: *float, a: *float, lda: *s64, x: *float, incx: *s64, beta: *float, y: *float, incy: *s64) -> void #foreign mkl_intel_ilp64;

SLA_SYRCOND_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

sla_syrcond_64 :: (uplo: *u8, n: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, cmode: *s64, c: *float, info: *s64, work: *float, iwork: *s64) -> float #foreign mkl_intel_ilp64;

SLA_SYRFSX_EXTENDED_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sla_syrfsx_extended_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float, b: *float, ldb: *s64, y: *float, ldy: *s64, berr_out: *float, n_norms: *s64, err_bnds_norm: *float, err_bnds_comp: *float, res: *float, ayb: *float, dy: *float, y_tail: *float, rcond: *float, ithresh: *s64, rthresh: *float, dz_ub: *float, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLA_SYRPVGRW_64 :: (uplo: *u8, n: *s64, info: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

sla_syrpvgrw_64 :: (uplo: *u8, n: *s64, info: *s64, a: *float, lda: *s64, af: *float, ldaf: *s64, ipiv: *s64, work: *float) -> float #foreign mkl_intel_ilp64;

SLA_WWADDW_64 :: (n: *s64, x: *float, y: *float, w: *float) -> void #foreign mkl_intel_ilp64;
sla_wwaddw_64 :: (n: *s64, x: *float, y: *float, w: *float) -> void #foreign mkl_intel_ilp64;

STPRFB_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

stprfb_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *float, ldv: *s64, t: *float, ldt: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, work: *float, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

ZGEQRT2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zgeqrt2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, t: *MKL_Complex16, ldt: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHESWAPR_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

zheswapr_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, i1: *s64, i2: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRI2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri2_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHETRI2X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zhetri2x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, ipiv: *s64, work: *MKL_Complex16, nb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_GBAMV_64 :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, ab: *MKL_Complex16, ldab: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

zla_gbamv_64 :: (trans: *s64, m: *s64, n: *s64, kl: *s64, ku: *s64, alpha: *float64, ab: *MKL_Complex16, ldab: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_GBRCOND_C_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_gbrcond_c_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_GBRCOND_X_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_gbrcond_x_64 :: (trans: *u8, n: *s64, kl: *s64, ku: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_GBRFSX_EXTENDED_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_gbrfsx_extended_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, kl: *s64, ku: *s64, nrhs: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_GBRPVGRW_64 :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64) -> float64 #foreign mkl_intel_ilp64;

zla_gbrpvgrw_64 :: (n: *s64, kl: *s64, ku: *s64, ncols: *s64, ab: *MKL_Complex16, ldab: *s64, afb: *MKL_Complex16, ldafb: *s64) -> float64 #foreign mkl_intel_ilp64;

ZLA_GEAMV_64 :: (trans: *s64, m: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

zla_geamv_64 :: (trans: *s64, m: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_GERCOND_C_64 :: (trans: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_gercond_c_64 :: (trans: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_GERCOND_X_64 :: (trans: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_gercond_x_64 :: (trans: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_GERFSX_EXTENDED_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, errs_n: *float64, errs_c: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_gerfsx_extended_64 :: (prec_type: *s64, trans_type: *s64, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, errs_n: *float64, errs_c: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_GERPVGRW_64 :: (n: *s64, ncols: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64) -> float64 #foreign mkl_intel_ilp64;

zla_gerpvgrw_64 :: (n: *s64, ncols: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64) -> float64 #foreign mkl_intel_ilp64;

ZLA_HEAMV_64 :: (uplo: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

zla_heamv_64 :: (uplo: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_HERCOND_C_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_hercond_c_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_HERCOND_X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_hercond_x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_HERFSX_EXTENDED_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_herfsx_extended_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_HERPVGRW_64 :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_herpvgrw_64 :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_LIN_BERR_64 :: (n: *s64, nz: *s64, nrhs: *s64, res: *MKL_Complex16, ayb: *float64, berr: *float64) -> void #foreign mkl_intel_ilp64;

zla_lin_berr_64 :: (n: *s64, nz: *s64, nrhs: *s64, res: *MKL_Complex16, ayb: *float64, berr: *float64) -> void #foreign mkl_intel_ilp64;

ZLA_PORCOND_C_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_porcond_c_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_PORCOND_X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_porcond_x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_PORFSX_EXTENDED_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_porfsx_extended_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_PORPVGRW_64 :: (uplo: *u8, ncols: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_porpvgrw_64 :: (uplo: *u8, ncols: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_SYAMV_64 :: (uplo: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

zla_syamv_64 :: (uplo: *s64, n: *s64, alpha: *float64, a: *MKL_Complex16, lda: *s64, x: *MKL_Complex16, incx: *s64, beta: *float64, y: *float64, incy: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_SYRCOND_C_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_syrcond_c_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, c: *float64, capply: *s64, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_SYRCOND_X_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_syrcond_x_64 :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, x: *MKL_Complex16, info: *s64, work: *MKL_Complex16, rwork: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_SYRFSX_EXTENDED_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zla_syrfsx_extended_64 :: (prec_type: *s64, uplo: *u8, n: *s64, nrhs: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, colequ: *s64, c: *float64, b: *MKL_Complex16, ldb: *s64, y: *MKL_Complex16, ldy: *s64, berr_out: *float64, n_norms: *s64, err_bnds_norm: *float64, err_bnds_comp: *float64, res: *MKL_Complex16, ayb: *float64, dy: *MKL_Complex16, y_tail: *MKL_Complex16, rcond: *float64, ithresh: *s64, rthresh: *float64, dz_ub: *float64, ignore_cwise: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLA_SYRPVGRW_64 :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

zla_syrpvgrw_64 :: (uplo: *u8, n: *s64, info: *s64, a: *MKL_Complex16, lda: *s64, af: *MKL_Complex16, ldaf: *s64, ipiv: *s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

ZLA_WWADDW_64 :: (n: *s64, x: *MKL_Complex16, y: *MKL_Complex16, w: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zla_wwaddw_64 :: (n: *s64, x: *MKL_Complex16, y: *MKL_Complex16, w: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

ZTPRFB_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

ztprfb_64 :: (side: *u8, trans: *u8, direct: *u8, storev: *u8, m: *s64, n: *s64, k: *s64, l: *s64, v: *MKL_Complex16, ldv: *s64, t: *MKL_Complex16, ldt: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, work: *MKL_Complex16, ldwork: *s64) -> void #foreign mkl_intel_ilp64;

/* Tridiagonalization using Successive Bandwidth Reduction */
CHERDB_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cherdb_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex8, lda: *s64, d: *float, e: *float, tau: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64, work: *MKL_Complex8, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DSYRDB_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dsyrdb_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *float64, lda: *s64, d: *float64, e: *float64, tau: *float64, z: *float64, ldz: *s64, work: *float64, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SSYRDB_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ssyrdb_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *float, lda: *s64, d: *float, e: *float, tau: *float, z: *float, ldz: *s64, work: *float, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZHERDB_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zherdb_64 :: (jobz: *u8, uplo: *u8, n: *s64, kd: *s64, a: *MKL_Complex16, lda: *s64, d: *float64, e: *float64, tau: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64, work: *MKL_Complex16, lwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/* Tridiagonal diagonally-dominant linear equations solver
using the BABE algorithm _64(Burning At Both Ends) NOTHROW; */
CDTSVB_64 :: (n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cdtsvb_64 :: (n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CDTTRFB_64 :: (n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

cdttrfb_64 :: (n: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

CDTTRSB_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

cdttrsb_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DDTSVB_64 :: (n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ddtsvb_64 :: (n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DDTTRFB_64 :: (n: *s64, dl: *float64, d: *float64, du: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

ddttrfb_64 :: (n: *s64, dl: *float64, d: *float64, du: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

DDTTRSB_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ddttrsb_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SDTSVB_64 :: (n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sdtsvb_64 :: (n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SDTTRFB_64 :: (n: *s64, dl: *float, d: *float, du: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sdttrfb_64 :: (n: *s64, dl: *float, d: *float, du: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

SDTTRSB_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

sdttrsb_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *float, d: *float, du: *float, b: *float, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZDTSVB_64 :: (n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zdtsvb_64 :: (n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZDTTRFB_64 :: (n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zdttrfb_64 :: (n: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

ZDTTRSB_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zdttrsb_64 :: (trans: *u8, n: *s64, nrhs: *s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

/* LAPACK MATGEN routines */
DLATM1_64 :: (mode: *s64, cond: *float64, irsign: *s64, idist: *s64, iseed: *s64, d: *float64, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatm1_64 :: (mode: *s64, cond: *float64, irsign: *s64, idist: *s64, iseed: *s64, d: *float64, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATM1_64 :: (mode: *s64, cond: *float, irsign: *s64, idist: *s64, iseed: *s64, d: *float, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slatm1_64 :: (mode: *s64, cond: *float, irsign: *s64, idist: *s64, iseed: *s64, d: *float, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATM1_64 :: (mode: *s64, cond: *float, irsign: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clatm1_64 :: (mode: *s64, cond: *float, irsign: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATM1_64 :: (mode: *s64, cond: *float64, irsign: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatm1_64 :: (mode: *s64, cond: *float64, irsign: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, n: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATM2_64 :: (m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float64, igrade: *s64, dl: *float64, dr: *float64, ipvtng: *s64, iwork: *s64, sparse: *float64) -> float64 #foreign mkl_intel_ilp64;

dlatm2_64 :: (m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float64, igrade: *s64, dl: *float64, dr: *float64, ipvtng: *s64, iwork: *s64, sparse: *float64) -> float64 #foreign mkl_intel_ilp64;

SLATM2_64 :: (m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float, igrade: *s64, dl: *float, dr: *float, ipvtng: *s64, iwork: *s64, sparse: *float) -> float #foreign mkl_intel_ilp64;

slatm2_64 :: (m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float, igrade: *s64, dl: *float, dr: *float, ipvtng: *s64, iwork: *s64, sparse: *float) -> float #foreign mkl_intel_ilp64;

CLATM2_64 :: (retval: *MKL_Complex8, m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, igrade: *s64, dl: *MKL_Complex8, dr: *MKL_Complex8, ipvtng: *s64, iwork: *s64, sparse: *float) -> void #foreign mkl_intel_ilp64;

clatm2_64 :: (retval: *MKL_Complex8, m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, igrade: *s64, dl: *MKL_Complex8, dr: *MKL_Complex8, ipvtng: *s64, iwork: *s64, sparse: *float) -> void #foreign mkl_intel_ilp64;

ZLATM2_64 :: (retval: *MKL_Complex16, m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, igrade: *s64, dl: *MKL_Complex16, dr: *MKL_Complex16, ipvtng: *s64, iwork: *s64, sparse: *float64) -> void #foreign mkl_intel_ilp64;

zlatm2_64 :: (retval: *MKL_Complex16, m: *s64, n: *s64, ii: *s64, j: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, igrade: *s64, dl: *MKL_Complex16, dr: *MKL_Complex16, ipvtng: *s64, iwork: *s64, sparse: *float64) -> void #foreign mkl_intel_ilp64;

DLATM3_64 :: (m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float64, igrade: *s64, dl: *float64, dr: *float64, ipvtng: *s64, iwork: *s64, sparse: *float64) -> float64 #foreign mkl_intel_ilp64;

dlatm3_64 :: (m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float64, igrade: *s64, dl: *float64, dr: *float64, ipvtng: *s64, iwork: *s64, sparse: *float64) -> float64 #foreign mkl_intel_ilp64;

SLATM3_64 :: (m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float, igrade: *s64, dl: *float, dr: *float, ipvtng: *s64, iwork: *s64, sparse: *float) -> float #foreign mkl_intel_ilp64;

slatm3_64 :: (m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *float, igrade: *s64, dl: *float, dr: *float, ipvtng: *s64, iwork: *s64, sparse: *float) -> float #foreign mkl_intel_ilp64;

CLATM3_64 :: (retval: *MKL_Complex8, m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, igrade: *s64, dl: *MKL_Complex8, dr: *MKL_Complex8, ipvtng: *s64, iwork: *s64, sparse: *float) -> void #foreign mkl_intel_ilp64;

clatm3_64 :: (retval: *MKL_Complex8, m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex8, igrade: *s64, dl: *MKL_Complex8, dr: *MKL_Complex8, ipvtng: *s64, iwork: *s64, sparse: *float) -> void #foreign mkl_intel_ilp64;

ZLATM3_64 :: (retval: *MKL_Complex16, m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, igrade: *s64, dl: *MKL_Complex16, dr: *MKL_Complex16, ipvtng: *s64, iwork: *s64, sparse: *float64) -> void #foreign mkl_intel_ilp64;

zlatm3_64 :: (retval: *MKL_Complex16, m: *s64, n: *s64, ii: *s64, j: *s64, isub: *s64, jsub: *s64, kl: *s64, ku: *s64, idist: *s64, iseed: *s64, d: *MKL_Complex16, igrade: *s64, dl: *MKL_Complex16, dr: *MKL_Complex16, ipvtng: *s64, iwork: *s64, sparse: *float64) -> void #foreign mkl_intel_ilp64;

DLATM5_64 :: (prtype: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, r: *float64, ldr: *s64, l: *float64, ldl: *s64, alpha: *float64, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

dlatm5_64 :: (prtype: *s64, m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, c: *float64, ldc: *s64, d: *float64, ldd: *s64, e: *float64, lde: *s64, f: *float64, ldf: *s64, r: *float64, ldr: *s64, l: *float64, ldl: *s64, alpha: *float64, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

SLATM5_64 :: (prtype: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, r: *float, ldr: *s64, l: *float, ldl: *s64, alpha: *float, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

slatm5_64 :: (prtype: *s64, m: *s64, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, c: *float, ldc: *s64, d: *float, ldd: *s64, e: *float, lde: *s64, f: *float, ldf: *s64, r: *float, ldr: *s64, l: *float, ldl: *s64, alpha: *float, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

CLATM5_64 :: (prtype: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, r: *MKL_Complex8, ldr: *s64, l: *MKL_Complex8, ldl: *s64, alpha: *float, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

clatm5_64 :: (prtype: *s64, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, c: *MKL_Complex8, ldc: *s64, d: *MKL_Complex8, ldd: *s64, e: *MKL_Complex8, lde: *s64, f: *MKL_Complex8, ldf: *s64, r: *MKL_Complex8, ldr: *s64, l: *MKL_Complex8, ldl: *s64, alpha: *float, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

ZLATM5_64 :: (prtype: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, r: *MKL_Complex16, ldr: *s64, l: *MKL_Complex16, ldl: *s64, alpha: *float64, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

zlatm5_64 :: (prtype: *s64, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, c: *MKL_Complex16, ldc: *s64, d: *MKL_Complex16, ldd: *s64, e: *MKL_Complex16, lde: *s64, f: *MKL_Complex16, ldf: *s64, r: *MKL_Complex16, ldr: *s64, l: *MKL_Complex16, ldl: *s64, alpha: *float64, qblcka: *s64, qblckb: *s64) -> void #foreign mkl_intel_ilp64;

DLATM6_64 :: (type: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, x: *float64, ldx: *s64, y: *float64, ldy: *s64, alpha: *float64, beta: *float64, wx: *float64, wy: *float64, s: *float64, dif: *float64) -> void #foreign mkl_intel_ilp64;

dlatm6_64 :: (type: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, x: *float64, ldx: *s64, y: *float64, ldy: *s64, alpha: *float64, beta: *float64, wx: *float64, wy: *float64, s: *float64, dif: *float64) -> void #foreign mkl_intel_ilp64;

SLATM6_64 :: (type: *s64, n: *s64, a: *float, lda: *s64, b: *float, x: *float, ldx: *s64, y: *float, ldy: *s64, alpha: *float, beta: *float, wx: *float, wy: *float, s: *float, dif: *float) -> void #foreign mkl_intel_ilp64;

slatm6_64 :: (type: *s64, n: *s64, a: *float, lda: *s64, b: *float, x: *float, ldx: *s64, y: *float, ldy: *s64, alpha: *float, beta: *float, wx: *float, wy: *float, s: *float, dif: *float) -> void #foreign mkl_intel_ilp64;

CLATM6_64 :: (type: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, y: *MKL_Complex8, ldy: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, wx: *MKL_Complex8, wy: *MKL_Complex8, s: *float, dif: *float) -> void #foreign mkl_intel_ilp64;

clatm6_64 :: (type: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, x: *MKL_Complex8, ldx: *s64, y: *MKL_Complex8, ldy: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, wx: *MKL_Complex8, wy: *MKL_Complex8, s: *float, dif: *float) -> void #foreign mkl_intel_ilp64;

ZLATM6_64 :: (type: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, y: *MKL_Complex16, ldy: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, wx: *MKL_Complex16, wy: *MKL_Complex16, s: *float64, dif: *float64) -> void #foreign mkl_intel_ilp64;

zlatm6_64 :: (type: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, x: *MKL_Complex16, ldx: *s64, y: *MKL_Complex16, ldy: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, wx: *MKL_Complex16, wy: *MKL_Complex16, s: *float64, dif: *float64) -> void #foreign mkl_intel_ilp64;

DLATME_64 :: (n: *s64, dist: *u8, iseed: *s64, d: *float64, mode: *s64, cond: *float64, dmax: *float64, ei: *u8, rsign: *u8, upper: *u8, sim: *u8, ds: *float64, modes: *s64, conds: *float64, kl: *s64, ku: *s64, anorm: *float64, a: *float64, lda: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatme_64 :: (n: *s64, dist: *u8, iseed: *s64, d: *float64, mode: *s64, cond: *float64, dmax: *float64, ei: *u8, rsign: *u8, upper: *u8, sim: *u8, ds: *float64, modes: *s64, conds: *float64, kl: *s64, ku: *s64, anorm: *float64, a: *float64, lda: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATME_64 :: (n: *s64, dist: *u8, iseed: *s64, d: *float, mode: *s64, cond: *float, dmax: *float, ei: *u8, rsign: *u8, upper: *u8, sim: *u8, ds: *float, modes: *s64, conds: *float, kl: *s64, ku: *s64, anorm: *float, a: *float, lda: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatme_64 :: (n: *s64, dist: *u8, iseed: *s64, d: *float, mode: *s64, cond: *float, dmax: *float, ei: *u8, rsign: *u8, upper: *u8, sim: *u8, ds: *float, modes: *s64, conds: *float, kl: *s64, ku: *s64, anorm: *float, a: *float, lda: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATME_64 :: (n: *s64, dist: *u8, iseed: *s64, d: *MKL_Complex8, mode: *s64, cond: *float, dmax: *MKL_Complex8, rsign: *u8, upper: *u8, sim: *u8, ds: *float, modes: *s64, conds: *float, kl: *s64, ku: *s64, anorm: *float, a: *MKL_Complex8, lda: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clatme_64 :: (n: *s64, dist: *u8, iseed: *s64, d: *MKL_Complex8, mode: *s64, cond: *float, dmax: *MKL_Complex8, rsign: *u8, upper: *u8, sim: *u8, ds: *float, modes: *s64, conds: *float, kl: *s64, ku: *s64, anorm: *float, a: *MKL_Complex8, lda: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATME_64 :: (n: *s64, dist: *u8, iseed: *s64, d: *MKL_Complex16, mode: *s64, cond: *float64, dmax: *MKL_Complex16, rsign: *u8, upper: *u8, sim: *u8, ds: *float64, modes: *s64, conds: *float64, kl: *s64, ku: *s64, anorm: *float64, a: *MKL_Complex16, lda: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatme_64 :: (n: *s64, dist: *u8, iseed: *s64, d: *MKL_Complex16, mode: *s64, cond: *float64, dmax: *MKL_Complex16, rsign: *u8, upper: *u8, sim: *u8, ds: *float64, modes: *s64, conds: *float64, kl: *s64, ku: *s64, anorm: *float64, a: *MKL_Complex16, lda: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATMR_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, rsign: *u8, grade: *u8, dl: *float64, model: *s64, condl: *float64, dr: *float64, moder: *s64, condr: *float64, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float64, anorm: *float64, pack: *u8, a: *float64, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatmr_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, rsign: *u8, grade: *u8, dl: *float64, model: *s64, condl: *float64, dr: *float64, moder: *s64, condr: *float64, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float64, anorm: *float64, pack: *u8, a: *float64, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATMR_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, rsign: *u8, grade: *u8, dl: *float, model: *s64, condl: *float, dr: *float, moder: *s64, condr: *float, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float, anorm: *float, pack: *u8, a: *float, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

slatmr_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, rsign: *u8, grade: *u8, dl: *float, model: *s64, condl: *float, dr: *float, moder: *s64, condr: *float, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float, anorm: *float, pack: *u8, a: *float, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATMR_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *MKL_Complex8, mode: *s64, cond: *float, dmax: *MKL_Complex8, rsign: *u8, grade: *u8, dl: *MKL_Complex8, model: *s64, condl: *float, dr: *MKL_Complex8, moder: *s64, condr: *float, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float, anorm: *float, pack: *u8, a: *MKL_Complex8, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

clatmr_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *MKL_Complex8, mode: *s64, cond: *float, dmax: *MKL_Complex8, rsign: *u8, grade: *u8, dl: *MKL_Complex8, model: *s64, condl: *float, dr: *MKL_Complex8, moder: *s64, condr: *float, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float, anorm: *float, pack: *u8, a: *MKL_Complex8, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATMR_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *MKL_Complex16, mode: *s64, cond: *float64, dmax: *MKL_Complex16, rsign: *u8, grade: *u8, dl: *MKL_Complex16, model: *s64, condl: *float64, dr: *MKL_Complex16, moder: *s64, condr: *float64, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float64, anorm: *float64, pack: *u8, a: *MKL_Complex16, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatmr_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *MKL_Complex16, mode: *s64, cond: *float64, dmax: *MKL_Complex16, rsign: *u8, grade: *u8, dl: *MKL_Complex16, model: *s64, condl: *float64, dr: *MKL_Complex16, moder: *s64, condr: *float64, pivtng: *u8, ipivot: *s64, kl: *s64, ku: *s64, sparse: *float64, anorm: *float64, pack: *u8, a: *MKL_Complex16, lda: *s64, iwork: *s64, info: *s64) -> void #foreign mkl_intel_ilp64;

DLATMS_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, kl: *s64, ku: *s64, pack: *u8, a: *float64, lda: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlatms_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, kl: *s64, ku: *s64, pack: *u8, a: *float64, lda: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLATMS_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, kl: *s64, ku: *s64, pack: *u8, a: *float, lda: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slatms_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, kl: *s64, ku: *s64, pack: *u8, a: *float, lda: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLATMS_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, kl: *s64, ku: *s64, pack: *u8, a: *MKL_Complex8, lda: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clatms_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float, mode: *s64, cond: *float, dmax: *float, kl: *s64, ku: *s64, pack: *u8, a: *MKL_Complex8, lda: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLATMS_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, kl: *s64, ku: *s64, pack: *u8, a: *MKL_Complex16, lda: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlatms_64 :: (m: *s64, n: *s64, dist: *u8, iseed: *s64, sym: *u8, d: *float64, mode: *s64, cond: *float64, dmax: *float64, kl: *s64, ku: *s64, pack: *u8, a: *MKL_Complex16, lda: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAKF2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, d: *float64, e: *float64, z: *float64, ldz: *s64) -> void #foreign mkl_intel_ilp64;

dlakf2_64 :: (m: *s64, n: *s64, a: *float64, lda: *s64, b: *float64, d: *float64, e: *float64, z: *float64, ldz: *s64) -> void #foreign mkl_intel_ilp64;

SLAKF2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, b: *float, d: *float, e: *float, z: *float, ldz: *s64) -> void #foreign mkl_intel_ilp64;

slakf2_64 :: (m: *s64, n: *s64, a: *float, lda: *s64, b: *float, d: *float, e: *float, z: *float, ldz: *s64) -> void #foreign mkl_intel_ilp64;

CLAKF2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, d: *MKL_Complex8, e: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64) -> void #foreign mkl_intel_ilp64;

clakf2_64 :: (m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, d: *MKL_Complex8, e: *MKL_Complex8, z: *MKL_Complex8, ldz: *s64) -> void #foreign mkl_intel_ilp64;

ZLAKF2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, d: *MKL_Complex16, e: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64) -> void #foreign mkl_intel_ilp64;

zlakf2_64 :: (m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, d: *MKL_Complex16, e: *MKL_Complex16, z: *MKL_Complex16, ldz: *s64) -> void #foreign mkl_intel_ilp64;

DLARGE_64 :: (n: *s64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlarge_64 :: (n: *s64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLARGE_64 :: (n: *s64, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slarge_64 :: (n: *s64, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLARGE_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clarge_64 :: (n: *s64, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLARGE_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlarge_64 :: (n: *s64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

DLARND_64 :: (idist: *s64, iseed: *s64) -> float64 #foreign mkl_intel_ilp64;
dlarnd_64 :: (idist: *s64, iseed: *s64) -> float64 #foreign mkl_intel_ilp64;

SLARND_64 :: (idist: *s64, iseed: *s64) -> float #foreign mkl_intel_ilp64;
slarnd_64 :: (idist: *s64, iseed: *s64) -> float #foreign mkl_intel_ilp64;

CLARND_64 :: (retval: *MKL_Complex8, idist: *s64, iseed: *s64) -> void #foreign mkl_intel_ilp64;
clarnd_64 :: (retval: *MKL_Complex8, idist: *s64, iseed: *s64) -> void #foreign mkl_intel_ilp64;

ZLARND_64 :: (retval: *MKL_Complex16, idist: *s64, iseed: *s64) -> void #foreign mkl_intel_ilp64;
zlarnd_64 :: (retval: *MKL_Complex16, idist: *s64, iseed: *s64) -> void #foreign mkl_intel_ilp64;

DLAROR_64 :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, iseed: *s64, x: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlaror_64 :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *float64, lda: *s64, iseed: *s64, x: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAROR_64 :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *float, lda: *s64, iseed: *s64, x: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slaror_64 :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *float, lda: *s64, iseed: *s64, x: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAROR_64 :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, iseed: *s64, x: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

claror_64 :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *MKL_Complex8, lda: *s64, iseed: *s64, x: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAROR_64 :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, iseed: *s64, x: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaror_64 :: (side: *u8, init: *u8, m: *s64, n: *s64, a: *MKL_Complex16, lda: *s64, iseed: *s64, x: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAROT_64 :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *float64, s: *float64, a: *float64, lda: *s64, xleft: *float64, xright: *float64) -> void #foreign mkl_intel_ilp64;

dlarot_64 :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *float64, s: *float64, a: *float64, lda: *s64, xleft: *float64, xright: *float64) -> void #foreign mkl_intel_ilp64;

SLAROT_64 :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *float, s: *float, a: *float, lda: *s64, xleft: *float, xright: *float) -> void #foreign mkl_intel_ilp64;

slarot_64 :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *float, s: *float, a: *float, lda: *s64, xleft: *float, xright: *float) -> void #foreign mkl_intel_ilp64;

CLAROT_64 :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *MKL_Complex8, s: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, xleft: *MKL_Complex8, xright: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

clarot_64 :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *MKL_Complex8, s: *MKL_Complex8, a: *MKL_Complex8, lda: *s64, xleft: *MKL_Complex8, xright: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;

ZLAROT_64 :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *MKL_Complex16, s: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, xleft: *MKL_Complex16, xright: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

zlarot_64 :: (lrows: *s64, lleft: *s64, lright: *s64, nl: *s64, c: *MKL_Complex16, s: *MKL_Complex16, a: *MKL_Complex16, lda: *s64, xleft: *MKL_Complex16, xright: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

DLARAN_64 :: (iseed: *s64) -> float64 #foreign mkl_intel_ilp64;
dlaran_64 :: (iseed: *s64) -> float64 #foreign mkl_intel_ilp64;

SLARAN_64 :: (iseed: *s64) -> float #foreign mkl_intel_ilp64;
slaran_64 :: (iseed: *s64) -> float #foreign mkl_intel_ilp64;

DLAGGE_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlagge_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAGGE_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slagge_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAGGE_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clagge_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAGGE_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlagge_64 :: (m: *s64, n: *s64, kl: *s64, ku: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAGSY_64 :: (n: *s64, k: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

clagsy_64 :: (n: *s64, k: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

DLAGSY_64 :: (n: *s64, k: *s64, d: *float64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dlagsy_64 :: (n: *s64, k: *s64, d: *float64, a: *float64, lda: *s64, iseed: *s64, work: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

SLAGSY_64 :: (n: *s64, k: *s64, d: *float, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

slagsy_64 :: (n: *s64, k: *s64, d: *float, a: *float, lda: *s64, iseed: *s64, work: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAGSY_64 :: (n: *s64, k: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlagsy_64 :: (n: *s64, k: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

CLAGHE_64 :: (n: *s64, k: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

claghe_64 :: (n: *s64, k: *s64, d: *float, a: *MKL_Complex8, lda: *s64, iseed: *s64, work: *MKL_Complex8, info: *s64) -> void #foreign mkl_intel_ilp64;

ZLAGHE_64 :: (n: *s64, k: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

zlaghe_64 :: (n: *s64, k: *s64, d: *float64, a: *MKL_Complex16, lda: *s64, iseed: *s64, work: *MKL_Complex16, info: *s64) -> void #foreign mkl_intel_ilp64;

/* Callback logical functions of one, two, or three arguments are used
*  to select eigenvalues to sort to the top left of the Schur form.
*  The value is selected if function returns non-zero. */
LAPACK_S_SELECT2 :: #type (a0: *float, a1: *float) -> s64 #c_call;
LAPACK_S_SELECT3 :: #type (a0: *float, a1: *float, a2: *float) -> s64 #c_call;

LAPACK_D_SELECT2 :: #type (a0: *float64, a1: *float64) -> s64 #c_call;
LAPACK_D_SELECT3 :: #type (a0: *float64, a1: *float64, a2: *float64) -> s64 #c_call;

LAPACK_C_SELECT1 :: #type (a0: *MKL_Complex8) -> s64 #c_call;
LAPACK_C_SELECT2 :: #type (a0: *MKL_Complex8, a1: *MKL_Complex8) -> s64 #c_call;

LAPACK_Z_SELECT1 :: #type (a0: *MKL_Complex16) -> s64 #c_call;
LAPACK_Z_SELECT2 :: #type (a0: *MKL_Complex16, a1: *MKL_Complex16) -> s64 #c_call;

LAPACKE_dlamch :: (cmach: u8) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_dlamch_work :: (cmach: u8) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_dlange :: (matrix_layout: s32, norm: u8, m: s64, n: s64, a: *float64, lda: s64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_dlange_work :: (matrix_layout: s32, norm: u8, m: s64, n: s64, a: *float64, lda: s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_dlansy :: (matrix_layout: s32, norm: u8, uplo: u8, n: s64, a: *float64, lda: s64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_dlansy_work :: (matrix_layout: s32, norm: u8, uplo: u8, n: s64, a: *float64, lda: s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_dlantr :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, m: s64, n: s64, a: *float64, lda: s64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_dlantr_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, m: s64, n: s64, a: *float64, lda: s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_dlapy2 :: (x: float64, y: float64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_dlapy2_work :: (x: float64, y: float64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_dlapy3 :: (x: float64, y: float64, z: float64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_dlapy3_work :: (x: float64, y: float64, z: float64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_zlange :: (matrix_layout: s32, norm: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_zlange_work :: (matrix_layout: s32, norm: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_zlanhe :: (matrix_layout: s32, norm: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_zlanhe_work :: (matrix_layout: s32, norm: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_zlarcm :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, b: *MKL_Complex16, ldb: s64, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlarcm_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, b: *MKL_Complex16, ldb: s64, c: *MKL_Complex16, ldc: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlacrm :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *float64, ldb: s64, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlacrm_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *float64, ldb: s64, c: *MKL_Complex16, ldc: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlansy :: (matrix_layout: s32, norm: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_zlansy_work :: (matrix_layout: s32, norm: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_zlantr :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_zlantr_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, work: *float64) -> float64 #foreign mkl_intel_ilp64;

LAPACKE_clange :: (matrix_layout: s32, norm: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64) -> float #foreign mkl_intel_ilp64;

LAPACKE_clange_work :: (matrix_layout: s32, norm: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, work: *float) -> float #foreign mkl_intel_ilp64;

LAPACKE_clanhe :: (matrix_layout: s32, norm: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64) -> float #foreign mkl_intel_ilp64;

LAPACKE_clanhe_work :: (matrix_layout: s32, norm: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, work: *float) -> float #foreign mkl_intel_ilp64;

LAPACKE_clarcm :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, b: *MKL_Complex8, ldb: s64, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clarcm_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, b: *MKL_Complex8, ldb: s64, c: *MKL_Complex8, ldc: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clacrm :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *float, ldb: s64, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clacrm_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *float, ldb: s64, c: *MKL_Complex8, ldc: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clansy :: (matrix_layout: s32, norm: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64) -> float #foreign mkl_intel_ilp64;

LAPACKE_clansy_work :: (matrix_layout: s32, norm: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, work: *float) -> float #foreign mkl_intel_ilp64;

LAPACKE_clantr :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64) -> float #foreign mkl_intel_ilp64;

LAPACKE_clantr_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, work: *float) -> float #foreign mkl_intel_ilp64;

LAPACKE_slamch :: (cmach: u8) -> float #foreign mkl_intel_ilp64;

LAPACKE_slamch_work :: (cmach: u8) -> float #foreign mkl_intel_ilp64;

LAPACKE_slange :: (matrix_layout: s32, norm: u8, m: s64, n: s64, a: *float, lda: s64) -> float #foreign mkl_intel_ilp64;

LAPACKE_slange_work :: (matrix_layout: s32, norm: u8, m: s64, n: s64, a: *float, lda: s64, work: *float) -> float #foreign mkl_intel_ilp64;

LAPACKE_slansy :: (matrix_layout: s32, norm: u8, uplo: u8, n: s64, a: *float, lda: s64) -> float #foreign mkl_intel_ilp64;

LAPACKE_slansy_work :: (matrix_layout: s32, norm: u8, uplo: u8, n: s64, a: *float, lda: s64, work: *float) -> float #foreign mkl_intel_ilp64;

LAPACKE_slantr :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, m: s64, n: s64, a: *float, lda: s64) -> float #foreign mkl_intel_ilp64;

LAPACKE_slantr_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, m: s64, n: s64, a: *float, lda: s64, work: *float) -> float #foreign mkl_intel_ilp64;

LAPACKE_slapy2 :: (x: float, y: float) -> float #foreign mkl_intel_ilp64;

LAPACKE_slapy2_work :: (x: float, y: float) -> float #foreign mkl_intel_ilp64;

LAPACKE_slapy3 :: (x: float, y: float, z: float) -> float #foreign mkl_intel_ilp64;

LAPACKE_slapy3_work :: (x: float, y: float, z: float) -> float #foreign mkl_intel_ilp64;

LAPACKE_cbbcsd :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, m: s64, p: s64, q: s64, theta: *float, phi: *float, u1: *MKL_Complex8, ldu1: s64, u2: *MKL_Complex8, ldu2: s64, v1t: *MKL_Complex8, ldv1t: s64, v2t: *MKL_Complex8, ldv2t: s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cbbcsd_work :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, m: s64, p: s64, q: s64, theta: *float, phi: *float, u1: *MKL_Complex8, ldu1: s64, u2: *MKL_Complex8, ldu2: s64, v1t: *MKL_Complex8, ldv1t: s64, v2t: *MKL_Complex8, ldv2t: s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float, rwork: *float, lrwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cbdsqr :: (matrix_layout: s32, uplo: u8, n: s64, ncvt: s64, nru: s64, ncc: s64, d: *float, e: *float, vt: *MKL_Complex8, ldvt: s64, u: *MKL_Complex8, ldu: s64, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cbdsqr_work :: (matrix_layout: s32, uplo: u8, n: s64, ncvt: s64, nru: s64, ncc: s64, d: *float, e: *float, vt: *MKL_Complex8, ldvt: s64, u: *MKL_Complex8, ldu: s64, c: *MKL_Complex8, ldc: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbbrd :: (matrix_layout: s32, vect: u8, m: s64, n: s64, ncc: s64, kl: s64, ku: s64, ab: *MKL_Complex8, ldab: s64, d: *float, e: *float, q: *MKL_Complex8, ldq: s64, pt: *MKL_Complex8, ldpt: s64, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbbrd_work :: (matrix_layout: s32, vect: u8, m: s64, n: s64, ncc: s64, kl: s64, ku: s64, ab: *MKL_Complex8, ldab: s64, d: *float, e: *float, q: *MKL_Complex8, ldq: s64, pt: *MKL_Complex8, ldpt: s64, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbcon :: (matrix_layout: s32, norm: u8, n: s64, kl: s64, ku: s64, ab: *MKL_Complex8, ldab: s64, ipiv: *s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbcon_work :: (matrix_layout: s32, norm: u8, n: s64, kl: s64, ku: s64, ab: *MKL_Complex8, ldab: s64, ipiv: *s64, anorm: float, rcond: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbequ :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *MKL_Complex8, ldab: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbequ_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *MKL_Complex8, ldab: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbequb :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *MKL_Complex8, ldab: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbequb_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *MKL_Complex8, ldab: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbrfs :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, afb: *MKL_Complex8, ldafb: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbrfs_work :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, afb: *MKL_Complex8, ldafb: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbrfsx :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, afb: *MKL_Complex8, ldafb: s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbrfsx_work :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, afb: *MKL_Complex8, ldafb: s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbsv :: (matrix_layout: s32, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbsv_work :: (matrix_layout: s32, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbsvx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, afb: *MKL_Complex8, ldafb: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float, rpivot: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbsvx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, afb: *MKL_Complex8, ldafb: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbsvxx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, afb: *MKL_Complex8, ldafb: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbsvxx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, afb: *MKL_Complex8, ldafb: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbtrf :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *MKL_Complex8, ldab: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbtrf_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *MKL_Complex8, ldab: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbtrs :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgbtrs_work :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgebak :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, scale: *float, m: s64, v: *MKL_Complex8, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgebak_work :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, scale: *float, m: s64, v: *MKL_Complex8, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgebal :: (matrix_layout: s32, job: u8, n: s64, a: *MKL_Complex8, lda: s64, ilo: *s64, ihi: *s64, scale: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgebal_work :: (matrix_layout: s32, job: u8, n: s64, a: *MKL_Complex8, lda: s64, ilo: *s64, ihi: *s64, scale: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgebrd :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgebrd_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, d: *float, e: *float, tauq: *MKL_Complex8, taup: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgecon :: (matrix_layout: s32, norm: u8, n: s64, a: *MKL_Complex8, lda: s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgecon_work :: (matrix_layout: s32, norm: u8, n: s64, a: *MKL_Complex8, lda: s64, anorm: float, rcond: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeequ :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeequ_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeequb :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeequb_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgees :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_C_SELECT1, n: s64, a: *MKL_Complex8, lda: s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgees_work :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_C_SELECT1, n: s64, a: *MKL_Complex8, lda: s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeesx :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_C_SELECT1, sense: u8, n: s64, a: *MKL_Complex8, lda: s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: s64, rconde: *float, rcondv: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeesx_work :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_C_SELECT1, sense: u8, n: s64, a: *MKL_Complex8, lda: s64, sdim: *s64, w: *MKL_Complex8, vs: *MKL_Complex8, ldvs: s64, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: s64, rwork: *float, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeev :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *MKL_Complex8, lda: s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeev_work :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *MKL_Complex8, lda: s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeevx :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *MKL_Complex8, lda: s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeevx_work :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *MKL_Complex8, lda: s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgehrd :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgehrd_work :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgejsv :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8, jobp: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, sva: *float, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, stat: *float, istat: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgejsv_work :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8, jobp: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, sva: *float, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, cwork: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgelq2 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgelq2_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgelqf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgelqf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgels :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgels_work :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgelsd :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, s: *float, rcond: float, rank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgelsd_work :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, s: *float, rcond: float, rank: *s64, work: *MKL_Complex8, lwork: s64, rwork: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgelss :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, s: *float, rcond: float, rank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgelss_work :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, s: *float, rcond: float, rank: *s64, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgelsy :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, jpvt: *s64, rcond: float, rank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgelsy_work :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, jpvt: *s64, rcond: float, rank: *s64, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgemqrt :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, nb: s64, v: *MKL_Complex8, ldv: s64, t: *MKL_Complex8, ldt: s64, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgemqrt_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, nb: s64, v: *MKL_Complex8, ldv: s64, t: *MKL_Complex8, ldt: s64, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqlf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqlf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqp3 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, jpvt: *s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqp3_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, jpvt: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqpf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, jpvt: *s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqpf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, jpvt: *s64, tau: *MKL_Complex8, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqr2 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqr2_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqrf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqrf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqrfp :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqrfp_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqrt :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqrt2 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqrt2_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqrt3 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqrt3_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqrt_work :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, ldt: s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgerfs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgerfs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgerfsx :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgerfsx_work :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, r: *float, c: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgerqf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgerqf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesdd :: (matrix_layout: s32, jobz: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, s: *float, u: *MKL_Complex8, ldu: s64, vt: *MKL_Complex8, ldvt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesdd_work :: (matrix_layout: s32, jobz: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, s: *float, u: *MKL_Complex8, ldu: s64, vt: *MKL_Complex8, ldvt: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesv :: (matrix_layout: s32, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesv_work :: (matrix_layout: s32, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesvd :: (matrix_layout: s32, jobu: u8, jobvt: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, s: *float, u: *MKL_Complex8, ldu: s64, vt: *MKL_Complex8, ldvt: s64, superb: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesvd_work :: (matrix_layout: s32, jobu: u8, jobvt: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, s: *float, u: *MKL_Complex8, ldu: s64, vt: *MKL_Complex8, ldvt: s64, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesvdx :: (matrix_layout: s32, jobu: u8, jobvt: u8, range: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, vl: float, vu: float, il: s64, iu: s64, ns: *s64, s: *float, u: *MKL_Complex8, ldu: s64, vt: *MKL_Complex8, ldvt: s64, superb: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesvdx_work :: (matrix_layout: s32, jobu: u8, jobvt: u8, range: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, vl: float, vu: float, il: s64, iu: s64, ns: *s64, s: *float, u: *MKL_Complex8, ldu: s64, vt: *MKL_Complex8, ldvt: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesvj :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, sva: *float, mv: s64, v: *MKL_Complex8, ldv: s64, stat: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesvj_work :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, sva: *float, mv: s64, v: *MKL_Complex8, ldv: s64, cwork: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesvx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float, rpivot: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesvx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesvxx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesvxx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgetf2 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgetf2_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgetrf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgetrf2 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgetrf2_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgetrf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgetri :: (matrix_layout: s32, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgetri_work :: (matrix_layout: s32, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgetrs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgetrs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggbak :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, lscale: *float, rscale: *float, m: s64, v: *MKL_Complex8, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggbak_work :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, lscale: *float, rscale: *float, m: s64, v: *MKL_Complex8, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggbal :: (matrix_layout: s32, job: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggbal_work :: (matrix_layout: s32, job: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgges :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_C_SELECT2, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: s64, vsr: *MKL_Complex8, ldvsr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgges3 :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_C_SELECT2, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: s64, vsr: *MKL_Complex8, ldvsr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgges3_work :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_C_SELECT2, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: s64, vsr: *MKL_Complex8, ldvsr: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgges_work :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_C_SELECT2, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: s64, vsr: *MKL_Complex8, ldvsr: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggesx :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_C_SELECT2, sense: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: s64, vsr: *MKL_Complex8, ldvsr: s64, rconde: *float, rcondv: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggesx_work :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_C_SELECT2, sense: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, sdim: *s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vsl: *MKL_Complex8, ldvsl: s64, vsr: *MKL_Complex8, ldvsr: s64, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: s64, rwork: *float, iwork: *s64, liwork: s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggev :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggev3 :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggev3_work :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggev_work :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggevx :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggevx_work :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float, work: *MKL_Complex8, lwork: s64, rwork: *float, iwork: *s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggglm :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, d: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggglm_work :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, d: *MKL_Complex8, x: *MKL_Complex8, y: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgghd3 :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, q: *MKL_Complex8, ldq: s64, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgghd3_work :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, q: *MKL_Complex8, ldq: s64, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgghrd :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, q: *MKL_Complex8, ldq: s64, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgghrd_work :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, q: *MKL_Complex8, ldq: s64, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgglse :: (matrix_layout: s32, m: s64, n: s64, p: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, c: *MKL_Complex8, d: *MKL_Complex8, x: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgglse_work :: (matrix_layout: s32, m: s64, n: s64, p: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, c: *MKL_Complex8, d: *MKL_Complex8, x: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggqrf :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *MKL_Complex8, lda: s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: s64, taub: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggqrf_work :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *MKL_Complex8, lda: s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: s64, taub: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggrqf :: (matrix_layout: s32, m: s64, p: s64, n: s64, a: *MKL_Complex8, lda: s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: s64, taub: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggrqf_work :: (matrix_layout: s32, m: s64, p: s64, n: s64, a: *MKL_Complex8, lda: s64, taua: *MKL_Complex8, b: *MKL_Complex8, ldb: s64, taub: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggsvd :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, q: *MKL_Complex8, ldq: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggsvd3 :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, q: *MKL_Complex8, ldq: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggsvd3_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, q: *MKL_Complex8, ldq: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggsvd_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, q: *MKL_Complex8, ldq: s64, work: *MKL_Complex8, rwork: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggsvp :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, tola: float, tolb: float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, q: *MKL_Complex8, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggsvp3 :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, tola: float, tolb: float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, q: *MKL_Complex8, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggsvp3_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, tola: float, tolb: float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, q: *MKL_Complex8, ldq: s64, iwork: *s64, rwork: *float, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cggsvp_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, tola: float, tolb: float, k: *s64, l: *s64, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, q: *MKL_Complex8, ldq: s64, iwork: *s64, rwork: *float, tau: *MKL_Complex8, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgtcon :: (norm: u8, n: s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgtcon_work :: (norm: u8, n: s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, anorm: float, rcond: *float, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgtrfs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgtrfs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgtsv :: (matrix_layout: s32, n: s64, nrhs: s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgtsv_work :: (matrix_layout: s32, n: s64, nrhs: s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgtsvx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgtsvx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, dlf: *MKL_Complex8, df: *MKL_Complex8, duf: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgttrf :: (n: s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgttrf_work :: (n: s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgttrs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgttrs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *MKL_Complex8, d: *MKL_Complex8, du: *MKL_Complex8, du2: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbev :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, w: *float, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbev_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbevd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, w: *float, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbevd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbevx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, q: *MKL_Complex8, ldq: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbevx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, q: *MKL_Complex8, ldq: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbgst :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex8, ldab: s64, bb: *MKL_Complex8, ldbb: s64, x: *MKL_Complex8, ldx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbgst_work :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex8, ldab: s64, bb: *MKL_Complex8, ldbb: s64, x: *MKL_Complex8, ldx: s64, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbgv :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex8, ldab: s64, bb: *MKL_Complex8, ldbb: s64, w: *float, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbgv_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex8, ldab: s64, bb: *MKL_Complex8, ldbb: s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbgvd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex8, ldab: s64, bb: *MKL_Complex8, ldbb: s64, w: *float, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbgvd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex8, ldab: s64, bb: *MKL_Complex8, ldbb: s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbgvx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex8, ldab: s64, bb: *MKL_Complex8, ldbb: s64, q: *MKL_Complex8, ldq: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbgvx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex8, ldab: s64, bb: *MKL_Complex8, ldbb: s64, q: *MKL_Complex8, ldq: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbtrd :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, d: *float, e: *float, q: *MKL_Complex8, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbtrd_work :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, d: *float, e: *float, q: *MKL_Complex8, ldq: s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_checon :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_checon_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, anorm: float, rcond: *float, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheequb :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheequb_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, s: *float, scond: *float, amax: *float, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheev :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheev_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, w: *float, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheevd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheevd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, w: *float, work: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheevr :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheevr_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, isuppz: *s64, work: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheevx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheevx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chegst :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chegst_work :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chegv :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chegv_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, w: *float, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chegvd :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chegvd_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, w: *float, work: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chegvx :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chegvx_work :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cherfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cherfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cherfsx :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cherfsx_work :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chesv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chesv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chesvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chesvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chesvxx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chesvxx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheswapr :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, i1: s64, i2: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheswapr_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, i1: s64, i2: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrd :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, d: *float, e: *float, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrd_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, d: *float, e: *float, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrf_rook :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrf_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetri :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetri2 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetri2_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetri2x :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, nb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetri2x_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, work: *MKL_Complex8, nb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetri_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrs2 :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrs2_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrs_rook :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrs_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chfrk :: (matrix_layout: s32, transr: u8, uplo: u8, trans: u8, n: s64, k: s64, alpha: float, a: *MKL_Complex8, lda: s64, beta: float, c: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chfrk_work :: (matrix_layout: s32, transr: u8, uplo: u8, trans: u8, n: s64, k: s64, alpha: float, a: *MKL_Complex8, lda: s64, beta: float, c: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chgeqz :: (matrix_layout: s32, job: u8, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *MKL_Complex8, ldh: s64, t: *MKL_Complex8, ldt: s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: s64, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chgeqz_work :: (matrix_layout: s32, job: u8, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *MKL_Complex8, ldh: s64, t: *MKL_Complex8, ldt: s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: s64, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpcon :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, ipiv: *s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpcon_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, ipiv: *s64, anorm: float, rcond: *float, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpev :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpev_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpevd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpevd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpevx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ap: *MKL_Complex8, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpevx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ap: *MKL_Complex8, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpgst :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, ap: *MKL_Complex8, bp: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpgst_work :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, ap: *MKL_Complex8, bp: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpgv :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpgv_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpgvd :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpgvd_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex8, bp: *MKL_Complex8, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpgvx :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, ap: *MKL_Complex8, bp: *MKL_Complex8, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpgvx_work :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, ap: *MKL_Complex8, bp: *MKL_Complex8, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, rwork: *float, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chprfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chprfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpsv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpsv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chpsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chptrd :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, d: *float, e: *float, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chptrd_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, d: *float, e: *float, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chptrf :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chptrf_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chptri :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chptri_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chptrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chptrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chsein :: (matrix_layout: s32, job: u8, eigsrc: u8, initv: u8, select: *s64, n: s64, h: *MKL_Complex8, ldh: s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, mm: s64, m: *s64, ifaill: *s64, ifailr: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chsein_work :: (matrix_layout: s32, job: u8, eigsrc: u8, initv: u8, select: *s64, n: s64, h: *MKL_Complex8, ldh: s64, w: *MKL_Complex8, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, mm: s64, m: *s64, work: *MKL_Complex8, rwork: *float, ifaill: *s64, ifailr: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chseqr :: (matrix_layout: s32, job: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *MKL_Complex8, ldh: s64, w: *MKL_Complex8, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chseqr_work :: (matrix_layout: s32, job: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *MKL_Complex8, ldh: s64, w: *MKL_Complex8, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clacgv :: (n: s64, x: *MKL_Complex8, incx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clacgv_work :: (n: s64, x: *MKL_Complex8, incx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clacn2 :: (n: s64, v: *MKL_Complex8, x: *MKL_Complex8, est: *float, kase: *s64, isave: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clacn2_work :: (n: s64, v: *MKL_Complex8, x: *MKL_Complex8, est: *float, kase: *s64, isave: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clacp2 :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, a: *float, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clacp2_work :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, a: *float, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clacpy :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clacpy_work :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clag2z :: (matrix_layout: s32, m: s64, n: s64, sa: *MKL_Complex8, ldsa: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clag2z_work :: (matrix_layout: s32, m: s64, n: s64, sa: *MKL_Complex8, ldsa: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clagge :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, d: *float, a: *MKL_Complex8, lda: s64, iseed: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clagge_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, d: *float, a: *MKL_Complex8, lda: s64, iseed: *s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_claghe :: (matrix_layout: s32, n: s64, k: s64, d: *float, a: *MKL_Complex8, lda: s64, iseed: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_claghe_work :: (matrix_layout: s32, n: s64, k: s64, d: *float, a: *MKL_Complex8, lda: s64, iseed: *s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clagsy :: (matrix_layout: s32, n: s64, k: s64, d: *float, a: *MKL_Complex8, lda: s64, iseed: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clagsy_work :: (matrix_layout: s32, n: s64, k: s64, d: *float, a: *MKL_Complex8, lda: s64, iseed: *s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clapmr :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *MKL_Complex8, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clapmr_work :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *MKL_Complex8, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clapmt :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *MKL_Complex8, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clapmt_work :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *MKL_Complex8, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clarfb :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, v: *MKL_Complex8, ldv: s64, t: *MKL_Complex8, ldt: s64, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clarfb_work :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, v: *MKL_Complex8, ldv: s64, t: *MKL_Complex8, ldt: s64, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8, ldwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clarfg :: (n: s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clarfg_work :: (n: s64, alpha: *MKL_Complex8, x: *MKL_Complex8, incx: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clarft :: (matrix_layout: s32, direct: u8, storev: u8, n: s64, k: s64, v: *MKL_Complex8, ldv: s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clarft_work :: (matrix_layout: s32, direct: u8, storev: u8, n: s64, k: s64, v: *MKL_Complex8, ldv: s64, tau: *MKL_Complex8, t: *MKL_Complex8, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clarfx :: (matrix_layout: s32, side: u8, m: s64, n: s64, v: *MKL_Complex8, tau: MKL_Complex8, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clarfx_work :: (matrix_layout: s32, side: u8, m: s64, n: s64, v: *MKL_Complex8, tau: MKL_Complex8, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clarnv :: (idist: s64, iseed: *s64, n: s64, x: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clarnv_work :: (idist: s64, iseed: *s64, n: s64, x: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clascl :: (matrix_layout: s32, type: u8, kl: s64, ku: s64, cfrom: float, cto: float, m: s64, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clascl_work :: (matrix_layout: s32, type: u8, kl: s64, ku: s64, cfrom: float, cto: float, m: s64, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_claset :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, alpha: MKL_Complex8, beta: MKL_Complex8, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_claset_work :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, alpha: MKL_Complex8, beta: MKL_Complex8, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_claswp :: (matrix_layout: s32, n: s64, a: *MKL_Complex8, lda: s64, k1: s64, k2: s64, ipiv: *s64, incx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_claswp_work :: (matrix_layout: s32, n: s64, a: *MKL_Complex8, lda: s64, k1: s64, k2: s64, ipiv: *s64, incx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clatms :: (matrix_layout: s32, m: s64, n: s64, dist: u8, iseed: *s64, sym: u8, d: *float, mode: s64, cond: float, dmax: float, kl: s64, ku: s64, pack: u8, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clatms_work :: (matrix_layout: s32, m: s64, n: s64, dist: u8, iseed: *s64, sym: u8, d: *float, mode: s64, cond: float, dmax: float, kl: s64, ku: s64, pack: u8, a: *MKL_Complex8, lda: s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clauum :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_clauum_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbcon :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbcon_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, anorm: float, rcond: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbequ :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbequ_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbrfs :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, afb: *MKL_Complex8, ldafb: s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbrfs_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, afb: *MKL_Complex8, ldafb: s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbstf :: (matrix_layout: s32, uplo: u8, n: s64, kb: s64, bb: *MKL_Complex8, ldbb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbstf_work :: (matrix_layout: s32, uplo: u8, n: s64, kb: s64, bb: *MKL_Complex8, ldbb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbsv :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbsv_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, afb: *MKL_Complex8, ldafb: s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, afb: *MKL_Complex8, ldafb: s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbtrf :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbtrf_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbtrs :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpbtrs_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpftrf :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpftrf_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpftri :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpftri_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpftrs :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpftrs_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpocon :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpocon_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, anorm: float, rcond: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpoequ :: (matrix_layout: s32, n: s64, a: *MKL_Complex8, lda: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpoequ_work :: (matrix_layout: s32, n: s64, a: *MKL_Complex8, lda: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpoequb :: (matrix_layout: s32, n: s64, a: *MKL_Complex8, lda: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpoequb_work :: (matrix_layout: s32, n: s64, a: *MKL_Complex8, lda: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cporfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cporfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cporfsx :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cporfsx_work :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cposv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cposv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cposvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cposvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cposvxx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cposvxx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpotrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpotrf2 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpotrf2_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpotrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpotri :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpotri_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpotrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpotrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cppcon :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cppcon_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, anorm: float, rcond: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cppequ :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cppequ_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpprfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, afp: *MKL_Complex8, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpprfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, afp: *MKL_Complex8, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cppsv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cppsv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cppsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, afp: *MKL_Complex8, equed: *u8, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cppsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, afp: *MKL_Complex8, equed: *u8, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpptrf :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpptrf_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpptri :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpptri_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpptrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpptrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpstrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, piv: *s64, rank: *s64, tol: float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpstrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, piv: *s64, rank: *s64, tol: float, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cptcon :: (n: s64, d: *float, e: *MKL_Complex8, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cptcon_work :: (n: s64, d: *float, e: *MKL_Complex8, anorm: float, rcond: *float, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpteqr :: (matrix_layout: s32, compz: u8, n: s64, d: *float, e: *float, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpteqr_work :: (matrix_layout: s32, compz: u8, n: s64, d: *float, e: *float, z: *MKL_Complex8, ldz: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cptrfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cptrfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cptsv :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cptsv_work :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cptsvx :: (matrix_layout: s32, fact: u8, n: s64, nrhs: s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cptsvx_work :: (matrix_layout: s32, fact: u8, n: s64, nrhs: s64, d: *float, e: *MKL_Complex8, df: *float, ef: *MKL_Complex8, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpttrf :: (n: s64, d: *float, e: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpttrf_work :: (n: s64, d: *float, e: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpttrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cpttrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, d: *float, e: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cspcon :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, ipiv: *s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cspcon_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, ipiv: *s64, anorm: float, rcond: *float, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csprfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csprfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cspsv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cspsv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cspsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cspsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, afp: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csptrf :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csptrf_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csptri :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csptri_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csptrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csptrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cstedc :: (matrix_layout: s32, compz: u8, n: s64, d: *float, e: *float, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cstedc_work :: (matrix_layout: s32, compz: u8, n: s64, d: *float, e: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cstegr :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cstegr_work :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, isuppz: *s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cstein :: (matrix_layout: s32, n: s64, d: *float, e: *float, m: s64, w: *float, iblock: *s64, isplit: *s64, z: *MKL_Complex8, ldz: s64, ifailv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cstein_work :: (matrix_layout: s32, n: s64, d: *float, e: *float, m: s64, w: *float, iblock: *s64, isplit: *s64, z: *MKL_Complex8, ldz: s64, work: *float, iwork: *s64, ifailv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cstemr :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, nzc: s64, isuppz: *s64, tryrac: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cstemr_work :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, nzc: s64, isuppz: *s64, tryrac: *s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csteqr :: (matrix_layout: s32, compz: u8, n: s64, d: *float, e: *float, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csteqr_work :: (matrix_layout: s32, compz: u8, n: s64, d: *float, e: *float, z: *MKL_Complex8, ldz: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csycon :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csycon_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, anorm: float, rcond: *float, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csyconv :: (matrix_layout: s32, uplo: u8, way: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, e: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csyconv_work :: (matrix_layout: s32, uplo: u8, way: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, e: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csyequb :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csyequb_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, s: *float, scond: *float, amax: *float, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csyr :: (matrix_layout: s32, uplo: u8, n: s64, alpha: MKL_Complex8, x: *MKL_Complex8, incx: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csyr_work :: (matrix_layout: s32, uplo: u8, n: s64, alpha: MKL_Complex8, x: *MKL_Complex8, incx: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csyrfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csyrfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csyrfsx :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csyrfsx_work :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysv_rook :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysv_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysvxx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysvxx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, af: *MKL_Complex8, ldaf: s64, ipiv: *s64, equed: *u8, s: *float, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csyswapr :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, i1: s64, i2: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csyswapr_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, i1: s64, i2: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrf_rook :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrf_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytri :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytri2 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytri2_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytri2x :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, nb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytri2x_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, work: *MKL_Complex8, nb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytri_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrs2 :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrs2_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrs_rook :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrs_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctbcon :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctbcon_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, rcond: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctbrfs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctbrfs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctbtrs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctbtrs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex8, ldab: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctfsm :: (matrix_layout: s32, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8, m: s64, n: s64, alpha: MKL_Complex8, a: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctfsm_work :: (matrix_layout: s32, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8, m: s64, n: s64, alpha: MKL_Complex8, a: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctftri :: (matrix_layout: s32, transr: u8, uplo: u8, diag: u8, n: s64, a: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctftri_work :: (matrix_layout: s32, transr: u8, uplo: u8, diag: u8, n: s64, a: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctfttp :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *MKL_Complex8, ap: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctfttp_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *MKL_Complex8, ap: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctfttr :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *MKL_Complex8, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctfttr_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *MKL_Complex8, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctgevc :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, s: *MKL_Complex8, lds: s64, p: *MKL_Complex8, ldp: s64, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctgevc_work :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, s: *MKL_Complex8, lds: s64, p: *MKL_Complex8, ldp: s64, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, mm: s64, m: *s64, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctgexc :: (matrix_layout: s32, wantq: s64, wantz: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, q: *MKL_Complex8, ldq: s64, z: *MKL_Complex8, ldz: s64, ifst: s64, ilst: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctgexc_work :: (matrix_layout: s32, wantq: s64, wantz: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, q: *MKL_Complex8, ldq: s64, z: *MKL_Complex8, ldz: s64, ifst: s64, ilst: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctgsen :: (matrix_layout: s32, ijob: s64, wantq: s64, wantz: s64, select: *s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: s64, z: *MKL_Complex8, ldz: s64, m: *s64, pl: *float, pr: *float, dif: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctgsen_work :: (matrix_layout: s32, ijob: s64, wantq: s64, wantz: s64, select: *s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, alpha: *MKL_Complex8, beta: *MKL_Complex8, q: *MKL_Complex8, ldq: s64, z: *MKL_Complex8, ldz: s64, m: *s64, pl: *float, pr: *float, dif: *float, work: *MKL_Complex8, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctgsja :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, k: s64, l: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, tola: float, tolb: float, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, q: *MKL_Complex8, ldq: s64, ncycle: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctgsja_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, k: s64, l: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, tola: float, tolb: float, alpha: *float, beta: *float, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, q: *MKL_Complex8, ldq: s64, work: *MKL_Complex8, ncycle: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctgsna :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, s: *float, dif: *float, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctgsna_work :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, s: *float, dif: *float, mm: s64, m: *s64, work: *MKL_Complex8, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctgsyl :: (matrix_layout: s32, trans: u8, ijob: s64, m: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, c: *MKL_Complex8, ldc: s64, d: *MKL_Complex8, ldd: s64, e: *MKL_Complex8, lde: s64, f: *MKL_Complex8, ldf: s64, scale: *float, dif: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctgsyl_work :: (matrix_layout: s32, trans: u8, ijob: s64, m: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, c: *MKL_Complex8, ldc: s64, d: *MKL_Complex8, ldd: s64, e: *MKL_Complex8, lde: s64, f: *MKL_Complex8, ldf: s64, scale: *float, dif: *float, work: *MKL_Complex8, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctpcon :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, ap: *MKL_Complex8, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctpcon_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, ap: *MKL_Complex8, rcond: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctpmqrt :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, nb: s64, v: *MKL_Complex8, ldv: s64, t: *MKL_Complex8, ldt: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctpmqrt_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, nb: s64, v: *MKL_Complex8, ldv: s64, t: *MKL_Complex8, ldt: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctpqrt :: (matrix_layout: s32, m: s64, n: s64, l: s64, nb: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, t: *MKL_Complex8, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctpqrt2 :: (matrix_layout: s32, m: s64, n: s64, l: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, t: *MKL_Complex8, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctpqrt2_work :: (matrix_layout: s32, m: s64, n: s64, l: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, t: *MKL_Complex8, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctpqrt_work :: (matrix_layout: s32, m: s64, n: s64, l: s64, nb: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, t: *MKL_Complex8, ldt: s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctprfb :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, l: s64, v: *MKL_Complex8, ldv: s64, t: *MKL_Complex8, ldt: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctprfb_work :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, l: s64, v: *MKL_Complex8, ldv: s64, t: *MKL_Complex8, ldt: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, ldwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctprfs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctprfs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctptri :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, ap: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctptri_work :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, ap: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctptrs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctptrs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *MKL_Complex8, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctpttf :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, ap: *MKL_Complex8, arf: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctpttf_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, ap: *MKL_Complex8, arf: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctpttr :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctpttr_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrcon :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, a: *MKL_Complex8, lda: s64, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrcon_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, a: *MKL_Complex8, lda: s64, rcond: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrevc :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, t: *MKL_Complex8, ldt: s64, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrevc_work :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, t: *MKL_Complex8, ldt: s64, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, mm: s64, m: *s64, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrexc :: (matrix_layout: s32, compq: u8, n: s64, t: *MKL_Complex8, ldt: s64, q: *MKL_Complex8, ldq: s64, ifst: s64, ilst: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrexc_work :: (matrix_layout: s32, compq: u8, n: s64, t: *MKL_Complex8, ldt: s64, q: *MKL_Complex8, ldq: s64, ifst: s64, ilst: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrrfs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrrfs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, x: *MKL_Complex8, ldx: s64, ferr: *float, berr: *float, work: *MKL_Complex8, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrsen :: (matrix_layout: s32, job: u8, compq: u8, select: *s64, n: s64, t: *MKL_Complex8, ldt: s64, q: *MKL_Complex8, ldq: s64, w: *MKL_Complex8, m: *s64, s: *float, sep: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrsen_work :: (matrix_layout: s32, job: u8, compq: u8, select: *s64, n: s64, t: *MKL_Complex8, ldt: s64, q: *MKL_Complex8, ldq: s64, w: *MKL_Complex8, m: *s64, s: *float, sep: *float, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrsna :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, t: *MKL_Complex8, ldt: s64, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, s: *float, sep: *float, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrsna_work :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, t: *MKL_Complex8, ldt: s64, vl: *MKL_Complex8, ldvl: s64, vr: *MKL_Complex8, ldvr: s64, s: *float, sep: *float, mm: s64, m: *s64, work: *MKL_Complex8, ldwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrsyl :: (matrix_layout: s32, trana: u8, tranb: u8, isgn: s64, m: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, c: *MKL_Complex8, ldc: s64, scale: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrsyl_work :: (matrix_layout: s32, trana: u8, tranb: u8, isgn: s64, m: s64, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, c: *MKL_Complex8, ldc: s64, scale: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrtri :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrtri_work :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrtrs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrtrs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrttf :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, arf: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrttf_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, arf: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrttp :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ap: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctrttp_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ap: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctzrzf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ctzrzf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunbdb :: (matrix_layout: s32, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *MKL_Complex8, ldx11: s64, x12: *MKL_Complex8, ldx12: s64, x21: *MKL_Complex8, ldx21: s64, x22: *MKL_Complex8, ldx22: s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, tauq2: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunbdb_work :: (matrix_layout: s32, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *MKL_Complex8, ldx11: s64, x12: *MKL_Complex8, ldx12: s64, x21: *MKL_Complex8, ldx21: s64, x22: *MKL_Complex8, ldx22: s64, theta: *float, phi: *float, taup1: *MKL_Complex8, taup2: *MKL_Complex8, tauq1: *MKL_Complex8, tauq2: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cuncsd :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *MKL_Complex8, ldx11: s64, x12: *MKL_Complex8, ldx12: s64, x21: *MKL_Complex8, ldx21: s64, x22: *MKL_Complex8, ldx22: s64, theta: *float, u1: *MKL_Complex8, ldu1: s64, u2: *MKL_Complex8, ldu2: s64, v1t: *MKL_Complex8, ldv1t: s64, v2t: *MKL_Complex8, ldv2t: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cuncsd2by1 :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, m: s64, p: s64, q: s64, x11: *MKL_Complex8, ldx11: s64, x21: *MKL_Complex8, ldx21: s64, theta: *float, u1: *MKL_Complex8, ldu1: s64, u2: *MKL_Complex8, ldu2: s64, v1t: *MKL_Complex8, ldv1t: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cuncsd2by1_work :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, m: s64, p: s64, q: s64, x11: *MKL_Complex8, ldx11: s64, x21: *MKL_Complex8, ldx21: s64, theta: *float, u1: *MKL_Complex8, ldu1: s64, u2: *MKL_Complex8, ldu2: s64, v1t: *MKL_Complex8, ldv1t: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cuncsd_work :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *MKL_Complex8, ldx11: s64, x12: *MKL_Complex8, ldx12: s64, x21: *MKL_Complex8, ldx21: s64, x22: *MKL_Complex8, ldx22: s64, theta: *float, u1: *MKL_Complex8, ldu1: s64, u2: *MKL_Complex8, ldu2: s64, v1t: *MKL_Complex8, ldv1t: s64, v2t: *MKL_Complex8, ldv2t: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cungbr :: (matrix_layout: s32, vect: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cungbr_work :: (matrix_layout: s32, vect: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunghr :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunghr_work :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunglq :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunglq_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cungql :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cungql_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cungqr :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cungqr_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cungrq :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cungrq_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cungtr :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cungtr_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmbr :: (matrix_layout: s32, vect: u8, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmbr_work :: (matrix_layout: s32, vect: u8, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmhr :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmhr_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmlq :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmlq_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmql :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmql_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmqr :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmqr_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmrq :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmrq_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmrz :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmrz_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmtr :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunmtr_work :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cupgtr :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, tau: *MKL_Complex8, q: *MKL_Complex8, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cupgtr_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex8, tau: *MKL_Complex8, q: *MKL_Complex8, ldq: s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cupmtr :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, ap: *MKL_Complex8, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cupmtr_work :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, ap: *MKL_Complex8, tau: *MKL_Complex8, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dbbcsd :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, m: s64, p: s64, q: s64, theta: *float64, phi: *float64, u1: *float64, ldu1: s64, u2: *float64, ldu2: s64, v1t: *float64, ldv1t: s64, v2t: *float64, ldv2t: s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dbbcsd_work :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, m: s64, p: s64, q: s64, theta: *float64, phi: *float64, u1: *float64, ldu1: s64, u2: *float64, ldu2: s64, v1t: *float64, ldv1t: s64, v2t: *float64, ldv2t: s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dbdsdc :: (matrix_layout: s32, uplo: u8, compq: u8, n: s64, d: *float64, e: *float64, u: *float64, ldu: s64, vt: *float64, ldvt: s64, q: *float64, iq: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dbdsdc_work :: (matrix_layout: s32, uplo: u8, compq: u8, n: s64, d: *float64, e: *float64, u: *float64, ldu: s64, vt: *float64, ldvt: s64, q: *float64, iq: *s64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dbdsqr :: (matrix_layout: s32, uplo: u8, n: s64, ncvt: s64, nru: s64, ncc: s64, d: *float64, e: *float64, vt: *float64, ldvt: s64, u: *float64, ldu: s64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dbdsqr_work :: (matrix_layout: s32, uplo: u8, n: s64, ncvt: s64, nru: s64, ncc: s64, d: *float64, e: *float64, vt: *float64, ldvt: s64, u: *float64, ldu: s64, c: *float64, ldc: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dbdsvdx :: (matrix_layout: s32, uplo: u8, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, ns: *s64, s: *float64, z: *float64, ldz: s64, superb: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dbdsvdx_work :: (matrix_layout: s32, uplo: u8, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, ns: *s64, s: *float64, z: *float64, ldz: s64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ddisna :: (job: u8, m: s64, n: s64, d: *float64, sep: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ddisna_work :: (job: u8, m: s64, n: s64, d: *float64, sep: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbbrd :: (matrix_layout: s32, vect: u8, m: s64, n: s64, ncc: s64, kl: s64, ku: s64, ab: *float64, ldab: s64, d: *float64, e: *float64, q: *float64, ldq: s64, pt: *float64, ldpt: s64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbbrd_work :: (matrix_layout: s32, vect: u8, m: s64, n: s64, ncc: s64, kl: s64, ku: s64, ab: *float64, ldab: s64, d: *float64, e: *float64, q: *float64, ldq: s64, pt: *float64, ldpt: s64, c: *float64, ldc: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbcon :: (matrix_layout: s32, norm: u8, n: s64, kl: s64, ku: s64, ab: *float64, ldab: s64, ipiv: *s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbcon_work :: (matrix_layout: s32, norm: u8, n: s64, kl: s64, ku: s64, ab: *float64, ldab: s64, ipiv: *s64, anorm: float64, rcond: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbequ :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *float64, ldab: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbequ_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *float64, ldab: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbequb :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *float64, ldab: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbequb_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *float64, ldab: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbrfs :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float64, ldab: s64, afb: *float64, ldafb: s64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbrfs_work :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float64, ldab: s64, afb: *float64, ldafb: s64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbrfsx :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float64, ldab: s64, afb: *float64, ldafb: s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbrfsx_work :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float64, ldab: s64, afb: *float64, ldafb: s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbsv :: (matrix_layout: s32, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float64, ldab: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbsv_work :: (matrix_layout: s32, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float64, ldab: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbsvx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float64, ldab: s64, afb: *float64, ldafb: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, rpivot: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbsvx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float64, ldab: s64, afb: *float64, ldafb: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbsvxx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float64, ldab: s64, afb: *float64, ldafb: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbsvxx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float64, ldab: s64, afb: *float64, ldafb: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbtrf :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *float64, ldab: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbtrf_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *float64, ldab: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbtrs :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float64, ldab: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgbtrs_work :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float64, ldab: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgebak :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, scale: *float64, m: s64, v: *float64, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgebak_work :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, scale: *float64, m: s64, v: *float64, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgebal :: (matrix_layout: s32, job: u8, n: s64, a: *float64, lda: s64, ilo: *s64, ihi: *s64, scale: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgebal_work :: (matrix_layout: s32, job: u8, n: s64, a: *float64, lda: s64, ilo: *s64, ihi: *s64, scale: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgebrd :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, d: *float64, e: *float64, tauq: *float64, taup: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgebrd_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, d: *float64, e: *float64, tauq: *float64, taup: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgecon :: (matrix_layout: s32, norm: u8, n: s64, a: *float64, lda: s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgecon_work :: (matrix_layout: s32, norm: u8, n: s64, a: *float64, lda: s64, anorm: float64, rcond: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeequ :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeequ_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeequb :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeequb_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgees :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_D_SELECT2, n: s64, a: *float64, lda: s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgees_work :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_D_SELECT2, n: s64, a: *float64, lda: s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: s64, work: *float64, lwork: s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeesx :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_D_SELECT2, sense: u8, n: s64, a: *float64, lda: s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: s64, rconde: *float64, rcondv: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeesx_work :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_D_SELECT2, sense: u8, n: s64, a: *float64, lda: s64, sdim: *s64, wr: *float64, wi: *float64, vs: *float64, ldvs: s64, rconde: *float64, rcondv: *float64, work: *float64, lwork: s64, iwork: *s64, liwork: s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeev :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *float64, lda: s64, wr: *float64, wi: *float64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeev_work :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *float64, lda: s64, wr: *float64, wi: *float64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeevx :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *float64, lda: s64, wr: *float64, wi: *float64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeevx_work :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *float64, lda: s64, wr: *float64, wi: *float64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64, work: *float64, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgehrd :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgehrd_work :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgejsv :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8, jobp: u8, m: s64, n: s64, a: *float64, lda: s64, sva: *float64, u: *float64, ldu: s64, v: *float64, ldv: s64, stat: *float64, istat: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgejsv_work :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8, jobp: u8, m: s64, n: s64, a: *float64, lda: s64, sva: *float64, u: *float64, ldu: s64, v: *float64, ldv: s64, work: *float64, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgelq2 :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgelq2_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgelqf :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgelqf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgels :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgels_work :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgelsd :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64, s: *float64, rcond: float64, rank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgelsd_work :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64, s: *float64, rcond: float64, rank: *s64, work: *float64, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgelss :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64, s: *float64, rcond: float64, rank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgelss_work :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64, s: *float64, rcond: float64, rank: *s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgelsy :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64, jpvt: *s64, rcond: float64, rank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgelsy_work :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64, jpvt: *s64, rcond: float64, rank: *s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgemqrt :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, nb: s64, v: *float64, ldv: s64, t: *float64, ldt: s64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgemqrt_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, nb: s64, v: *float64, ldv: s64, t: *float64, ldt: s64, c: *float64, ldc: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqlf :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqlf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqp3 :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, jpvt: *s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqp3_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, jpvt: *s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqpf :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, jpvt: *s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqpf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, jpvt: *s64, tau: *float64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqr2 :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqr2_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqrf :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqrf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqrfp :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqrfp_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqrt :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *float64, lda: s64, t: *float64, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqrt2 :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, t: *float64, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqrt2_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, t: *float64, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqrt3 :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, t: *float64, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqrt3_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, t: *float64, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqrt_work :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *float64, lda: s64, t: *float64, ldt: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgerfs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgerfs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgerfsx :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgerfsx_work :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, r: *float64, c: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgerqf :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgerqf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesdd :: (matrix_layout: s32, jobz: u8, m: s64, n: s64, a: *float64, lda: s64, s: *float64, u: *float64, ldu: s64, vt: *float64, ldvt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesdd_work :: (matrix_layout: s32, jobz: u8, m: s64, n: s64, a: *float64, lda: s64, s: *float64, u: *float64, ldu: s64, vt: *float64, ldvt: s64, work: *float64, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesv :: (matrix_layout: s32, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesv_work :: (matrix_layout: s32, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesvd :: (matrix_layout: s32, jobu: u8, jobvt: u8, m: s64, n: s64, a: *float64, lda: s64, s: *float64, u: *float64, ldu: s64, vt: *float64, ldvt: s64, superb: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesvd_work :: (matrix_layout: s32, jobu: u8, jobvt: u8, m: s64, n: s64, a: *float64, lda: s64, s: *float64, u: *float64, ldu: s64, vt: *float64, ldvt: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesvdx :: (matrix_layout: s32, jobu: u8, jobvt: u8, range: u8, m: s64, n: s64, a: *float64, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, ns: *s64, s: *float64, u: *float64, ldu: s64, vt: *float64, ldvt: s64, superb: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesvdx_work :: (matrix_layout: s32, jobu: u8, jobvt: u8, range: u8, m: s64, n: s64, a: *float64, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, ns: *s64, s: *float64, u: *float64, ldu: s64, vt: *float64, ldvt: s64, work: *float64, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesvj :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *float64, lda: s64, sva: *float64, mv: s64, v: *float64, ldv: s64, stat: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesvj_work :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *float64, lda: s64, sva: *float64, mv: s64, v: *float64, ldv: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesvx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, rpivot: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesvx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesvxx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesvxx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgetf2 :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgetf2_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgetrf :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgetrf2 :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgetrf2_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgetrf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgetri :: (matrix_layout: s32, n: s64, a: *float64, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgetri_work :: (matrix_layout: s32, n: s64, a: *float64, lda: s64, ipiv: *s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgetrs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgetrs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggbak :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, lscale: *float64, rscale: *float64, m: s64, v: *float64, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggbak_work :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, lscale: *float64, rscale: *float64, m: s64, v: *float64, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggbal :: (matrix_layout: s32, job: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggbal_work :: (matrix_layout: s32, job: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgges :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_D_SELECT3, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: s64, vsr: *float64, ldvsr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgges3 :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_D_SELECT3, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: s64, vsr: *float64, ldvsr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgges3_work :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_D_SELECT3, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: s64, vsr: *float64, ldvsr: s64, work: *float64, lwork: s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgges_work :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_D_SELECT3, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: s64, vsr: *float64, ldvsr: s64, work: *float64, lwork: s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggesx :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_D_SELECT3, sense: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: s64, vsr: *float64, ldvsr: s64, rconde: *float64, rcondv: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggesx_work :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_D_SELECT3, sense: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, sdim: *s64, alphar: *float64, alphai: *float64, beta: *float64, vsl: *float64, ldvsl: s64, vsr: *float64, ldvsr: s64, rconde: *float64, rcondv: *float64, work: *float64, lwork: s64, iwork: *s64, liwork: s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggev :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggev3 :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggev3_work :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggev_work :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggevx :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggevx_work :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, alphar: *float64, alphai: *float64, beta: *float64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64, work: *float64, lwork: s64, iwork: *s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggglm :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *float64, lda: s64, b: *float64, ldb: s64, d: *float64, x: *float64, y: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggglm_work :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *float64, lda: s64, b: *float64, ldb: s64, d: *float64, x: *float64, y: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgghd3 :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *float64, lda: s64, b: *float64, ldb: s64, q: *float64, ldq: s64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgghd3_work :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *float64, lda: s64, b: *float64, ldb: s64, q: *float64, ldq: s64, z: *float64, ldz: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgghrd :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *float64, lda: s64, b: *float64, ldb: s64, q: *float64, ldq: s64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgghrd_work :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *float64, lda: s64, b: *float64, ldb: s64, q: *float64, ldq: s64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgglse :: (matrix_layout: s32, m: s64, n: s64, p: s64, a: *float64, lda: s64, b: *float64, ldb: s64, c: *float64, d: *float64, x: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgglse_work :: (matrix_layout: s32, m: s64, n: s64, p: s64, a: *float64, lda: s64, b: *float64, ldb: s64, c: *float64, d: *float64, x: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggqrf :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *float64, lda: s64, taua: *float64, b: *float64, ldb: s64, taub: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggqrf_work :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *float64, lda: s64, taua: *float64, b: *float64, ldb: s64, taub: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggrqf :: (matrix_layout: s32, m: s64, p: s64, n: s64, a: *float64, lda: s64, taua: *float64, b: *float64, ldb: s64, taub: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggrqf_work :: (matrix_layout: s32, m: s64, p: s64, n: s64, a: *float64, lda: s64, taua: *float64, b: *float64, ldb: s64, taub: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggsvd :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *float64, lda: s64, b: *float64, ldb: s64, alpha: *float64, beta: *float64, u: *float64, ldu: s64, v: *float64, ldv: s64, q: *float64, ldq: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggsvd3 :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *float64, lda: s64, b: *float64, ldb: s64, alpha: *float64, beta: *float64, u: *float64, ldu: s64, v: *float64, ldv: s64, q: *float64, ldq: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggsvd3_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *float64, lda: s64, b: *float64, ldb: s64, alpha: *float64, beta: *float64, u: *float64, ldu: s64, v: *float64, ldv: s64, q: *float64, ldq: s64, work: *float64, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggsvd_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *float64, lda: s64, b: *float64, ldb: s64, alpha: *float64, beta: *float64, u: *float64, ldu: s64, v: *float64, ldv: s64, q: *float64, ldq: s64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggsvp :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, tola: float64, tolb: float64, k: *s64, l: *s64, u: *float64, ldu: s64, v: *float64, ldv: s64, q: *float64, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggsvp3 :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, tola: float64, tolb: float64, k: *s64, l: *s64, u: *float64, ldu: s64, v: *float64, ldv: s64, q: *float64, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggsvp3_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, tola: float64, tolb: float64, k: *s64, l: *s64, u: *float64, ldu: s64, v: *float64, ldv: s64, q: *float64, ldq: s64, iwork: *s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dggsvp_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, tola: float64, tolb: float64, k: *s64, l: *s64, u: *float64, ldu: s64, v: *float64, ldv: s64, q: *float64, ldq: s64, iwork: *s64, tau: *float64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgtcon :: (norm: u8, n: s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgtcon_work :: (norm: u8, n: s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, anorm: float64, rcond: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgtrfs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgtrfs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgtsv :: (matrix_layout: s32, n: s64, nrhs: s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgtsv_work :: (matrix_layout: s32, n: s64, nrhs: s64, dl: *float64, d: *float64, du: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgtsvx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgtsvx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, dl: *float64, d: *float64, du: *float64, dlf: *float64, df: *float64, duf: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgttrf :: (n: s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgttrf_work :: (n: s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgttrs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgttrs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *float64, d: *float64, du: *float64, du2: *float64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dhgeqz :: (matrix_layout: s32, job: u8, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *float64, ldh: s64, t: *float64, ldt: s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: s64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dhgeqz_work :: (matrix_layout: s32, job: u8, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *float64, ldh: s64, t: *float64, ldt: s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: s64, z: *float64, ldz: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dhsein :: (matrix_layout: s32, job: u8, eigsrc: u8, initv: u8, select: *s64, n: s64, h: *float64, ldh: s64, wr: *float64, wi: *float64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, mm: s64, m: *s64, ifaill: *s64, ifailr: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dhsein_work :: (matrix_layout: s32, job: u8, eigsrc: u8, initv: u8, select: *s64, n: s64, h: *float64, ldh: s64, wr: *float64, wi: *float64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, mm: s64, m: *s64, work: *float64, ifaill: *s64, ifailr: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dhseqr :: (matrix_layout: s32, job: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *float64, ldh: s64, wr: *float64, wi: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dhseqr_work :: (matrix_layout: s32, job: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *float64, ldh: s64, wr: *float64, wi: *float64, z: *float64, ldz: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlacn2 :: (n: s64, v: *float64, x: *float64, isgn: *s64, est: *float64, kase: *s64, isave: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlacn2_work :: (n: s64, v: *float64, x: *float64, isgn: *s64, est: *float64, kase: *s64, isave: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlacpy :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlacpy_work :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlag2s :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, sa: *float, ldsa: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlag2s_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, sa: *float, ldsa: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlagge :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, d: *float64, a: *float64, lda: s64, iseed: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlagge_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, d: *float64, a: *float64, lda: s64, iseed: *s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlagsy :: (matrix_layout: s32, n: s64, k: s64, d: *float64, a: *float64, lda: s64, iseed: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlagsy_work :: (matrix_layout: s32, n: s64, k: s64, d: *float64, a: *float64, lda: s64, iseed: *s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlapmr :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *float64, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlapmr_work :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *float64, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlapmt :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *float64, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlapmt_work :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *float64, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlarfb :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, v: *float64, ldv: s64, t: *float64, ldt: s64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlarfb_work :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, v: *float64, ldv: s64, t: *float64, ldt: s64, c: *float64, ldc: s64, work: *float64, ldwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlarfg :: (n: s64, alpha: *float64, x: *float64, incx: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlarfg_work :: (n: s64, alpha: *float64, x: *float64, incx: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlarft :: (matrix_layout: s32, direct: u8, storev: u8, n: s64, k: s64, v: *float64, ldv: s64, tau: *float64, t: *float64, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlarft_work :: (matrix_layout: s32, direct: u8, storev: u8, n: s64, k: s64, v: *float64, ldv: s64, tau: *float64, t: *float64, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlarfx :: (matrix_layout: s32, side: u8, m: s64, n: s64, v: *float64, tau: float64, c: *float64, ldc: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlarfx_work :: (matrix_layout: s32, side: u8, m: s64, n: s64, v: *float64, tau: float64, c: *float64, ldc: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlarnv :: (idist: s64, iseed: *s64, n: s64, x: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlarnv_work :: (idist: s64, iseed: *s64, n: s64, x: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlartgp :: (f: float64, g: float64, cs: *float64, sn: *float64, r: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlartgp_work :: (f: float64, g: float64, cs: *float64, sn: *float64, r: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlartgs :: (x: float64, y: float64, sigma: float64, cs: *float64, sn: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlartgs_work :: (x: float64, y: float64, sigma: float64, cs: *float64, sn: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlascl :: (matrix_layout: s32, type: u8, kl: s64, ku: s64, cfrom: float64, cto: float64, m: s64, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlascl_work :: (matrix_layout: s32, type: u8, kl: s64, ku: s64, cfrom: float64, cto: float64, m: s64, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlaset :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, alpha: float64, beta: float64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlaset_work :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, alpha: float64, beta: float64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlasrt :: (id: u8, n: s64, d: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlasrt_work :: (id: u8, n: s64, d: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlaswp :: (matrix_layout: s32, n: s64, a: *float64, lda: s64, k1: s64, k2: s64, ipiv: *s64, incx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlaswp_work :: (matrix_layout: s32, n: s64, a: *float64, lda: s64, k1: s64, k2: s64, ipiv: *s64, incx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlatms :: (matrix_layout: s32, m: s64, n: s64, dist: u8, iseed: *s64, sym: u8, d: *float64, mode: s64, cond: float64, dmax: float64, kl: s64, ku: s64, pack: u8, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlatms_work :: (matrix_layout: s32, m: s64, n: s64, dist: u8, iseed: *s64, sym: u8, d: *float64, mode: s64, cond: float64, dmax: float64, kl: s64, ku: s64, pack: u8, a: *float64, lda: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlauum :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dlauum_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dopgtr :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, tau: *float64, q: *float64, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dopgtr_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, tau: *float64, q: *float64, ldq: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dopmtr :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, ap: *float64, tau: *float64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dopmtr_work :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, ap: *float64, tau: *float64, c: *float64, ldc: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorbdb :: (matrix_layout: s32, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *float64, ldx11: s64, x12: *float64, ldx12: s64, x21: *float64, ldx21: s64, x22: *float64, ldx22: s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, tauq2: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorbdb_work :: (matrix_layout: s32, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *float64, ldx11: s64, x12: *float64, ldx12: s64, x21: *float64, ldx21: s64, x22: *float64, ldx22: s64, theta: *float64, phi: *float64, taup1: *float64, taup2: *float64, tauq1: *float64, tauq2: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorcsd :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *float64, ldx11: s64, x12: *float64, ldx12: s64, x21: *float64, ldx21: s64, x22: *float64, ldx22: s64, theta: *float64, u1: *float64, ldu1: s64, u2: *float64, ldu2: s64, v1t: *float64, ldv1t: s64, v2t: *float64, ldv2t: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorcsd2by1 :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, m: s64, p: s64, q: s64, x11: *float64, ldx11: s64, x21: *float64, ldx21: s64, theta: *float64, u1: *float64, ldu1: s64, u2: *float64, ldu2: s64, v1t: *float64, ldv1t: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorcsd2by1_work :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, m: s64, p: s64, q: s64, x11: *float64, ldx11: s64, x21: *float64, ldx21: s64, theta: *float64, u1: *float64, ldu1: s64, u2: *float64, ldu2: s64, v1t: *float64, ldv1t: s64, work: *float64, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorcsd_work :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *float64, ldx11: s64, x12: *float64, ldx12: s64, x21: *float64, ldx21: s64, x22: *float64, ldx22: s64, theta: *float64, u1: *float64, ldu1: s64, u2: *float64, ldu2: s64, v1t: *float64, ldv1t: s64, v2t: *float64, ldv2t: s64, work: *float64, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorgbr :: (matrix_layout: s32, vect: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorgbr_work :: (matrix_layout: s32, vect: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorghr :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorghr_work :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorglq :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorglq_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorgql :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorgql_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorgqr :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorgqr_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorgrq :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorgrq_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorgtr :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorgtr_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormbr :: (matrix_layout: s32, vect: u8, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormbr_work :: (matrix_layout: s32, vect: u8, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormhr :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, ilo: s64, ihi: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormhr_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, ilo: s64, ihi: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormlq :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormlq_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormql :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormql_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormqr :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormqr_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormrq :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormrq_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormrz :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormrz_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormtr :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dormtr_work :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, a: *float64, lda: s64, tau: *float64, c: *float64, ldc: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbcon :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbcon_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, anorm: float64, rcond: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbequ :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbequ_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbrfs :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float64, ldab: s64, afb: *float64, ldafb: s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbrfs_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float64, ldab: s64, afb: *float64, ldafb: s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbstf :: (matrix_layout: s32, uplo: u8, n: s64, kb: s64, bb: *float64, ldbb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbstf_work :: (matrix_layout: s32, uplo: u8, n: s64, kb: s64, bb: *float64, ldbb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbsv :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float64, ldab: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbsv_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float64, ldab: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float64, ldab: s64, afb: *float64, ldafb: s64, equed: *u8, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float64, ldab: s64, afb: *float64, ldafb: s64, equed: *u8, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbtrf :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbtrf_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbtrs :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float64, ldab: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpbtrs_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float64, ldab: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpftrf :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpftrf_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpftri :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpftri_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpftrs :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, nrhs: s64, a: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpftrs_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, nrhs: s64, a: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpocon :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpocon_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, anorm: float64, rcond: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpoequ :: (matrix_layout: s32, n: s64, a: *float64, lda: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpoequ_work :: (matrix_layout: s32, n: s64, a: *float64, lda: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpoequb :: (matrix_layout: s32, n: s64, a: *float64, lda: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpoequb_work :: (matrix_layout: s32, n: s64, a: *float64, lda: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dporfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dporfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dporfsx :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dporfsx_work :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dposv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dposv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dposvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, equed: *u8, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dposvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, equed: *u8, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dposvxx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, equed: *u8, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dposvxx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, equed: *u8, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpotrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpotrf2 :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpotrf2_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpotrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpotri :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpotri_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpotrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpotrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dppcon :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dppcon_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, anorm: float64, rcond: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dppequ :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dppequ_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpprfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float64, afp: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpprfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float64, afp: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dppsv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dppsv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dppsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *float64, afp: *float64, equed: *u8, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dppsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *float64, afp: *float64, equed: *u8, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpptrf :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpptrf_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpptri :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpptri_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpptrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpptrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpstrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, piv: *s64, rank: *s64, tol: float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpstrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, piv: *s64, rank: *s64, tol: float64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dptcon :: (n: s64, d: *float64, e: *float64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dptcon_work :: (n: s64, d: *float64, e: *float64, anorm: float64, rcond: *float64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpteqr :: (matrix_layout: s32, compz: u8, n: s64, d: *float64, e: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpteqr_work :: (matrix_layout: s32, compz: u8, n: s64, d: *float64, e: *float64, z: *float64, ldz: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dptrfs :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dptrfs_work :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dptsv :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float64, e: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dptsv_work :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float64, e: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dptsvx :: (matrix_layout: s32, fact: u8, n: s64, nrhs: s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dptsvx_work :: (matrix_layout: s32, fact: u8, n: s64, nrhs: s64, d: *float64, e: *float64, df: *float64, ef: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpttrf :: (n: s64, d: *float64, e: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpttrf_work :: (n: s64, d: *float64, e: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpttrs :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float64, e: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dpttrs_work :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float64, e: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbev :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, w: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbev_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, w: *float64, z: *float64, ldz: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbevd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, w: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbevd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, w: *float64, z: *float64, ldz: s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbevx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, q: *float64, ldq: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbevx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, q: *float64, ldq: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, work: *float64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbgst :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float64, ldab: s64, bb: *float64, ldbb: s64, x: *float64, ldx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbgst_work :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float64, ldab: s64, bb: *float64, ldbb: s64, x: *float64, ldx: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbgv :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float64, ldab: s64, bb: *float64, ldbb: s64, w: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbgv_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float64, ldab: s64, bb: *float64, ldbb: s64, w: *float64, z: *float64, ldz: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbgvd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float64, ldab: s64, bb: *float64, ldbb: s64, w: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbgvd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float64, ldab: s64, bb: *float64, ldbb: s64, w: *float64, z: *float64, ldz: s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbgvx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float64, ldab: s64, bb: *float64, ldbb: s64, q: *float64, ldq: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbgvx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float64, ldab: s64, bb: *float64, ldbb: s64, q: *float64, ldq: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, work: *float64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbtrd :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, d: *float64, e: *float64, q: *float64, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbtrd_work :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, d: *float64, e: *float64, q: *float64, ldq: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsfrk :: (matrix_layout: s32, transr: u8, uplo: u8, trans: u8, n: s64, k: s64, alpha: float64, a: *float64, lda: s64, beta: float64, c: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsfrk_work :: (matrix_layout: s32, transr: u8, uplo: u8, trans: u8, n: s64, k: s64, alpha: float64, a: *float64, lda: s64, beta: float64, c: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsgesv :: (matrix_layout: s32, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, iter: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsgesv_work :: (matrix_layout: s32, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, work: *float64, swork: *float, iter: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspcon :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, ipiv: *s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspcon_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, ipiv: *s64, anorm: float64, rcond: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspev :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *float64, w: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspev_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *float64, w: *float64, z: *float64, ldz: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspevd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *float64, w: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspevd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *float64, w: *float64, z: *float64, ldz: s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspevx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ap: *float64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspevx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ap: *float64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, work: *float64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspgst :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, ap: *float64, bp: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspgst_work :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, ap: *float64, bp: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspgv :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspgv_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspgvd :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspgvd_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *float64, bp: *float64, w: *float64, z: *float64, ldz: s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspgvx :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, ap: *float64, bp: *float64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspgvx_work :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, ap: *float64, bp: *float64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, work: *float64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsposv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64, x: *float64, ldx: s64, iter: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsposv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64, x: *float64, ldx: s64, work: *float64, swork: *float, iter: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsprfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsprfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspsv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspsv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dspsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *float64, afp: *float64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsptrd :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, d: *float64, e: *float64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsptrd_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, d: *float64, e: *float64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsptrf :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsptrf_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsptri :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsptri_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, ipiv: *s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsptrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsptrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstebz :: (range: u8, order: u8, n: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, d: *float64, e: *float64, m: *s64, nsplit: *s64, w: *float64, iblock: *s64, isplit: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstebz_work :: (range: u8, order: u8, n: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, d: *float64, e: *float64, m: *s64, nsplit: *s64, w: *float64, iblock: *s64, isplit: *s64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstedc :: (matrix_layout: s32, compz: u8, n: s64, d: *float64, e: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstedc_work :: (matrix_layout: s32, compz: u8, n: s64, d: *float64, e: *float64, z: *float64, ldz: s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstegr :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstegr_work :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, isuppz: *s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstein :: (matrix_layout: s32, n: s64, d: *float64, e: *float64, m: s64, w: *float64, iblock: *s64, isplit: *s64, z: *float64, ldz: s64, ifailv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstein_work :: (matrix_layout: s32, n: s64, d: *float64, e: *float64, m: s64, w: *float64, iblock: *s64, isplit: *s64, z: *float64, ldz: s64, work: *float64, iwork: *s64, ifailv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstemr :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, m: *s64, w: *float64, z: *float64, ldz: s64, nzc: s64, isuppz: *s64, tryrac: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstemr_work :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, m: *s64, w: *float64, z: *float64, ldz: s64, nzc: s64, isuppz: *s64, tryrac: *s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsteqr :: (matrix_layout: s32, compz: u8, n: s64, d: *float64, e: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsteqr_work :: (matrix_layout: s32, compz: u8, n: s64, d: *float64, e: *float64, z: *float64, ldz: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsterf :: (n: s64, d: *float64, e: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsterf_work :: (n: s64, d: *float64, e: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstev :: (matrix_layout: s32, jobz: u8, n: s64, d: *float64, e: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstev_work :: (matrix_layout: s32, jobz: u8, n: s64, d: *float64, e: *float64, z: *float64, ldz: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstevd :: (matrix_layout: s32, jobz: u8, n: s64, d: *float64, e: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstevd_work :: (matrix_layout: s32, jobz: u8, n: s64, d: *float64, e: *float64, z: *float64, ldz: s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstevr :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstevr_work :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, isuppz: *s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstevx :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dstevx_work :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, work: *float64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsycon :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsycon_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64, anorm: float64, rcond: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyconv :: (matrix_layout: s32, uplo: u8, way: u8, n: s64, a: *float64, lda: s64, ipiv: *s64, e: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyconv_work :: (matrix_layout: s32, uplo: u8, way: u8, n: s64, a: *float64, lda: s64, ipiv: *s64, e: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyequb :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyequb_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, s: *float64, scond: *float64, amax: *float64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyev :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyev_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, w: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyevd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyevd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, w: *float64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyevr :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float64, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyevr_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float64, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, isuppz: *s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyevx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float64, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyevx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float64, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, work: *float64, lwork: s64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsygst :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsygst_work :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsygv :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsygv_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, w: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsygvd :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsygvd_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, w: *float64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsygvx :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsygvx_work :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, work: *float64, lwork: s64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyrfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyrfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyrfsx :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyrfsx_work :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysv_rook :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysv_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *float64, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysvxx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, equed: *u8, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysvxx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, af: *float64, ldaf: s64, ipiv: *s64, equed: *u8, s: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyswapr :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, i1: s64, i2: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyswapr_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, i1: s64, i2: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrd :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, d: *float64, e: *float64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrd_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, d: *float64, e: *float64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrf_rook :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrf_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytri :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytri2 :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytri2_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytri2x :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64, nb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytri2x_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64, work: *float64, nb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytri_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrs2 :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrs2_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrs_rook :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrs_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtbcon :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, kd: s64, ab: *float64, ldab: s64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtbcon_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, kd: s64, ab: *float64, ldab: s64, rcond: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtbrfs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *float64, ldab: s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtbrfs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *float64, ldab: s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtbtrs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *float64, ldab: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtbtrs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *float64, ldab: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtfsm :: (matrix_layout: s32, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8, m: s64, n: s64, alpha: float64, a: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtfsm_work :: (matrix_layout: s32, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8, m: s64, n: s64, alpha: float64, a: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtftri :: (matrix_layout: s32, transr: u8, uplo: u8, diag: u8, n: s64, a: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtftri_work :: (matrix_layout: s32, transr: u8, uplo: u8, diag: u8, n: s64, a: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtfttp :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *float64, ap: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtfttp_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *float64, ap: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtfttr :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *float64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtfttr_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *float64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtgevc :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, s: *float64, lds: s64, p: *float64, ldp: s64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtgevc_work :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, s: *float64, lds: s64, p: *float64, ldp: s64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, mm: s64, m: *s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtgexc :: (matrix_layout: s32, wantq: s64, wantz: s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, q: *float64, ldq: s64, z: *float64, ldz: s64, ifst: *s64, ilst: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtgexc_work :: (matrix_layout: s32, wantq: s64, wantz: s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, q: *float64, ldq: s64, z: *float64, ldz: s64, ifst: *s64, ilst: *s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtgsen :: (matrix_layout: s32, ijob: s64, wantq: s64, wantz: s64, select: *s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: s64, z: *float64, ldz: s64, m: *s64, pl: *float64, pr: *float64, dif: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtgsen_work :: (matrix_layout: s32, ijob: s64, wantq: s64, wantz: s64, select: *s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, alphar: *float64, alphai: *float64, beta: *float64, q: *float64, ldq: s64, z: *float64, ldz: s64, m: *s64, pl: *float64, pr: *float64, dif: *float64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtgsja :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, k: s64, l: s64, a: *float64, lda: s64, b: *float64, ldb: s64, tola: float64, tolb: float64, alpha: *float64, beta: *float64, u: *float64, ldu: s64, v: *float64, ldv: s64, q: *float64, ldq: s64, ncycle: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtgsja_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, k: s64, l: s64, a: *float64, lda: s64, b: *float64, ldb: s64, tola: float64, tolb: float64, alpha: *float64, beta: *float64, u: *float64, ldu: s64, v: *float64, ldv: s64, q: *float64, ldq: s64, work: *float64, ncycle: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtgsna :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, s: *float64, dif: *float64, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtgsna_work :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, s: *float64, dif: *float64, mm: s64, m: *s64, work: *float64, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtgsyl :: (matrix_layout: s32, trans: u8, ijob: s64, m: s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, c: *float64, ldc: s64, d: *float64, ldd: s64, e: *float64, lde: s64, f: *float64, ldf: s64, scale: *float64, dif: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtgsyl_work :: (matrix_layout: s32, trans: u8, ijob: s64, m: s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, c: *float64, ldc: s64, d: *float64, ldd: s64, e: *float64, lde: s64, f: *float64, ldf: s64, scale: *float64, dif: *float64, work: *float64, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtpcon :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, ap: *float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtpcon_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, ap: *float64, rcond: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtpmqrt :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, nb: s64, v: *float64, ldv: s64, t: *float64, ldt: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtpmqrt_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, nb: s64, v: *float64, ldv: s64, t: *float64, ldt: s64, a: *float64, lda: s64, b: *float64, ldb: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtpqrt :: (matrix_layout: s32, m: s64, n: s64, l: s64, nb: s64, a: *float64, lda: s64, b: *float64, ldb: s64, t: *float64, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtpqrt2 :: (matrix_layout: s32, m: s64, n: s64, l: s64, a: *float64, lda: s64, b: *float64, ldb: s64, t: *float64, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtpqrt2_work :: (matrix_layout: s32, m: s64, n: s64, l: s64, a: *float64, lda: s64, b: *float64, ldb: s64, t: *float64, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtpqrt_work :: (matrix_layout: s32, m: s64, n: s64, l: s64, nb: s64, a: *float64, lda: s64, b: *float64, ldb: s64, t: *float64, ldt: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtprfb :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, l: s64, v: *float64, ldv: s64, t: *float64, ldt: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtprfb_work :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, l: s64, v: *float64, ldv: s64, t: *float64, ldt: s64, a: *float64, lda: s64, b: *float64, ldb: s64, work: *float64, ldwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtprfs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtprfs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *float64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtptri :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, ap: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtptri_work :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, ap: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtptrs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtptrs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *float64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtpttf :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, ap: *float64, arf: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtpttf_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, ap: *float64, arf: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtpttr :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtpttr_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrcon :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, a: *float64, lda: s64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrcon_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, a: *float64, lda: s64, rcond: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrevc :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, t: *float64, ldt: s64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrevc_work :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, t: *float64, ldt: s64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, mm: s64, m: *s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrexc :: (matrix_layout: s32, compq: u8, n: s64, t: *float64, ldt: s64, q: *float64, ldq: s64, ifst: *s64, ilst: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrexc_work :: (matrix_layout: s32, compq: u8, n: s64, t: *float64, ldt: s64, q: *float64, ldq: s64, ifst: *s64, ilst: *s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrrfs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrrfs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64, x: *float64, ldx: s64, ferr: *float64, berr: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrsen :: (matrix_layout: s32, job: u8, compq: u8, select: *s64, n: s64, t: *float64, ldt: s64, q: *float64, ldq: s64, wr: *float64, wi: *float64, m: *s64, s: *float64, sep: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrsen_work :: (matrix_layout: s32, job: u8, compq: u8, select: *s64, n: s64, t: *float64, ldt: s64, q: *float64, ldq: s64, wr: *float64, wi: *float64, m: *s64, s: *float64, sep: *float64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrsna :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, t: *float64, ldt: s64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, s: *float64, sep: *float64, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrsna_work :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, t: *float64, ldt: s64, vl: *float64, ldvl: s64, vr: *float64, ldvr: s64, s: *float64, sep: *float64, mm: s64, m: *s64, work: *float64, ldwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrsyl :: (matrix_layout: s32, trana: u8, tranb: u8, isgn: s64, m: s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, c: *float64, ldc: s64, scale: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrsyl_work :: (matrix_layout: s32, trana: u8, tranb: u8, isgn: s64, m: s64, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, c: *float64, ldc: s64, scale: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrtri :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrtri_work :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrtrs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrtrs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrttf :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *float64, lda: s64, arf: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrttf_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *float64, lda: s64, arf: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrttp :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ap: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtrttp_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ap: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtzrzf :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dtzrzf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, tau: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_cgetrfnpi :: (matrix_layout: s32, m: s64, n: s64, nfact: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_cgetrfnpi_work :: (matrix_layout: s32, m: s64, n: s64, nfact: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_ctppack :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *MKL_Complex8, i: s64, j: s64, rows: s64, cols: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_ctppack_work :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *MKL_Complex8, i: s64, j: s64, rows: s64, cols: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_ctpunpack :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *MKL_Complex8, i: s64, j: s64, rows: s64, cols: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_ctpunpack_work :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *MKL_Complex8, i: s64, j: s64, rows: s64, cols: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_dgetrfnpi :: (matrix_layout: s32, m: s64, n: s64, nfact: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_dgetrfnpi_work :: (matrix_layout: s32, m: s64, n: s64, nfact: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_dtppack :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *float64, i: s64, j: s64, rows: s64, cols: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_dtppack_work :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *float64, i: s64, j: s64, rows: s64, cols: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_dtpunpack :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *float64, i: s64, j: s64, rows: s64, cols: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_dtpunpack_work :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *float64, i: s64, j: s64, rows: s64, cols: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_sgetrfnpi :: (matrix_layout: s32, m: s64, n: s64, nfact: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_sgetrfnpi_work :: (matrix_layout: s32, m: s64, n: s64, nfact: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_stppack :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *float, i: s64, j: s64, rows: s64, cols: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_stppack_work :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *float, i: s64, j: s64, rows: s64, cols: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_stpunpack :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *float, i: s64, j: s64, rows: s64, cols: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_stpunpack_work :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *float, i: s64, j: s64, rows: s64, cols: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_zgetrfnpi :: (matrix_layout: s32, m: s64, n: s64, nfact: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_zgetrfnpi_work :: (matrix_layout: s32, m: s64, n: s64, nfact: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_ztppack :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *MKL_Complex16, i: s64, j: s64, rows: s64, cols: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_ztppack_work :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *MKL_Complex16, i: s64, j: s64, rows: s64, cols: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_ztpunpack :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *MKL_Complex16, i: s64, j: s64, rows: s64, cols: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_ztpunpack_work :: (matrix_layout: s32, uplo: u8, trans: u8, n: s64, ap: *MKL_Complex16, i: s64, j: s64, rows: s64, cols: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sbbcsd :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, m: s64, p: s64, q: s64, theta: *float, phi: *float, u1: *float, ldu1: s64, u2: *float, ldu2: s64, v1t: *float, ldv1t: s64, v2t: *float, ldv2t: s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sbbcsd_work :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, m: s64, p: s64, q: s64, theta: *float, phi: *float, u1: *float, ldu1: s64, u2: *float, ldu2: s64, v1t: *float, ldv1t: s64, v2t: *float, ldv2t: s64, b11d: *float, b11e: *float, b12d: *float, b12e: *float, b21d: *float, b21e: *float, b22d: *float, b22e: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sbdsdc :: (matrix_layout: s32, uplo: u8, compq: u8, n: s64, d: *float, e: *float, u: *float, ldu: s64, vt: *float, ldvt: s64, q: *float, iq: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sbdsdc_work :: (matrix_layout: s32, uplo: u8, compq: u8, n: s64, d: *float, e: *float, u: *float, ldu: s64, vt: *float, ldvt: s64, q: *float, iq: *s64, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sbdsqr :: (matrix_layout: s32, uplo: u8, n: s64, ncvt: s64, nru: s64, ncc: s64, d: *float, e: *float, vt: *float, ldvt: s64, u: *float, ldu: s64, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sbdsqr_work :: (matrix_layout: s32, uplo: u8, n: s64, ncvt: s64, nru: s64, ncc: s64, d: *float, e: *float, vt: *float, ldvt: s64, u: *float, ldu: s64, c: *float, ldc: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sbdsvdx :: (matrix_layout: s32, uplo: u8, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, ns: *s64, s: *float, z: *float, ldz: s64, superb: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sbdsvdx_work :: (matrix_layout: s32, uplo: u8, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, ns: *s64, s: *float, z: *float, ldz: s64, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sdisna :: (job: u8, m: s64, n: s64, d: *float, sep: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sdisna_work :: (job: u8, m: s64, n: s64, d: *float, sep: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbbrd :: (matrix_layout: s32, vect: u8, m: s64, n: s64, ncc: s64, kl: s64, ku: s64, ab: *float, ldab: s64, d: *float, e: *float, q: *float, ldq: s64, pt: *float, ldpt: s64, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbbrd_work :: (matrix_layout: s32, vect: u8, m: s64, n: s64, ncc: s64, kl: s64, ku: s64, ab: *float, ldab: s64, d: *float, e: *float, q: *float, ldq: s64, pt: *float, ldpt: s64, c: *float, ldc: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbcon :: (matrix_layout: s32, norm: u8, n: s64, kl: s64, ku: s64, ab: *float, ldab: s64, ipiv: *s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbcon_work :: (matrix_layout: s32, norm: u8, n: s64, kl: s64, ku: s64, ab: *float, ldab: s64, ipiv: *s64, anorm: float, rcond: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbequ :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *float, ldab: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbequ_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *float, ldab: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbequb :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *float, ldab: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbequb_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *float, ldab: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbrfs :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float, ldab: s64, afb: *float, ldafb: s64, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbrfs_work :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float, ldab: s64, afb: *float, ldafb: s64, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbrfsx :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float, ldab: s64, afb: *float, ldafb: s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbrfsx_work :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float, ldab: s64, afb: *float, ldafb: s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbsv :: (matrix_layout: s32, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float, ldab: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbsv_work :: (matrix_layout: s32, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float, ldab: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbsvx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float, ldab: s64, afb: *float, ldafb: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float, rpivot: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbsvx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float, ldab: s64, afb: *float, ldafb: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbsvxx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float, ldab: s64, afb: *float, ldafb: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbsvxx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float, ldab: s64, afb: *float, ldafb: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbtrf :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *float, ldab: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbtrf_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *float, ldab: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbtrs :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float, ldab: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgbtrs_work :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *float, ldab: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgebak :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, scale: *float, m: s64, v: *float, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgebak_work :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, scale: *float, m: s64, v: *float, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgebal :: (matrix_layout: s32, job: u8, n: s64, a: *float, lda: s64, ilo: *s64, ihi: *s64, scale: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgebal_work :: (matrix_layout: s32, job: u8, n: s64, a: *float, lda: s64, ilo: *s64, ihi: *s64, scale: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgebrd :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, d: *float, e: *float, tauq: *float, taup: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgebrd_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, d: *float, e: *float, tauq: *float, taup: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgecon :: (matrix_layout: s32, norm: u8, n: s64, a: *float, lda: s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgecon_work :: (matrix_layout: s32, norm: u8, n: s64, a: *float, lda: s64, anorm: float, rcond: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeequ :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeequ_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeequb :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeequb_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, r: *float, c: *float, rowcnd: *float, colcnd: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgees :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_S_SELECT2, n: s64, a: *float, lda: s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgees_work :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_S_SELECT2, n: s64, a: *float, lda: s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: s64, work: *float, lwork: s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeesx :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_S_SELECT2, sense: u8, n: s64, a: *float, lda: s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: s64, rconde: *float, rcondv: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeesx_work :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_S_SELECT2, sense: u8, n: s64, a: *float, lda: s64, sdim: *s64, wr: *float, wi: *float, vs: *float, ldvs: s64, rconde: *float, rcondv: *float, work: *float, lwork: s64, iwork: *s64, liwork: s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeev :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *float, lda: s64, wr: *float, wi: *float, vl: *float, ldvl: s64, vr: *float, ldvr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeev_work :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *float, lda: s64, wr: *float, wi: *float, vl: *float, ldvl: s64, vr: *float, ldvr: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeevx :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *float, lda: s64, wr: *float, wi: *float, vl: *float, ldvl: s64, vr: *float, ldvr: s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeevx_work :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *float, lda: s64, wr: *float, wi: *float, vl: *float, ldvl: s64, vr: *float, ldvr: s64, ilo: *s64, ihi: *s64, scale: *float, abnrm: *float, rconde: *float, rcondv: *float, work: *float, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgehrd :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgehrd_work :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgejsv :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8, jobp: u8, m: s64, n: s64, a: *float, lda: s64, sva: *float, u: *float, ldu: s64, v: *float, ldv: s64, stat: *float, istat: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgejsv_work :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8, jobp: u8, m: s64, n: s64, a: *float, lda: s64, sva: *float, u: *float, ldu: s64, v: *float, ldv: s64, work: *float, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgelq2 :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgelq2_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgelqf :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgelqf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgels :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgels_work :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgelsd :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64, s: *float, rcond: float, rank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgelsd_work :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64, s: *float, rcond: float, rank: *s64, work: *float, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgelss :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64, s: *float, rcond: float, rank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgelss_work :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64, s: *float, rcond: float, rank: *s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgelsy :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64, jpvt: *s64, rcond: float, rank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgelsy_work :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64, jpvt: *s64, rcond: float, rank: *s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgemqrt :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, nb: s64, v: *float, ldv: s64, t: *float, ldt: s64, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgemqrt_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, nb: s64, v: *float, ldv: s64, t: *float, ldt: s64, c: *float, ldc: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqlf :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqlf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqp3 :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, jpvt: *s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqp3_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, jpvt: *s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqpf :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, jpvt: *s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqpf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, jpvt: *s64, tau: *float, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqr2 :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqr2_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqrf :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqrf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqrfp :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqrfp_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqrt :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *float, lda: s64, t: *float, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqrt2 :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, t: *float, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqrt2_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, t: *float, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqrt3 :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, t: *float, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqrt3_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, t: *float, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqrt_work :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *float, lda: s64, t: *float, ldt: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgerfs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgerfs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgerfsx :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgerfsx_work :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, r: *float, c: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgerqf :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgerqf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesdd :: (matrix_layout: s32, jobz: u8, m: s64, n: s64, a: *float, lda: s64, s: *float, u: *float, ldu: s64, vt: *float, ldvt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesdd_work :: (matrix_layout: s32, jobz: u8, m: s64, n: s64, a: *float, lda: s64, s: *float, u: *float, ldu: s64, vt: *float, ldvt: s64, work: *float, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesv :: (matrix_layout: s32, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesv_work :: (matrix_layout: s32, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesvd :: (matrix_layout: s32, jobu: u8, jobvt: u8, m: s64, n: s64, a: *float, lda: s64, s: *float, u: *float, ldu: s64, vt: *float, ldvt: s64, superb: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesvd_work :: (matrix_layout: s32, jobu: u8, jobvt: u8, m: s64, n: s64, a: *float, lda: s64, s: *float, u: *float, ldu: s64, vt: *float, ldvt: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesvdx :: (matrix_layout: s32, jobu: u8, jobvt: u8, range: u8, m: s64, n: s64, a: *float, lda: s64, vl: float, vu: float, il: s64, iu: s64, ns: *s64, s: *float, u: *float, ldu: s64, vt: *float, ldvt: s64, superb: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesvdx_work :: (matrix_layout: s32, jobu: u8, jobvt: u8, range: u8, m: s64, n: s64, a: *float, lda: s64, vl: float, vu: float, il: s64, iu: s64, ns: *s64, s: *float, u: *float, ldu: s64, vt: *float, ldvt: s64, work: *float, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesvj :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *float, lda: s64, sva: *float, mv: s64, v: *float, ldv: s64, stat: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesvj_work :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *float, lda: s64, sva: *float, mv: s64, v: *float, ldv: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesvx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float, rpivot: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesvx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesvxx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesvxx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, equed: *u8, r: *float, c: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgetf2 :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgetf2_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgetrf :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgetrf2 :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgetrf2_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgetrf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgetri :: (matrix_layout: s32, n: s64, a: *float, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgetri_work :: (matrix_layout: s32, n: s64, a: *float, lda: s64, ipiv: *s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgetrs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgetrs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggbak :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, lscale: *float, rscale: *float, m: s64, v: *float, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggbak_work :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, lscale: *float, rscale: *float, m: s64, v: *float, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggbal :: (matrix_layout: s32, job: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggbal_work :: (matrix_layout: s32, job: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgges :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_S_SELECT3, n: s64, a: *float, lda: s64, b: *float, ldb: s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: s64, vsr: *float, ldvsr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgges3 :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_S_SELECT3, n: s64, a: *float, lda: s64, b: *float, ldb: s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: s64, vsr: *float, ldvsr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgges3_work :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_S_SELECT3, n: s64, a: *float, lda: s64, b: *float, ldb: s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: s64, vsr: *float, ldvsr: s64, work: *float, lwork: s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgges_work :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_S_SELECT3, n: s64, a: *float, lda: s64, b: *float, ldb: s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: s64, vsr: *float, ldvsr: s64, work: *float, lwork: s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggesx :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_S_SELECT3, sense: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: s64, vsr: *float, ldvsr: s64, rconde: *float, rcondv: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggesx_work :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_S_SELECT3, sense: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, sdim: *s64, alphar: *float, alphai: *float, beta: *float, vsl: *float, ldvsl: s64, vsr: *float, ldvsr: s64, rconde: *float, rcondv: *float, work: *float, lwork: s64, iwork: *s64, liwork: s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggev :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: s64, vr: *float, ldvr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggev3 :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: s64, vr: *float, ldvr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggev3_work :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: s64, vr: *float, ldvr: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggev_work :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: s64, vr: *float, ldvr: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggevx :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: s64, vr: *float, ldvr: s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggevx_work :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, alphar: *float, alphai: *float, beta: *float, vl: *float, ldvl: s64, vr: *float, ldvr: s64, ilo: *s64, ihi: *s64, lscale: *float, rscale: *float, abnrm: *float, bbnrm: *float, rconde: *float, rcondv: *float, work: *float, lwork: s64, iwork: *s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggglm :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *float, lda: s64, b: *float, ldb: s64, d: *float, x: *float, y: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggglm_work :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *float, lda: s64, b: *float, ldb: s64, d: *float, x: *float, y: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgghd3 :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *float, lda: s64, b: *float, ldb: s64, q: *float, ldq: s64, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgghd3_work :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *float, lda: s64, b: *float, ldb: s64, q: *float, ldq: s64, z: *float, ldz: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgghrd :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *float, lda: s64, b: *float, ldb: s64, q: *float, ldq: s64, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgghrd_work :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *float, lda: s64, b: *float, ldb: s64, q: *float, ldq: s64, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgglse :: (matrix_layout: s32, m: s64, n: s64, p: s64, a: *float, lda: s64, b: *float, ldb: s64, c: *float, d: *float, x: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgglse_work :: (matrix_layout: s32, m: s64, n: s64, p: s64, a: *float, lda: s64, b: *float, ldb: s64, c: *float, d: *float, x: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggqrf :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *float, lda: s64, taua: *float, b: *float, ldb: s64, taub: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggqrf_work :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *float, lda: s64, taua: *float, b: *float, ldb: s64, taub: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggrqf :: (matrix_layout: s32, m: s64, p: s64, n: s64, a: *float, lda: s64, taua: *float, b: *float, ldb: s64, taub: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggrqf_work :: (matrix_layout: s32, m: s64, p: s64, n: s64, a: *float, lda: s64, taua: *float, b: *float, ldb: s64, taub: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggsvd :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *float, lda: s64, b: *float, ldb: s64, alpha: *float, beta: *float, u: *float, ldu: s64, v: *float, ldv: s64, q: *float, ldq: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggsvd3 :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *float, lda: s64, b: *float, ldb: s64, alpha: *float, beta: *float, u: *float, ldu: s64, v: *float, ldv: s64, q: *float, ldq: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggsvd3_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *float, lda: s64, b: *float, ldb: s64, alpha: *float, beta: *float, u: *float, ldu: s64, v: *float, ldv: s64, q: *float, ldq: s64, work: *float, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggsvd_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *float, lda: s64, b: *float, ldb: s64, alpha: *float, beta: *float, u: *float, ldu: s64, v: *float, ldv: s64, q: *float, ldq: s64, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggsvp :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, tola: float, tolb: float, k: *s64, l: *s64, u: *float, ldu: s64, v: *float, ldv: s64, q: *float, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggsvp3 :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, tola: float, tolb: float, k: *s64, l: *s64, u: *float, ldu: s64, v: *float, ldv: s64, q: *float, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggsvp3_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, tola: float, tolb: float, k: *s64, l: *s64, u: *float, ldu: s64, v: *float, ldv: s64, q: *float, ldq: s64, iwork: *s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sggsvp_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, tola: float, tolb: float, k: *s64, l: *s64, u: *float, ldu: s64, v: *float, ldv: s64, q: *float, ldq: s64, iwork: *s64, tau: *float, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgtcon :: (norm: u8, n: s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgtcon_work :: (norm: u8, n: s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, anorm: float, rcond: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgtrfs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgtrfs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgtsv :: (matrix_layout: s32, n: s64, nrhs: s64, dl: *float, d: *float, du: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgtsv_work :: (matrix_layout: s32, n: s64, nrhs: s64, dl: *float, d: *float, du: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgtsvx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgtsvx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, dl: *float, d: *float, du: *float, dlf: *float, df: *float, duf: *float, du2: *float, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgttrf :: (n: s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgttrf_work :: (n: s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgttrs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgttrs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *float, d: *float, du: *float, du2: *float, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_shgeqz :: (matrix_layout: s32, job: u8, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *float, ldh: s64, t: *float, ldt: s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: s64, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_shgeqz_work :: (matrix_layout: s32, job: u8, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *float, ldh: s64, t: *float, ldt: s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: s64, z: *float, ldz: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_shsein :: (matrix_layout: s32, job: u8, eigsrc: u8, initv: u8, select: *s64, n: s64, h: *float, ldh: s64, wr: *float, wi: *float, vl: *float, ldvl: s64, vr: *float, ldvr: s64, mm: s64, m: *s64, ifaill: *s64, ifailr: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_shsein_work :: (matrix_layout: s32, job: u8, eigsrc: u8, initv: u8, select: *s64, n: s64, h: *float, ldh: s64, wr: *float, wi: *float, vl: *float, ldvl: s64, vr: *float, ldvr: s64, mm: s64, m: *s64, work: *float, ifaill: *s64, ifailr: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_shseqr :: (matrix_layout: s32, job: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *float, ldh: s64, wr: *float, wi: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_shseqr_work :: (matrix_layout: s32, job: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *float, ldh: s64, wr: *float, wi: *float, z: *float, ldz: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slacn2 :: (n: s64, v: *float, x: *float, isgn: *s64, est: *float, kase: *s64, isave: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slacn2_work :: (n: s64, v: *float, x: *float, isgn: *s64, est: *float, kase: *s64, isave: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slacpy :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slacpy_work :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slag2d :: (matrix_layout: s32, m: s64, n: s64, sa: *float, ldsa: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slag2d_work :: (matrix_layout: s32, m: s64, n: s64, sa: *float, ldsa: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slagge :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, d: *float, a: *float, lda: s64, iseed: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slagge_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, d: *float, a: *float, lda: s64, iseed: *s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slagsy :: (matrix_layout: s32, n: s64, k: s64, d: *float, a: *float, lda: s64, iseed: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slagsy_work :: (matrix_layout: s32, n: s64, k: s64, d: *float, a: *float, lda: s64, iseed: *s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slapmr :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *float, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slapmr_work :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *float, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slapmt :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *float, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slapmt_work :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *float, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slarfb :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, v: *float, ldv: s64, t: *float, ldt: s64, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slarfb_work :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, v: *float, ldv: s64, t: *float, ldt: s64, c: *float, ldc: s64, work: *float, ldwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slarfg :: (n: s64, alpha: *float, x: *float, incx: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slarfg_work :: (n: s64, alpha: *float, x: *float, incx: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slarft :: (matrix_layout: s32, direct: u8, storev: u8, n: s64, k: s64, v: *float, ldv: s64, tau: *float, t: *float, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slarft_work :: (matrix_layout: s32, direct: u8, storev: u8, n: s64, k: s64, v: *float, ldv: s64, tau: *float, t: *float, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slarfx :: (matrix_layout: s32, side: u8, m: s64, n: s64, v: *float, tau: float, c: *float, ldc: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slarfx_work :: (matrix_layout: s32, side: u8, m: s64, n: s64, v: *float, tau: float, c: *float, ldc: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slarnv :: (idist: s64, iseed: *s64, n: s64, x: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slarnv_work :: (idist: s64, iseed: *s64, n: s64, x: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slartgp :: (f: float, g: float, cs: *float, sn: *float, r: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slartgp_work :: (f: float, g: float, cs: *float, sn: *float, r: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slartgs :: (x: float, y: float, sigma: float, cs: *float, sn: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slartgs_work :: (x: float, y: float, sigma: float, cs: *float, sn: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slascl :: (matrix_layout: s32, type: u8, kl: s64, ku: s64, cfrom: float, cto: float, m: s64, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slascl_work :: (matrix_layout: s32, type: u8, kl: s64, ku: s64, cfrom: float, cto: float, m: s64, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slaset :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, alpha: float, beta: float, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slaset_work :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, alpha: float, beta: float, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slasrt :: (id: u8, n: s64, d: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slasrt_work :: (id: u8, n: s64, d: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slaswp :: (matrix_layout: s32, n: s64, a: *float, lda: s64, k1: s64, k2: s64, ipiv: *s64, incx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slaswp_work :: (matrix_layout: s32, n: s64, a: *float, lda: s64, k1: s64, k2: s64, ipiv: *s64, incx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slatms :: (matrix_layout: s32, m: s64, n: s64, dist: u8, iseed: *s64, sym: u8, d: *float, mode: s64, cond: float, dmax: float, kl: s64, ku: s64, pack: u8, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slatms_work :: (matrix_layout: s32, m: s64, n: s64, dist: u8, iseed: *s64, sym: u8, d: *float, mode: s64, cond: float, dmax: float, kl: s64, ku: s64, pack: u8, a: *float, lda: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slauum :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_slauum_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sopgtr :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, tau: *float, q: *float, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sopgtr_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, tau: *float, q: *float, ldq: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sopmtr :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, ap: *float, tau: *float, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sopmtr_work :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, ap: *float, tau: *float, c: *float, ldc: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorbdb :: (matrix_layout: s32, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *float, ldx11: s64, x12: *float, ldx12: s64, x21: *float, ldx21: s64, x22: *float, ldx22: s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, tauq2: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorbdb_work :: (matrix_layout: s32, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *float, ldx11: s64, x12: *float, ldx12: s64, x21: *float, ldx21: s64, x22: *float, ldx22: s64, theta: *float, phi: *float, taup1: *float, taup2: *float, tauq1: *float, tauq2: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorcsd :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *float, ldx11: s64, x12: *float, ldx12: s64, x21: *float, ldx21: s64, x22: *float, ldx22: s64, theta: *float, u1: *float, ldu1: s64, u2: *float, ldu2: s64, v1t: *float, ldv1t: s64, v2t: *float, ldv2t: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorcsd2by1 :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, m: s64, p: s64, q: s64, x11: *float, ldx11: s64, x21: *float, ldx21: s64, theta: *float, u1: *float, ldu1: s64, u2: *float, ldu2: s64, v1t: *float, ldv1t: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorcsd2by1_work :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, m: s64, p: s64, q: s64, x11: *float, ldx11: s64, x21: *float, ldx21: s64, theta: *float, u1: *float, ldu1: s64, u2: *float, ldu2: s64, v1t: *float, ldv1t: s64, work: *float, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorcsd_work :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *float, ldx11: s64, x12: *float, ldx12: s64, x21: *float, ldx21: s64, x22: *float, ldx22: s64, theta: *float, u1: *float, ldu1: s64, u2: *float, ldu2: s64, v1t: *float, ldv1t: s64, v2t: *float, ldv2t: s64, work: *float, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorgbr :: (matrix_layout: s32, vect: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorgbr_work :: (matrix_layout: s32, vect: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorghr :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorghr_work :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorglq :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorglq_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorgql :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorgql_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorgqr :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorgqr_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorgrq :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorgrq_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorgtr :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorgtr_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormbr :: (matrix_layout: s32, vect: u8, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormbr_work :: (matrix_layout: s32, vect: u8, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormhr :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, ilo: s64, ihi: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormhr_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, ilo: s64, ihi: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormlq :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormlq_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormql :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormql_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormqr :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormqr_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormrq :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormrq_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormrz :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormrz_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormtr :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sormtr_work :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, a: *float, lda: s64, tau: *float, c: *float, ldc: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbcon :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbcon_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, anorm: float, rcond: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbequ :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbequ_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbrfs :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float, ldab: s64, afb: *float, ldafb: s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbrfs_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float, ldab: s64, afb: *float, ldafb: s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbstf :: (matrix_layout: s32, uplo: u8, n: s64, kb: s64, bb: *float, ldbb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbstf_work :: (matrix_layout: s32, uplo: u8, n: s64, kb: s64, bb: *float, ldbb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbsv :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float, ldab: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbsv_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float, ldab: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float, ldab: s64, afb: *float, ldafb: s64, equed: *u8, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float, ldab: s64, afb: *float, ldafb: s64, equed: *u8, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbtrf :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbtrf_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbtrs :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float, ldab: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spbtrs_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *float, ldab: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spftrf :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spftrf_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spftri :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spftri_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spftrs :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, nrhs: s64, a: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spftrs_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, nrhs: s64, a: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spocon :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spocon_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, anorm: float, rcond: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spoequ :: (matrix_layout: s32, n: s64, a: *float, lda: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spoequ_work :: (matrix_layout: s32, n: s64, a: *float, lda: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spoequb :: (matrix_layout: s32, n: s64, a: *float, lda: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spoequb_work :: (matrix_layout: s32, n: s64, a: *float, lda: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sporfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sporfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sporfsx :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sporfsx_work :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sposv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sposv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sposvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, equed: *u8, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sposvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, equed: *u8, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sposvxx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, equed: *u8, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sposvxx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, equed: *u8, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spotrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spotrf2 :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spotrf2_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spotrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spotri :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spotri_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spotrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spotrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sppcon :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sppcon_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, anorm: float, rcond: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sppequ :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sppequ_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spprfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float, afp: *float, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spprfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float, afp: *float, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sppsv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sppsv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sppsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *float, afp: *float, equed: *u8, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sppsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *float, afp: *float, equed: *u8, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spptrf :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spptrf_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spptri :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spptri_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spptrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spptrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spstrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, piv: *s64, rank: *s64, tol: float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spstrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, piv: *s64, rank: *s64, tol: float, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sptcon :: (n: s64, d: *float, e: *float, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sptcon_work :: (n: s64, d: *float, e: *float, anorm: float, rcond: *float, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spteqr :: (matrix_layout: s32, compz: u8, n: s64, d: *float, e: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spteqr_work :: (matrix_layout: s32, compz: u8, n: s64, d: *float, e: *float, z: *float, ldz: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sptrfs :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sptrfs_work :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sptsv :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float, e: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sptsv_work :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float, e: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sptsvx :: (matrix_layout: s32, fact: u8, n: s64, nrhs: s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sptsvx_work :: (matrix_layout: s32, fact: u8, n: s64, nrhs: s64, d: *float, e: *float, df: *float, ef: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spttrf :: (n: s64, d: *float, e: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spttrf_work :: (n: s64, d: *float, e: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spttrs :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float, e: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_spttrs_work :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float, e: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbev :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, w: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbev_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, w: *float, z: *float, ldz: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbevd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, w: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbevd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, w: *float, z: *float, ldz: s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbevx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, q: *float, ldq: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbevx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, q: *float, ldq: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, work: *float, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbgst :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float, ldab: s64, bb: *float, ldbb: s64, x: *float, ldx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbgst_work :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float, ldab: s64, bb: *float, ldbb: s64, x: *float, ldx: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbgv :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float, ldab: s64, bb: *float, ldbb: s64, w: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbgv_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float, ldab: s64, bb: *float, ldbb: s64, w: *float, z: *float, ldz: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbgvd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float, ldab: s64, bb: *float, ldbb: s64, w: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbgvd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float, ldab: s64, bb: *float, ldbb: s64, w: *float, z: *float, ldz: s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbgvx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float, ldab: s64, bb: *float, ldbb: s64, q: *float, ldq: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbgvx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *float, ldab: s64, bb: *float, ldbb: s64, q: *float, ldq: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, work: *float, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbtrd :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, d: *float, e: *float, q: *float, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbtrd_work :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, d: *float, e: *float, q: *float, ldq: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssfrk :: (matrix_layout: s32, transr: u8, uplo: u8, trans: u8, n: s64, k: s64, alpha: float, a: *float, lda: s64, beta: float, c: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssfrk_work :: (matrix_layout: s32, transr: u8, uplo: u8, trans: u8, n: s64, k: s64, alpha: float, a: *float, lda: s64, beta: float, c: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspcon :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, ipiv: *s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspcon_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, ipiv: *s64, anorm: float, rcond: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspev :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *float, w: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspev_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *float, w: *float, z: *float, ldz: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspevd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *float, w: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspevd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *float, w: *float, z: *float, ldz: s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspevx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ap: *float, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspevx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ap: *float, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, work: *float, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspgst :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, ap: *float, bp: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspgst_work :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, ap: *float, bp: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspgv :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *float, bp: *float, w: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspgv_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *float, bp: *float, w: *float, z: *float, ldz: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspgvd :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *float, bp: *float, w: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspgvd_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *float, bp: *float, w: *float, z: *float, ldz: s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspgvx :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, ap: *float, bp: *float, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspgvx_work :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, ap: *float, bp: *float, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, work: *float, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssprfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssprfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspsv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspsv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sspsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *float, afp: *float, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssptrd :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, d: *float, e: *float, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssptrd_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, d: *float, e: *float, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssptrf :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssptrf_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssptri :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssptri_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, ipiv: *s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssptrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssptrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *float, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstebz :: (range: u8, order: u8, n: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, d: *float, e: *float, m: *s64, nsplit: *s64, w: *float, iblock: *s64, isplit: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstebz_work :: (range: u8, order: u8, n: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, d: *float, e: *float, m: *s64, nsplit: *s64, w: *float, iblock: *s64, isplit: *s64, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstedc :: (matrix_layout: s32, compz: u8, n: s64, d: *float, e: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstedc_work :: (matrix_layout: s32, compz: u8, n: s64, d: *float, e: *float, z: *float, ldz: s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstegr :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstegr_work :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, isuppz: *s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstein :: (matrix_layout: s32, n: s64, d: *float, e: *float, m: s64, w: *float, iblock: *s64, isplit: *s64, z: *float, ldz: s64, ifailv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstein_work :: (matrix_layout: s32, n: s64, d: *float, e: *float, m: s64, w: *float, iblock: *s64, isplit: *s64, z: *float, ldz: s64, work: *float, iwork: *s64, ifailv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstemr :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, m: *s64, w: *float, z: *float, ldz: s64, nzc: s64, isuppz: *s64, tryrac: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstemr_work :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, m: *s64, w: *float, z: *float, ldz: s64, nzc: s64, isuppz: *s64, tryrac: *s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssteqr :: (matrix_layout: s32, compz: u8, n: s64, d: *float, e: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssteqr_work :: (matrix_layout: s32, compz: u8, n: s64, d: *float, e: *float, z: *float, ldz: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssterf :: (n: s64, d: *float, e: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssterf_work :: (n: s64, d: *float, e: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstev :: (matrix_layout: s32, jobz: u8, n: s64, d: *float, e: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstev_work :: (matrix_layout: s32, jobz: u8, n: s64, d: *float, e: *float, z: *float, ldz: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstevd :: (matrix_layout: s32, jobz: u8, n: s64, d: *float, e: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstevd_work :: (matrix_layout: s32, jobz: u8, n: s64, d: *float, e: *float, z: *float, ldz: s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstevr :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstevr_work :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, isuppz: *s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstevx :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sstevx_work :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float, e: *float, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, work: *float, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssycon :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssycon_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64, anorm: float, rcond: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyconv :: (matrix_layout: s32, uplo: u8, way: u8, n: s64, a: *float, lda: s64, ipiv: *s64, e: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyconv_work :: (matrix_layout: s32, uplo: u8, way: u8, n: s64, a: *float, lda: s64, ipiv: *s64, e: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyequb :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, s: *float, scond: *float, amax: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyequb_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, s: *float, scond: *float, amax: *float, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyev :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyev_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, w: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyevd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyevd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, w: *float, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyevr :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyevr_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, isuppz: *s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyevx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyevx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, work: *float, lwork: s64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssygst :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssygst_work :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssygv :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssygv_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, w: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssygvd :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssygvd_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, w: *float, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssygvx :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssygvx_work :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, work: *float, lwork: s64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyrfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyrfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyrfsx :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyrfsx_work :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysv_rook :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysv_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, ferr: *float, berr: *float, work: *float, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysvxx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, equed: *u8, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysvxx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, af: *float, ldaf: s64, ipiv: *s64, equed: *u8, s: *float, b: *float, ldb: s64, x: *float, ldx: s64, rcond: *float, rpvgrw: *float, berr: *float, n_err_bnds: s64, err_bnds_norm: *float, err_bnds_comp: *float, nparams: s64, params: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyswapr :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, i1: s64, i2: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyswapr_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, i1: s64, i2: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrd :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, d: *float, e: *float, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrd_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, d: *float, e: *float, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrf_rook :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrf_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytri :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytri2 :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytri2_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytri2x :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64, nb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytri2x_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64, work: *float, nb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytri_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrs2 :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrs2_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrs_rook :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrs_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stbcon :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, kd: s64, ab: *float, ldab: s64, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stbcon_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, kd: s64, ab: *float, ldab: s64, rcond: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stbrfs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *float, ldab: s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stbrfs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *float, ldab: s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stbtrs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *float, ldab: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stbtrs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *float, ldab: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stfsm :: (matrix_layout: s32, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8, m: s64, n: s64, alpha: float, a: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stfsm_work :: (matrix_layout: s32, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8, m: s64, n: s64, alpha: float, a: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stftri :: (matrix_layout: s32, transr: u8, uplo: u8, diag: u8, n: s64, a: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stftri_work :: (matrix_layout: s32, transr: u8, uplo: u8, diag: u8, n: s64, a: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stfttp :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *float, ap: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stfttp_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *float, ap: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stfttr :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *float, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stfttr_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *float, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stgevc :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, s: *float, lds: s64, p: *float, ldp: s64, vl: *float, ldvl: s64, vr: *float, ldvr: s64, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stgevc_work :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, s: *float, lds: s64, p: *float, ldp: s64, vl: *float, ldvl: s64, vr: *float, ldvr: s64, mm: s64, m: *s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stgexc :: (matrix_layout: s32, wantq: s64, wantz: s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, q: *float, ldq: s64, z: *float, ldz: s64, ifst: *s64, ilst: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stgexc_work :: (matrix_layout: s32, wantq: s64, wantz: s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, q: *float, ldq: s64, z: *float, ldz: s64, ifst: *s64, ilst: *s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stgsen :: (matrix_layout: s32, ijob: s64, wantq: s64, wantz: s64, select: *s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: s64, z: *float, ldz: s64, m: *s64, pl: *float, pr: *float, dif: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stgsen_work :: (matrix_layout: s32, ijob: s64, wantq: s64, wantz: s64, select: *s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, alphar: *float, alphai: *float, beta: *float, q: *float, ldq: s64, z: *float, ldz: s64, m: *s64, pl: *float, pr: *float, dif: *float, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stgsja :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, k: s64, l: s64, a: *float, lda: s64, b: *float, ldb: s64, tola: float, tolb: float, alpha: *float, beta: *float, u: *float, ldu: s64, v: *float, ldv: s64, q: *float, ldq: s64, ncycle: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stgsja_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, k: s64, l: s64, a: *float, lda: s64, b: *float, ldb: s64, tola: float, tolb: float, alpha: *float, beta: *float, u: *float, ldu: s64, v: *float, ldv: s64, q: *float, ldq: s64, work: *float, ncycle: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stgsna :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, vl: *float, ldvl: s64, vr: *float, ldvr: s64, s: *float, dif: *float, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stgsna_work :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, vl: *float, ldvl: s64, vr: *float, ldvr: s64, s: *float, dif: *float, mm: s64, m: *s64, work: *float, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stgsyl :: (matrix_layout: s32, trans: u8, ijob: s64, m: s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, c: *float, ldc: s64, d: *float, ldd: s64, e: *float, lde: s64, f: *float, ldf: s64, scale: *float, dif: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stgsyl_work :: (matrix_layout: s32, trans: u8, ijob: s64, m: s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, c: *float, ldc: s64, d: *float, ldd: s64, e: *float, lde: s64, f: *float, ldf: s64, scale: *float, dif: *float, work: *float, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stpcon :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, ap: *float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stpcon_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, ap: *float, rcond: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stpmqrt :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, nb: s64, v: *float, ldv: s64, t: *float, ldt: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stpmqrt_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, nb: s64, v: *float, ldv: s64, t: *float, ldt: s64, a: *float, lda: s64, b: *float, ldb: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stpqrt :: (matrix_layout: s32, m: s64, n: s64, l: s64, nb: s64, a: *float, lda: s64, b: *float, ldb: s64, t: *float, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stpqrt2 :: (matrix_layout: s32, m: s64, n: s64, l: s64, a: *float, lda: s64, b: *float, ldb: s64, t: *float, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stpqrt2_work :: (matrix_layout: s32, m: s64, n: s64, l: s64, a: *float, lda: s64, b: *float, ldb: s64, t: *float, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stpqrt_work :: (matrix_layout: s32, m: s64, n: s64, l: s64, nb: s64, a: *float, lda: s64, b: *float, ldb: s64, t: *float, ldt: s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stprfb :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, l: s64, v: *float, ldv: s64, t: *float, ldt: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stprfb_work :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, l: s64, v: *float, ldv: s64, t: *float, ldt: s64, a: *float, lda: s64, b: *float, ldb: s64, work: *float, ldwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stprfs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *float, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stprfs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *float, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stptri :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, ap: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stptri_work :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, ap: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stptrs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stptrs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *float, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stpttf :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, ap: *float, arf: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stpttf_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, ap: *float, arf: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stpttr :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stpttr_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *float, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strcon :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, a: *float, lda: s64, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strcon_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, a: *float, lda: s64, rcond: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strevc :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, t: *float, ldt: s64, vl: *float, ldvl: s64, vr: *float, ldvr: s64, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strevc_work :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, t: *float, ldt: s64, vl: *float, ldvl: s64, vr: *float, ldvr: s64, mm: s64, m: *s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strexc :: (matrix_layout: s32, compq: u8, n: s64, t: *float, ldt: s64, q: *float, ldq: s64, ifst: *s64, ilst: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strexc_work :: (matrix_layout: s32, compq: u8, n: s64, t: *float, ldt: s64, q: *float, ldq: s64, ifst: *s64, ilst: *s64, work: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strrfs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strrfs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64, x: *float, ldx: s64, ferr: *float, berr: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strsen :: (matrix_layout: s32, job: u8, compq: u8, select: *s64, n: s64, t: *float, ldt: s64, q: *float, ldq: s64, wr: *float, wi: *float, m: *s64, s: *float, sep: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strsen_work :: (matrix_layout: s32, job: u8, compq: u8, select: *s64, n: s64, t: *float, ldt: s64, q: *float, ldq: s64, wr: *float, wi: *float, m: *s64, s: *float, sep: *float, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strsna :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, t: *float, ldt: s64, vl: *float, ldvl: s64, vr: *float, ldvr: s64, s: *float, sep: *float, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strsna_work :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, t: *float, ldt: s64, vl: *float, ldvl: s64, vr: *float, ldvr: s64, s: *float, sep: *float, mm: s64, m: *s64, work: *float, ldwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strsyl :: (matrix_layout: s32, trana: u8, tranb: u8, isgn: s64, m: s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, c: *float, ldc: s64, scale: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strsyl_work :: (matrix_layout: s32, trana: u8, tranb: u8, isgn: s64, m: s64, n: s64, a: *float, lda: s64, b: *float, ldb: s64, c: *float, ldc: s64, scale: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strtri :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strtri_work :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strtrs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strtrs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strttf :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *float, lda: s64, arf: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strttf_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *float, lda: s64, arf: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strttp :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ap: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_strttp_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ap: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stzrzf :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_stzrzf_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, tau: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zbbcsd :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, m: s64, p: s64, q: s64, theta: *float64, phi: *float64, u1: *MKL_Complex16, ldu1: s64, u2: *MKL_Complex16, ldu2: s64, v1t: *MKL_Complex16, ldv1t: s64, v2t: *MKL_Complex16, ldv2t: s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zbbcsd_work :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, m: s64, p: s64, q: s64, theta: *float64, phi: *float64, u1: *MKL_Complex16, ldu1: s64, u2: *MKL_Complex16, ldu2: s64, v1t: *MKL_Complex16, ldv1t: s64, v2t: *MKL_Complex16, ldv2t: s64, b11d: *float64, b11e: *float64, b12d: *float64, b12e: *float64, b21d: *float64, b21e: *float64, b22d: *float64, b22e: *float64, rwork: *float64, lrwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zbdsqr :: (matrix_layout: s32, uplo: u8, n: s64, ncvt: s64, nru: s64, ncc: s64, d: *float64, e: *float64, vt: *MKL_Complex16, ldvt: s64, u: *MKL_Complex16, ldu: s64, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zbdsqr_work :: (matrix_layout: s32, uplo: u8, n: s64, ncvt: s64, nru: s64, ncc: s64, d: *float64, e: *float64, vt: *MKL_Complex16, ldvt: s64, u: *MKL_Complex16, ldu: s64, c: *MKL_Complex16, ldc: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zcgesv :: (matrix_layout: s32, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, iter: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zcgesv_work :: (matrix_layout: s32, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, work: *MKL_Complex16, swork: *MKL_Complex8, rwork: *float64, iter: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zcposv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, iter: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zcposv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, work: *MKL_Complex16, swork: *MKL_Complex8, rwork: *float64, iter: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbbrd :: (matrix_layout: s32, vect: u8, m: s64, n: s64, ncc: s64, kl: s64, ku: s64, ab: *MKL_Complex16, ldab: s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: s64, pt: *MKL_Complex16, ldpt: s64, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbbrd_work :: (matrix_layout: s32, vect: u8, m: s64, n: s64, ncc: s64, kl: s64, ku: s64, ab: *MKL_Complex16, ldab: s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: s64, pt: *MKL_Complex16, ldpt: s64, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbcon :: (matrix_layout: s32, norm: u8, n: s64, kl: s64, ku: s64, ab: *MKL_Complex16, ldab: s64, ipiv: *s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbcon_work :: (matrix_layout: s32, norm: u8, n: s64, kl: s64, ku: s64, ab: *MKL_Complex16, ldab: s64, ipiv: *s64, anorm: float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbequ :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *MKL_Complex16, ldab: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbequ_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *MKL_Complex16, ldab: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbequb :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *MKL_Complex16, ldab: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbequb_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *MKL_Complex16, ldab: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbrfs :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, afb: *MKL_Complex16, ldafb: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbrfs_work :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, afb: *MKL_Complex16, ldafb: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbrfsx :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, afb: *MKL_Complex16, ldafb: s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbrfsx_work :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, afb: *MKL_Complex16, ldafb: s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbsv :: (matrix_layout: s32, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbsv_work :: (matrix_layout: s32, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbsvx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, afb: *MKL_Complex16, ldafb: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, rpivot: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbsvx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, afb: *MKL_Complex16, ldafb: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbsvxx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, afb: *MKL_Complex16, ldafb: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbsvxx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, afb: *MKL_Complex16, ldafb: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbtrf :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *MKL_Complex16, ldab: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbtrf_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, ab: *MKL_Complex16, ldab: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbtrs :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgbtrs_work :: (matrix_layout: s32, trans: u8, n: s64, kl: s64, ku: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgebak :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, scale: *float64, m: s64, v: *MKL_Complex16, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgebak_work :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, scale: *float64, m: s64, v: *MKL_Complex16, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgebal :: (matrix_layout: s32, job: u8, n: s64, a: *MKL_Complex16, lda: s64, ilo: *s64, ihi: *s64, scale: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgebal_work :: (matrix_layout: s32, job: u8, n: s64, a: *MKL_Complex16, lda: s64, ilo: *s64, ihi: *s64, scale: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgebrd :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgebrd_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, d: *float64, e: *float64, tauq: *MKL_Complex16, taup: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgecon :: (matrix_layout: s32, norm: u8, n: s64, a: *MKL_Complex16, lda: s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgecon_work :: (matrix_layout: s32, norm: u8, n: s64, a: *MKL_Complex16, lda: s64, anorm: float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeequ :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeequ_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeequb :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeequb_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, r: *float64, c: *float64, rowcnd: *float64, colcnd: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgees :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_Z_SELECT1, n: s64, a: *MKL_Complex16, lda: s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgees_work :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_Z_SELECT1, n: s64, a: *MKL_Complex16, lda: s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeesx :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_Z_SELECT1, sense: u8, n: s64, a: *MKL_Complex16, lda: s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: s64, rconde: *float64, rcondv: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeesx_work :: (matrix_layout: s32, jobvs: u8, sort: u8, select: LAPACK_Z_SELECT1, sense: u8, n: s64, a: *MKL_Complex16, lda: s64, sdim: *s64, w: *MKL_Complex16, vs: *MKL_Complex16, ldvs: s64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: s64, rwork: *float64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeev :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *MKL_Complex16, lda: s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeev_work :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *MKL_Complex16, lda: s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeevx :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *MKL_Complex16, lda: s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeevx_work :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *MKL_Complex16, lda: s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, ilo: *s64, ihi: *s64, scale: *float64, abnrm: *float64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgehrd :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgehrd_work :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgejsv :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8, jobp: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, sva: *float64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, stat: *float64, istat: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgejsv_work :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, jobr: u8, jobt: u8, jobp: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, sva: *float64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, cwork: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgelq2 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgelq2_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgelqf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgelqf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgels :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgels_work :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgelsd :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, s: *float64, rcond: float64, rank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgelsd_work :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, s: *float64, rcond: float64, rank: *s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgelss :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, s: *float64, rcond: float64, rank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgelss_work :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, s: *float64, rcond: float64, rank: *s64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgelsy :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, jpvt: *s64, rcond: float64, rank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgelsy_work :: (matrix_layout: s32, m: s64, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, jpvt: *s64, rcond: float64, rank: *s64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgemqrt :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, nb: s64, v: *MKL_Complex16, ldv: s64, t: *MKL_Complex16, ldt: s64, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgemqrt_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, nb: s64, v: *MKL_Complex16, ldv: s64, t: *MKL_Complex16, ldt: s64, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqlf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqlf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqp3 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, jpvt: *s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqp3_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, jpvt: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqpf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, jpvt: *s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqpf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, jpvt: *s64, tau: *MKL_Complex16, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqr2 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqr2_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqrf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqrf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqrfp :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqrfp_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqrt :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqrt2 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqrt2_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqrt3 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqrt3_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqrt_work :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, ldt: s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgerfs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgerfs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgerfsx :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgerfsx_work :: (matrix_layout: s32, trans: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, r: *float64, c: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgerqf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgerqf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesdd :: (matrix_layout: s32, jobz: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, u: *MKL_Complex16, ldu: s64, vt: *MKL_Complex16, ldvt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesdd_work :: (matrix_layout: s32, jobz: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, u: *MKL_Complex16, ldu: s64, vt: *MKL_Complex16, ldvt: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesv :: (matrix_layout: s32, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesv_work :: (matrix_layout: s32, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesvd :: (matrix_layout: s32, jobu: u8, jobvt: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, u: *MKL_Complex16, ldu: s64, vt: *MKL_Complex16, ldvt: s64, superb: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesvd_work :: (matrix_layout: s32, jobu: u8, jobvt: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, u: *MKL_Complex16, ldu: s64, vt: *MKL_Complex16, ldvt: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesvdx :: (matrix_layout: s32, jobu: u8, jobvt: u8, range: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, ns: *s64, s: *float64, u: *MKL_Complex16, ldu: s64, vt: *MKL_Complex16, ldvt: s64, superb: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesvdx_work :: (matrix_layout: s32, jobu: u8, jobvt: u8, range: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, ns: *s64, s: *float64, u: *MKL_Complex16, ldu: s64, vt: *MKL_Complex16, ldvt: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesvj :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, sva: *float64, mv: s64, v: *MKL_Complex16, ldv: s64, stat: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesvj_work :: (matrix_layout: s32, joba: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, sva: *float64, mv: s64, v: *MKL_Complex16, ldv: s64, cwork: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesvx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, rpivot: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesvx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesvxx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesvxx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, equed: *u8, r: *float64, c: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgetf2 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgetf2_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgetrf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgetrf2 :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgetrf2_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgetrf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgetri :: (matrix_layout: s32, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgetri_work :: (matrix_layout: s32, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgetrs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgetrs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggbak :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, lscale: *float64, rscale: *float64, m: s64, v: *MKL_Complex16, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggbak_work :: (matrix_layout: s32, job: u8, side: u8, n: s64, ilo: s64, ihi: s64, lscale: *float64, rscale: *float64, m: s64, v: *MKL_Complex16, ldv: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggbal :: (matrix_layout: s32, job: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggbal_work :: (matrix_layout: s32, job: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgges :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_Z_SELECT2, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: s64, vsr: *MKL_Complex16, ldvsr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgges3 :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_Z_SELECT2, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: s64, vsr: *MKL_Complex16, ldvsr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgges3_work :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_Z_SELECT2, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: s64, vsr: *MKL_Complex16, ldvsr: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgges_work :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_Z_SELECT2, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: s64, vsr: *MKL_Complex16, ldvsr: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggesx :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_Z_SELECT2, sense: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: s64, vsr: *MKL_Complex16, ldvsr: s64, rconde: *float64, rcondv: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggesx_work :: (matrix_layout: s32, jobvsl: u8, jobvsr: u8, sort: u8, selctg: LAPACK_Z_SELECT2, sense: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, sdim: *s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vsl: *MKL_Complex16, ldvsl: s64, vsr: *MKL_Complex16, ldvsr: s64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: s64, rwork: *float64, iwork: *s64, liwork: s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggev :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggev3 :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggev3_work :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggev_work :: (matrix_layout: s32, jobvl: u8, jobvr: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggevx :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggevx_work :: (matrix_layout: s32, balanc: u8, jobvl: u8, jobvr: u8, sense: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, ilo: *s64, ihi: *s64, lscale: *float64, rscale: *float64, abnrm: *float64, bbnrm: *float64, rconde: *float64, rcondv: *float64, work: *MKL_Complex16, lwork: s64, rwork: *float64, iwork: *s64, bwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggglm :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, d: *MKL_Complex16, x: *MKL_Complex16, y: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggglm_work :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, d: *MKL_Complex16, x: *MKL_Complex16, y: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgghd3 :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, q: *MKL_Complex16, ldq: s64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgghd3_work :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, q: *MKL_Complex16, ldq: s64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgghrd :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, q: *MKL_Complex16, ldq: s64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgghrd_work :: (matrix_layout: s32, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, q: *MKL_Complex16, ldq: s64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgglse :: (matrix_layout: s32, m: s64, n: s64, p: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, c: *MKL_Complex16, d: *MKL_Complex16, x: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgglse_work :: (matrix_layout: s32, m: s64, n: s64, p: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, c: *MKL_Complex16, d: *MKL_Complex16, x: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggqrf :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *MKL_Complex16, lda: s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: s64, taub: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggqrf_work :: (matrix_layout: s32, n: s64, m: s64, p: s64, a: *MKL_Complex16, lda: s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: s64, taub: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggrqf :: (matrix_layout: s32, m: s64, p: s64, n: s64, a: *MKL_Complex16, lda: s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: s64, taub: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggrqf_work :: (matrix_layout: s32, m: s64, p: s64, n: s64, a: *MKL_Complex16, lda: s64, taua: *MKL_Complex16, b: *MKL_Complex16, ldb: s64, taub: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggsvd :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, q: *MKL_Complex16, ldq: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggsvd3 :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, q: *MKL_Complex16, ldq: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggsvd3_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, q: *MKL_Complex16, ldq: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggsvd_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, n: s64, p: s64, k: *s64, l: *s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, q: *MKL_Complex16, ldq: s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggsvp :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, tola: float64, tolb: float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, q: *MKL_Complex16, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggsvp3 :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, tola: float64, tolb: float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, q: *MKL_Complex16, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggsvp3_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, tola: float64, tolb: float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, q: *MKL_Complex16, ldq: s64, iwork: *s64, rwork: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zggsvp_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, tola: float64, tolb: float64, k: *s64, l: *s64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, q: *MKL_Complex16, ldq: s64, iwork: *s64, rwork: *float64, tau: *MKL_Complex16, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgtcon :: (norm: u8, n: s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgtcon_work :: (norm: u8, n: s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, anorm: float64, rcond: *float64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgtrfs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgtrfs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgtsv :: (matrix_layout: s32, n: s64, nrhs: s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgtsv_work :: (matrix_layout: s32, n: s64, nrhs: s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgtsvx :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgtsvx_work :: (matrix_layout: s32, fact: u8, trans: u8, n: s64, nrhs: s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, dlf: *MKL_Complex16, df: *MKL_Complex16, duf: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgttrf :: (n: s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgttrf_work :: (n: s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgttrs :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgttrs_work :: (matrix_layout: s32, trans: u8, n: s64, nrhs: s64, dl: *MKL_Complex16, d: *MKL_Complex16, du: *MKL_Complex16, du2: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbev :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, w: *float64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbev_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbevd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, w: *float64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbevd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbevx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, q: *MKL_Complex16, ldq: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbevx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, q: *MKL_Complex16, ldq: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbgst :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex16, ldab: s64, bb: *MKL_Complex16, ldbb: s64, x: *MKL_Complex16, ldx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbgst_work :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex16, ldab: s64, bb: *MKL_Complex16, ldbb: s64, x: *MKL_Complex16, ldx: s64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbgv :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex16, ldab: s64, bb: *MKL_Complex16, ldbb: s64, w: *float64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbgv_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex16, ldab: s64, bb: *MKL_Complex16, ldbb: s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbgvd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex16, ldab: s64, bb: *MKL_Complex16, ldbb: s64, w: *float64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbgvd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex16, ldab: s64, bb: *MKL_Complex16, ldbb: s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbgvx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex16, ldab: s64, bb: *MKL_Complex16, ldbb: s64, q: *MKL_Complex16, ldq: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbgvx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ka: s64, kb: s64, ab: *MKL_Complex16, ldab: s64, bb: *MKL_Complex16, ldbb: s64, q: *MKL_Complex16, ldq: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbtrd :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbtrd_work :: (matrix_layout: s32, vect: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, d: *float64, e: *float64, q: *MKL_Complex16, ldq: s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhecon :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhecon_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, anorm: float64, rcond: *float64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheequb :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheequb_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, scond: *float64, amax: *float64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheev :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheev_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, w: *float64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheevd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheevd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, w: *float64, work: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheevr :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheevr_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, isuppz: *s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheevx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheevx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhegst :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhegst_work :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhegv :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhegv_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, w: *float64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhegvd :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhegvd_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, w: *float64, work: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhegvx :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhegvx_work :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zherfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zherfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zherfsx :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zherfsx_work :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhesv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhesv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhesvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhesvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhesvxx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhesvxx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheswapr :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, i1: s64, i2: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheswapr_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, i1: s64, i2: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrd :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, d: *float64, e: *float64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrd_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, d: *float64, e: *float64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrf_rook :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrf_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetri :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetri2 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetri2_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetri2x :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, nb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetri2x_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, work: *MKL_Complex16, nb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetri_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrs2 :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrs2_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrs_rook :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrs_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhfrk :: (matrix_layout: s32, transr: u8, uplo: u8, trans: u8, n: s64, k: s64, alpha: float64, a: *MKL_Complex16, lda: s64, beta: float64, c: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhfrk_work :: (matrix_layout: s32, transr: u8, uplo: u8, trans: u8, n: s64, k: s64, alpha: float64, a: *MKL_Complex16, lda: s64, beta: float64, c: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhgeqz :: (matrix_layout: s32, job: u8, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *MKL_Complex16, ldh: s64, t: *MKL_Complex16, ldt: s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: s64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhgeqz_work :: (matrix_layout: s32, job: u8, compq: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *MKL_Complex16, ldh: s64, t: *MKL_Complex16, ldt: s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: s64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpcon :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, ipiv: *s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpcon_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, ipiv: *s64, anorm: float64, rcond: *float64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpev :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpev_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpevd :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpevd_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpevx :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ap: *MKL_Complex16, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpevx_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, ap: *MKL_Complex16, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpgst :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, ap: *MKL_Complex16, bp: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpgst_work :: (matrix_layout: s32, itype: s64, uplo: u8, n: s64, ap: *MKL_Complex16, bp: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpgv :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpgv_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpgvd :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpgvd_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, ap: *MKL_Complex16, bp: *MKL_Complex16, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpgvx :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, ap: *MKL_Complex16, bp: *MKL_Complex16, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpgvx_work :: (matrix_layout: s32, itype: s64, jobz: u8, range: u8, uplo: u8, n: s64, ap: *MKL_Complex16, bp: *MKL_Complex16, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, rwork: *float64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhprfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhprfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpsv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpsv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhpsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhptrd :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, d: *float64, e: *float64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhptrd_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, d: *float64, e: *float64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhptrf :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhptrf_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhptri :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhptri_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhptrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhptrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhsein :: (matrix_layout: s32, job: u8, eigsrc: u8, initv: u8, select: *s64, n: s64, h: *MKL_Complex16, ldh: s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, mm: s64, m: *s64, ifaill: *s64, ifailr: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhsein_work :: (matrix_layout: s32, job: u8, eigsrc: u8, initv: u8, select: *s64, n: s64, h: *MKL_Complex16, ldh: s64, w: *MKL_Complex16, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, mm: s64, m: *s64, work: *MKL_Complex16, rwork: *float64, ifaill: *s64, ifailr: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhseqr :: (matrix_layout: s32, job: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *MKL_Complex16, ldh: s64, w: *MKL_Complex16, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhseqr_work :: (matrix_layout: s32, job: u8, compz: u8, n: s64, ilo: s64, ihi: s64, h: *MKL_Complex16, ldh: s64, w: *MKL_Complex16, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlacgv :: (n: s64, x: *MKL_Complex16, incx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlacgv_work :: (n: s64, x: *MKL_Complex16, incx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlacn2 :: (n: s64, v: *MKL_Complex16, x: *MKL_Complex16, est: *float64, kase: *s64, isave: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlacn2_work :: (n: s64, v: *MKL_Complex16, x: *MKL_Complex16, est: *float64, kase: *s64, isave: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlacp2 :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, a: *float64, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlacp2_work :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, a: *float64, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlacpy :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlacpy_work :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlag2c :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, sa: *MKL_Complex8, ldsa: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlag2c_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, sa: *MKL_Complex8, ldsa: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlagge :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, d: *float64, a: *MKL_Complex16, lda: s64, iseed: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlagge_work :: (matrix_layout: s32, m: s64, n: s64, kl: s64, ku: s64, d: *float64, a: *MKL_Complex16, lda: s64, iseed: *s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlaghe :: (matrix_layout: s32, n: s64, k: s64, d: *float64, a: *MKL_Complex16, lda: s64, iseed: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlaghe_work :: (matrix_layout: s32, n: s64, k: s64, d: *float64, a: *MKL_Complex16, lda: s64, iseed: *s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlagsy :: (matrix_layout: s32, n: s64, k: s64, d: *float64, a: *MKL_Complex16, lda: s64, iseed: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlagsy_work :: (matrix_layout: s32, n: s64, k: s64, d: *float64, a: *MKL_Complex16, lda: s64, iseed: *s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlapmr :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *MKL_Complex16, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlapmr_work :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *MKL_Complex16, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlapmt :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *MKL_Complex16, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlapmt_work :: (matrix_layout: s32, forwrd: s64, m: s64, n: s64, x: *MKL_Complex16, ldx: s64, k: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlarfb :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, v: *MKL_Complex16, ldv: s64, t: *MKL_Complex16, ldt: s64, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlarfb_work :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, v: *MKL_Complex16, ldv: s64, t: *MKL_Complex16, ldt: s64, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16, ldwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlarfg :: (n: s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlarfg_work :: (n: s64, alpha: *MKL_Complex16, x: *MKL_Complex16, incx: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlarft :: (matrix_layout: s32, direct: u8, storev: u8, n: s64, k: s64, v: *MKL_Complex16, ldv: s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlarft_work :: (matrix_layout: s32, direct: u8, storev: u8, n: s64, k: s64, v: *MKL_Complex16, ldv: s64, tau: *MKL_Complex16, t: *MKL_Complex16, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlarfx :: (matrix_layout: s32, side: u8, m: s64, n: s64, v: *MKL_Complex16, tau: MKL_Complex16, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlarfx_work :: (matrix_layout: s32, side: u8, m: s64, n: s64, v: *MKL_Complex16, tau: MKL_Complex16, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlarnv :: (idist: s64, iseed: *s64, n: s64, x: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlarnv_work :: (idist: s64, iseed: *s64, n: s64, x: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlascl :: (matrix_layout: s32, type: u8, kl: s64, ku: s64, cfrom: float64, cto: float64, m: s64, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlascl_work :: (matrix_layout: s32, type: u8, kl: s64, ku: s64, cfrom: float64, cto: float64, m: s64, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlaset :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, alpha: MKL_Complex16, beta: MKL_Complex16, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlaset_work :: (matrix_layout: s32, uplo: u8, m: s64, n: s64, alpha: MKL_Complex16, beta: MKL_Complex16, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlaswp :: (matrix_layout: s32, n: s64, a: *MKL_Complex16, lda: s64, k1: s64, k2: s64, ipiv: *s64, incx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlaswp_work :: (matrix_layout: s32, n: s64, a: *MKL_Complex16, lda: s64, k1: s64, k2: s64, ipiv: *s64, incx: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlatms :: (matrix_layout: s32, m: s64, n: s64, dist: u8, iseed: *s64, sym: u8, d: *float64, mode: s64, cond: float64, dmax: float64, kl: s64, ku: s64, pack: u8, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlatms_work :: (matrix_layout: s32, m: s64, n: s64, dist: u8, iseed: *s64, sym: u8, d: *float64, mode: s64, cond: float64, dmax: float64, kl: s64, ku: s64, pack: u8, a: *MKL_Complex16, lda: s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlauum :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zlauum_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbcon :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbcon_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, anorm: float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbequ :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbequ_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbrfs :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, afb: *MKL_Complex16, ldafb: s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbrfs_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, afb: *MKL_Complex16, ldafb: s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbstf :: (matrix_layout: s32, uplo: u8, n: s64, kb: s64, bb: *MKL_Complex16, ldbb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbstf_work :: (matrix_layout: s32, uplo: u8, n: s64, kb: s64, bb: *MKL_Complex16, ldbb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbsv :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbsv_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, afb: *MKL_Complex16, ldafb: s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, afb: *MKL_Complex16, ldafb: s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbtrf :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbtrf_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbtrs :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpbtrs_work :: (matrix_layout: s32, uplo: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpftrf :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpftrf_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpftri :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpftri_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpftrs :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpftrs_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpocon :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpocon_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, anorm: float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpoequ :: (matrix_layout: s32, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpoequ_work :: (matrix_layout: s32, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpoequb :: (matrix_layout: s32, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpoequb_work :: (matrix_layout: s32, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zporfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zporfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zporfsx :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zporfsx_work :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zposv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zposv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zposvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zposvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zposvxx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zposvxx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpotrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpotrf2 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpotrf2_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpotrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpotri :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpotri_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpotrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpotrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zppcon :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zppcon_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, anorm: float64, rcond: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zppequ :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zppequ_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpprfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, afp: *MKL_Complex16, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpprfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, afp: *MKL_Complex16, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zppsv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zppsv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zppsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, afp: *MKL_Complex16, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zppsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, afp: *MKL_Complex16, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpptrf :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpptrf_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpptri :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpptri_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpptrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpptrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpstrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, piv: *s64, rank: *s64, tol: float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpstrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, piv: *s64, rank: *s64, tol: float64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zptcon :: (n: s64, d: *float64, e: *MKL_Complex16, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zptcon_work :: (n: s64, d: *float64, e: *MKL_Complex16, anorm: float64, rcond: *float64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpteqr :: (matrix_layout: s32, compz: u8, n: s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpteqr_work :: (matrix_layout: s32, compz: u8, n: s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zptrfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zptrfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zptsv :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zptsv_work :: (matrix_layout: s32, n: s64, nrhs: s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zptsvx :: (matrix_layout: s32, fact: u8, n: s64, nrhs: s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zptsvx_work :: (matrix_layout: s32, fact: u8, n: s64, nrhs: s64, d: *float64, e: *MKL_Complex16, df: *float64, ef: *MKL_Complex16, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpttrf :: (n: s64, d: *float64, e: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpttrf_work :: (n: s64, d: *float64, e: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpttrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zpttrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, d: *float64, e: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zspcon :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, ipiv: *s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zspcon_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, ipiv: *s64, anorm: float64, rcond: *float64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsprfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsprfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zspsv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zspsv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zspsvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zspsvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, afp: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsptrf :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsptrf_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsptri :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsptri_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsptrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsptrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zstedc :: (matrix_layout: s32, compz: u8, n: s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zstedc_work :: (matrix_layout: s32, compz: u8, n: s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zstegr :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zstegr_work :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, isuppz: *s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zstein :: (matrix_layout: s32, n: s64, d: *float64, e: *float64, m: s64, w: *float64, iblock: *s64, isplit: *s64, z: *MKL_Complex16, ldz: s64, ifailv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zstein_work :: (matrix_layout: s32, n: s64, d: *float64, e: *float64, m: s64, w: *float64, iblock: *s64, isplit: *s64, z: *MKL_Complex16, ldz: s64, work: *float64, iwork: *s64, ifailv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zstemr :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, nzc: s64, isuppz: *s64, tryrac: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zstemr_work :: (matrix_layout: s32, jobz: u8, range: u8, n: s64, d: *float64, e: *float64, vl: float64, vu: float64, il: s64, iu: s64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, nzc: s64, isuppz: *s64, tryrac: *s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsteqr :: (matrix_layout: s32, compz: u8, n: s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsteqr_work :: (matrix_layout: s32, compz: u8, n: s64, d: *float64, e: *float64, z: *MKL_Complex16, ldz: s64, work: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsycon :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsycon_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, anorm: float64, rcond: *float64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsyconv :: (matrix_layout: s32, uplo: u8, way: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, e: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsyconv_work :: (matrix_layout: s32, uplo: u8, way: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, e: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsyequb :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, scond: *float64, amax: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsyequb_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, scond: *float64, amax: *float64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsyr :: (matrix_layout: s32, uplo: u8, n: s64, alpha: MKL_Complex16, x: *MKL_Complex16, incx: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsyr_work :: (matrix_layout: s32, uplo: u8, n: s64, alpha: MKL_Complex16, x: *MKL_Complex16, incx: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsyrfs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsyrfs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsyrfsx :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsyrfsx_work :: (matrix_layout: s32, uplo: u8, equed: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysv :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysv_rook :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysv_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysv_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysvx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysvx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, ferr: *float64, berr: *float64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysvxx :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysvxx_work :: (matrix_layout: s32, fact: u8, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, af: *MKL_Complex16, ldaf: s64, ipiv: *s64, equed: *u8, s: *float64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, rcond: *float64, rpvgrw: *float64, berr: *float64, n_err_bnds: s64, err_bnds_norm: *float64, err_bnds_comp: *float64, nparams: s64, params: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsyswapr :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, i1: s64, i2: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsyswapr_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, i1: s64, i2: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrf :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrf_rook :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrf_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrf_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytri :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytri2 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytri2_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytri2x :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, nb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytri2x_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, work: *MKL_Complex16, nb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytri_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrs :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrs2 :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrs2_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrs_rook :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrs_rook_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrs_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztbcon :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztbcon_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, rcond: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztbrfs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztbrfs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztbtrs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztbtrs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, kd: s64, nrhs: s64, ab: *MKL_Complex16, ldab: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztfsm :: (matrix_layout: s32, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8, m: s64, n: s64, alpha: MKL_Complex16, a: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztfsm_work :: (matrix_layout: s32, transr: u8, side: u8, uplo: u8, trans: u8, diag: u8, m: s64, n: s64, alpha: MKL_Complex16, a: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztftri :: (matrix_layout: s32, transr: u8, uplo: u8, diag: u8, n: s64, a: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztftri_work :: (matrix_layout: s32, transr: u8, uplo: u8, diag: u8, n: s64, a: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztfttp :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *MKL_Complex16, ap: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztfttp_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *MKL_Complex16, ap: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztfttr :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *MKL_Complex16, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztfttr_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, arf: *MKL_Complex16, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztgevc :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, s: *MKL_Complex16, lds: s64, p: *MKL_Complex16, ldp: s64, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztgevc_work :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, s: *MKL_Complex16, lds: s64, p: *MKL_Complex16, ldp: s64, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, mm: s64, m: *s64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztgexc :: (matrix_layout: s32, wantq: s64, wantz: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, q: *MKL_Complex16, ldq: s64, z: *MKL_Complex16, ldz: s64, ifst: s64, ilst: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztgexc_work :: (matrix_layout: s32, wantq: s64, wantz: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, q: *MKL_Complex16, ldq: s64, z: *MKL_Complex16, ldz: s64, ifst: s64, ilst: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztgsen :: (matrix_layout: s32, ijob: s64, wantq: s64, wantz: s64, select: *s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: s64, z: *MKL_Complex16, ldz: s64, m: *s64, pl: *float64, pr: *float64, dif: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztgsen_work :: (matrix_layout: s32, ijob: s64, wantq: s64, wantz: s64, select: *s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, alpha: *MKL_Complex16, beta: *MKL_Complex16, q: *MKL_Complex16, ldq: s64, z: *MKL_Complex16, ldz: s64, m: *s64, pl: *float64, pr: *float64, dif: *float64, work: *MKL_Complex16, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztgsja :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, k: s64, l: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, tola: float64, tolb: float64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, q: *MKL_Complex16, ldq: s64, ncycle: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztgsja_work :: (matrix_layout: s32, jobu: u8, jobv: u8, jobq: u8, m: s64, p: s64, n: s64, k: s64, l: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, tola: float64, tolb: float64, alpha: *float64, beta: *float64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, q: *MKL_Complex16, ldq: s64, work: *MKL_Complex16, ncycle: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztgsna :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, s: *float64, dif: *float64, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztgsna_work :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, s: *float64, dif: *float64, mm: s64, m: *s64, work: *MKL_Complex16, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztgsyl :: (matrix_layout: s32, trans: u8, ijob: s64, m: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, c: *MKL_Complex16, ldc: s64, d: *MKL_Complex16, ldd: s64, e: *MKL_Complex16, lde: s64, f: *MKL_Complex16, ldf: s64, scale: *float64, dif: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztgsyl_work :: (matrix_layout: s32, trans: u8, ijob: s64, m: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, c: *MKL_Complex16, ldc: s64, d: *MKL_Complex16, ldd: s64, e: *MKL_Complex16, lde: s64, f: *MKL_Complex16, ldf: s64, scale: *float64, dif: *float64, work: *MKL_Complex16, lwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztpcon :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, ap: *MKL_Complex16, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztpcon_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, ap: *MKL_Complex16, rcond: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztpmqrt :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, nb: s64, v: *MKL_Complex16, ldv: s64, t: *MKL_Complex16, ldt: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztpmqrt_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, nb: s64, v: *MKL_Complex16, ldv: s64, t: *MKL_Complex16, ldt: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztpqrt :: (matrix_layout: s32, m: s64, n: s64, l: s64, nb: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, t: *MKL_Complex16, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztpqrt2 :: (matrix_layout: s32, m: s64, n: s64, l: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, t: *MKL_Complex16, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztpqrt2_work :: (matrix_layout: s32, m: s64, n: s64, l: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, t: *MKL_Complex16, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztpqrt_work :: (matrix_layout: s32, m: s64, n: s64, l: s64, nb: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, t: *MKL_Complex16, ldt: s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztprfb :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, l: s64, v: *MKL_Complex16, ldv: s64, t: *MKL_Complex16, ldt: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztprfb_work :: (matrix_layout: s32, side: u8, trans: u8, direct: u8, storev: u8, m: s64, n: s64, k: s64, l: s64, v: *MKL_Complex16, ldv: s64, t: *MKL_Complex16, ldt: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, ldwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztprfs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztprfs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztptri :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, ap: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztptri_work :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, ap: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztptrs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztptrs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, ap: *MKL_Complex16, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztpttf :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, ap: *MKL_Complex16, arf: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztpttf_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, ap: *MKL_Complex16, arf: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztpttr :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztpttr_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrcon :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, a: *MKL_Complex16, lda: s64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrcon_work :: (matrix_layout: s32, norm: u8, uplo: u8, diag: u8, n: s64, a: *MKL_Complex16, lda: s64, rcond: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrevc :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, t: *MKL_Complex16, ldt: s64, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrevc_work :: (matrix_layout: s32, side: u8, howmny: u8, select: *s64, n: s64, t: *MKL_Complex16, ldt: s64, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, mm: s64, m: *s64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrexc :: (matrix_layout: s32, compq: u8, n: s64, t: *MKL_Complex16, ldt: s64, q: *MKL_Complex16, ldq: s64, ifst: s64, ilst: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrexc_work :: (matrix_layout: s32, compq: u8, n: s64, t: *MKL_Complex16, ldt: s64, q: *MKL_Complex16, ldq: s64, ifst: s64, ilst: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrrfs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrrfs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, x: *MKL_Complex16, ldx: s64, ferr: *float64, berr: *float64, work: *MKL_Complex16, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrsen :: (matrix_layout: s32, job: u8, compq: u8, select: *s64, n: s64, t: *MKL_Complex16, ldt: s64, q: *MKL_Complex16, ldq: s64, w: *MKL_Complex16, m: *s64, s: *float64, sep: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrsen_work :: (matrix_layout: s32, job: u8, compq: u8, select: *s64, n: s64, t: *MKL_Complex16, ldt: s64, q: *MKL_Complex16, ldq: s64, w: *MKL_Complex16, m: *s64, s: *float64, sep: *float64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrsna :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, t: *MKL_Complex16, ldt: s64, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, s: *float64, sep: *float64, mm: s64, m: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrsna_work :: (matrix_layout: s32, job: u8, howmny: u8, select: *s64, n: s64, t: *MKL_Complex16, ldt: s64, vl: *MKL_Complex16, ldvl: s64, vr: *MKL_Complex16, ldvr: s64, s: *float64, sep: *float64, mm: s64, m: *s64, work: *MKL_Complex16, ldwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrsyl :: (matrix_layout: s32, trana: u8, tranb: u8, isgn: s64, m: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, c: *MKL_Complex16, ldc: s64, scale: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrsyl_work :: (matrix_layout: s32, trana: u8, tranb: u8, isgn: s64, m: s64, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, c: *MKL_Complex16, ldc: s64, scale: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrtri :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrtri_work :: (matrix_layout: s32, uplo: u8, diag: u8, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrtrs :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrtrs_work :: (matrix_layout: s32, uplo: u8, trans: u8, diag: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrttf :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, arf: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrttf_work :: (matrix_layout: s32, transr: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, arf: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrttp :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ap: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztrttp_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ap: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztzrzf :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ztzrzf_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunbdb :: (matrix_layout: s32, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *MKL_Complex16, ldx11: s64, x12: *MKL_Complex16, ldx12: s64, x21: *MKL_Complex16, ldx21: s64, x22: *MKL_Complex16, ldx22: s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, tauq2: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunbdb_work :: (matrix_layout: s32, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *MKL_Complex16, ldx11: s64, x12: *MKL_Complex16, ldx12: s64, x21: *MKL_Complex16, ldx21: s64, x22: *MKL_Complex16, ldx22: s64, theta: *float64, phi: *float64, taup1: *MKL_Complex16, taup2: *MKL_Complex16, tauq1: *MKL_Complex16, tauq2: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zuncsd :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *MKL_Complex16, ldx11: s64, x12: *MKL_Complex16, ldx12: s64, x21: *MKL_Complex16, ldx21: s64, x22: *MKL_Complex16, ldx22: s64, theta: *float64, u1: *MKL_Complex16, ldu1: s64, u2: *MKL_Complex16, ldu2: s64, v1t: *MKL_Complex16, ldv1t: s64, v2t: *MKL_Complex16, ldv2t: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zuncsd2by1 :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, m: s64, p: s64, q: s64, x11: *MKL_Complex16, ldx11: s64, x21: *MKL_Complex16, ldx21: s64, theta: *float64, u1: *MKL_Complex16, ldu1: s64, u2: *MKL_Complex16, ldu2: s64, v1t: *MKL_Complex16, ldv1t: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zuncsd2by1_work :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, m: s64, p: s64, q: s64, x11: *MKL_Complex16, ldx11: s64, x21: *MKL_Complex16, ldx21: s64, theta: *float64, u1: *MKL_Complex16, ldu1: s64, u2: *MKL_Complex16, ldu2: s64, v1t: *MKL_Complex16, ldv1t: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zuncsd_work :: (matrix_layout: s32, jobu1: u8, jobu2: u8, jobv1t: u8, jobv2t: u8, trans: u8, signs: u8, m: s64, p: s64, q: s64, x11: *MKL_Complex16, ldx11: s64, x12: *MKL_Complex16, ldx12: s64, x21: *MKL_Complex16, ldx21: s64, x22: *MKL_Complex16, ldx22: s64, theta: *float64, u1: *MKL_Complex16, ldu1: s64, u2: *MKL_Complex16, ldu2: s64, v1t: *MKL_Complex16, ldv1t: s64, v2t: *MKL_Complex16, ldv2t: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zungbr :: (matrix_layout: s32, vect: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zungbr_work :: (matrix_layout: s32, vect: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunghr :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunghr_work :: (matrix_layout: s32, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunglq :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunglq_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zungql :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zungql_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zungqr :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zungqr_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zungrq :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zungrq_work :: (matrix_layout: s32, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zungtr :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zungtr_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmbr :: (matrix_layout: s32, vect: u8, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmbr_work :: (matrix_layout: s32, vect: u8, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmhr :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmhr_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, ilo: s64, ihi: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmlq :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmlq_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmql :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmql_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmqr :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmqr_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmrq :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmrq_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmrz :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmrz_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, l: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmtr :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunmtr_work :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zupgtr :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, tau: *MKL_Complex16, q: *MKL_Complex16, ldq: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zupgtr_work :: (matrix_layout: s32, uplo: u8, n: s64, ap: *MKL_Complex16, tau: *MKL_Complex16, q: *MKL_Complex16, ldq: s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zupmtr :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, ap: *MKL_Complex16, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zupmtr_work :: (matrix_layout: s32, side: u8, uplo: u8, trans: u8, m: s64, n: s64, ap: *MKL_Complex16, tau: *MKL_Complex16, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ilaver :: (vers_major: *s64, vers_minor: *s64, vers_patch: *s64) -> void #foreign mkl_intel_ilp64;

LAPACKE_xerbla :: (name: *u8, info: s64) -> void #foreign mkl_intel_ilp64;

LAPACKE_chesv_aa :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chesv_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrf_aa :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrf_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrs_aa :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrs_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysv_aa :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysv_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrf_aa :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrf_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, ipiv: *s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrs_aa :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrs_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, ipiv: *s64, b: *float64, ldb: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysv_aa :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysv_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrf_aa :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrf_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, ipiv: *s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrs_aa :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrs_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, ipiv: *s64, b: *float, ldb: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhesv_aa :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhesv_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrf_aa :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrf_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrs_aa :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrs_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgemqr :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, tsize: s64, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgemqr_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, tsize: s64, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqr :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, tsize: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgeqr_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, tsize: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgemqr :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, t: *float64, tsize: s64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgemqr_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, t: *float64, tsize: s64, c: *float64, ldc: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqr :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, t: *float64, tsize: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgeqr_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, t: *float64, tsize: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgemqr :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, t: *float, tsize: s64, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgemqr_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, t: *float, tsize: s64, c: *float, ldc: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqr :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, t: *float, tsize: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgeqr_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, t: *float, tsize: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgemqr :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, tsize: s64, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgemqr_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, tsize: s64, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqr :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, tsize: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgeqr_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, tsize: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgelq :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, tsize: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgelq_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, tsize: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgemlq :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, tsize: s64, c: *MKL_Complex8, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgemlq_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, tsize: s64, c: *MKL_Complex8, ldc: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgelq :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, t: *float64, tsize: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgelq_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64, t: *float64, tsize: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgemlq :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, t: *float64, tsize: s64, c: *float64, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgemlq_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float64, lda: s64, t: *float64, tsize: s64, c: *float64, ldc: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgelq :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, t: *float, tsize: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgelq_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64, t: *float, tsize: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgemlq :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, t: *float, tsize: s64, c: *float, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgemlq_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *float, lda: s64, t: *float, tsize: s64, c: *float, ldc: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgelq :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, tsize: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgelq_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, tsize: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgemlq :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, tsize: s64, c: *MKL_Complex16, ldc: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgemlq_work :: (matrix_layout: s32, side: u8, trans: u8, m: s64, n: s64, k: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, tsize: s64, c: *MKL_Complex16, ldc: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgetsls :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgetsls_work :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgetsls :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgetsls_work :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *float64, lda: s64, b: *float64, ldb: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgetsls :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgetsls_work :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *float, lda: s64, b: *float, ldb: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgetsls :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgetsls_work :: (matrix_layout: s32, trans: u8, m: s64, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_checon_3 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_checon_3_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, anorm: float, rcond: *float, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chesv_rk :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chesv_rk_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrf_rk :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrf_rk_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetri_3 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetri_3_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrs_3 :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrs_3_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csycon_3 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csycon_3_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, anorm: float, rcond: *float, work: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysv_aa :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysv_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysv_rk :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysv_rk_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrf_aa :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrf_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrf_rk :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrf_rk_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytri_3 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytri_3_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrs_3 :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrs_3_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, e: *MKL_Complex8, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrs_aa :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrs_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, ipiv: *s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsycon_3 :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, e: *float64, ipiv: *s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsycon_3_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, e: *float64, ipiv: *s64, anorm: float64, rcond: *float64, work: *float64, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysv_rk :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, e: *float64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysv_rk_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, e: *float64, ipiv: *s64, b: *float64, ldb: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrf_rk :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, e: *float64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrf_rk_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, e: *float64, ipiv: *s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytri_3 :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, e: *float64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytri_3_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, e: *float64, ipiv: *s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrs_3 :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, e: *float64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrs_3_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, e: *float64, ipiv: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssycon_3 :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, e: *float, ipiv: *s64, anorm: float, rcond: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssycon_3_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, e: *float, ipiv: *s64, anorm: float, rcond: *float, work: *float, iwork: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysv_rk :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, e: *float, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysv_rk_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, e: *float, ipiv: *s64, b: *float, ldb: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrf_rk :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, e: *float, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrf_rk_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, e: *float, ipiv: *s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytri_3 :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, e: *float, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytri_3_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, e: *float, ipiv: *s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrs_3 :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, e: *float, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrs_3_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, e: *float, ipiv: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhecon_3 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhecon_3_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, anorm: float64, rcond: *float64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhesv_rk :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhesv_rk_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrf_rk :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrf_rk_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetri_3 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetri_3_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrs_3 :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrs_3_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsycon_3 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, anorm: float64, rcond: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsycon_3_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, anorm: float64, rcond: *float64, work: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysv_aa :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysv_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysv_rk :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysv_rk_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrf_aa :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrf_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrf_rk :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrf_rk_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytri_3 :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytri_3_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrs_3 :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrs_3_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, e: *MKL_Complex16, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrs_aa :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrs_aa_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, ipiv: *s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbev_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, w: *float, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbev_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbevd_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, w: *float, z: *MKL_Complex8, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbevd_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbevx_2stage :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, q: *MKL_Complex8, ldq: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chbevx_2stage_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex8, ldab: s64, q: *MKL_Complex8, ldq: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheev_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheev_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, w: *float, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheevd_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheevd_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, w: *float, work: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheevr_2stage :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheevr_2stage_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, isuppz: *s64, work: *MKL_Complex8, lwork: s64, rwork: *float, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheevx_2stage :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cheevx_2stage_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *MKL_Complex8, ldz: s64, work: *MKL_Complex8, lwork: s64, rwork: *float, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chegv_2stage :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chegv_2stage_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, b: *MKL_Complex8, ldb: s64, w: *float, work: *MKL_Complex8, lwork: s64, rwork: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbev_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, w: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbev_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, w: *float64, z: *float64, ldz: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbevd_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, w: *float64, z: *float64, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbevd_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, w: *float64, z: *float64, ldz: s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbevx_2stage :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, q: *float64, ldq: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsbevx_2stage_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *float64, ldab: s64, q: *float64, ldq: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, work: *float64, lwork: s64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyev_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyev_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, w: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyevd_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyevd_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, w: *float64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyevr_2stage :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float64, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyevr_2stage_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float64, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, isuppz: *s64, work: *float64, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyevx_2stage :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float64, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsyevx_2stage_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float64, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *float64, ldz: s64, work: *float64, lwork: s64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsygv_2stage :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsygv_2stage_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *float64, lda: s64, b: *float64, ldb: s64, w: *float64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbev_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, w: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbev_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, w: *float, z: *float, ldz: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbevd_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, w: *float, z: *float, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbevd_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, w: *float, z: *float, ldz: s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbevx_2stage :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, q: *float, ldq: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssbevx_2stage_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *float, ldab: s64, q: *float, ldq: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, work: *float, lwork: s64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyev_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyev_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, w: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyevd_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyevd_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, w: *float, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyevr_2stage :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyevr_2stage_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, isuppz: *s64, work: *float, lwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyevx_2stage :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssyevx_2stage_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *float, lda: s64, vl: float, vu: float, il: s64, iu: s64, abstol: float, m: *s64, w: *float, z: *float, ldz: s64, work: *float, lwork: s64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssygv_2stage :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, w: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssygv_2stage_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *float, lda: s64, b: *float, ldb: s64, w: *float, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbev_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, w: *float64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbev_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbevd_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, w: *float64, z: *MKL_Complex16, ldz: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbevd_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbevx_2stage :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, q: *MKL_Complex16, ldq: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhbevx_2stage_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, kd: s64, ab: *MKL_Complex16, ldab: s64, q: *MKL_Complex16, ldq: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheev_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheev_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, w: *float64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheevd_2stage :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheevd_2stage_work :: (matrix_layout: s32, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, w: *float64, work: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheevr_2stage :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, isuppz: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheevr_2stage_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, isuppz: *s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, lrwork: s64, iwork: *s64, liwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheevx_2stage :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zheevx_2stage_work :: (matrix_layout: s32, jobz: u8, range: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, vl: float64, vu: float64, il: s64, iu: s64, abstol: float64, m: *s64, w: *float64, z: *MKL_Complex16, ldz: s64, work: *MKL_Complex16, lwork: s64, rwork: *float64, iwork: *s64, ifail: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhegv_2stage :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, w: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhegv_2stage_work :: (matrix_layout: s32, itype: s64, jobz: u8, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, b: *MKL_Complex16, ldb: s64, w: *float64, work: *MKL_Complex16, lwork: s64, rwork: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_cgetrfnp :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_cgetrfnp_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_dgetrfnp :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_dgetrfnp_work :: (matrix_layout: s32, m: s64, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_sgetrfnp :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_sgetrfnp_work :: (matrix_layout: s32, m: s64, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_zgetrfnp :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_zgetrfnp_work :: (matrix_layout: s32, m: s64, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_cgetrinp :: (matrix_layout: s32, n: s64, a: *MKL_Complex8, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_cgetrinp_work :: (matrix_layout: s32, n: s64, a: *MKL_Complex8, lda: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_dgetrinp :: (matrix_layout: s32, n: s64, a: *float64, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_dgetrinp_work :: (matrix_layout: s32, n: s64, a: *float64, lda: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_sgetrinp :: (matrix_layout: s32, n: s64, a: *float, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_sgetrinp_work :: (matrix_layout: s32, n: s64, a: *float, lda: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_zgetrinp :: (matrix_layout: s32, n: s64, a: *MKL_Complex16, lda: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_mkl_zgetrinp_work :: (matrix_layout: s32, n: s64, a: *MKL_Complex16, lda: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_set_nancheck :: (flag: s32) -> void #foreign mkl_intel_ilp64;

LAPACKE_get_nancheck :: () -> s32 #foreign mkl_intel_ilp64;

LAPACKE_chesv_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, tb: *MKL_Complex8, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrf_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, tb: *MKL_Complex8, ltb: s64, ipiv: *s64, ipiv2: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chesv_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, tb: *MKL_Complex8, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrf_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, tb: *MKL_Complex8, ltb: s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrs_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, tb: *MKL_Complex8, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_chetrs_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, tb: *MKL_Complex8, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysv_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, tb: *MKL_Complex8, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csysv_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, tb: *MKL_Complex8, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrf_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, tb: *MKL_Complex8, ltb: s64, ipiv: *s64, ipiv2: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrf_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex8, lda: s64, tb: *MKL_Complex8, ltb: s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrs_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, tb: *MKL_Complex8, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_csytrs_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex8, lda: s64, tb: *MKL_Complex8, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex8, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysv_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, tb: *float64, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsysv_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, tb: *float64, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrf_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, tb: *float64, ltb: s64, ipiv: *s64, ipiv2: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrf_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float64, lda: s64, tb: *float64, ltb: s64, ipiv: *s64, ipiv2: *s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrs_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, tb: *float64, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dsytrs_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float64, lda: s64, tb: *float64, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *float64, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysv_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, tb: *MKL_Complex16, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsysv_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, tb: *MKL_Complex16, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrf_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, tb: *MKL_Complex16, ltb: s64, ipiv: *s64, ipiv2: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrf_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, tb: *MKL_Complex16, ltb: s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrs_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, tb: *MKL_Complex16, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zsytrs_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, tb: *MKL_Complex16, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysv_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, tb: *float, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssysv_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, tb: *float, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrf_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, tb: *float, ltb: s64, ipiv: *s64, ipiv2: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrf_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *float, lda: s64, tb: *float, ltb: s64, ipiv: *s64, ipiv2: *s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrs_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, tb: *float, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_ssytrs_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *float, lda: s64, tb: *float, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *float, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhesv_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, tb: *MKL_Complex16, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhesv_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, tb: *MKL_Complex16, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrf_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, tb: *MKL_Complex16, ltb: s64, ipiv: *s64, ipiv2: *s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrf_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, a: *MKL_Complex16, lda: s64, tb: *MKL_Complex16, ltb: s64, ipiv: *s64, ipiv2: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrs_aa_2stage :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, tb: *MKL_Complex16, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zhetrs_aa_2stage_work :: (matrix_layout: s32, uplo: u8, n: s64, nrhs: s64, a: *MKL_Complex16, lda: s64, tb: *MKL_Complex16, ltb: s64, ipiv: *s64, ipiv2: *s64, b: *MKL_Complex16, ldb: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesvdq :: (matrix_layout: s32, joba: u8, jobp: u8, jobr: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *float, lda: s64, s: *float, u: *float, ldu: s64, v: *float, ldv: s64, numrank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sgesvdq_work :: (matrix_layout: s32, joba: u8, jobp: u8, jobr: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *float, lda: s64, s: *float, u: *float, ldu: s64, v: *float, ldv: s64, numrank: *s64, iwork: *s64, liwork: s64, work: *float, lwork: s64, rwork: *float, lrwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesvdq :: (matrix_layout: s32, joba: u8, jobp: u8, jobr: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *float64, lda: s64, s: *float64, u: *float64, ldu: s64, v: *float64, ldv: s64, numrank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dgesvdq_work :: (matrix_layout: s32, joba: u8, jobp: u8, jobr: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *float64, lda: s64, s: *float64, u: *float64, ldu: s64, v: *float64, ldv: s64, numrank: *s64, iwork: *s64, liwork: s64, work: *float64, lwork: s64, rwork: *float64, lrwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesvdq :: (matrix_layout: s32, joba: u8, jobp: u8, jobr: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, s: *float, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, numrank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cgesvdq_work :: (matrix_layout: s32, joba: u8, jobp: u8, jobr: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *MKL_Complex8, lda: s64, s: *float, u: *MKL_Complex8, ldu: s64, v: *MKL_Complex8, ldv: s64, numrank: *s64, iwork: *s64, liwork: s64, cwork: *MKL_Complex8, lcwork: s64, rwork: *float, lrwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesvdq :: (matrix_layout: s32, joba: u8, jobp: u8, jobr: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, numrank: *s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zgesvdq_work :: (matrix_layout: s32, joba: u8, jobp: u8, jobr: u8, jobu: u8, jobv: u8, m: s64, n: s64, a: *MKL_Complex16, lda: s64, s: *float64, u: *MKL_Complex16, ldu: s64, v: *MKL_Complex16, ldv: s64, numrank: *s64, iwork: *s64, liwork: s64, cwork: *MKL_Complex16, lcwork: s64, rwork: *float64, lrwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorhr_col :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *float, lda: s64, t: *float, ldt: s64, d: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorhr_col_work :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *float, lda: s64, t: *float, ldt: s64, d: *float) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorhr_col :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *float64, lda: s64, t: *float64, ldt: s64, d: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorhr_col_work :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *float64, lda: s64, t: *float64, ldt: s64, d: *float64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunhr_col :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, ldt: s64, d: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cunhr_col_work :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, ldt: s64, d: *MKL_Complex8) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunhr_col :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, ldt: s64, d: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zunhr_col_work :: (matrix_layout: s32, m: s64, n: s64, nb: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, ldt: s64, d: *MKL_Complex16) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorgtsqr :: (matrix_layout: s32, m: s64, n: s64, mb: s64, nb: s64, a: *float, lda: s64, t: *float, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_sorgtsqr_work :: (matrix_layout: s32, m: s64, n: s64, mb: s64, nb: s64, a: *float, lda: s64, t: *float, ldt: s64, work: *float, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorgtsqr :: (matrix_layout: s32, m: s64, n: s64, mb: s64, nb: s64, a: *float64, lda: s64, t: *float64, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_dorgtsqr_work :: (matrix_layout: s32, m: s64, n: s64, mb: s64, nb: s64, a: *float64, lda: s64, t: *float64, ldt: s64, work: *float64, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cungtsqr :: (matrix_layout: s32, m: s64, n: s64, mb: s64, nb: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_cungtsqr_work :: (matrix_layout: s32, m: s64, n: s64, mb: s64, nb: s64, a: *MKL_Complex8, lda: s64, t: *MKL_Complex8, ldt: s64, work: *MKL_Complex8, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zungtsqr :: (matrix_layout: s32, m: s64, n: s64, mb: s64, nb: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, ldt: s64) -> s64 #foreign mkl_intel_ilp64;

LAPACKE_zungtsqr_work :: (matrix_layout: s32, m: s64, n: s64, mb: s64, nb: s64, a: *MKL_Complex16, lda: s64, t: *MKL_Complex16, ldt: s64, work: *MKL_Complex16, lwork: s64) -> s64 #foreign mkl_intel_ilp64;

/*
** Basic data types
*/
_MKL_DSS_HANDLE_t :: *void;
_CHARACTER_t :: u8;
_CHARACTER_STR_t :: u8;

_LONG_t :: s64;

_REAL_t :: float;
_DOUBLE_PRECISION_t :: float64;

_DOUBLE_COMPLEX_t :: struct {
    r: float64;
    i: float64;
}
#run {
    instance: _DOUBLE_COMPLEX_t;
    assert(((cast(*void)(*instance.r)) - cast(*void)(*instance)) == 0, "_DOUBLE_COMPLEX_t.r has unexpected offset % instead of 0", ((cast(*void)(*instance.r)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DOUBLE_COMPLEX_t.r)) == 8, "_DOUBLE_COMPLEX_t.r has unexpected size % instead of 8", size_of(type_of(_DOUBLE_COMPLEX_t.r)));
    assert(((cast(*void)(*instance.i)) - cast(*void)(*instance)) == 8, "_DOUBLE_COMPLEX_t.i has unexpected offset % instead of 8", ((cast(*void)(*instance.i)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DOUBLE_COMPLEX_t.i)) == 8, "_DOUBLE_COMPLEX_t.i has unexpected size % instead of 8", size_of(type_of(_DOUBLE_COMPLEX_t.i)));
    assert(size_of(_DOUBLE_COMPLEX_t) == 16, "_DOUBLE_COMPLEX_t has size % instead of 16", size_of(_DOUBLE_COMPLEX_t));
}

dss_create_ :: (unk0: *_MKL_DSS_HANDLE_t, unk1: *s64) -> s64 #foreign mkl_intel_ilp64;

dss_define_structure_ :: (unk0: *_MKL_DSS_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *s64) -> s64 #foreign mkl_intel_ilp64;

dss_reorder_ :: (unk0: *_MKL_DSS_HANDLE_t, unk1: *s64, unk2: *s64) -> s64 #foreign mkl_intel_ilp64;

dss_factor_real_ :: (unk0: *_MKL_DSS_HANDLE_t, unk1: *s64, unk2: *void) -> s64 #foreign mkl_intel_ilp64;

dss_factor_complex_ :: (unk0: *_MKL_DSS_HANDLE_t, unk1: *s64, unk2: *void) -> s64 #foreign mkl_intel_ilp64;

dss_solve_real_ :: (unk0: *_MKL_DSS_HANDLE_t, unk1: *s64, unk2: *void, unk3: *s64, unk4: *void) -> s64 #foreign mkl_intel_ilp64;

dss_solve_complex_ :: (unk0: *_MKL_DSS_HANDLE_t, unk1: *s64, unk2: *void, unk3: *s64, unk4: *void) -> s64 #foreign mkl_intel_ilp64;

dss_statistics_ :: (unk0: *_MKL_DSS_HANDLE_t, unk1: *s64, unk2: *_CHARACTER_STR_t, unk3: *_DOUBLE_PRECISION_t) -> s64 #foreign mkl_intel_ilp64;

dss_delete_ :: (unk0: *_MKL_DSS_HANDLE_t, unk1: *s64) -> s64 #foreign mkl_intel_ilp64;

pardiso :: (unk0: _MKL_DSS_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *void, unk7: *s64, unk8: *s64, unk9: *s64, unk10: *s64, unk11: *s64, unk12: *s64, unk13: *void, unk14: *void, unk15: *s64) -> void #foreign mkl_intel_ilp64;

PARDISO :: (unk0: _MKL_DSS_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *void, unk7: *s64, unk8: *s64, unk9: *s64, unk10: *s64, unk11: *s64, unk12: *s64, unk13: *void, unk14: *void, unk15: *s64) -> void #foreign mkl_intel_ilp64;

pardisoinit :: (unk0: _MKL_DSS_HANDLE_t, unk1: *s64, unk2: *s64) -> void #foreign mkl_intel_ilp64;

PARDISOINIT :: (unk0: _MKL_DSS_HANDLE_t, unk1: *s64, unk2: *s64) -> void #foreign mkl_intel_ilp64;

pardiso_64 :: (unk0: _MKL_DSS_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *void, unk7: *s64, unk8: *s64, unk9: *s64, unk10: *s64, unk11: *s64, unk12: *s64, unk13: *void, unk14: *void, unk15: *s64) -> void #foreign mkl_intel_ilp64;

PARDISO_64 :: (unk0: _MKL_DSS_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *void, unk7: *s64, unk8: *s64, unk9: *s64, unk10: *s64, unk11: *s64, unk12: *s64, unk13: *void, unk14: *void, unk15: *s64) -> void #foreign mkl_intel_ilp64;

pardiso_handle_store_64 :: (unk0: _MKL_DSS_HANDLE_t, unk1: *u8, unk2: *s64) -> void #foreign mkl_intel_ilp64;
PARDISO_HANDLE_STORE_64 :: (unk0: _MKL_DSS_HANDLE_t, unk1: *u8, unk2: *s64) -> void #foreign mkl_intel_ilp64;

pardiso_handle_restore_64 :: (unk0: _MKL_DSS_HANDLE_t, unk1: *u8, unk2: *s64) -> void #foreign mkl_intel_ilp64;
PARDISO_HANDLE_RESTORE_64 :: (unk0: _MKL_DSS_HANDLE_t, unk1: *u8, unk2: *s64) -> void #foreign mkl_intel_ilp64;

pardiso_handle_delete_64 :: (unk0: *u8, unk1: *s64) -> void #foreign mkl_intel_ilp64;
PARDISO_HANDLE_DELETE_64 :: (unk0: *u8, unk1: *s64) -> void #foreign mkl_intel_ilp64;

pardiso_handle_store :: (unk0: _MKL_DSS_HANDLE_t, unk1: *u8, unk2: *s64) -> void #foreign mkl_intel_ilp64;
PARDISO_HANDLE_STORE :: (unk0: _MKL_DSS_HANDLE_t, unk1: *u8, unk2: *s64) -> void #foreign mkl_intel_ilp64;

pardiso_handle_restore :: (unk0: _MKL_DSS_HANDLE_t, unk1: *u8, unk2: *s64) -> void #foreign mkl_intel_ilp64;
PARDISO_HANDLE_RESTORE :: (unk0: _MKL_DSS_HANDLE_t, unk1: *u8, unk2: *s64) -> void #foreign mkl_intel_ilp64;

pardiso_handle_delete :: (unk0: *u8, unk1: *s64) -> void #foreign mkl_intel_ilp64;
PARDISO_HANDLE_DELETE :: (unk0: *u8, unk1: *s64) -> void #foreign mkl_intel_ilp64;

MKL_PARDISO_PIVOT :: (aii: *float64, bii: *float64, eps: *float64) -> s32 #foreign mkl_intel_ilp64;
MKL_PARDISO_PIVOT_ :: (aii: *float64, bii: *float64, eps: *float64) -> s32 #foreign mkl_intel_ilp64;
mkl_pardiso_pivot :: (aii: *float64, bii: *float64, eps: *float64) -> s32 #foreign mkl_intel_ilp64;
mkl_pardiso_pivot_ :: (aii: *float64, bii: *float64, eps: *float64) -> s32 #foreign mkl_intel_ilp64;

pardiso_getdiag :: (unk0: _MKL_DSS_HANDLE_t, unk1: *void, unk2: *void, unk3: *s64, unk4: *s64) -> void #foreign mkl_intel_ilp64;
pardiso_export :: (unk0: *void, unk1: *void, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *s64) -> void #foreign mkl_intel_ilp64;

sparse_matrix_indexing :: enum s32 {
    ZERO_BASED :: 0;
    ONE_BASED  :: 1;
    MKL_ZERO_BASED :: ZERO_BASED;
    MKL_ONE_BASED  :: ONE_BASED;
}
sparse_matrix_print_styles :: enum s32 {
    C_STYLE       :: 0;
    FORTRAN_STYLE :: 1;
    MKL_C_STYLE       :: C_STYLE;
    MKL_FORTRAN_STYLE :: FORTRAN_STYLE;
}
sparse_matrix_formats :: enum s32 {
    MKL_CSR :: 0;
}
sparse_matrix_structures :: enum s32 {
    GENERAL_STRUCTURE    :: 0;
    UPPER_TRIANGULAR     :: 1;
    LOWER_TRIANGULAR     :: 2;
    STRUCTURAL_SYMMETRIC :: 3;
    MKL_GENERAL_STRUCTURE    :: GENERAL_STRUCTURE;
    MKL_UPPER_TRIANGULAR     :: UPPER_TRIANGULAR;
    MKL_LOWER_TRIANGULAR     :: LOWER_TRIANGULAR;
    MKL_STRUCTURAL_SYMMETRIC :: STRUCTURAL_SYMMETRIC;
}
sparse_matrix_message_levels :: enum s32 {
    NO_PRINT :: 0;
    PRINT    :: 1;
    MKL_NO_PRINT :: NO_PRINT;
    MKL_PRINT    :: PRINT;
}
sparse_checker_error_values :: enum s32 {
    SUCCESS       :: 0;
    NON_MONOTONIC :: 21;
    OUT_OF_RANGE  :: 22;
    NONTRIANGULAR :: 23;
    NONORDERED    :: 24;
    MKL_SPARSE_CHECKER_SUCCESS       :: SUCCESS;
    MKL_SPARSE_CHECKER_NON_MONOTONIC :: NON_MONOTONIC;
    MKL_SPARSE_CHECKER_OUT_OF_RANGE  :: OUT_OF_RANGE;
    MKL_SPARSE_CHECKER_NONTRIANGULAR :: NONTRIANGULAR;
    MKL_SPARSE_CHECKER_NONORDERED    :: NONORDERED;
}

_sparse_struct :: struct {
    n:                s64;
    csr_ia:           *s64;
    csr_ja:           *s64;
    check_result:     [3] s64;
    indexing:         sparse_matrix_indexing;
    matrix_structure: sparse_matrix_structures;
    matrix_format:    sparse_matrix_formats;
    message_level:    sparse_matrix_message_levels;
    print_style:      sparse_matrix_print_styles;
}
#run {
    instance: _sparse_struct;
    assert(((cast(*void)(*instance.n)) - cast(*void)(*instance)) == 0, "_sparse_struct.n has unexpected offset % instead of 0", ((cast(*void)(*instance.n)) - cast(*void)(*instance)));
    assert(size_of(type_of(_sparse_struct.n)) == 8, "_sparse_struct.n has unexpected size % instead of 8", size_of(type_of(_sparse_struct.n)));
    assert(((cast(*void)(*instance.csr_ia)) - cast(*void)(*instance)) == 8, "_sparse_struct.csr_ia has unexpected offset % instead of 8", ((cast(*void)(*instance.csr_ia)) - cast(*void)(*instance)));
    assert(size_of(type_of(_sparse_struct.csr_ia)) == 8, "_sparse_struct.csr_ia has unexpected size % instead of 8", size_of(type_of(_sparse_struct.csr_ia)));
    assert(((cast(*void)(*instance.csr_ja)) - cast(*void)(*instance)) == 16, "_sparse_struct.csr_ja has unexpected offset % instead of 16", ((cast(*void)(*instance.csr_ja)) - cast(*void)(*instance)));
    assert(size_of(type_of(_sparse_struct.csr_ja)) == 8, "_sparse_struct.csr_ja has unexpected size % instead of 8", size_of(type_of(_sparse_struct.csr_ja)));
    assert(((cast(*void)(*instance.check_result)) - cast(*void)(*instance)) == 24, "_sparse_struct.check_result has unexpected offset % instead of 24", ((cast(*void)(*instance.check_result)) - cast(*void)(*instance)));
    assert(size_of(type_of(_sparse_struct.check_result)) == 24, "_sparse_struct.check_result has unexpected size % instead of 24", size_of(type_of(_sparse_struct.check_result)));
    assert(((cast(*void)(*instance.indexing)) - cast(*void)(*instance)) == 48, "_sparse_struct.indexing has unexpected offset % instead of 48", ((cast(*void)(*instance.indexing)) - cast(*void)(*instance)));
    assert(size_of(type_of(_sparse_struct.indexing)) == 4, "_sparse_struct.indexing has unexpected size % instead of 4", size_of(type_of(_sparse_struct.indexing)));
    assert(((cast(*void)(*instance.matrix_structure)) - cast(*void)(*instance)) == 52, "_sparse_struct.matrix_structure has unexpected offset % instead of 52", ((cast(*void)(*instance.matrix_structure)) - cast(*void)(*instance)));
    assert(size_of(type_of(_sparse_struct.matrix_structure)) == 4, "_sparse_struct.matrix_structure has unexpected size % instead of 4", size_of(type_of(_sparse_struct.matrix_structure)));
    assert(((cast(*void)(*instance.matrix_format)) - cast(*void)(*instance)) == 56, "_sparse_struct.matrix_format has unexpected offset % instead of 56", ((cast(*void)(*instance.matrix_format)) - cast(*void)(*instance)));
    assert(size_of(type_of(_sparse_struct.matrix_format)) == 4, "_sparse_struct.matrix_format has unexpected size % instead of 4", size_of(type_of(_sparse_struct.matrix_format)));
    assert(((cast(*void)(*instance.message_level)) - cast(*void)(*instance)) == 60, "_sparse_struct.message_level has unexpected offset % instead of 60", ((cast(*void)(*instance.message_level)) - cast(*void)(*instance)));
    assert(size_of(type_of(_sparse_struct.message_level)) == 4, "_sparse_struct.message_level has unexpected size % instead of 4", size_of(type_of(_sparse_struct.message_level)));
    assert(((cast(*void)(*instance.print_style)) - cast(*void)(*instance)) == 64, "_sparse_struct.print_style has unexpected offset % instead of 64", ((cast(*void)(*instance.print_style)) - cast(*void)(*instance)));
    assert(size_of(type_of(_sparse_struct.print_style)) == 4, "_sparse_struct.print_style has unexpected size % instead of 4", size_of(type_of(_sparse_struct.print_style)));
    assert(size_of(_sparse_struct) == 72, "_sparse_struct has size % instead of 72", size_of(_sparse_struct));
}

sparse_struct :: _sparse_struct;

sparse_matrix_checker_init :: (unk0: *sparse_struct) -> void #foreign mkl_intel_ilp64;
sparse_matrix_checker :: (unk0: *sparse_struct) -> sparse_checker_error_values #foreign mkl_intel_ilp64;

MKL_Get_Version :: (ver: *MKLVersion) -> void #foreign mkl_intel_ilp64;

MKL_Get_Version_String :: (buffer: *u8, len: s32) -> void #foreign mkl_intel_ilp64;

MKL_Free_Buffers :: () -> void #foreign mkl_intel_ilp64;

MKL_Thread_Free_Buffers :: () -> void #foreign mkl_intel_ilp64;

MKL_Mem_Stat :: (nbuffers: *s32) -> s64 #foreign mkl_intel_ilp64;

MKL_Peak_Mem_Usage :: (reset: s32) -> s64 #foreign mkl_intel_ilp64;

MKL_malloc :: (size: size_t, align: s32) -> *void #foreign mkl_intel_ilp64;

MKL_calloc :: (num: size_t, size: size_t, align: s32) -> *void #foreign mkl_intel_ilp64;

MKL_realloc :: (ptr: *void, size: size_t) -> *void #foreign mkl_intel_ilp64;

MKL_free :: (ptr: *void) -> void #foreign mkl_intel_ilp64;

MKL_Disable_Fast_MM :: () -> s32 #foreign mkl_intel_ilp64;

MKL_Get_Cpu_Clocks :: (unk0: *u64) -> void #foreign mkl_intel_ilp64;

MKL_Get_Cpu_Frequency :: () -> float64 #foreign mkl_intel_ilp64;

MKL_Get_Max_Cpu_Frequency :: () -> float64 #foreign mkl_intel_ilp64;

MKL_Get_Clocks_Frequency :: () -> float64 #foreign mkl_intel_ilp64;

MKL_Set_Num_Threads_Local :: (nth: s32) -> s32 #foreign mkl_intel_ilp64;

MKL_Set_Num_Threads :: (nth: s32) -> void #foreign mkl_intel_ilp64;

MKL_Get_Max_Threads :: () -> s32 #foreign mkl_intel_ilp64;

MKL_Set_Num_Stripes :: (nstripes: s32) -> void #foreign mkl_intel_ilp64;

MKL_Get_Num_Stripes :: () -> s32 #foreign mkl_intel_ilp64;

MKL_Domain_Set_Num_Threads :: (nth: s32, MKL_DOMAIN: s32) -> s32 #foreign mkl_intel_ilp64;

MKL_Domain_Get_Max_Threads :: (MKL_DOMAIN: s32) -> s32 #foreign mkl_intel_ilp64;

MKL_Set_Dynamic :: (bool_MKL_DYNAMIC: s32) -> void #foreign mkl_intel_ilp64;

MKL_Get_Dynamic :: () -> s32 #foreign mkl_intel_ilp64;

MKL_Enable_Instructions :: (unk0: s32) -> s32 #foreign mkl_intel_ilp64;

XerblaEntry :: #type (a0: *u8, a1: *s32, a2: s32) -> void #c_call;
mkl_set_xerbla :: (xerbla: XerblaEntry) -> XerblaEntry #foreign mkl_intel_ilp64;

ProgressEntry :: #type (a0: *s32, a1: *s32, a2: *u8, a3: s32) -> s32 #c_call;
mkl_set_progress :: (progress: ProgressEntry) -> ProgressEntry #foreign mkl_intel_ilp64;

PardisopivotEntry :: #type (a0: *float64, a1: *float64, a2: *float64) -> s32 #c_call;
mkl_set_pardiso_pivot :: (pardiso_pivot: PardisopivotEntry) -> PardisopivotEntry #foreign mkl_intel_ilp64;

/* oneMKL CBWR */
MKL_CBWR_Get :: (unk0: s32) -> s32 #foreign mkl_intel_ilp64;

MKL_CBWR_Set :: (unk0: s32) -> s32 #foreign mkl_intel_ilp64;

MKL_CBWR_Get_Auto_Branch :: () -> s32 #foreign mkl_intel_ilp64;

/* oneMKL Verbose */
MKL_Set_Env_Mode :: (unk0: s32) -> s32 #foreign mkl_intel_ilp64;

MKL_Verbose :: (unk0: s32) -> s32 #foreign mkl_intel_ilp64;

MKL_Verbose_Output_File :: (fname: *u8) -> s32 #foreign mkl_intel_ilp64;

MKLExitHandler :: #type (a0: s32) -> void #c_call;
MKL_Set_Exit_Handler :: (h: MKLExitHandler) -> void #foreign mkl_intel_ilp64;

/* oneMKL MPI */
MKL_BLACS :: enum s32 {
    CUSTOM   :: 0;
    MSMPI    :: 1;
    INTELMPI :: 2;

    LASTMPI  :: 3;

    MKL_BLACS_CUSTOM   :: CUSTOM;
    MKL_BLACS_MSMPI    :: MSMPI;
    MKL_BLACS_INTELMPI :: INTELMPI;

    MKL_BLACS_LASTMPI  :: LASTMPI;
}

MKL_Set_mpi :: (vendor: s32, custom_library_name: *u8) -> s32 #foreign mkl_intel_ilp64;

MKL_Set_Memory_Limit :: (mem_type: s32, limit: size_t) -> s32 #foreign mkl_intel_ilp64;

MKL_Finalize :: () -> void #foreign mkl_intel_ilp64;

dcsrilu0 :: (n: *s64, a: *float64, ia: *s64, ja: *s64, alu: *float64, ipar: *s64, dpar: *float64, ierr: *s64) -> void #foreign mkl_intel_ilp64;
dcsrilut :: (n: *s64, a: *float64, ia: *s64, ja: *s64, alut: *float64, ialut: *s64, jalut: *s64, tol: *float64, maxfil: *s64, ipar: *s64, dpar: *float64, ierr: *s64) -> void #foreign mkl_intel_ilp64;

DCSRILU0 :: (n: *s64, a: *float64, ia: *s64, ja: *s64, alu: *float64, ipar: *s64, dpar: *float64, ierr: *s64) -> void #foreign mkl_intel_ilp64;
DCSRILUT :: (n: *s64, a: *float64, ia: *s64, ja: *s64, alut: *float64, ialut: *s64, jalut: *s64, tol: *float64, maxfil: *s64, ipar: *s64, dpar: *float64, ierr: *s64) -> void #foreign mkl_intel_ilp64;

dcg_init :: (n: *s64, x: *float64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
dcg_check :: (n: *s64, x: *float64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
dcg :: (n: *s64, x: *float64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
dcg_get :: (n: *s64, x: *float64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64, itercount: *s64) -> void #foreign mkl_intel_ilp64;

dcgmrhs_init :: (n: *s64, x: *float64, nRhs: *s64, b: *float64, method: *s64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
dcgmrhs_check :: (n: *s64, x: *float64, nRhs: *s64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
dcgmrhs :: (n: *s64, x: *float64, nRhs: *s64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
dcgmrhs_get :: (n: *s64, x: *float64, nRhs: *s64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64, itercount: *s64) -> void #foreign mkl_intel_ilp64;

dfgmres_init :: (n: *s64, x: *float64, b: *float64, RCI_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
dfgmres_check :: (n: *s64, x: *float64, b: *float64, RCI_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
dfgmres :: (n: *s64, x: *float64, b: *float64, RCI_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
dfgmres_get :: (n: *s64, x: *float64, b: *float64, RCI_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64, itercount: *s64) -> void #foreign mkl_intel_ilp64;

DCG_INIT :: (n: *s64, x: *float64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
DCG_CHECK :: (n: *s64, x: *float64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
DCG :: (n: *s64, x: *float64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
DCG_GET :: (n: *s64, x: *float64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64, itercount: *s64) -> void #foreign mkl_intel_ilp64;

DCGMRHS_INIT :: (n: *s64, x: *float64, nRhs: *s64, b: *float64, method: *s64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
DCGMRHS_CHECK :: (n: *s64, x: *float64, nRhs: *s64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
DCGMRHS :: (n: *s64, x: *float64, nRhs: *s64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
DCGMRHS_GET :: (n: *s64, x: *float64, nRhs: *s64, b: *float64, rci_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64, itercount: *s64) -> void #foreign mkl_intel_ilp64;

DFGMRES_INIT :: (n: *s64, x: *float64, b: *float64, RCI_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
DFGMRES_CHECK :: (n: *s64, x: *float64, b: *float64, RCI_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
DFGMRES :: (n: *s64, x: *float64, b: *float64, RCI_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64) -> void #foreign mkl_intel_ilp64;
DFGMRES_GET :: (n: *s64, x: *float64, b: *float64, RCI_request: *s64, ipar: *s64, dpar: *float64, tmp: *float64, itercount: *s64) -> void #foreign mkl_intel_ilp64;

/* Basic data types */
_TRNSP_HANDLE_t :: *void;
_TRNSPBC_HANDLE_t :: *void;
_JACOBIMATRIX_HANDLE_t :: *void;

USRFCND :: #type (a0: *s64, a1: *s64, a2: *float64, a3: *float64) -> void #c_call;
USRFCNXD :: #type (a0: *s64, a1: *s64, a2: *float64, a3: *float64, a4: *void) -> void #c_call;

USRFCNS :: #type (a0: *s64, a1: *s64, a2: *float, a3: *float) -> void #c_call;
USRFCNXS :: #type (a0: *s64, a1: *s64, a2: *float, a3: *float, a4: *void) -> void #c_call;

dtrnlsp_init :: (unk0: *_TRNSP_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *s64, unk6: *s64, unk7: *float64) -> s64 #foreign mkl_intel_ilp64;
dtrnlsp_check :: (unk0: *_TRNSP_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *s64) -> s64 #foreign mkl_intel_ilp64;
dtrnlsp_solve :: (unk0: *_TRNSP_HANDLE_t, unk1: *float64, unk2: *float64, unk3: *s64) -> s64 #foreign mkl_intel_ilp64;
dtrnlsp_get :: (unk0: *_TRNSP_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *float64) -> s64 #foreign mkl_intel_ilp64;
dtrnlsp_delete :: (unk0: *_TRNSP_HANDLE_t) -> s64 #foreign mkl_intel_ilp64;

dtrnlspbc_init :: (unk0: *_TRNSPBC_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *s64, unk8: *s64, unk9: *float64) -> s64 #foreign mkl_intel_ilp64;
dtrnlspbc_check :: (unk0: *_TRNSPBC_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *float64, unk8: *s64) -> s64 #foreign mkl_intel_ilp64;
dtrnlspbc_solve :: (unk0: *_TRNSPBC_HANDLE_t, unk1: *float64, unk2: *float64, unk3: *s64) -> s64 #foreign mkl_intel_ilp64;
dtrnlspbc_get :: (unk0: *_TRNSPBC_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *float64) -> s64 #foreign mkl_intel_ilp64;
dtrnlspbc_delete :: (unk0: *_TRNSPBC_HANDLE_t) -> s64 #foreign mkl_intel_ilp64;

djacobi_init :: (unk0: *_JACOBIMATRIX_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s64 #foreign mkl_intel_ilp64;
djacobi_solve :: (unk0: *_JACOBIMATRIX_HANDLE_t, unk1: *float64, unk2: *float64, unk3: *s64) -> s64 #foreign mkl_intel_ilp64;
djacobi_delete :: (unk0: *_JACOBIMATRIX_HANDLE_t) -> s64 #foreign mkl_intel_ilp64;
djacobi :: (fcn: USRFCND, unk0: *s64, unk1: *s64, unk2: *float64, unk3: *float64, unk4: *float64) -> s64 #foreign mkl_intel_ilp64;
djacobix :: (fcn: USRFCNXD, unk0: *s64, unk1: *s64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *void) -> s64 #foreign mkl_intel_ilp64;

strnlsp_init :: (unk0: *_TRNSP_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float, unk4: *float, unk5: *s64, unk6: *s64, unk7: *float) -> s64 #foreign mkl_intel_ilp64;
strnlsp_check :: (unk0: *_TRNSP_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float, unk4: *float, unk5: *float, unk6: *s64) -> s64 #foreign mkl_intel_ilp64;
strnlsp_solve :: (unk0: *_TRNSP_HANDLE_t, unk1: *float, unk2: *float, unk3: *s64) -> s64 #foreign mkl_intel_ilp64;
strnlsp_get :: (unk0: *_TRNSP_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float, unk4: *float) -> s64 #foreign mkl_intel_ilp64;
strnlsp_delete :: (unk0: *_TRNSP_HANDLE_t) -> s64 #foreign mkl_intel_ilp64;

strnlspbc_init :: (unk0: *_TRNSPBC_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *s64, unk8: *s64, unk9: *float) -> s64 #foreign mkl_intel_ilp64;
strnlspbc_check :: (unk0: *_TRNSPBC_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *float, unk8: *s64) -> s64 #foreign mkl_intel_ilp64;
strnlspbc_solve :: (unk0: *_TRNSPBC_HANDLE_t, unk1: *float, unk2: *float, unk3: *s64) -> s64 #foreign mkl_intel_ilp64;
strnlspbc_get :: (unk0: *_TRNSPBC_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float, unk4: *float) -> s64 #foreign mkl_intel_ilp64;
strnlspbc_delete :: (unk0: *_TRNSPBC_HANDLE_t) -> s64 #foreign mkl_intel_ilp64;

sjacobi_init :: (unk0: *_JACOBIMATRIX_HANDLE_t, unk1: *s64, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s64 #foreign mkl_intel_ilp64;
sjacobi_solve :: (unk0: *_JACOBIMATRIX_HANDLE_t, unk1: *float, unk2: *float, unk3: *s64) -> s64 #foreign mkl_intel_ilp64;
sjacobi_delete :: (unk0: *_JACOBIMATRIX_HANDLE_t) -> s64 #foreign mkl_intel_ilp64;
sjacobi :: (fcn: USRFCNS, unk0: *s64, unk1: *s64, unk2: *float, unk3: *float, unk4: *float) -> s64 #foreign mkl_intel_ilp64;
sjacobix :: (fcn: USRFCNXS, unk0: *s64, unk1: *s64, unk2: *float, unk3: *float, unk4: *float, unk5: *void) -> s64 #foreign mkl_intel_ilp64;

/*
//  ERROR CALLBACK CONTEXT.
//  Error callback context structure is used in a user's error callback
//  function with the following interface:
//
//      int USER_CALLBACK_FUNC_NAME( DefVmlErrorContext par )
//
//  Error callback context fields:
//  iCode        - error status
//  iIndex       - index of bad argument
//  dbA1         - 1-st argument value, at which error occured
//  dbA2         - 2-nd argument value, at which error occured
//                 (2-argument functions only)
//  dbR1         - 1-st resulting value
//  dbR2         - 2-nd resulting value (2-result functions only)
//  cFuncName    - function name, for which error occured
//  iFuncNameLen - length of function name
*/
_DefVmlErrorContext :: struct {
    iCode:        s32;
    iIndex:       s32;
    dbA1:         float64;
    dbA2:         float64;
    dbR1:         float64;
    dbR2:         float64;
    cFuncName:    [64] u8;
    iFuncNameLen: s32;
    dbA1Im:       float64;
    dbA2Im:       float64;
    dbR1Im:       float64;
    dbR2Im:       float64;
}
#run {
    instance: _DefVmlErrorContext;
    assert(((cast(*void)(*instance.iCode)) - cast(*void)(*instance)) == 0, "_DefVmlErrorContext.iCode has unexpected offset % instead of 0", ((cast(*void)(*instance.iCode)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DefVmlErrorContext.iCode)) == 4, "_DefVmlErrorContext.iCode has unexpected size % instead of 4", size_of(type_of(_DefVmlErrorContext.iCode)));
    assert(((cast(*void)(*instance.iIndex)) - cast(*void)(*instance)) == 4, "_DefVmlErrorContext.iIndex has unexpected offset % instead of 4", ((cast(*void)(*instance.iIndex)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DefVmlErrorContext.iIndex)) == 4, "_DefVmlErrorContext.iIndex has unexpected size % instead of 4", size_of(type_of(_DefVmlErrorContext.iIndex)));
    assert(((cast(*void)(*instance.dbA1)) - cast(*void)(*instance)) == 8, "_DefVmlErrorContext.dbA1 has unexpected offset % instead of 8", ((cast(*void)(*instance.dbA1)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DefVmlErrorContext.dbA1)) == 8, "_DefVmlErrorContext.dbA1 has unexpected size % instead of 8", size_of(type_of(_DefVmlErrorContext.dbA1)));
    assert(((cast(*void)(*instance.dbA2)) - cast(*void)(*instance)) == 16, "_DefVmlErrorContext.dbA2 has unexpected offset % instead of 16", ((cast(*void)(*instance.dbA2)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DefVmlErrorContext.dbA2)) == 8, "_DefVmlErrorContext.dbA2 has unexpected size % instead of 8", size_of(type_of(_DefVmlErrorContext.dbA2)));
    assert(((cast(*void)(*instance.dbR1)) - cast(*void)(*instance)) == 24, "_DefVmlErrorContext.dbR1 has unexpected offset % instead of 24", ((cast(*void)(*instance.dbR1)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DefVmlErrorContext.dbR1)) == 8, "_DefVmlErrorContext.dbR1 has unexpected size % instead of 8", size_of(type_of(_DefVmlErrorContext.dbR1)));
    assert(((cast(*void)(*instance.dbR2)) - cast(*void)(*instance)) == 32, "_DefVmlErrorContext.dbR2 has unexpected offset % instead of 32", ((cast(*void)(*instance.dbR2)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DefVmlErrorContext.dbR2)) == 8, "_DefVmlErrorContext.dbR2 has unexpected size % instead of 8", size_of(type_of(_DefVmlErrorContext.dbR2)));
    assert(((cast(*void)(*instance.cFuncName)) - cast(*void)(*instance)) == 40, "_DefVmlErrorContext.cFuncName has unexpected offset % instead of 40", ((cast(*void)(*instance.cFuncName)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DefVmlErrorContext.cFuncName)) == 64, "_DefVmlErrorContext.cFuncName has unexpected size % instead of 64", size_of(type_of(_DefVmlErrorContext.cFuncName)));
    assert(((cast(*void)(*instance.iFuncNameLen)) - cast(*void)(*instance)) == 104, "_DefVmlErrorContext.iFuncNameLen has unexpected offset % instead of 104", ((cast(*void)(*instance.iFuncNameLen)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DefVmlErrorContext.iFuncNameLen)) == 4, "_DefVmlErrorContext.iFuncNameLen has unexpected size % instead of 4", size_of(type_of(_DefVmlErrorContext.iFuncNameLen)));
    assert(((cast(*void)(*instance.dbA1Im)) - cast(*void)(*instance)) == 112, "_DefVmlErrorContext.dbA1Im has unexpected offset % instead of 112", ((cast(*void)(*instance.dbA1Im)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DefVmlErrorContext.dbA1Im)) == 8, "_DefVmlErrorContext.dbA1Im has unexpected size % instead of 8", size_of(type_of(_DefVmlErrorContext.dbA1Im)));
    assert(((cast(*void)(*instance.dbA2Im)) - cast(*void)(*instance)) == 120, "_DefVmlErrorContext.dbA2Im has unexpected offset % instead of 120", ((cast(*void)(*instance.dbA2Im)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DefVmlErrorContext.dbA2Im)) == 8, "_DefVmlErrorContext.dbA2Im has unexpected size % instead of 8", size_of(type_of(_DefVmlErrorContext.dbA2Im)));
    assert(((cast(*void)(*instance.dbR1Im)) - cast(*void)(*instance)) == 128, "_DefVmlErrorContext.dbR1Im has unexpected offset % instead of 128", ((cast(*void)(*instance.dbR1Im)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DefVmlErrorContext.dbR1Im)) == 8, "_DefVmlErrorContext.dbR1Im has unexpected size % instead of 8", size_of(type_of(_DefVmlErrorContext.dbR1Im)));
    assert(((cast(*void)(*instance.dbR2Im)) - cast(*void)(*instance)) == 136, "_DefVmlErrorContext.dbR2Im has unexpected offset % instead of 136", ((cast(*void)(*instance.dbR2Im)) - cast(*void)(*instance)));
    assert(size_of(type_of(_DefVmlErrorContext.dbR2Im)) == 8, "_DefVmlErrorContext.dbR2Im has unexpected size % instead of 8", size_of(type_of(_DefVmlErrorContext.dbR2Im)));
    assert(size_of(_DefVmlErrorContext) == 144, "_DefVmlErrorContext has size % instead of 144", size_of(_DefVmlErrorContext));
}

/*
//  ERROR CALLBACK CONTEXT.
//  Error callback context structure is used in a user's error callback
//  function with the following interface:
//
//      int USER_CALLBACK_FUNC_NAME( DefVmlErrorContext par )
//
//  Error callback context fields:
//  iCode        - error status
//  iIndex       - index of bad argument
//  dbA1         - 1-st argument value, at which error occured
//  dbA2         - 2-nd argument value, at which error occured
//                 (2-argument functions only)
//  dbR1         - 1-st resulting value
//  dbR2         - 2-nd resulting value (2-result functions only)
//  cFuncName    - function name, for which error occured
//  iFuncNameLen - length of function name
*/
DefVmlErrorContext :: _DefVmlErrorContext;

/*
// User error callback handler function type
*/
VMLErrorCallBack :: #type (a0: *DefVmlErrorContext) -> s32 #c_call;

VSABS :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDABS :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsabs :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdabs :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsAbs :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdAbs :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSABS :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDABS :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsabs :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdabs :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAbs :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAbs :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCABS :: (n: *s64, a: *MKL_Complex8, r: *float) -> void #foreign mkl_intel_ilp64;
VZABS :: (n: *s64, a: *MKL_Complex16, r: *float64) -> void #foreign mkl_intel_ilp64;
vcabs :: (n: *s64, a: *MKL_Complex8, r: *float) -> void #foreign mkl_intel_ilp64;
vzabs :: (n: *s64, a: *MKL_Complex16, r: *float64) -> void #foreign mkl_intel_ilp64;
vcAbs :: (n: s64, a: *MKL_Complex8, r: *float) -> void #foreign mkl_intel_ilp64;
vzAbs :: (n: s64, a: *MKL_Complex16, r: *float64) -> void #foreign mkl_intel_ilp64;

VMCABS :: (n: *s64, a: *MKL_Complex8, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZABS :: (n: *s64, a: *MKL_Complex16, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcabs :: (n: *s64, a: *MKL_Complex8, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzabs :: (n: *s64, a: *MKL_Complex16, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAbs :: (n: s64, a: *MKL_Complex8, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAbs :: (n: s64, a: *MKL_Complex16, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCARG :: (n: *s64, a: *MKL_Complex8, r: *float) -> void #foreign mkl_intel_ilp64;
VZARG :: (n: *s64, a: *MKL_Complex16, r: *float64) -> void #foreign mkl_intel_ilp64;
vcarg :: (n: *s64, a: *MKL_Complex8, r: *float) -> void #foreign mkl_intel_ilp64;
vzarg :: (n: *s64, a: *MKL_Complex16, r: *float64) -> void #foreign mkl_intel_ilp64;
vcArg :: (n: s64, a: *MKL_Complex8, r: *float) -> void #foreign mkl_intel_ilp64;
vzArg :: (n: s64, a: *MKL_Complex16, r: *float64) -> void #foreign mkl_intel_ilp64;

VMCARG :: (n: *s64, a: *MKL_Complex8, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZARG :: (n: *s64, a: *MKL_Complex16, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcarg :: (n: *s64, a: *MKL_Complex8, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzarg :: (n: *s64, a: *MKL_Complex16, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcArg :: (n: s64, a: *MKL_Complex8, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzArg :: (n: s64, a: *MKL_Complex16, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSADD :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDADD :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsadd :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdadd :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsAdd :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdAdd :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSADD :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDADD :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsadd :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdadd :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAdd :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAdd :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCADD :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZADD :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcadd :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzadd :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcAdd :: (n: s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzAdd :: (n: s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCADD :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZADD :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcadd :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzadd :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAdd :: (n: s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAdd :: (n: s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSUB :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDSUB :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vssub :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdsub :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsSub :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdSub :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSSUB :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSUB :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssub :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsub :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSub :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSub :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCSUB :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZSUB :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcsub :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzsub :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcSub :: (n: s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzSub :: (n: s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCSUB :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZSUB :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcsub :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzsub :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcSub :: (n: s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzSub :: (n: s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSINV :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDINV :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsinv :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdinv :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsInv :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdInv :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSINV :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDINV :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsinv :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdinv :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsInv :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdInv :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSQRT :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDSQRT :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vssqrt :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdsqrt :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsSqrt :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdSqrt :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSSQRT :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSQRT :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssqrt :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsqrt :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSqrt :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSqrt :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCSQRT :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZSQRT :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcsqrt :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzsqrt :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcSqrt :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzSqrt :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCSQRT :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZSQRT :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcsqrt :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzsqrt :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcSqrt :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzSqrt :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSINVSQRT :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDINVSQRT :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsinvsqrt :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdinvsqrt :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsInvSqrt :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdInvSqrt :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSINVSQRT :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDINVSQRT :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsinvsqrt :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdinvsqrt :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsInvSqrt :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdInvSqrt :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCBRT :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDCBRT :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vscbrt :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdcbrt :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsCbrt :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdCbrt :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSCBRT :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCBRT :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscbrt :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcbrt :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCbrt :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCbrt :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSINVCBRT :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDINVCBRT :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsinvcbrt :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdinvcbrt :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsInvCbrt :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdInvCbrt :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSINVCBRT :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDINVCBRT :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsinvcbrt :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdinvcbrt :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsInvCbrt :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdInvCbrt :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSQR :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDSQR :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vssqr :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdsqr :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsSqr :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdSqr :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSSQR :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSQR :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssqr :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsqr :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSqr :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSqr :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSEXP :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDEXP :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsexp :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdexp :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsExp :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdExp :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSEXP :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDEXP :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsexp :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdexp :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsExp :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdExp :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCEXP :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZEXP :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcexp :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzexp :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcExp :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzExp :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCEXP :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZEXP :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcexp :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzexp :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcExp :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzExp :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSEXP2 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDEXP2 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsexp2 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdexp2 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsExp2 :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdExp2 :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSEXP2 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDEXP2 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsexp2 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdexp2 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsExp2 :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdExp2 :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSEXP10 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDEXP10 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsexp10 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdexp10 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsExp10 :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdExp10 :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSEXP10 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDEXP10 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsexp10 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdexp10 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsExp10 :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdExp10 :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSEXPM1 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDEXPM1 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsexpm1 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdexpm1 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsExpm1 :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdExpm1 :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSEXPM1 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDEXPM1 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsexpm1 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdexpm1 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsExpm1 :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdExpm1 :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLN :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDLN :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsln :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdln :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsLn :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdLn :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSLN :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLN :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsln :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdln :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLn :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLn :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCLN :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZLN :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcln :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzln :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcLn :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzLn :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCLN :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZLN :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcln :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzln :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcLn :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzLn :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLOG2 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDLOG2 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vslog2 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdlog2 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsLog2 :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdLog2 :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSLOG2 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLOG2 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmslog2 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdlog2 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLog2 :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLog2 :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLOG10 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDLOG10 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vslog10 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdlog10 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsLog10 :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdLog10 :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSLOG10 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLOG10 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmslog10 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdlog10 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLog10 :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLog10 :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCLOG10 :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZLOG10 :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vclog10 :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzlog10 :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcLog10 :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzLog10 :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCLOG10 :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZLOG10 :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmclog10 :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzlog10 :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcLog10 :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzLog10 :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLOG1P :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDLOG1P :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vslog1p :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdlog1p :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsLog1p :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdLog1p :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSLOG1P :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLOG1P :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmslog1p :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdlog1p :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLog1p :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLog1p :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLOGB :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDLOGB :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vslogb :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdlogb :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsLogb :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdLogb :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSLOGB :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLOGB :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmslogb :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdlogb :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLogb :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLogb :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCOS :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDCOS :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vscos :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdcos :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsCos :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdCos :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSCOS :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCOS :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscos :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcos :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCos :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCos :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCCOS :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZCOS :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vccos :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzcos :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcCos :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzCos :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCCOS :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZCOS :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmccos :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzcos :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcCos :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzCos :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSIN :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDSIN :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vssin :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdsin :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsSin :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdSin :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSSIN :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSIN :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssin :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsin :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSin :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSin :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCSIN :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZSIN :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcsin :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzsin :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcSin :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzSin :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCSIN :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZSIN :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcsin :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzsin :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcSin :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzSin :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSTAN :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDTAN :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vstan :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdtan :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsTan :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdTan :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSTAN :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDTAN :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmstan :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdtan :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsTan :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdTan :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCTAN :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZTAN :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vctan :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vztan :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcTan :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzTan :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCTAN :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZTAN :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmctan :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmztan :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcTan :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzTan :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCOSPI :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDCOSPI :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vscospi :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdcospi :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsCospi :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdCospi :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSCOSPI :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCOSPI :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscospi :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcospi :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCospi :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCospi :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSINPI :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDSINPI :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vssinpi :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdsinpi :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsSinpi :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdSinpi :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSSINPI :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSINPI :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssinpi :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsinpi :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSinpi :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSinpi :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSTANPI :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDTANPI :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vstanpi :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdtanpi :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsTanpi :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdTanpi :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSTANPI :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDTANPI :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmstanpi :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdtanpi :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsTanpi :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdTanpi :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCOSD :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDCOSD :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vscosd :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdcosd :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsCosd :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdCosd :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSCOSD :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCOSD :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscosd :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcosd :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCosd :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCosd :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSIND :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDSIND :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vssind :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdsind :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsSind :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdSind :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSSIND :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSIND :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssind :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsind :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSind :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSind :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSTAND :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDTAND :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vstand :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdtand :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsTand :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdTand :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSTAND :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDTAND :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmstand :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdtand :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsTand :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdTand :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCOSH :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDCOSH :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vscosh :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdcosh :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsCosh :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdCosh :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSCOSH :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCOSH :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscosh :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcosh :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCosh :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCosh :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCCOSH :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZCOSH :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vccosh :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzcosh :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcCosh :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzCosh :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCCOSH :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZCOSH :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmccosh :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzcosh :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcCosh :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzCosh :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSINH :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDSINH :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vssinh :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdsinh :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsSinh :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdSinh :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSSINH :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSINH :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssinh :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsinh :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSinh :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSinh :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCSINH :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZSINH :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcsinh :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzsinh :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcSinh :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzSinh :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCSINH :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZSINH :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcsinh :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzsinh :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcSinh :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzSinh :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSTANH :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDTANH :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vstanh :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdtanh :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsTanh :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdTanh :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSTANH :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDTANH :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmstanh :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdtanh :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsTanh :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdTanh :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCTANH :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZTANH :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vctanh :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vztanh :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcTanh :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzTanh :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCTANH :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZTANH :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmctanh :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmztanh :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcTanh :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzTanh :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSACOS :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDACOS :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsacos :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdacos :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsAcos :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdAcos :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSACOS :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDACOS :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsacos :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdacos :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAcos :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAcos :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCACOS :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZACOS :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcacos :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzacos :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcAcos :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzAcos :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCACOS :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZACOS :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcacos :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzacos :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAcos :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAcos :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSASIN :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDASIN :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsasin :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdasin :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsAsin :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdAsin :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSASIN :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDASIN :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsasin :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdasin :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAsin :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAsin :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCASIN :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZASIN :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcasin :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzasin :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcAsin :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzAsin :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCASIN :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZASIN :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcasin :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzasin :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAsin :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAsin :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSATAN :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDATAN :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsatan :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdatan :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsAtan :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdAtan :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSATAN :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDATAN :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsatan :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdatan :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAtan :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAtan :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCATAN :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZATAN :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcatan :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzatan :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcAtan :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzAtan :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCATAN :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZATAN :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcatan :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzatan :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAtan :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAtan :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSACOSPI :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDACOSPI :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsacospi :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdacospi :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsAcospi :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdAcospi :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSACOSPI :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDACOSPI :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsacospi :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdacospi :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAcospi :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAcospi :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSASINPI :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDASINPI :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsasinpi :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdasinpi :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsAsinpi :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdAsinpi :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSASINPI :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDASINPI :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsasinpi :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdasinpi :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAsinpi :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAsinpi :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSATANPI :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDATANPI :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsatanpi :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdatanpi :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsAtanpi :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdAtanpi :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSATANPI :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDATANPI :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsatanpi :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdatanpi :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAtanpi :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAtanpi :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSACOSH :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDACOSH :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsacosh :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdacosh :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsAcosh :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdAcosh :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSACOSH :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDACOSH :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsacosh :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdacosh :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAcosh :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAcosh :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCACOSH :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZACOSH :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcacosh :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzacosh :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcAcosh :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzAcosh :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCACOSH :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZACOSH :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcacosh :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzacosh :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAcosh :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAcosh :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSASINH :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDASINH :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsasinh :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdasinh :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsAsinh :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdAsinh :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSASINH :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDASINH :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsasinh :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdasinh :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAsinh :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAsinh :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCASINH :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZASINH :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcasinh :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzasinh :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcAsinh :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzAsinh :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCASINH :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZASINH :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcasinh :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzasinh :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAsinh :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAsinh :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSATANH :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDATANH :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsatanh :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdatanh :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsAtanh :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdAtanh :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSATANH :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDATANH :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsatanh :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdatanh :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAtanh :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAtanh :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCATANH :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZATANH :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcatanh :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzatanh :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcAtanh :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzAtanh :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCATANH :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZATANH :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcatanh :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzatanh :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAtanh :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAtanh :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSERF :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDERF :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vserf :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vderf :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsErf :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdErf :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSERF :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDERF :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmserf :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmderf :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsErf :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdErf :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSERFINV :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDERFINV :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vserfinv :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vderfinv :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsErfInv :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdErfInv :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSERFINV :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDERFINV :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmserfinv :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmderfinv :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsErfInv :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdErfInv :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSHYPOT :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDHYPOT :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vshypot :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdhypot :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsHypot :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdHypot :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSHYPOT :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDHYPOT :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmshypot :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdhypot :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsHypot :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdHypot :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSERFC :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDERFC :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vserfc :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vderfc :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsErfc :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdErfc :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSERFC :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDERFC :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmserfc :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmderfc :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsErfc :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdErfc :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSERFCINV :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDERFCINV :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vserfcinv :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vderfcinv :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsErfcInv :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdErfcInv :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSERFCINV :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDERFCINV :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmserfcinv :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmderfcinv :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsErfcInv :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdErfcInv :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCDFNORM :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDCDFNORM :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vscdfnorm :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdcdfnorm :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsCdfNorm :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdCdfNorm :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSCDFNORM :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCDFNORM :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscdfnorm :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcdfnorm :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCdfNorm :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCdfNorm :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCDFNORMINV :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDCDFNORMINV :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vscdfnorminv :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdcdfnorminv :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsCdfNormInv :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdCdfNormInv :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSCDFNORMINV :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCDFNORMINV :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscdfnorminv :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcdfnorminv :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCdfNormInv :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCdfNormInv :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLGAMMA :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDLGAMMA :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vslgamma :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdlgamma :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsLGamma :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdLGamma :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSLGAMMA :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLGAMMA :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmslgamma :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdlgamma :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLGamma :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLGamma :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSTGAMMA :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDTGAMMA :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vstgamma :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdtgamma :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsTGamma :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdTGamma :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSTGAMMA :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDTGAMMA :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmstgamma :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdtgamma :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsTGamma :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdTGamma :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSATAN2 :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDATAN2 :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsatan2 :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdatan2 :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsAtan2 :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdAtan2 :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSATAN2 :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDATAN2 :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsatan2 :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdatan2 :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAtan2 :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAtan2 :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSATAN2PI :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDATAN2PI :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsatan2pi :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdatan2pi :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsAtan2pi :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdAtan2pi :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSATAN2PI :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDATAN2PI :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsatan2pi :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdatan2pi :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAtan2pi :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAtan2pi :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSMUL :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDMUL :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsmul :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdmul :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsMul :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdMul :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSMUL :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDMUL :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsmul :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdmul :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsMul :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdMul :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCMUL :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZMUL :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcmul :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzmul :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcMul :: (n: s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzMul :: (n: s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCMUL :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZMUL :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcmul :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzmul :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcMul :: (n: s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzMul :: (n: s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSDIV :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDDIV :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsdiv :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vddiv :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsDiv :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdDiv :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSDIV :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDDIV :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsdiv :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmddiv :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsDiv :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdDiv :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCDIV :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZDIV :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcdiv :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzdiv :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcDiv :: (n: s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzDiv :: (n: s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCDIV :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZDIV :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcdiv :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzdiv :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcDiv :: (n: s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzDiv :: (n: s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSPOW :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDPOW :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vspow :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdpow :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsPow :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdPow :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSPOW :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDPOW :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmspow :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdpow :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsPow :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdPow :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCPOW :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZPOW :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcpow :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzpow :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcPow :: (n: s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzPow :: (n: s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCPOW :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZPOW :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcpow :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzpow :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcPow :: (n: s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzPow :: (n: s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSPOW3O2 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDPOW3O2 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vspow3o2 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdpow3o2 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsPow3o2 :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdPow3o2 :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSPOW3O2 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDPOW3O2 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmspow3o2 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdpow3o2 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsPow3o2 :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdPow3o2 :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSPOW2O3 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDPOW2O3 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vspow2o3 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdpow2o3 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsPow2o3 :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdPow2o3 :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSPOW2O3 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDPOW2O3 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmspow2o3 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdpow2o3 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsPow2o3 :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdPow2o3 :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSPOWX :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDPOWX :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vspowx :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdpowx :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsPowx :: (n: s64, a: *float, b: float, r: *float) -> void #foreign mkl_intel_ilp64;
vdPowx :: (n: s64, a: *float64, b: float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSPOWX :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDPOWX :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmspowx :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdpowx :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsPowx :: (n: s64, a: *float, b: float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdPowx :: (n: s64, a: *float64, b: float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCPOWX :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZPOWX :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcpowx :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzpowx :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcPowx :: (n: s64, a: *MKL_Complex8, b: MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzPowx :: (n: s64, a: *MKL_Complex16, b: MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCPOWX :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZPOWX :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcpowx :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzpowx :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcPowx :: (n: s64, a: *MKL_Complex8, b: MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzPowx :: (n: s64, a: *MKL_Complex16, b: MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSPOWR :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDPOWR :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vspowr :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdpowr :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsPowr :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdPowr :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSPOWR :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDPOWR :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmspowr :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdpowr :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsPowr :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdPowr :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSINCOS :: (n: *s64, a: *float, r1: *float, r2: *float) -> void #foreign mkl_intel_ilp64;
VDSINCOS :: (n: *s64, a: *float64, r1: *float64, r2: *float64) -> void #foreign mkl_intel_ilp64;
vssincos :: (n: *s64, a: *float, r1: *float, r2: *float) -> void #foreign mkl_intel_ilp64;
vdsincos :: (n: *s64, a: *float64, r1: *float64, r2: *float64) -> void #foreign mkl_intel_ilp64;
vsSinCos :: (n: s64, a: *float, r1: *float, r2: *float) -> void #foreign mkl_intel_ilp64;
vdSinCos :: (n: s64, a: *float64, r1: *float64, r2: *float64) -> void #foreign mkl_intel_ilp64;

VMSSINCOS :: (n: *s64, a: *float, r1: *float, r2: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSINCOS :: (n: *s64, a: *float64, r1: *float64, r2: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssincos :: (n: *s64, a: *float, r1: *float, r2: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsincos :: (n: *s64, a: *float64, r1: *float64, r2: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSinCos :: (n: s64, a: *float, r1: *float, r2: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSinCos :: (n: s64, a: *float64, r1: *float64, r2: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLINEARFRAC :: (n: *s64, a: *float, b: *float, scalea: *float, shifta: *float, scaleb: *float, shiftb: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDLINEARFRAC :: (n: *s64, a: *float64, b: *float64, scalea: *float64, shifta: *float64, scaleb: *float64, shiftb: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vslinearfrac :: (n: *s64, a: *float, b: *float, scalea: *float, shifta: *float, scaleb: *float, shiftb: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdlinearfrac :: (n: *s64, a: *float64, b: *float64, scalea: *float64, shifta: *float64, scaleb: *float64, shiftb: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsLinearFrac :: (n: s64, a: *float, b: *float, scalea: float, shifta: float, scaleb: float, shiftb: float, r: *float) -> void #foreign mkl_intel_ilp64;
vdLinearFrac :: (n: s64, a: *float64, b: *float64, scalea: float64, shifta: float64, scaleb: float64, shiftb: float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSLINEARFRAC :: (n: *s64, a: *float, b: *float, scalea: *float, shifta: *float, scaleb: *float, shiftb: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLINEARFRAC :: (n: *s64, a: *float64, b: *float64, scalea: *float64, shifta: *float64, scaleb: *float64, shiftb: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmslinearfrac :: (n: *s64, a: *float, b: *float, scalea: *float, shifta: *float, scaleb: *float, shiftb: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdlinearfrac :: (n: *s64, a: *float64, b: *float64, scalea: *float64, shifta: *float64, scaleb: *float64, shiftb: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLinearFrac :: (n: s64, a: *float, b: *float, scalea: float, shifta: float, scaleb: float, shiftb: float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLinearFrac :: (n: s64, a: *float64, b: *float64, scalea: float64, shifta: float64, scaleb: float64, shiftb: float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCEIL :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDCEIL :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsceil :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdceil :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsCeil :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdCeil :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSCEIL :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCEIL :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsceil :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdceil :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCeil :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCeil :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSFLOOR :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDFLOOR :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsfloor :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdfloor :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsFloor :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdFloor :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSFLOOR :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDFLOOR :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsfloor :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdfloor :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsFloor :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdFloor :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSFRAC :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDFRAC :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsfrac :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdfrac :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsFrac :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdFrac :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSFRAC :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDFRAC :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsfrac :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdfrac :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsFrac :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdFrac :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSMODF :: (n: *s64, a: *float, r1: *float, r2: *float) -> void #foreign mkl_intel_ilp64;
VDMODF :: (n: *s64, a: *float64, r1: *float64, r2: *float64) -> void #foreign mkl_intel_ilp64;
vsmodf :: (n: *s64, a: *float, r1: *float, r2: *float) -> void #foreign mkl_intel_ilp64;
vdmodf :: (n: *s64, a: *float64, r1: *float64, r2: *float64) -> void #foreign mkl_intel_ilp64;
vsModf :: (n: s64, a: *float, r1: *float, r2: *float) -> void #foreign mkl_intel_ilp64;
vdModf :: (n: s64, a: *float64, r1: *float64, r2: *float64) -> void #foreign mkl_intel_ilp64;

VMSMODF :: (n: *s64, a: *float, r1: *float, r2: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDMODF :: (n: *s64, a: *float64, r1: *float64, r2: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsmodf :: (n: *s64, a: *float, r1: *float, r2: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdmodf :: (n: *s64, a: *float64, r1: *float64, r2: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsModf :: (n: s64, a: *float, r1: *float, r2: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdModf :: (n: s64, a: *float64, r1: *float64, r2: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSFMOD :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDFMOD :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsfmod :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdfmod :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsFmod :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdFmod :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSFMOD :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDFMOD :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsfmod :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdfmod :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsFmod :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdFmod :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSREMAINDER :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDREMAINDER :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsremainder :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdremainder :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsRemainder :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdRemainder :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSREMAINDER :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDREMAINDER :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsremainder :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdremainder :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsRemainder :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdRemainder :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSNEXTAFTER :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDNEXTAFTER :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsnextafter :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdnextafter :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsNextAfter :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdNextAfter :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSNEXTAFTER :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDNEXTAFTER :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsnextafter :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdnextafter :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsNextAfter :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdNextAfter :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCOPYSIGN :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDCOPYSIGN :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vscopysign :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdcopysign :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsCopySign :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdCopySign :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSCOPYSIGN :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCOPYSIGN :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscopysign :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcopysign :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCopySign :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCopySign :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSFDIM :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDFDIM :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsfdim :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdfdim :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsFdim :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdFdim :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSFDIM :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDFDIM :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsfdim :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdfdim :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsFdim :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdFdim :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSFMAX :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDFMAX :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsfmax :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdfmax :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsFmax :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdFmax :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSFMAX :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDFMAX :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsfmax :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdfmax :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsFmax :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdFmax :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSFMIN :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDFMIN :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsfmin :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdfmin :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsFmin :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdFmin :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSFMIN :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDFMIN :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsfmin :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdfmin :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsFmin :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdFmin :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSMAXMAG :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDMAXMAG :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsmaxmag :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdmaxmag :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsMaxMag :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdMaxMag :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSMAXMAG :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDMAXMAG :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsmaxmag :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdmaxmag :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsMaxMag :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdMaxMag :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSMINMAG :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDMINMAG :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsminmag :: (n: *s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdminmag :: (n: *s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsMinMag :: (n: s64, a: *float, b: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdMinMag :: (n: s64, a: *float64, b: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSMINMAG :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDMINMAG :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsminmag :: (n: *s64, a: *float, b: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdminmag :: (n: *s64, a: *float64, b: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsMinMag :: (n: s64, a: *float, b: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdMinMag :: (n: s64, a: *float64, b: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSNEARBYINT :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDNEARBYINT :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsnearbyint :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdnearbyint :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsNearbyInt :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdNearbyInt :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSNEARBYINT :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDNEARBYINT :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsnearbyint :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdnearbyint :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsNearbyInt :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdNearbyInt :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSRINT :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDRINT :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsrint :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdrint :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsRint :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdRint :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSRINT :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDRINT :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsrint :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdrint :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsRint :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdRint :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSROUND :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDROUND :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsround :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdround :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsRound :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdRound :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSROUND :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDROUND :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsround :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdround :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsRound :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdRound :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSTRUNC :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDTRUNC :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vstrunc :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdtrunc :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsTrunc :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdTrunc :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSTRUNC :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDTRUNC :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmstrunc :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdtrunc :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsTrunc :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdTrunc :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCCONJ :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZCONJ :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcconj :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzconj :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcConj :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzConj :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCCONJ :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZCONJ :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcconj :: (n: *s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzconj :: (n: *s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcConj :: (n: s64, a: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzConj :: (n: s64, a: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VCMULBYCONJ :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZMULBYCONJ :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcmulbyconj :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzmulbyconj :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcMulByConj :: (n: s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzMulByConj :: (n: s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCMULBYCONJ :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZMULBYCONJ :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcmulbyconj :: (n: *s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzmulbyconj :: (n: *s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcMulByConj :: (n: s64, a: *MKL_Complex8, b: *MKL_Complex8, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzMulByConj :: (n: s64, a: *MKL_Complex16, b: *MKL_Complex16, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VCCIS :: (n: *s64, a: *float, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZCIS :: (n: *s64, a: *float64, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vccis :: (n: *s64, a: *float, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzcis :: (n: *s64, a: *float64, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcCIS :: (n: s64, a: *float, r: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzCIS :: (n: s64, a: *float64, r: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VMCCIS :: (n: *s64, a: *float, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZCIS :: (n: *s64, a: *float64, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmccis :: (n: *s64, a: *float, r: *MKL_Complex8, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzcis :: (n: *s64, a: *float64, r: *MKL_Complex16, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcCIS :: (n: s64, a: *float, r: *MKL_Complex8, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzCIS :: (n: s64, a: *float64, r: *MKL_Complex16, mode: s64) -> void #foreign mkl_intel_ilp64;

VSEXPINT1 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
VDEXPINT1 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsexpint1 :: (n: *s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdexpint1 :: (n: *s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;
vsExpInt1 :: (n: s64, a: *float, r: *float) -> void #foreign mkl_intel_ilp64;
vdExpInt1 :: (n: s64, a: *float64, r: *float64) -> void #foreign mkl_intel_ilp64;

VMSEXPINT1 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDEXPINT1 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsexpint1 :: (n: *s64, a: *float, r: *float, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdexpint1 :: (n: *s64, a: *float64, r: *float64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsExpInt1 :: (n: s64, a: *float, r: *float, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdExpInt1 :: (n: s64, a: *float64, r: *float64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSABSI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDABSI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsabsi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdabsi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsAbsI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdAbsI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSABSI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDABSI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsabsi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdabsi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAbsI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAbsI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCABSI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZABSI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcabsi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzabsi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcAbsI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vzAbsI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCABSI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZABSI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcabsi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzabsi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAbsI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAbsI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCARGI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZARGI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcargi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzargi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcArgI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vzArgI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCARGI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZARGI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcargi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzargi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcArgI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzArgI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSADDI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDADDI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsaddi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdaddi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsAddI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdAddI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSADDI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDADDI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsaddi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdaddi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAddI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAddI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCADDI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, unk0: *MKL_Complex8, unk1: *s64) -> void #foreign mkl_intel_ilp64;
VZADDI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, unk0: *MKL_Complex16, unk1: *s64) -> void #foreign mkl_intel_ilp64;
vcaddi :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, unk0: *MKL_Complex8, unk1: *s64) -> void #foreign mkl_intel_ilp64;
vzaddi :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, unk0: *MKL_Complex16, unk1: *s64) -> void #foreign mkl_intel_ilp64;
vcAddI :: (n: s64, a: *MKL_Complex8, inca: s64, b: *MKL_Complex8, incb: s64, unk0: *MKL_Complex8, unk1: s64) -> void #foreign mkl_intel_ilp64;
vzAddI :: (n: s64, a: *MKL_Complex16, inca: s64, b: *MKL_Complex16, incb: s64, unk0: *MKL_Complex16, unk1: s64) -> void #foreign mkl_intel_ilp64;

VMCADDI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZADDI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcaddi :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzaddi :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAddI :: (n: s64, a: *MKL_Complex8, inca: s64, b: *MKL_Complex8, incb: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAddI :: (n: s64, a: *MKL_Complex16, inca: s64, b: *MKL_Complex16, incb: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSUBI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDSUBI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vssubi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdsubi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsSubI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdSubI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSSUBI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSUBI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssubi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsubi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSubI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSubI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCSUBI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZSUBI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcsubi :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzsubi :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcSubI :: (n: s64, a: *MKL_Complex8, inca: s64, b: *MKL_Complex8, incb: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzSubI :: (n: s64, a: *MKL_Complex16, inca: s64, b: *MKL_Complex16, incb: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCSUBI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZSUBI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcsubi :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzsubi :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcSubI :: (n: s64, a: *MKL_Complex8, inca: s64, b: *MKL_Complex8, incb: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzSubI :: (n: s64, a: *MKL_Complex16, inca: s64, b: *MKL_Complex16, incb: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSINVI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDINVI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsinvi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdinvi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsInvI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdInvI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSINVI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDINVI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsinvi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdinvi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsInvI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdInvI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSQRTI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDSQRTI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vssqrti :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdsqrti :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsSqrtI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdSqrtI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSSQRTI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSQRTI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssqrti :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsqrti :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSqrtI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSqrtI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCSQRTI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZSQRTI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcsqrti :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzsqrti :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcSqrtI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzSqrtI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCSQRTI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZSQRTI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcsqrti :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzsqrti :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcSqrtI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzSqrtI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSINVSQRTI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDINVSQRTI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsinvsqrti :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdinvsqrti :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsInvSqrtI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdInvSqrtI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSINVSQRTI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDINVSQRTI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsinvsqrti :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdinvsqrti :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsInvSqrtI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdInvSqrtI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCBRTI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDCBRTI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vscbrti :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdcbrti :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsCbrtI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdCbrtI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSCBRTI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCBRTI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscbrti :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcbrti :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCbrtI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCbrtI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSINVCBRTI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDINVCBRTI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsinvcbrti :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdinvcbrti :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsInvCbrtI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdInvCbrtI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSINVCBRTI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDINVCBRTI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsinvcbrti :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdinvcbrti :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsInvCbrtI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdInvCbrtI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSQRI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDSQRI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vssqri :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdsqri :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsSqrI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdSqrI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSSQRI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSQRI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssqri :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsqri :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSqrI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSqrI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSEXPI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDEXPI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsexpi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdexpi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsExpI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdExpI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSEXPI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDEXPI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsexpi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdexpi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsExpI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdExpI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSEXP2I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDEXP2I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsexp2i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdexp2i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsExp2I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdExp2I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSEXP2I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDEXP2I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsexp2i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdexp2i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsExp2I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdExp2I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSEXP10I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDEXP10I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsexp10i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdexp10i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsExp10I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdExp10I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSEXP10I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDEXP10I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsexp10i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdexp10i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsExp10I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdExp10I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSEXPM1I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDEXPM1I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsexpm1i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdexpm1i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsExpm1I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdExpm1I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSEXPM1I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDEXPM1I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsexpm1i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdexpm1i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsExpm1I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdExpm1I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCEXPI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZEXPI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcexpi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzexpi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcExpI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzExpI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCEXPI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZEXPI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcexpi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzexpi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcExpI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzExpI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLNI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDLNI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vslni :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdlni :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsLnI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdLnI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSLNI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLNI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmslni :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdlni :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLnI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLnI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCLNI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZLNI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vclni :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzlni :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcLnI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzLnI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCLNI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZLNI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmclni :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzlni :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcLnI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzLnI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLOG10I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDLOG10I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vslog10i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdlog10i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsLog10I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdLog10I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSLOG10I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLOG10I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmslog10i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdlog10i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLog10I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLog10I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCLOG10I :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZLOG10I :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vclog10i :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzlog10i :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcLog10I :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzLog10I :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCLOG10I :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZLOG10I :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmclog10i :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzlog10i :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcLog10I :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzLog10I :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLOG2I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDLOG2I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vslog2i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdlog2i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsLog2I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdLog2I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSLOG2I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLOG2I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmslog2i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdlog2i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLog2I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLog2I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLOG1PI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDLOG1PI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vslog1pi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdlog1pi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsLog1pI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdLog1pI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSLOG1PI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLOG1PI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmslog1pi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdlog1pi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLog1pI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLog1pI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLOGBI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDLOGBI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vslogbi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdlogbi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsLogbI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdLogbI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSLOGBI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLOGBI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmslogbi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdlogbi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLogbI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLogbI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCOSI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDCOSI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vscosi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdcosi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsCosI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdCosI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSCOSI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCOSI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscosi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcosi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCosI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCosI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCCOSI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZCOSI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vccosi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzcosi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcCosI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzCosI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCCOSI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZCOSI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmccosi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzcosi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcCosI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzCosI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSINI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDSINI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vssini :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdsini :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsSinI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdSinI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSSINI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSINI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssini :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsini :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSinI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSinI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCSINI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZSINI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcsini :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzsini :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcSinI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzSinI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCSINI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZSINI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcsini :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzsini :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcSinI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzSinI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSTANI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDTANI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vstani :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdtani :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsTanI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdTanI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSTANI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDTANI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmstani :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdtani :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsTanI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdTanI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCTANI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZTANI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vctani :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vztani :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcTanI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzTanI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCTANI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZTANI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmctani :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmztani :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcTanI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzTanI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCOSHI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDCOSHI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vscoshi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdcoshi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsCoshI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdCoshI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSCOSHI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCOSHI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscoshi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcoshi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCoshI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCoshI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCCOSHI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZCOSHI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vccoshi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzcoshi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcCoshI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzCoshI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCCOSHI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZCOSHI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmccoshi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzcoshi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcCoshI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzCoshI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCOSDI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDCOSDI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vscosdi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdcosdi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsCosdI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdCosdI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSCOSDI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCOSDI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscosdi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcosdi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCosdI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCosdI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCOSPII :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDCOSPII :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vscospii :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdcospii :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsCospiI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdCospiI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSCOSPII :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCOSPII :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscospii :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcospii :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCospiI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCospiI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSINHI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDSINHI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vssinhi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdsinhi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsSinhI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdSinhI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSSINHI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSINHI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssinhi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsinhi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSinhI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSinhI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCSINHI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZSINHI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcsinhi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzsinhi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcSinhI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzSinhI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCSINHI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZSINHI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcsinhi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzsinhi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcSinhI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzSinhI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSINDI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDSINDI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vssindi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdsindi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsSindI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdSindI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSSINDI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSINDI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssindi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsindi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSindI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSindI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSINPII :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDSINPII :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vssinpii :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdsinpii :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsSinpiI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdSinpiI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSSINPII :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSINPII :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssinpii :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsinpii :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSinpiI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSinpiI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSTANHI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDTANHI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vstanhi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdtanhi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsTanhI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdTanhI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSTANHI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDTANHI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmstanhi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdtanhi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsTanhI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdTanhI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCTANHI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZTANHI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vctanhi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vztanhi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcTanhI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzTanhI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCTANHI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZTANHI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmctanhi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmztanhi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcTanhI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzTanhI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSTANDI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDTANDI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vstandi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdtandi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsTandI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdTandI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSTANDI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDTANDI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmstandi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdtandi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsTandI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdTandI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSTANPII :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDTANPII :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vstanpii :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdtanpii :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsTanpiI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdTanpiI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSTANPII :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDTANPII :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmstanpii :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdtanpii :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsTanpiI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdTanpiI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSACOSI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDACOSI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsacosi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdacosi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsAcosI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdAcosI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSACOSI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDACOSI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsacosi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdacosi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAcosI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAcosI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCACOSI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZACOSI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcacosi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzacosi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcAcosI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzAcosI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCACOSI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZACOSI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcacosi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzacosi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAcosI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAcosI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSACOSPII :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDACOSPII :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsacospii :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdacospii :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsAcospiI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdAcospiI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSACOSPII :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDACOSPII :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsacospii :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdacospii :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAcospiI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAcospiI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSASINI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDASINI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsasini :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdasini :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsAsinI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdAsinI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSASINI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDASINI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsasini :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdasini :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAsinI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAsinI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCASINI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZASINI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcasini :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzasini :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcAsinI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzAsinI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCASINI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZASINI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcasini :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzasini :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAsinI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAsinI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSASINPII :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDASINPII :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsasinpii :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdasinpii :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsAsinpiI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdAsinpiI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSASINPII :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDASINPII :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsasinpii :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdasinpii :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAsinpiI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAsinpiI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSATANI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDATANI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsatani :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdatani :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsAtanI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdAtanI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSATANI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDATANI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsatani :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdatani :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAtanI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAtanI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCATANI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZATANI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcatani :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzatani :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcAtanI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzAtanI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCATANI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZATANI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcatani :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzatani :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAtanI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAtanI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSATANPII :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDATANPII :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsatanpii :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdatanpii :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsAtanpiI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdAtanpiI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSATANPII :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDATANPII :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsatanpii :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdatanpii :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAtanpiI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAtanpiI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSACOSHI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDACOSHI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsacoshi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdacoshi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsAcoshI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdAcoshI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSACOSHI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDACOSHI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsacoshi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdacoshi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAcoshI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAcoshI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCACOSHI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZACOSHI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcacoshi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzacoshi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcAcoshI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzAcoshI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCACOSHI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZACOSHI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcacoshi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzacoshi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAcoshI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAcoshI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSASINHI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDASINHI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsasinhi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdasinhi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsAsinhI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdAsinhI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSASINHI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDASINHI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsasinhi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdasinhi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAsinhI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAsinhI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCASINHI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZASINHI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcasinhi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzasinhi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcAsinhI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzAsinhI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCASINHI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZASINHI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcasinhi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzasinhi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAsinhI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAsinhI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSATANHI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDATANHI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsatanhi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdatanhi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsAtanhI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdAtanhI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSATANHI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDATANHI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsatanhi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdatanhi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAtanhI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAtanhI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCATANHI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZATANHI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcatanhi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzatanhi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcAtanhI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzAtanhI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCATANHI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZATANHI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcatanhi :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzatanhi :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcAtanhI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzAtanhI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSERFI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDERFI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vserfi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vderfi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsErfI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdErfI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSERFI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDERFI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmserfi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmderfi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsErfI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdErfI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSERFINVI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDERFINVI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vserfinvi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vderfinvi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsErfInvI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdErfInvI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSERFINVI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDERFINVI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmserfinvi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmderfinvi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsErfInvI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdErfInvI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSHYPOTI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDHYPOTI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vshypoti :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdhypoti :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsHypotI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdHypotI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSHYPOTI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDHYPOTI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmshypoti :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdhypoti :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsHypotI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdHypotI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSERFCI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDERFCI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vserfci :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vderfci :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsErfcI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdErfcI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSERFCI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDERFCI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmserfci :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmderfci :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsErfcI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdErfcI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSERFCINVI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDERFCINVI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vserfcinvi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vderfcinvi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsErfcInvI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdErfcInvI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSERFCINVI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDERFCINVI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmserfcinvi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmderfcinvi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsErfcInvI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdErfcInvI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCDFNORMI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDCDFNORMI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vscdfnormi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdcdfnormi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsCdfNormI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdCdfNormI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSCDFNORMI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCDFNORMI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscdfnormi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcdfnormi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCdfNormI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCdfNormI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCDFNORMINVI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDCDFNORMINVI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vscdfnorminvi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdcdfnorminvi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsCdfNormInvI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdCdfNormInvI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSCDFNORMINVI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCDFNORMINVI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscdfnorminvi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcdfnorminvi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCdfNormInvI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCdfNormInvI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLGAMMAI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDLGAMMAI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vslgammai :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdlgammai :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsLGammaI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdLGammaI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSLGAMMAI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLGAMMAI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmslgammai :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdlgammai :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLGammaI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLGammaI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSTGAMMAI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDTGAMMAI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vstgammai :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdtgammai :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsTGammaI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdTGammaI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSTGAMMAI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDTGAMMAI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmstgammai :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdtgammai :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsTGammaI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdTGammaI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSATAN2I :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDATAN2I :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsatan2i :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdatan2i :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsAtan2I :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdAtan2I :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSATAN2I :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDATAN2I :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsatan2i :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdatan2i :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAtan2I :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAtan2I :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSATAN2PII :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDATAN2PII :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsatan2pii :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdatan2pii :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsAtan2piI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdAtan2piI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSATAN2PII :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDATAN2PII :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsatan2pii :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdatan2pii :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsAtan2piI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdAtan2piI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSMULI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDMULI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsmuli :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdmuli :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsMulI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdMulI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSMULI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDMULI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsmuli :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdmuli :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsMulI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdMulI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCMULI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZMULI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcmuli :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzmuli :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcMulI :: (n: s64, a: *MKL_Complex8, inca: s64, b: *MKL_Complex8, incb: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzMulI :: (n: s64, a: *MKL_Complex16, inca: s64, b: *MKL_Complex16, incb: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCMULI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZMULI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcmuli :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzmuli :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcMulI :: (n: s64, a: *MKL_Complex8, inca: s64, b: *MKL_Complex8, incb: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzMulI :: (n: s64, a: *MKL_Complex16, inca: s64, b: *MKL_Complex16, incb: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSDIVI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDDIVI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsdivi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vddivi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsDivI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdDivI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSDIVI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDDIVI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsdivi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmddivi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsDivI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdDivI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCDIVI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZDIVI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcdivi :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzdivi :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcDivI :: (n: s64, a: *MKL_Complex8, inca: s64, b: *MKL_Complex8, incb: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzDivI :: (n: s64, a: *MKL_Complex16, inca: s64, b: *MKL_Complex16, incb: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCDIVI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZDIVI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcdivi :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzdivi :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcDivI :: (n: s64, a: *MKL_Complex8, inca: s64, b: *MKL_Complex8, incb: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzDivI :: (n: s64, a: *MKL_Complex16, inca: s64, b: *MKL_Complex16, incb: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSFDIMI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDFDIMI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsfdimi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdfdimi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsFdimI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdFdimI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSFDIMI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDFDIMI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsfdimi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdfdimi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsFdimI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdFdimI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSFMODI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDFMODI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsfmodi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdfmodi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsFmodI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdFmodI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSFMODI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDFMODI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsfmodi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdfmodi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsFmodI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdFmodI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSFMAXI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDFMAXI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsfmaxi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdfmaxi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsFmaxI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdFmaxI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSFMAXI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDFMAXI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsfmaxi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdfmaxi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsFmaxI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdFmaxI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSFMINI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDFMINI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsfmini :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdfmini :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsFminI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdFminI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSFMINI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDFMINI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsfmini :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdfmini :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsFminI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdFminI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSPOWI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDPOWI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vspowi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdpowi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsPowI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdPowI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSPOWI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDPOWI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmspowi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdpowi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsPowI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdPowI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCPOWI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZPOWI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcpowi :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzpowi :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcPowI :: (n: s64, a: *MKL_Complex8, inca: s64, b: *MKL_Complex8, incb: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzPowI :: (n: s64, a: *MKL_Complex16, inca: s64, b: *MKL_Complex16, incb: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCPOWI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZPOWI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcpowi :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzpowi :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcPowI :: (n: s64, a: *MKL_Complex8, inca: s64, b: *MKL_Complex8, incb: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzPowI :: (n: s64, a: *MKL_Complex16, inca: s64, b: *MKL_Complex16, incb: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSPOWRI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDPOWRI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vspowri :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdpowri :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsPowrI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdPowrI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSPOWRI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDPOWRI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmspowri :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdpowri :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsPowrI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdPowrI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSPOW3O2I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDPOW3O2I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vspow3o2i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdpow3o2i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsPow3o2I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdPow3o2I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSPOW3O2I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDPOW3O2I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmspow3o2i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdpow3o2i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsPow3o2I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdPow3o2I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSPOW2O3I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDPOW2O3I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vspow2o3i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdpow2o3i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsPow2o3I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdPow2o3I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSPOW2O3I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDPOW2O3I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmspow2o3i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdpow2o3i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsPow2o3I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdPow2o3I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSPOWXI :: (n: *s64, a: *float, inca: *s64, unk0: *float, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDPOWXI :: (n: *s64, a: *float64, inca: *s64, unk0: *float64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vspowxi :: (n: *s64, a: *float, inca: *s64, unk0: *float, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdpowxi :: (n: *s64, a: *float64, inca: *s64, unk0: *float64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsPowxI :: (n: s64, a: *float, inca: s64, unk0: float, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdPowxI :: (n: s64, a: *float64, inca: s64, unk0: float64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSPOWXI :: (n: *s64, a: *float, inca: *s64, unk0: *float, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDPOWXI :: (n: *s64, a: *float64, inca: *s64, unk0: *float64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmspowxi :: (n: *s64, a: *float, inca: *s64, unk0: *float, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdpowxi :: (n: *s64, a: *float64, inca: *s64, unk0: *float64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsPowxI :: (n: s64, a: *float, inca: s64, unk0: float, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdPowxI :: (n: s64, a: *float64, inca: s64, unk0: float64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCPOWXI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZPOWXI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcpowxi :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzpowxi :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcPowxI :: (n: s64, a: *MKL_Complex8, inca: s64, b: MKL_Complex8, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzPowxI :: (n: s64, a: *MKL_Complex16, inca: s64, b: MKL_Complex16, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCPOWXI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZPOWXI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcpowxi :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzpowxi :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcPowxI :: (n: s64, a: *MKL_Complex8, inca: s64, b: MKL_Complex8, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzPowxI :: (n: s64, a: *MKL_Complex16, inca: s64, b: MKL_Complex16, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSSINCOSI :: (n: *s64, a: *float, inca: *s64, r1: *float, incr1: *s64, r2: *float, incr2: *s64) -> void #foreign mkl_intel_ilp64;
VDSINCOSI :: (n: *s64, a: *float64, inca: *s64, r1: *float64, incr1: *s64, r2: *float64, incr2: *s64) -> void #foreign mkl_intel_ilp64;
vssincosi :: (n: *s64, a: *float, inca: *s64, r1: *float, incr1: *s64, r2: *float, incr2: *s64) -> void #foreign mkl_intel_ilp64;
vdsincosi :: (n: *s64, a: *float64, inca: *s64, r1: *float64, incr1: *s64, r2: *float64, incr2: *s64) -> void #foreign mkl_intel_ilp64;
vsSinCosI :: (n: s64, a: *float, inca: s64, r1: *float, incr1: s64, r2: *float, incr2: s64) -> void #foreign mkl_intel_ilp64;
vdSinCosI :: (n: s64, a: *float64, inca: s64, r1: *float64, incr1: s64, r2: *float64, incr2: s64) -> void #foreign mkl_intel_ilp64;

VMSSINCOSI :: (n: *s64, a: *float, inca: *s64, r1: *float, incr1: *s64, r2: *float, incr2: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDSINCOSI :: (n: *s64, a: *float64, inca: *s64, r1: *float64, incr1: *s64, r2: *float64, incr2: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmssincosi :: (n: *s64, a: *float, inca: *s64, r1: *float, incr1: *s64, r2: *float, incr2: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdsincosi :: (n: *s64, a: *float64, inca: *s64, r1: *float64, incr1: *s64, r2: *float64, incr2: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsSinCosI :: (n: s64, a: *float, inca: s64, r1: *float, incr1: s64, r2: *float, incr2: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdSinCosI :: (n: s64, a: *float64, inca: s64, r1: *float64, incr1: s64, r2: *float64, incr2: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSLINEARFRACI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, scalea: *float, shifta: *float, scaleb: *float, shiftb: *float, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDLINEARFRACI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, scalea: *float64, shifta: *float64, scaleb: *float64, shiftb: *float64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vslinearfraci :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, scalea: *float, shifta: *float, scaleb: *float, shiftb: *float, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdlinearfraci :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, scalea: *float64, shifta: *float64, scaleb: *float64, shiftb: *float64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsLinearFracI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, scalea: float, shifta: float, scaleb: float, shiftb: float, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdLinearFracI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, scalea: float64, shifta: float64, scaleb: float64, shiftb: float64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSLINEARFRACI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, scalea: *float, shifta: *float, scaleb: *float, shiftb: *float, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDLINEARFRACI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, scalea: *float64, shifta: *float64, scaleb: *float64, shiftb: *float64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmslinearfraci :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, scalea: *float, shifta: *float, scaleb: *float, shiftb: *float, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdlinearfraci :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, scalea: *float64, shifta: *float64, scaleb: *float64, shiftb: *float64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsLinearFracI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, scalea: float, shifta: float, scaleb: float, shiftb: float, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdLinearFracI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, scalea: float64, shifta: float64, scaleb: float64, shiftb: float64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCEILI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDCEILI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsceili :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdceili :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsCeilI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdCeilI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSCEILI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCEILI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsceili :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdceili :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCeilI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCeilI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSFLOORI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDFLOORI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsfloori :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdfloori :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsFloorI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdFloorI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSFLOORI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDFLOORI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsfloori :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdfloori :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsFloorI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdFloorI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSFRACI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDFRACI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsfraci :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdfraci :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsFracI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdFracI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSFRACI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDFRACI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsfraci :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdfraci :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsFracI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdFracI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSMODFI :: (n: *s64, a: *float, inca: *s64, r1: *float, incr1: *s64, r2: *float, incr2: *s64) -> void #foreign mkl_intel_ilp64;
VDMODFI :: (n: *s64, a: *float64, inca: *s64, r1: *float64, incr1: *s64, r2: *float64, incr2: *s64) -> void #foreign mkl_intel_ilp64;
vsmodfi :: (n: *s64, a: *float, inca: *s64, r1: *float, incr1: *s64, r2: *float, incr2: *s64) -> void #foreign mkl_intel_ilp64;
vdmodfi :: (n: *s64, a: *float64, inca: *s64, r1: *float64, incr1: *s64, r2: *float64, incr2: *s64) -> void #foreign mkl_intel_ilp64;
vsModfI :: (n: s64, a: *float, inca: s64, r1: *float, incr1: s64, r2: *float, incr2: s64) -> void #foreign mkl_intel_ilp64;
vdModfI :: (n: s64, a: *float64, inca: s64, r1: *float64, incr1: s64, r2: *float64, incr2: s64) -> void #foreign mkl_intel_ilp64;

VMSMODFI :: (n: *s64, a: *float, inca: *s64, r1: *float, incr1: *s64, r2: *float, incr2: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDMODFI :: (n: *s64, a: *float64, inca: *s64, r1: *float64, incr1: *s64, r2: *float64, incr2: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsmodfi :: (n: *s64, a: *float, inca: *s64, r1: *float, incr1: *s64, r2: *float, incr2: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdmodfi :: (n: *s64, a: *float64, inca: *s64, r1: *float64, incr1: *s64, r2: *float64, incr2: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsModfI :: (n: s64, a: *float, inca: s64, r1: *float, incr1: s64, r2: *float, incr2: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdModfI :: (n: s64, a: *float64, inca: s64, r1: *float64, incr1: s64, r2: *float64, incr2: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSNEARBYINTI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDNEARBYINTI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsnearbyinti :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdnearbyinti :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsNearbyIntI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdNearbyIntI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSNEARBYINTI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDNEARBYINTI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsnearbyinti :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdnearbyinti :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsNearbyIntI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdNearbyIntI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSNEXTAFTERI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDNEXTAFTERI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsnextafteri :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdnextafteri :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsNextAfterI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdNextAfterI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSNEXTAFTERI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDNEXTAFTERI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsnextafteri :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdnextafteri :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsNextAfterI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdNextAfterI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSMINMAGI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDMINMAGI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsminmagi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdminmagi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsMinMagI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdMinMagI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSMINMAGI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDMINMAGI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsminmagi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdminmagi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsMinMagI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdMinMagI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSMAXMAGI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDMAXMAGI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsmaxmagi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdmaxmagi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsMaxMagI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdMaxMagI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSMAXMAGI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDMAXMAGI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsmaxmagi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdmaxmagi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsMaxMagI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdMaxMagI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSRINTI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDRINTI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsrinti :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdrinti :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsRintI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdRintI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSRINTI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDRINTI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsrinti :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdrinti :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsRintI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdRintI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSROUNDI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDROUNDI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsroundi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdroundi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsRoundI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdRoundI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSROUNDI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDROUNDI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsroundi :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdroundi :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsRoundI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdRoundI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSTRUNCI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDTRUNCI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vstrunci :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdtrunci :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsTruncI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdTruncI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSTRUNCI :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDTRUNCI :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmstrunci :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdtrunci :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsTruncI :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdTruncI :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCCONJI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZCONJI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcconji :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzconji :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcConjI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzConjI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCCONJI :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZCONJI :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcconji :: (n: *s64, a: *MKL_Complex8, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzconji :: (n: *s64, a: *MKL_Complex16, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcConjI :: (n: s64, a: *MKL_Complex8, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzConjI :: (n: s64, a: *MKL_Complex16, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCMULBYCONJI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZMULBYCONJI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcmulbyconji :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzmulbyconji :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcMulByConjI :: (n: s64, a: *MKL_Complex8, inca: s64, b: *MKL_Complex8, incb: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzMulByConjI :: (n: s64, a: *MKL_Complex16, inca: s64, b: *MKL_Complex16, incb: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCMULBYCONJI :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZMULBYCONJI :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcmulbyconji :: (n: *s64, a: *MKL_Complex8, inca: *s64, b: *MKL_Complex8, incb: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzmulbyconji :: (n: *s64, a: *MKL_Complex16, inca: *s64, b: *MKL_Complex16, incb: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcMulByConjI :: (n: s64, a: *MKL_Complex8, inca: s64, b: *MKL_Complex8, incb: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzMulByConjI :: (n: s64, a: *MKL_Complex16, inca: s64, b: *MKL_Complex16, incb: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VCCISI :: (n: *s64, a: *float, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
VZCISI :: (n: *s64, a: *float64, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vccisi :: (n: *s64, a: *float, inca: *s64, r: *MKL_Complex8, incr: *s64) -> void #foreign mkl_intel_ilp64;
vzcisi :: (n: *s64, a: *float64, inca: *s64, r: *MKL_Complex16, incr: *s64) -> void #foreign mkl_intel_ilp64;
vcCISI :: (n: s64, a: *float, inca: s64, r: *MKL_Complex8, incr: s64) -> void #foreign mkl_intel_ilp64;
vzCISI :: (n: s64, a: *float64, inca: s64, r: *MKL_Complex16, incr: s64) -> void #foreign mkl_intel_ilp64;

VMCCISI :: (n: *s64, a: *float, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMZCISI :: (n: *s64, a: *float64, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmccisi :: (n: *s64, a: *float, inca: *s64, r: *MKL_Complex8, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmzcisi :: (n: *s64, a: *float64, inca: *s64, r: *MKL_Complex16, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmcCISI :: (n: s64, a: *float, inca: s64, r: *MKL_Complex8, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmzCISI :: (n: s64, a: *float64, inca: s64, r: *MKL_Complex16, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSEXPINT1I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDEXPINT1I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsexpint1i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdexpint1i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsExpInt1I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdExpInt1I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSEXPINT1I :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDEXPINT1I :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsexpint1i :: (n: *s64, a: *float, inca: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdexpint1i :: (n: *s64, a: *float64, inca: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsExpInt1I :: (n: s64, a: *float, inca: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdExpInt1I :: (n: s64, a: *float64, inca: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSCOPYSIGNI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDCOPYSIGNI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vscopysigni :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdcopysigni :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsCopySignI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdCopySignI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSCOPYSIGNI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDCOPYSIGNI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmscopysigni :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdcopysigni :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsCopySignI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdCopySignI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSREMAINDERI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
VDREMAINDERI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsremainderi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64) -> void #foreign mkl_intel_ilp64;
vdremainderi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64) -> void #foreign mkl_intel_ilp64;
vsRemainderI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64) -> void #foreign mkl_intel_ilp64;
vdRemainderI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64) -> void #foreign mkl_intel_ilp64;

VMSREMAINDERI :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
VMDREMAINDERI :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsremainderi :: (n: *s64, a: *float, inca: *s64, b: *float, incb: *s64, r: *float, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmdremainderi :: (n: *s64, a: *float64, inca: *s64, b: *float64, incb: *s64, r: *float64, incr: *s64, mode: *s64) -> void #foreign mkl_intel_ilp64;
vmsRemainderI :: (n: s64, a: *float, inca: s64, b: *float, incb: s64, r: *float, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;
vmdRemainderI :: (n: s64, a: *float64, inca: s64, b: *float64, incb: s64, r: *float64, incr: s64, mode: s64) -> void #foreign mkl_intel_ilp64;

VSPACKI :: (n: *s64, a: *float, incra: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
VDPACKI :: (n: *s64, a: *float64, incra: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
vspacki :: (n: *s64, a: *float, incra: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
vdpacki :: (n: *s64, a: *float64, incra: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
vsPackI :: (n: s64, a: *float, incra: s64, y: *float) -> void #foreign mkl_intel_ilp64;
vdPackI :: (n: s64, a: *float64, incra: s64, y: *float64) -> void #foreign mkl_intel_ilp64;

VCPACKI :: (n: *s64, a: *MKL_Complex8, incra: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZPACKI :: (n: *s64, a: *MKL_Complex16, incra: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcpacki :: (n: *s64, a: *MKL_Complex8, incra: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzpacki :: (n: *s64, a: *MKL_Complex16, incra: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcPackI :: (n: s64, a: *MKL_Complex8, incra: s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzPackI :: (n: s64, a: *MKL_Complex16, incra: s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VSPACKV :: (n: *s64, a: *float, ia: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
VDPACKV :: (n: *s64, a: *float64, ia: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
vspackv :: (n: *s64, a: *float, ia: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
vdpackv :: (n: *s64, a: *float64, ia: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
vsPackV :: (n: s64, a: *float, ia: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
vdPackV :: (n: s64, a: *float64, ia: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;

VCPACKV :: (n: *s64, a: *MKL_Complex8, ia: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZPACKV :: (n: *s64, a: *MKL_Complex16, ia: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcpackv :: (n: *s64, a: *MKL_Complex8, ia: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzpackv :: (n: *s64, a: *MKL_Complex16, ia: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcPackV :: (n: s64, a: *MKL_Complex8, ia: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzPackV :: (n: s64, a: *MKL_Complex16, ia: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VSPACKM :: (n: *s64, a: *float, ma: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
VDPACKM :: (n: *s64, a: *float64, ma: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
vspackm :: (n: *s64, a: *float, ma: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
vdpackm :: (n: *s64, a: *float64, ma: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;
vsPackM :: (n: s64, a: *float, ma: *s64, y: *float) -> void #foreign mkl_intel_ilp64;
vdPackM :: (n: s64, a: *float64, ma: *s64, y: *float64) -> void #foreign mkl_intel_ilp64;

VCPACKM :: (n: *s64, a: *MKL_Complex8, ma: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
VZPACKM :: (n: *s64, a: *MKL_Complex16, ma: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcpackm :: (n: *s64, a: *MKL_Complex8, ma: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzpackm :: (n: *s64, a: *MKL_Complex16, ma: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;
vcPackM :: (n: s64, a: *MKL_Complex8, ma: *s64, y: *MKL_Complex8) -> void #foreign mkl_intel_ilp64;
vzPackM :: (n: s64, a: *MKL_Complex16, ma: *s64, y: *MKL_Complex16) -> void #foreign mkl_intel_ilp64;

VSUNPACKI :: (n: *s64, a: *float, y: *float, incry: *s64) -> void #foreign mkl_intel_ilp64;
VDUNPACKI :: (n: *s64, a: *float64, y: *float64, incry: *s64) -> void #foreign mkl_intel_ilp64;
vsunpacki :: (n: *s64, a: *float, y: *float, incry: *s64) -> void #foreign mkl_intel_ilp64;
vdunpacki :: (n: *s64, a: *float64, y: *float64, incry: *s64) -> void #foreign mkl_intel_ilp64;
vsUnpackI :: (n: s64, a: *float, y: *float, incry: s64) -> void #foreign mkl_intel_ilp64;
vdUnpackI :: (n: s64, a: *float64, y: *float64, incry: s64) -> void #foreign mkl_intel_ilp64;

VCUNPACKI :: (n: *s64, a: *MKL_Complex8, y: *MKL_Complex8, incry: *s64) -> void #foreign mkl_intel_ilp64;
VZUNPACKI :: (n: *s64, a: *MKL_Complex16, y: *MKL_Complex16, incry: *s64) -> void #foreign mkl_intel_ilp64;
vcunpacki :: (n: *s64, a: *MKL_Complex8, y: *MKL_Complex8, incry: *s64) -> void #foreign mkl_intel_ilp64;
vzunpacki :: (n: *s64, a: *MKL_Complex16, y: *MKL_Complex16, incry: *s64) -> void #foreign mkl_intel_ilp64;
vcUnpackI :: (n: s64, a: *MKL_Complex8, y: *MKL_Complex8, incry: s64) -> void #foreign mkl_intel_ilp64;
vzUnpackI :: (n: s64, a: *MKL_Complex16, y: *MKL_Complex16, incry: s64) -> void #foreign mkl_intel_ilp64;

VSUNPACKV :: (n: *s64, a: *float, y: *float, iy: *s64) -> void #foreign mkl_intel_ilp64;
VDUNPACKV :: (n: *s64, a: *float64, y: *float64, iy: *s64) -> void #foreign mkl_intel_ilp64;
vsunpackv :: (n: *s64, a: *float, y: *float, iy: *s64) -> void #foreign mkl_intel_ilp64;
vdunpackv :: (n: *s64, a: *float64, y: *float64, iy: *s64) -> void #foreign mkl_intel_ilp64;
vsUnpackV :: (n: s64, a: *float, y: *float, iy: *s64) -> void #foreign mkl_intel_ilp64;
vdUnpackV :: (n: s64, a: *float64, y: *float64, iy: *s64) -> void #foreign mkl_intel_ilp64;

VCUNPACKV :: (n: *s64, a: *MKL_Complex8, y: *MKL_Complex8, iy: *s64) -> void #foreign mkl_intel_ilp64;
VZUNPACKV :: (n: *s64, a: *MKL_Complex16, y: *MKL_Complex16, iy: *s64) -> void #foreign mkl_intel_ilp64;
vcunpackv :: (n: *s64, a: *MKL_Complex8, y: *MKL_Complex8, iy: *s64) -> void #foreign mkl_intel_ilp64;
vzunpackv :: (n: *s64, a: *MKL_Complex16, y: *MKL_Complex16, iy: *s64) -> void #foreign mkl_intel_ilp64;
vcUnpackV :: (n: s64, a: *MKL_Complex8, y: *MKL_Complex8, iy: *s64) -> void #foreign mkl_intel_ilp64;
vzUnpackV :: (n: s64, a: *MKL_Complex16, y: *MKL_Complex16, iy: *s64) -> void #foreign mkl_intel_ilp64;

VSUNPACKM :: (n: *s64, a: *float, y: *float, my: *s64) -> void #foreign mkl_intel_ilp64;
VDUNPACKM :: (n: *s64, a: *float64, y: *float64, my: *s64) -> void #foreign mkl_intel_ilp64;
vsunpackm :: (n: *s64, a: *float, y: *float, my: *s64) -> void #foreign mkl_intel_ilp64;
vdunpackm :: (n: *s64, a: *float64, y: *float64, my: *s64) -> void #foreign mkl_intel_ilp64;
vsUnpackM :: (n: s64, a: *float, y: *float, my: *s64) -> void #foreign mkl_intel_ilp64;
vdUnpackM :: (n: s64, a: *float64, y: *float64, my: *s64) -> void #foreign mkl_intel_ilp64;

VCUNPACKM :: (n: *s64, a: *MKL_Complex8, y: *MKL_Complex8, my: *s64) -> void #foreign mkl_intel_ilp64;
VZUNPACKM :: (n: *s64, a: *MKL_Complex16, y: *MKL_Complex16, my: *s64) -> void #foreign mkl_intel_ilp64;
vcunpackm :: (n: *s64, a: *MKL_Complex8, y: *MKL_Complex8, my: *s64) -> void #foreign mkl_intel_ilp64;
vzunpackm :: (n: *s64, a: *MKL_Complex16, y: *MKL_Complex16, my: *s64) -> void #foreign mkl_intel_ilp64;
vcUnpackM :: (n: s64, a: *MKL_Complex8, y: *MKL_Complex8, my: *s64) -> void #foreign mkl_intel_ilp64;
vzUnpackM :: (n: s64, a: *MKL_Complex16, y: *MKL_Complex16, my: *s64) -> void #foreign mkl_intel_ilp64;

VMLSETERRSTATUS :: (status: *s64) -> s32 #foreign mkl_intel_ilp64;
vmlseterrstatus :: (status: *s64) -> s32 #foreign mkl_intel_ilp64;
vmlSetErrStatus :: (status: s64) -> s32 #foreign mkl_intel_ilp64;

VMLGETERRSTATUS :: () -> s32 #foreign mkl_intel_ilp64;
vmlgeterrstatus :: () -> s32 #foreign mkl_intel_ilp64;
vmlGetErrStatus :: () -> s32 #foreign mkl_intel_ilp64;

VMLCLEARERRSTATUS :: () -> s32 #foreign mkl_intel_ilp64;
vmlclearerrstatus :: () -> s32 #foreign mkl_intel_ilp64;
vmlClearErrStatus :: () -> s32 #foreign mkl_intel_ilp64;

VMLSETERRORCALLBACK :: (func: VMLErrorCallBack) -> VMLErrorCallBack #foreign mkl_intel_ilp64;
vmlseterrorcallback :: (func: VMLErrorCallBack) -> VMLErrorCallBack #foreign mkl_intel_ilp64;
vmlSetErrorCallBack :: (func: VMLErrorCallBack) -> VMLErrorCallBack #foreign mkl_intel_ilp64;

VMLGETERRORCALLBACK :: () -> VMLErrorCallBack #foreign mkl_intel_ilp64;
vmlgeterrorcallback :: () -> VMLErrorCallBack #foreign mkl_intel_ilp64;
vmlGetErrorCallBack :: () -> VMLErrorCallBack #foreign mkl_intel_ilp64;

VMLCLEARERRORCALLBACK :: () -> VMLErrorCallBack #foreign mkl_intel_ilp64;
vmlclearerrorcallback :: () -> VMLErrorCallBack #foreign mkl_intel_ilp64;
vmlClearErrorCallBack :: () -> VMLErrorCallBack #foreign mkl_intel_ilp64;

VMLSETMODE :: (newmode: *u64) -> u32 #foreign mkl_intel_ilp64;
vmlsetmode :: (newmode: *u64) -> u32 #foreign mkl_intel_ilp64;
vmlSetMode :: (newmode: u64) -> u32 #foreign mkl_intel_ilp64;

VMLGETMODE :: () -> u32 #foreign mkl_intel_ilp64;
vmlgetmode :: () -> u32 #foreign mkl_intel_ilp64;
vmlGetMode :: () -> u32 #foreign mkl_intel_ilp64;

MKLFREETLS :: (fdwReason: *u64) -> void #foreign mkl_intel_ilp64;
mklfreetls :: (fdwReason: *u64) -> void #foreign mkl_intel_ilp64;
MKLFreeTls :: (fdwReason: u64) -> void #foreign mkl_intel_ilp64;

/*
//  POINTER TO STREAM STATE STRUCTURE
//  This is a void pointer to hide implementation details.
*/
VSLStreamStatePtr :: *void;
VSLConvTaskPtr :: *void;
VSLCorrTaskPtr :: *void;
VSLSSTaskPtr :: *void;

/*
//  POINTERS TO BASIC RANDOM NUMBER GENERATOR FUNCTIONS
//  Each BRNG must have following implementations:
//
//  * Stream initialization (InitStreamPtr)
//  * Integer-value recurrence implementation (iBRngPtr)
//  * Single precision implementation (sBRngPtr) - for random number generation
//    uniformly distributed on the [a,b] interval
//  * Double precision implementation (dBRngPtr) - for random number generation
//    uniformly distributed on the [a,b] interval
*/
InitStreamPtr :: #type (a0: s32, a1: VSLStreamStatePtr, a2: s32, a3: *u32) -> s32 #c_call;

sBRngPtr :: #type (a0: VSLStreamStatePtr, a1: s32, a2: *float, a3: float, a4: float) -> s32 #c_call;

dBRngPtr :: #type (a0: VSLStreamStatePtr, a1: s32, a2: *float64, a3: float64, a4: float64) -> s32 #c_call;

iBRngPtr :: #type (a0: VSLStreamStatePtr, a1: s32, a2: *u32) -> s32 #c_call;

/*********** Pointers to callback functions for abstract streams *************/
iUpdateFuncPtr :: #type (a0: VSLStreamStatePtr, a1: *s32, a2: *u32, a3: *s32, a4: *s32, a5: *s32) -> s32 #c_call;

dUpdateFuncPtr :: #type (a0: VSLStreamStatePtr, a1: *s32, a2: *float64, a3: *s32, a4: *s32, a5: *s32) -> s32 #c_call;

sUpdateFuncPtr :: #type (a0: VSLStreamStatePtr, a1: *s32, a2: *float, a3: *s32, a4: *s32, a5: *s32) -> s32 #c_call;

/*
//  BASIC RANDOM NUMBER GENERATOR PROPERTIES STRUCTURE
//  The structure describes the properties of given basic generator, e.g. size
//  of the stream state structure, pointers to function implementations, etc.
//
//  BRNG properties structure fields:
//  StreamStateSize - size of the stream state structure (in bytes)
//  WordSize        - size of base word (in bytes). Typically this is 4 bytes.
//  NSeeds          - number of words necessary to describe generator's state
//  NBits           - number of bits actually used in base word. For example,
//                    only 31 least significant bits are actually used in
//                    basic random number generator MCG31m1 with 4-byte base
//                    word. NBits field is useful while interpreting random
//                    words as a sequence of random bits.
//  IncludesZero    - FALSE if 0 cannot be generated in integer-valued
//                    implementation; TRUE if 0 can be potentially generated in
//                    integer-valued implementation.
//  InitStream      - pointer to stream state initialization function
//  sBRng           - pointer to single precision implementation
//  dBRng           - pointer to double precision implementation
//  iBRng           - pointer to integer-value implementation
*/
_VSLBRngProperties :: struct {
    StreamStateSize: s32; /* Stream state size (in bytes) */
    NSeeds:          s32; /* Number of seeds */
    IncludesZero:    s32; /* Zero flag */
    WordSize:        s32; /* Size (in bytes) of base word */
    NBits:           s32; /* Number of actually used bits */
    InitStream:      InitStreamPtr; /* Pointer to InitStream func */
    sBRng:           sBRngPtr; /* Pointer to S func */
    dBRng:           dBRngPtr; /* Pointer to D func */
    iBRng:           iBRngPtr; /* Pointer to I func */
}
#run {
    instance: _VSLBRngProperties;
    assert(((cast(*void)(*instance.StreamStateSize)) - cast(*void)(*instance)) == 0, "_VSLBRngProperties.StreamStateSize has unexpected offset % instead of 0", ((cast(*void)(*instance.StreamStateSize)) - cast(*void)(*instance)));
    assert(size_of(type_of(_VSLBRngProperties.StreamStateSize)) == 4, "_VSLBRngProperties.StreamStateSize has unexpected size % instead of 4", size_of(type_of(_VSLBRngProperties.StreamStateSize)));
    assert(((cast(*void)(*instance.NSeeds)) - cast(*void)(*instance)) == 4, "_VSLBRngProperties.NSeeds has unexpected offset % instead of 4", ((cast(*void)(*instance.NSeeds)) - cast(*void)(*instance)));
    assert(size_of(type_of(_VSLBRngProperties.NSeeds)) == 4, "_VSLBRngProperties.NSeeds has unexpected size % instead of 4", size_of(type_of(_VSLBRngProperties.NSeeds)));
    assert(((cast(*void)(*instance.IncludesZero)) - cast(*void)(*instance)) == 8, "_VSLBRngProperties.IncludesZero has unexpected offset % instead of 8", ((cast(*void)(*instance.IncludesZero)) - cast(*void)(*instance)));
    assert(size_of(type_of(_VSLBRngProperties.IncludesZero)) == 4, "_VSLBRngProperties.IncludesZero has unexpected size % instead of 4", size_of(type_of(_VSLBRngProperties.IncludesZero)));
    assert(((cast(*void)(*instance.WordSize)) - cast(*void)(*instance)) == 12, "_VSLBRngProperties.WordSize has unexpected offset % instead of 12", ((cast(*void)(*instance.WordSize)) - cast(*void)(*instance)));
    assert(size_of(type_of(_VSLBRngProperties.WordSize)) == 4, "_VSLBRngProperties.WordSize has unexpected size % instead of 4", size_of(type_of(_VSLBRngProperties.WordSize)));
    assert(((cast(*void)(*instance.NBits)) - cast(*void)(*instance)) == 16, "_VSLBRngProperties.NBits has unexpected offset % instead of 16", ((cast(*void)(*instance.NBits)) - cast(*void)(*instance)));
    assert(size_of(type_of(_VSLBRngProperties.NBits)) == 4, "_VSLBRngProperties.NBits has unexpected size % instead of 4", size_of(type_of(_VSLBRngProperties.NBits)));
    assert(((cast(*void)(*instance.InitStream)) - cast(*void)(*instance)) == 24, "_VSLBRngProperties.InitStream has unexpected offset % instead of 24", ((cast(*void)(*instance.InitStream)) - cast(*void)(*instance)));
    assert(size_of(type_of(_VSLBRngProperties.InitStream)) == 8, "_VSLBRngProperties.InitStream has unexpected size % instead of 8", size_of(type_of(_VSLBRngProperties.InitStream)));
    assert(((cast(*void)(*instance.sBRng)) - cast(*void)(*instance)) == 32, "_VSLBRngProperties.sBRng has unexpected offset % instead of 32", ((cast(*void)(*instance.sBRng)) - cast(*void)(*instance)));
    assert(size_of(type_of(_VSLBRngProperties.sBRng)) == 8, "_VSLBRngProperties.sBRng has unexpected size % instead of 8", size_of(type_of(_VSLBRngProperties.sBRng)));
    assert(((cast(*void)(*instance.dBRng)) - cast(*void)(*instance)) == 40, "_VSLBRngProperties.dBRng has unexpected offset % instead of 40", ((cast(*void)(*instance.dBRng)) - cast(*void)(*instance)));
    assert(size_of(type_of(_VSLBRngProperties.dBRng)) == 8, "_VSLBRngProperties.dBRng has unexpected size % instead of 8", size_of(type_of(_VSLBRngProperties.dBRng)));
    assert(((cast(*void)(*instance.iBRng)) - cast(*void)(*instance)) == 48, "_VSLBRngProperties.iBRng has unexpected offset % instead of 48", ((cast(*void)(*instance.iBRng)) - cast(*void)(*instance)));
    assert(size_of(type_of(_VSLBRngProperties.iBRng)) == 8, "_VSLBRngProperties.iBRng has unexpected size % instead of 8", size_of(type_of(_VSLBRngProperties.iBRng)));
    assert(size_of(_VSLBRngProperties) == 56, "_VSLBRngProperties has size % instead of 56", size_of(_VSLBRngProperties));
}

/*
//  BASIC RANDOM NUMBER GENERATOR PROPERTIES STRUCTURE
//  The structure describes the properties of given basic generator, e.g. size
//  of the stream state structure, pointers to function implementations, etc.
//
//  BRNG properties structure fields:
//  StreamStateSize - size of the stream state structure (in bytes)
//  WordSize        - size of base word (in bytes). Typically this is 4 bytes.
//  NSeeds          - number of words necessary to describe generator's state
//  NBits           - number of bits actually used in base word. For example,
//                    only 31 least significant bits are actually used in
//                    basic random number generator MCG31m1 with 4-byte base
//                    word. NBits field is useful while interpreting random
//                    words as a sequence of random bits.
//  IncludesZero    - FALSE if 0 cannot be generated in integer-valued
//                    implementation; TRUE if 0 can be potentially generated in
//                    integer-valued implementation.
//  InitStream      - pointer to stream state initialization function
//  sBRng           - pointer to single precision implementation
//  dBRng           - pointer to double precision implementation
//  iBRng           - pointer to integer-value implementation
*/
VSLBRngProperties :: _VSLBRngProperties;

vdRngCauchy :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float64, unk4: float64, unk5: float64) -> s32 #foreign mkl_intel_ilp64;
VDRNGCAUCHY :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vdrngcauchy :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vsRngCauchy :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float, unk4: float, unk5: float) -> s32 #foreign mkl_intel_ilp64;
VSRNGCAUCHY :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;
vsrngcauchy :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;

vdRngUniform :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float64, unk4: float64, unk5: float64) -> s32 #foreign mkl_intel_ilp64;
VDRNGUNIFORM :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vdrnguniform :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vsRngUniform :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float, unk4: float, unk5: float) -> s32 #foreign mkl_intel_ilp64;
VSRNGUNIFORM :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;
vsrnguniform :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;

vdRngGaussian :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float64, unk4: float64, unk5: float64) -> s32 #foreign mkl_intel_ilp64;
VDRNGGAUSSIAN :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vdrnggaussian :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vsRngGaussian :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float, unk4: float, unk5: float) -> s32 #foreign mkl_intel_ilp64;
VSRNGGAUSSIAN :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;
vsrnggaussian :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;

vdRngGaussianMV :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float64, unk4: s64, unk5: s64, unk6: *float64, unk7: *float64) -> s32 #foreign mkl_intel_ilp64;
VDRNGGAUSSIANMV :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *s64, unk6: *float64, unk7: *float64) -> s32 #foreign mkl_intel_ilp64;
vdrnggaussianmv :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *s64, unk6: *float64, unk7: *float64) -> s32 #foreign mkl_intel_ilp64;
vsRngGaussianMV :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float, unk4: s64, unk5: s64, unk6: *float, unk7: *float) -> s32 #foreign mkl_intel_ilp64;
VSRNGGAUSSIANMV :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *s64, unk5: *s64, unk6: *float, unk7: *float) -> s32 #foreign mkl_intel_ilp64;
vsrnggaussianmv :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *s64, unk5: *s64, unk6: *float, unk7: *float) -> s32 #foreign mkl_intel_ilp64;

vdRngExponential :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float64, unk4: float64, unk5: float64) -> s32 #foreign mkl_intel_ilp64;
VDRNGEXPONENTIAL :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vdrngexponential :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vsRngExponential :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float, unk4: float, unk5: float) -> s32 #foreign mkl_intel_ilp64;
VSRNGEXPONENTIAL :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;
vsrngexponential :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;

vdRngLaplace :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float64, unk4: float64, unk5: float64) -> s32 #foreign mkl_intel_ilp64;
VDRNGLAPLACE :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vdrnglaplace :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vsRngLaplace :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float, unk4: float, unk5: float) -> s32 #foreign mkl_intel_ilp64;
VSRNGLAPLACE :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;
vsrnglaplace :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;

vdRngWeibull :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float64, unk4: float64, unk5: float64, unk6: float64) -> s32 #foreign mkl_intel_ilp64;
VDRNGWEIBULL :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64) -> s32 #foreign mkl_intel_ilp64;
vdrngweibull :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64) -> s32 #foreign mkl_intel_ilp64;
vsRngWeibull :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float, unk4: float, unk5: float, unk6: float) -> s32 #foreign mkl_intel_ilp64;
VSRNGWEIBULL :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float, unk6: *float) -> s32 #foreign mkl_intel_ilp64;
vsrngweibull :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float, unk6: *float) -> s32 #foreign mkl_intel_ilp64;

vdRngRayleigh :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float64, unk4: float64, unk5: float64) -> s32 #foreign mkl_intel_ilp64;
VDRNGRAYLEIGH :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vdrngrayleigh :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vsRngRayleigh :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float, unk4: float, unk5: float) -> s32 #foreign mkl_intel_ilp64;
VSRNGRAYLEIGH :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;
vsrngrayleigh :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;

vdRngLognormal :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float64, unk4: float64, unk5: float64, unk6: float64, unk7: float64) -> s32 #foreign mkl_intel_ilp64;
VDRNGLOGNORMAL :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *float64) -> s32 #foreign mkl_intel_ilp64;
vdrnglognormal :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *float64) -> s32 #foreign mkl_intel_ilp64;
vsRngLognormal :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float, unk4: float, unk5: float, unk6: float, unk7: float) -> s32 #foreign mkl_intel_ilp64;
VSRNGLOGNORMAL :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *float) -> s32 #foreign mkl_intel_ilp64;
vsrnglognormal :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *float) -> s32 #foreign mkl_intel_ilp64;

vdRngGumbel :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float64, unk4: float64, unk5: float64) -> s32 #foreign mkl_intel_ilp64;
VDRNGGUMBEL :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vdrnggumbel :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vsRngGumbel :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float, unk4: float, unk5: float) -> s32 #foreign mkl_intel_ilp64;
VSRNGGUMBEL :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;
vsrnggumbel :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;

vdRngGamma :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float64, unk4: float64, unk5: float64, unk6: float64) -> s32 #foreign mkl_intel_ilp64;
VDRNGGAMMA :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64) -> s32 #foreign mkl_intel_ilp64;
vdrnggamma :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64) -> s32 #foreign mkl_intel_ilp64;
vsRngGamma :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float, unk4: float, unk5: float, unk6: float) -> s32 #foreign mkl_intel_ilp64;
VSRNGGAMMA :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float, unk6: *float) -> s32 #foreign mkl_intel_ilp64;
vsrnggamma :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float, unk6: *float) -> s32 #foreign mkl_intel_ilp64;

vdRngBeta :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float64, unk4: float64, unk5: float64, unk6: float64, unk7: float64) -> s32 #foreign mkl_intel_ilp64;
VDRNGBETA :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *float64) -> s32 #foreign mkl_intel_ilp64;
vdrngbeta :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *float64) -> s32 #foreign mkl_intel_ilp64;
vsRngBeta :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float, unk4: float, unk5: float, unk6: float, unk7: float) -> s32 #foreign mkl_intel_ilp64;
VSRNGBETA :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *float) -> s32 #foreign mkl_intel_ilp64;
vsrngbeta :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *float) -> s32 #foreign mkl_intel_ilp64;

vdRngChiSquare :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float64, unk4: s32) -> s32 #foreign mkl_intel_ilp64;
VDRNGCHISQUARE :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *s32) -> s32 #foreign mkl_intel_ilp64;
vdrngchisquare :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float64, unk4: *s32) -> s32 #foreign mkl_intel_ilp64;
vsRngChiSquare :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *float, unk4: s32) -> s32 #foreign mkl_intel_ilp64;
VSRNGCHISQUARE :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *s32) -> s32 #foreign mkl_intel_ilp64;
vsrngchisquare :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *float, unk4: *s32) -> s32 #foreign mkl_intel_ilp64;

viRngBernoulli :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *s32, unk4: float64) -> s32 #foreign mkl_intel_ilp64;
VIRNGBERNOULLI :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *float64) -> s32 #foreign mkl_intel_ilp64;
virngbernoulli :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *float64) -> s32 #foreign mkl_intel_ilp64;

viRngUniform :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *s32, unk4: s32, unk5: s32) -> s32 #foreign mkl_intel_ilp64;
VIRNGUNIFORM :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *s32, unk5: *s32) -> s32 #foreign mkl_intel_ilp64;
virnguniform :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *s32, unk5: *s32) -> s32 #foreign mkl_intel_ilp64;

viRngUniformBits :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *u32) -> s32 #foreign mkl_intel_ilp64;
VIRNGUNIFORMBITS :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *u32) -> s32 #foreign mkl_intel_ilp64;
virnguniformbits :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *u32) -> s32 #foreign mkl_intel_ilp64;

viRngUniformBits32 :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *u32) -> s32 #foreign mkl_intel_ilp64;
VIRNGUNIFORMBITS32 :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *u32) -> s32 #foreign mkl_intel_ilp64;
virnguniformbits32 :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *u32) -> s32 #foreign mkl_intel_ilp64;

viRngUniformBits64 :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *u64) -> s32 #foreign mkl_intel_ilp64;
VIRNGUNIFORMBITS64 :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *u64) -> s32 #foreign mkl_intel_ilp64;
virnguniformbits64 :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *u64) -> s32 #foreign mkl_intel_ilp64;

viRngGeometric :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *s32, unk4: float64) -> s32 #foreign mkl_intel_ilp64;
VIRNGGEOMETRIC :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *float64) -> s32 #foreign mkl_intel_ilp64;
virnggeometric :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *float64) -> s32 #foreign mkl_intel_ilp64;

viRngBinomial :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *s32, unk4: s32, unk5: float64) -> s32 #foreign mkl_intel_ilp64;
VIRNGBINOMIAL :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *s32, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
virngbinomial :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *s32, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;

viRngMultinomial :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *s32, unk4: s32, unk5: s32, unk6: *float64) -> s32 #foreign mkl_intel_ilp64;
VIRNGMULTINOMIAL :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *s32, unk5: *s32, unk6: *float64) -> s32 #foreign mkl_intel_ilp64;
virngmultinomial :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *s32, unk5: *s32, unk6: *float64) -> s32 #foreign mkl_intel_ilp64;

viRngHypergeometric :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *s32, unk4: s32, unk5: s32, unk6: s32) -> s32 #foreign mkl_intel_ilp64;
VIRNGHYPERGEOMETRIC :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *s32, unk5: *s32, unk6: *s32) -> s32 #foreign mkl_intel_ilp64;
virnghypergeometric :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *s32, unk5: *s32, unk6: *s32) -> s32 #foreign mkl_intel_ilp64;

viRngNegbinomial :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *s32, unk4: float64, unk5: float64) -> s32 #foreign mkl_intel_ilp64;
viRngNegBinomial :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *s32, unk4: float64, unk5: float64) -> s32 #foreign mkl_intel_ilp64;
VIRNGNEGBINOMIAL :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
virngnegbinomial :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;

viRngPoisson :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *s32, unk4: float64) -> s32 #foreign mkl_intel_ilp64;
VIRNGPOISSON :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *float64) -> s32 #foreign mkl_intel_ilp64;
virngpoisson :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *float64) -> s32 #foreign mkl_intel_ilp64;

viRngPoissonV :: (unk0: s64, unk1: VSLStreamStatePtr, unk2: s64, unk3: *s32, unk4: *float64) -> s32 #foreign mkl_intel_ilp64;
VIRNGPOISSONV :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *float64) -> s32 #foreign mkl_intel_ilp64;
virngpoissonv :: (unk0: *s64, unk1: *VSLStreamStatePtr, unk2: *s64, unk3: *s32, unk4: *float64) -> s32 #foreign mkl_intel_ilp64;

vslNewStream :: (unk0: *VSLStreamStatePtr, unk1: s64, unk2: u64) -> s32 #foreign mkl_intel_ilp64;
vslnewstream :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *u64) -> s32 #foreign mkl_intel_ilp64;
VSLNEWSTREAM :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *u64) -> s32 #foreign mkl_intel_ilp64;

vslNewStreamEx :: (unk0: *VSLStreamStatePtr, unk1: s64, unk2: s64, unk3: *u32) -> s32 #foreign mkl_intel_ilp64;
vslnewstreamex :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *s64, unk3: *u32) -> s32 #foreign mkl_intel_ilp64;
VSLNEWSTREAMEX :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *s64, unk3: *u32) -> s32 #foreign mkl_intel_ilp64;

vsliNewAbstractStream :: (unk0: *VSLStreamStatePtr, unk1: s64, unk2: *u32, unk3: iUpdateFuncPtr) -> s32 #foreign mkl_intel_ilp64;
vslinewabstractstream :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *u32, unk3: iUpdateFuncPtr) -> s32 #foreign mkl_intel_ilp64;
VSLINEWABSTRACTSTREAM :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *u32, unk3: iUpdateFuncPtr) -> s32 #foreign mkl_intel_ilp64;

vsldNewAbstractStream :: (unk0: *VSLStreamStatePtr, unk1: s64, unk2: *float64, unk3: float64, unk4: float64, unk5: dUpdateFuncPtr) -> s32 #foreign mkl_intel_ilp64;
vsldnewabstractstream :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: dUpdateFuncPtr) -> s32 #foreign mkl_intel_ilp64;
VSLDNEWABSTRACTSTREAM :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: dUpdateFuncPtr) -> s32 #foreign mkl_intel_ilp64;

vslsNewAbstractStream :: (unk0: *VSLStreamStatePtr, unk1: s64, unk2: *float, unk3: float, unk4: float, unk5: sUpdateFuncPtr) -> s32 #foreign mkl_intel_ilp64;
vslsnewabstractstream :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *float, unk3: *float, unk4: *float, unk5: sUpdateFuncPtr) -> s32 #foreign mkl_intel_ilp64;
VSLSNEWABSTRACTSTREAM :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *float, unk3: *float, unk4: *float, unk5: sUpdateFuncPtr) -> s32 #foreign mkl_intel_ilp64;

vslDeleteStream :: (unk0: *VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;
vsldeletestream :: (unk0: *VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;
VSLDELETESTREAM :: (unk0: *VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;

vslCopyStream :: (unk0: *VSLStreamStatePtr, unk1: VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;
vslcopystream :: (unk0: *VSLStreamStatePtr, unk1: VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;
VSLCOPYSTREAM :: (unk0: *VSLStreamStatePtr, unk1: VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;

vslCopyStreamState :: (unk0: VSLStreamStatePtr, unk1: VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;
vslcopystreamstate :: (unk0: *VSLStreamStatePtr, unk1: *VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;
VSLCOPYSTREAMSTATE :: (unk0: *VSLStreamStatePtr, unk1: *VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;

vslLeapfrogStream :: (unk0: VSLStreamStatePtr, unk1: s64, unk2: s64) -> s32 #foreign mkl_intel_ilp64;
vslleapfrogstream :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLLEAPFROGSTREAM :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;

vslSkipAheadStream :: (unk0: VSLStreamStatePtr, unk1: s64) -> s32 #foreign mkl_intel_ilp64;
vslskipaheadstream :: (unk0: *VSLStreamStatePtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSKIPAHEADSTREAM :: (unk0: *VSLStreamStatePtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;

vslSkipAheadStreamEx :: (unk0: VSLStreamStatePtr, unk1: s64, unk2: *u64) -> s32 #foreign mkl_intel_ilp64;
vslskipaheadstreamex :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *u64) -> s32 #foreign mkl_intel_ilp64;
VSLSKIPAHEADSTREAMEX :: (unk0: *VSLStreamStatePtr, unk1: *s64, unk2: *u64) -> s32 #foreign mkl_intel_ilp64;

vslGetStreamStateBrng :: (unk0: VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;
vslgetstreamstatebrng :: (unk0: *VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;
VSLGETSTREAMSTATEBRNG :: (unk0: *VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;

vslGetNumRegBrngs :: () -> s32 #foreign mkl_intel_ilp64;
vslgetnumregbrngs :: () -> s32 #foreign mkl_intel_ilp64;
VSLGETNUMREGBRNGS :: () -> s32 #foreign mkl_intel_ilp64;

vslRegisterBrng :: (unk0: *VSLBRngProperties) -> s32 #foreign mkl_intel_ilp64;
vslregisterbrng :: (unk0: *VSLBRngProperties) -> s32 #foreign mkl_intel_ilp64;
VSLREGISTERBRNG :: (unk0: *VSLBRngProperties) -> s32 #foreign mkl_intel_ilp64;

vslGetBrngProperties :: (unk0: s32, unk1: *VSLBRngProperties) -> s32 #foreign mkl_intel_ilp64;
vslgetbrngproperties :: (unk0: *s32, unk1: *VSLBRngProperties) -> s32 #foreign mkl_intel_ilp64;
VSLGETBRNGPROPERTIES :: (unk0: *s32, unk1: *VSLBRngProperties) -> s32 #foreign mkl_intel_ilp64;

vslSaveStreamF :: (unk0: VSLStreamStatePtr, unk1: *u8) -> s32 #foreign mkl_intel_ilp64;
vslsavestreamf :: (unk0: *VSLStreamStatePtr, unk1: *u8, unk2: s32) -> s32 #foreign mkl_intel_ilp64;
VSLSAVESTREAMF :: (unk0: *VSLStreamStatePtr, unk1: *u8, unk2: s32) -> s32 #foreign mkl_intel_ilp64;

vslLoadStreamF :: (unk0: *VSLStreamStatePtr, unk1: *u8) -> s32 #foreign mkl_intel_ilp64;
vslloadstreamf :: (unk0: *VSLStreamStatePtr, unk1: *u8, unk2: s32) -> s32 #foreign mkl_intel_ilp64;
VSLLOADSTREAMF :: (unk0: *VSLStreamStatePtr, unk1: *u8, unk2: s32) -> s32 #foreign mkl_intel_ilp64;

vslSaveStreamM :: (unk0: VSLStreamStatePtr, unk1: *u8) -> s32 #foreign mkl_intel_ilp64;
vslsavestreamm :: (unk0: *VSLStreamStatePtr, unk1: *u8) -> s32 #foreign mkl_intel_ilp64;
VSLSAVESTREAMM :: (unk0: *VSLStreamStatePtr, unk1: *u8) -> s32 #foreign mkl_intel_ilp64;

vslLoadStreamM :: (unk0: *VSLStreamStatePtr, unk1: *u8) -> s32 #foreign mkl_intel_ilp64;
vslloadstreamm :: (unk0: *VSLStreamStatePtr, unk1: *u8) -> s32 #foreign mkl_intel_ilp64;
VSLLOADSTREAMM :: (unk0: *VSLStreamStatePtr, unk1: *u8) -> s32 #foreign mkl_intel_ilp64;

vslGetStreamSize :: (unk0: VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;
vslgetstreamsize :: (unk0: VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;
VSLGETSTREAMSIZE :: (unk0: VSLStreamStatePtr) -> s32 #foreign mkl_intel_ilp64;

vsldConvNewTask :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldconvnewtask :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCONVNEWTASK :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsConvNewTask :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
vslsconvnewtask :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCONVNEWTASK :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzConvNewTask :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
vslzconvnewtask :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCONVNEWTASK :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcConvNewTask :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
vslcconvnewtask :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCONVNEWTASK :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldCorrNewTask :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldcorrnewtask :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCORRNEWTASK :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsCorrNewTask :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
vslscorrnewtask :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCORRNEWTASK :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzCorrNewTask :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
vslzcorrnewtask :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCORRNEWTASK :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcCorrNewTask :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
vslccorrnewtask :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCORRNEWTASK :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldConvNewTask1D :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vsldconvnewtask1d :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCONVNEWTASK1D :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsConvNewTask1D :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vslsconvnewtask1d :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCONVNEWTASK1D :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzConvNewTask1D :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vslzconvnewtask1d :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCONVNEWTASK1D :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcConvNewTask1D :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vslcconvnewtask1d :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCONVNEWTASK1D :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldCorrNewTask1D :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vsldcorrnewtask1d :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCORRNEWTASK1D :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsCorrNewTask1D :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vslscorrnewtask1d :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCORRNEWTASK1D :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzCorrNewTask1D :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vslzcorrnewtask1d :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCORRNEWTASK1D :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcCorrNewTask1D :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vslccorrnewtask1d :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCORRNEWTASK1D :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldConvNewTaskX :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *float64, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldconvnewtaskx :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *float64, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCONVNEWTASKX :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *float64, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsConvNewTaskX :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *float, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
vslsconvnewtaskx :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *float, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCONVNEWTASKX :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *float, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzConvNewTaskX :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *MKL_Complex16, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
vslzconvnewtaskx :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *MKL_Complex16, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCONVNEWTASKX :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *MKL_Complex16, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcConvNewTaskX :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *MKL_Complex8, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
vslcconvnewtaskx :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *MKL_Complex8, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCONVNEWTASKX :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *MKL_Complex8, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldCorrNewTaskX :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *float64, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldcorrnewtaskx :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *float64, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCORRNEWTASKX :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *float64, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsCorrNewTaskX :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *float, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
vslscorrnewtaskx :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *float, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCORRNEWTASKX :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *float, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzCorrNewTaskX :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *MKL_Complex16, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
vslzcorrnewtaskx :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *MKL_Complex16, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCORRNEWTASKX :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *MKL_Complex16, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcCorrNewTaskX :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *MKL_Complex8, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
vslccorrnewtaskx :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *MKL_Complex8, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCORRNEWTASKX :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *s64, unk6: *MKL_Complex8, unk7: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldConvNewTaskX1D :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64, unk5: *float64, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vsldconvnewtaskx1d :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCONVNEWTASKX1D :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsConvNewTaskX1D :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64, unk5: *float, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vslsconvnewtaskx1d :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCONVNEWTASKX1D :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzConvNewTaskX1D :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64, unk5: *MKL_Complex16, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vslzconvnewtaskx1d :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCONVNEWTASKX1D :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcConvNewTaskX1D :: (unk0: *VSLConvTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64, unk5: *MKL_Complex8, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vslcconvnewtaskx1d :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCONVNEWTASKX1D :: (unk0: *VSLConvTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldCorrNewTaskX1D :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64, unk5: *float64, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vsldcorrnewtaskx1d :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCORRNEWTASKX1D :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsCorrNewTaskX1D :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64, unk5: *float, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vslscorrnewtaskx1d :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCORRNEWTASKX1D :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzCorrNewTaskX1D :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64, unk5: *MKL_Complex16, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vslzcorrnewtaskx1d :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCORRNEWTASKX1D :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcCorrNewTaskX1D :: (unk0: *VSLCorrTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: s64, unk5: *MKL_Complex8, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vslccorrnewtaskx1d :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCORRNEWTASKX1D :: (unk0: *VSLCorrTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslConvDeleteTask :: (unk0: *VSLConvTaskPtr) -> s32 #foreign mkl_intel_ilp64;
vslconvdeletetask :: (unk0: *VSLConvTaskPtr) -> s32 #foreign mkl_intel_ilp64;

vslCorrDeleteTask :: (unk0: *VSLCorrTaskPtr) -> s32 #foreign mkl_intel_ilp64;
vslcorrdeletetask :: (unk0: *VSLCorrTaskPtr) -> s32 #foreign mkl_intel_ilp64;

vslConvCopyTask :: (unk0: *VSLConvTaskPtr, unk1: VSLConvTaskPtr) -> s32 #foreign mkl_intel_ilp64;
vslconvcopytask :: (unk0: *VSLConvTaskPtr, unk1: *VSLConvTaskPtr) -> s32 #foreign mkl_intel_ilp64;

vslCorrCopyTask :: (unk0: *VSLCorrTaskPtr, unk1: VSLCorrTaskPtr) -> s32 #foreign mkl_intel_ilp64;
vslcorrcopytask :: (unk0: *VSLCorrTaskPtr, unk1: *VSLCorrTaskPtr) -> s32 #foreign mkl_intel_ilp64;

vslConvSetMode :: (unk0: VSLConvTaskPtr, unk1: s64) -> s32 #foreign mkl_intel_ilp64;
vslconvsetmode :: (unk0: *VSLConvTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCONVSETMODE :: (unk0: *VSLConvTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;

vslCorrSetMode :: (unk0: VSLCorrTaskPtr, unk1: s64) -> s32 #foreign mkl_intel_ilp64;
vslcorrsetmode :: (unk0: *VSLCorrTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCORRSETMODE :: (unk0: *VSLCorrTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;

vslConvSetInternalPrecision :: (unk0: VSLConvTaskPtr, unk1: s64) -> s32 #foreign mkl_intel_ilp64;
vslconvsetinternalprecision :: (unk0: *VSLConvTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCONVSETINTERNALPRECISION :: (unk0: *VSLConvTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;

vslCorrSetInternalPrecision :: (unk0: VSLCorrTaskPtr, unk1: s64) -> s32 #foreign mkl_intel_ilp64;
vslcorrsetinternalprecision :: (unk0: *VSLCorrTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCORRSETINTERNALPRECISION :: (unk0: *VSLCorrTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;

vslConvSetStart :: (unk0: VSLConvTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;
vslconvsetstart :: (unk0: *VSLConvTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCONVSETSTART :: (unk0: *VSLConvTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;

vslCorrSetStart :: (unk0: VSLCorrTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;
vslcorrsetstart :: (unk0: *VSLCorrTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCORRSETSTART :: (unk0: *VSLCorrTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;

vslConvSetDecimation :: (unk0: VSLConvTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;
vslconvsetdecimation :: (unk0: *VSLConvTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCONVSETDECIMATION :: (unk0: *VSLConvTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;

vslCorrSetDecimation :: (unk0: VSLCorrTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;
vslcorrsetdecimation :: (unk0: *VSLCorrTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCORRSETDECIMATION :: (unk0: *VSLCorrTaskPtr, unk1: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldConvExec :: (unk0: VSLConvTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldconvexec :: (unk0: *VSLConvTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCONVEXEC :: (unk0: *VSLConvTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsConvExec :: (unk0: VSLConvTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
vslsconvexec :: (unk0: *VSLConvTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCONVEXEC :: (unk0: *VSLConvTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzConvExec :: (unk0: VSLConvTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
vslzconvexec :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCONVEXEC :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcConvExec :: (unk0: VSLConvTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
vslcconvexec :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCONVEXEC :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldCorrExec :: (unk0: VSLCorrTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldcorrexec :: (unk0: *VSLCorrTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCORREXEC :: (unk0: *VSLCorrTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsCorrExec :: (unk0: VSLCorrTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
vslscorrexec :: (unk0: *VSLCorrTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCORREXEC :: (unk0: *VSLCorrTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzCorrExec :: (unk0: VSLCorrTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
vslzcorrexec :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCORREXEC :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcCorrExec :: (unk0: VSLCorrTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
vslccorrexec :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCORREXEC :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldConvExec1D :: (unk0: VSLConvTaskPtr, unk1: *float64, unk2: s64, unk3: *float64, unk4: s64, unk5: *float64, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vsldconvexec1d :: (unk0: *VSLConvTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCONVEXEC1D :: (unk0: *VSLConvTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsConvExec1D :: (unk0: VSLConvTaskPtr, unk1: *float, unk2: s64, unk3: *float, unk4: s64, unk5: *float, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vslsconvexec1d :: (unk0: *VSLConvTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCONVEXEC1D :: (unk0: *VSLConvTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzConvExec1D :: (unk0: VSLConvTaskPtr, unk1: *MKL_Complex16, unk2: s64, unk3: *MKL_Complex16, unk4: s64, unk5: *MKL_Complex16, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vslzconvexec1d :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCONVEXEC1D :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcConvExec1D :: (unk0: VSLConvTaskPtr, unk1: *MKL_Complex8, unk2: s64, unk3: *MKL_Complex8, unk4: s64, unk5: *MKL_Complex8, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vslcconvexec1d :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCONVEXEC1D :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldCorrExec1D :: (unk0: VSLCorrTaskPtr, unk1: *float64, unk2: s64, unk3: *float64, unk4: s64, unk5: *float64, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vsldcorrexec1d :: (unk0: *VSLCorrTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCORREXEC1D :: (unk0: *VSLCorrTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsCorrExec1D :: (unk0: VSLCorrTaskPtr, unk1: *float, unk2: s64, unk3: *float, unk4: s64, unk5: *float, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vslscorrexec1d :: (unk0: *VSLCorrTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCORREXEC1D :: (unk0: *VSLCorrTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzCorrExec1D :: (unk0: VSLCorrTaskPtr, unk1: *MKL_Complex16, unk2: s64, unk3: *MKL_Complex16, unk4: s64, unk5: *MKL_Complex16, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vslzcorrexec1d :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCORREXEC1D :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64, unk5: *MKL_Complex16, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcCorrExec1D :: (unk0: VSLCorrTaskPtr, unk1: *MKL_Complex8, unk2: s64, unk3: *MKL_Complex8, unk4: s64, unk5: *MKL_Complex8, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
vslccorrexec1d :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCORREXEC1D :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64, unk5: *MKL_Complex8, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldConvExecX :: (unk0: VSLConvTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldconvexecx :: (unk0: *VSLConvTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCONVEXECX :: (unk0: *VSLConvTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsConvExecX :: (unk0: VSLConvTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
vslsconvexecx :: (unk0: *VSLConvTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCONVEXECX :: (unk0: *VSLConvTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzConvExecX :: (unk0: VSLConvTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
vslzconvexecx :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCONVEXECX :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcConvExecX :: (unk0: VSLConvTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
vslcconvexecx :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCONVEXECX :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldCorrExecX :: (unk0: VSLCorrTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldcorrexecx :: (unk0: *VSLCorrTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCORREXECX :: (unk0: *VSLCorrTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsCorrExecX :: (unk0: VSLCorrTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
vslscorrexecx :: (unk0: *VSLCorrTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCORREXECX :: (unk0: *VSLCorrTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzCorrExecX :: (unk0: VSLCorrTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
vslzcorrexecx :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCORREXECX :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcCorrExecX :: (unk0: VSLCorrTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
vslccorrexecx :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCORREXECX :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldConvExecX1D :: (unk0: VSLConvTaskPtr, unk1: *float64, unk2: s64, unk3: *float64, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vsldconvexecx1d :: (unk0: *VSLConvTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCONVEXECX1D :: (unk0: *VSLConvTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsConvExecX1D :: (unk0: VSLConvTaskPtr, unk1: *float, unk2: s64, unk3: *float, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vslsconvexecx1d :: (unk0: *VSLConvTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCONVEXECX1D :: (unk0: *VSLConvTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzConvExecX1D :: (unk0: VSLConvTaskPtr, unk1: *MKL_Complex16, unk2: s64, unk3: *MKL_Complex16, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vslzconvexecx1d :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCONVEXECX1D :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcConvExecX1D :: (unk0: VSLConvTaskPtr, unk1: *MKL_Complex8, unk2: s64, unk3: *MKL_Complex8, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vslcconvexecx1d :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCONVEXECX1D :: (unk0: *VSLConvTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldCorrExecX1D :: (unk0: VSLCorrTaskPtr, unk1: *float64, unk2: s64, unk3: *float64, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vsldcorrexecx1d :: (unk0: *VSLCorrTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDCORREXECX1D :: (unk0: *VSLCorrTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsCorrExecX1D :: (unk0: VSLCorrTaskPtr, unk1: *float, unk2: s64, unk3: *float, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vslscorrexecx1d :: (unk0: *VSLCorrTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSCORREXECX1D :: (unk0: *VSLCorrTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslzCorrExecX1D :: (unk0: VSLCorrTaskPtr, unk1: *MKL_Complex16, unk2: s64, unk3: *MKL_Complex16, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vslzcorrexecx1d :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLZCORREXECX1D :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex16, unk2: *s64, unk3: *MKL_Complex16, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslcCorrExecX1D :: (unk0: VSLCorrTaskPtr, unk1: *MKL_Complex8, unk2: s64, unk3: *MKL_Complex8, unk4: s64) -> s32 #foreign mkl_intel_ilp64;
vslccorrexecx1d :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLCCORREXECX1D :: (unk0: *VSLCorrTaskPtr, unk1: *MKL_Complex8, unk2: *s64, unk3: *MKL_Complex8, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldSSNewTask :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldssnewtask :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSNEWTASK :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsSSNewTask :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
vslsssnewtask :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSSSNEWTASK :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldSSEditTask :: (unk0: VSLSSTaskPtr, unk1: s64, unk2: *float64) -> s32 #foreign mkl_intel_ilp64;
vsldssedittask :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSEDITTASK :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64) -> s32 #foreign mkl_intel_ilp64;

vslsSSEditTask :: (unk0: VSLSSTaskPtr, unk1: s64, unk2: *float) -> s32 #foreign mkl_intel_ilp64;
vslsssedittask :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float) -> s32 #foreign mkl_intel_ilp64;
VSLSSSEDITTASK :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float) -> s32 #foreign mkl_intel_ilp64;

vsliSSEditTask :: (unk0: VSLSSTaskPtr, unk1: s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;
vslissedittask :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLISSEDITTASK :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldSSEditMoments :: (unk0: VSLSSTaskPtr, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *float64) -> s32 #foreign mkl_intel_ilp64;
vsldsseditmoments :: (unk0: *VSLSSTaskPtr, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *float64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSEDITMOMENTS :: (unk0: *VSLSSTaskPtr, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *float64) -> s32 #foreign mkl_intel_ilp64;

vslsSSEditMoments :: (unk0: VSLSSTaskPtr, unk1: *float, unk2: *float, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *float) -> s32 #foreign mkl_intel_ilp64;
vslssseditmoments :: (unk0: *VSLSSTaskPtr, unk1: *float, unk2: *float, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *float) -> s32 #foreign mkl_intel_ilp64;
VSLSSSEDITMOMENTS :: (unk0: *VSLSSTaskPtr, unk1: *float, unk2: *float, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *float) -> s32 #foreign mkl_intel_ilp64;

vsldSSEditSums :: (unk0: VSLSSTaskPtr, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *float64) -> s32 #foreign mkl_intel_ilp64;
vsldsseditsums :: (unk0: *VSLSSTaskPtr, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *float64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSEDITSUMS :: (unk0: *VSLSSTaskPtr, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *float64) -> s32 #foreign mkl_intel_ilp64;

vslsSSEditSums :: (unk0: VSLSSTaskPtr, unk1: *float, unk2: *float, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *float) -> s32 #foreign mkl_intel_ilp64;
vslssseditsums :: (unk0: *VSLSSTaskPtr, unk1: *float, unk2: *float, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *float) -> s32 #foreign mkl_intel_ilp64;
VSLSSSEDITSUMS :: (unk0: *VSLSSTaskPtr, unk1: *float, unk2: *float, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *float) -> s32 #foreign mkl_intel_ilp64;

vsldSSEditCovCor :: (unk0: VSLSSTaskPtr, unk1: *float64, unk2: *float64, unk3: *s64, unk4: *float64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldsseditcovcor :: (unk0: *VSLSSTaskPtr, unk1: *float64, unk2: *float64, unk3: *s64, unk4: *float64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSEDITCOVCOR :: (unk0: *VSLSSTaskPtr, unk1: *float64, unk2: *float64, unk3: *s64, unk4: *float64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsSSEditCovCor :: (unk0: VSLSSTaskPtr, unk1: *float, unk2: *float, unk3: *s64, unk4: *float, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
vslssseditcovcor :: (unk0: *VSLSSTaskPtr, unk1: *float, unk2: *float, unk3: *s64, unk4: *float, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSSSEDITCOVCOR :: (unk0: *VSLSSTaskPtr, unk1: *float, unk2: *float, unk3: *s64, unk4: *float, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldSSEditCP :: (unk0: VSLSSTaskPtr, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldsseditcp :: (unk0: *VSLSSTaskPtr, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSEDITCP :: (unk0: *VSLSSTaskPtr, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsSSEditCP :: (unk0: VSLSSTaskPtr, unk1: *float, unk2: *float, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
vslssseditcp :: (unk0: *VSLSSTaskPtr, unk1: *float, unk2: *float, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSSSEDITCP :: (unk0: *VSLSSTaskPtr, unk1: *float, unk2: *float, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldSSEditPartialCovCor :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *s64, unk4: *float64, unk5: *s64, unk6: *float64, unk7: *s64, unk8: *float64, unk9: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldsseditpartialcovcor :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *s64, unk4: *float64, unk5: *s64, unk6: *float64, unk7: *s64, unk8: *float64, unk9: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSEDITPARTIALCOVCOR :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *s64, unk4: *float64, unk5: *s64, unk6: *float64, unk7: *s64, unk8: *float64, unk9: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsSSEditPartialCovCor :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *s64, unk4: *float, unk5: *s64, unk6: *float, unk7: *s64, unk8: *float, unk9: *s64) -> s32 #foreign mkl_intel_ilp64;
vslssseditpartialcovcor :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *s64, unk4: *float, unk5: *s64, unk6: *float, unk7: *s64, unk8: *float, unk9: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSSSEDITPARTIALCOVCOR :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *s64, unk4: *float, unk5: *s64, unk6: *float, unk7: *s64, unk8: *float, unk9: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldSSEditQuantiles :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldsseditquantiles :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSEDITQUANTILES :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsSSEditQuantiles :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *float, unk4: *float, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
vslssseditquantiles :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *float, unk4: *float, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSSSEDITQUANTILES :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *float, unk4: *float, unk5: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldSSEditStreamQuantiles :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *float64, unk4: *s64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vsldsseditstreamquantiles :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *float64, unk4: *s64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSEDITSTREAMQUANTILES :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *float64, unk4: *s64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;

vslsSSEditStreamQuantiles :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *float, unk4: *s64, unk5: *float) -> s32 #foreign mkl_intel_ilp64;
vslssseditstreamquantiles :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *float, unk4: *s64, unk5: *float) -> s32 #foreign mkl_intel_ilp64;
VSLSSSEDITSTREAMQUANTILES :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *float, unk4: *s64, unk5: *float) -> s32 #foreign mkl_intel_ilp64;

vsldSSEditPooledCovariance :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *float64) -> s32 #foreign mkl_intel_ilp64;
vsldsseditpooledcovariance :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *float64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSEDITPOOLEDCOVARIANCE :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *float64) -> s32 #foreign mkl_intel_ilp64;

vslsSSEditPooledCovariance :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *float, unk4: *s64, unk5: *float, unk6: *float) -> s32 #foreign mkl_intel_ilp64;
vslssseditpooledcovariance :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *float, unk4: *s64, unk5: *float, unk6: *float) -> s32 #foreign mkl_intel_ilp64;
VSLSSSEDITPOOLEDCOVARIANCE :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *float, unk4: *s64, unk5: *float, unk6: *float) -> s32 #foreign mkl_intel_ilp64;

vsldSSEditRobustCovariance :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
vsldsseditrobustcovariance :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSEDITROBUSTCOVARIANCE :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *float64, unk5: *float64) -> s32 #foreign mkl_intel_ilp64;

vslsSSEditRobustCovariance :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;
vslssseditrobustcovariance :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;
VSLSSSEDITROBUSTCOVARIANCE :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *s64, unk3: *float, unk4: *float, unk5: *float) -> s32 #foreign mkl_intel_ilp64;

vsldSSEditOutliersDetection :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *float64) -> s32 #foreign mkl_intel_ilp64;
vsldsseditoutliersdetection :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *float64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSEDITOUTLIERSDETECTION :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *float64) -> s32 #foreign mkl_intel_ilp64;

vslsSSEditOutliersDetection :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *float) -> s32 #foreign mkl_intel_ilp64;
vslssseditoutliersdetection :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *float) -> s32 #foreign mkl_intel_ilp64;
VSLSSSEDITOUTLIERSDETECTION :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *float) -> s32 #foreign mkl_intel_ilp64;

vsldSSEditMissingValues :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *s64, unk4: *float64, unk5: *s64, unk6: *float64, unk7: *s64, unk8: *float64, unk9: *s64, unk10: *float64) -> s32 #foreign mkl_intel_ilp64;
vsldsseditmissingvalues :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *s64, unk4: *float64, unk5: *s64, unk6: *float64, unk7: *s64, unk8: *float64, unk9: *s64, unk10: *float64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSEDITMISSINGVALUES :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float64, unk3: *s64, unk4: *float64, unk5: *s64, unk6: *float64, unk7: *s64, unk8: *float64, unk9: *s64, unk10: *float64) -> s32 #foreign mkl_intel_ilp64;

vslsSSEditMissingValues :: (unk0: VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *s64, unk4: *float, unk5: *s64, unk6: *float, unk7: *s64, unk8: *float, unk9: *s64, unk10: *float) -> s32 #foreign mkl_intel_ilp64;
vslssseditmissingvalues :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *s64, unk4: *float, unk5: *s64, unk6: *float, unk7: *s64, unk8: *float, unk9: *s64, unk10: *float) -> s32 #foreign mkl_intel_ilp64;
VSLSSSEDITMISSINGVALUES :: (unk0: *VSLSSTaskPtr, unk1: *s64, unk2: *float, unk3: *s64, unk4: *float, unk5: *s64, unk6: *float, unk7: *s64, unk8: *float, unk9: *s64, unk10: *float) -> s32 #foreign mkl_intel_ilp64;

vsldSSEditCorParameterization :: (unk0: VSLSSTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
vsldsseditcorparameterization :: (unk0: *VSLSSTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSEDITCORPARAMETERIZATION :: (unk0: *VSLSSTaskPtr, unk1: *float64, unk2: *s64, unk3: *float64, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsSSEditCorParameterization :: (unk0: VSLSSTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
vslssseditcorparameterization :: (unk0: *VSLSSTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSSSEDITCORPARAMETERIZATION :: (unk0: *VSLSSTaskPtr, unk1: *float, unk2: *s64, unk3: *float, unk4: *s64) -> s32 #foreign mkl_intel_ilp64;

vsldSSCompute :: (unk0: VSLSSTaskPtr, unk1: u64, unk2: s64) -> s32 #foreign mkl_intel_ilp64;
vsldsscompute :: (unk0: *VSLSSTaskPtr, unk1: *u64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLDSSCOMPUTE :: (unk0: *VSLSSTaskPtr, unk1: *u64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;

vslsSSCompute :: (unk0: VSLSSTaskPtr, unk1: u64, unk2: s64) -> s32 #foreign mkl_intel_ilp64;
vslssscompute :: (unk0: *VSLSSTaskPtr, unk1: *u64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;
VSLSSSCOMPUTE :: (unk0: *VSLSSTaskPtr, unk1: *u64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;

vslSSDeleteTask :: (unk0: *VSLSSTaskPtr) -> s32 #foreign mkl_intel_ilp64;
vslssdeletetask :: (unk0: *VSLSSTaskPtr) -> s32 #foreign mkl_intel_ilp64;
VSLSSDELETETASK :: (unk0: *VSLSSTaskPtr) -> s32 #foreign mkl_intel_ilp64;

/*
//  POINTER TO DATA FITTING STRUCTURE
//  This is a void pointer to hide implementation details.
*/
DFTaskPtr :: *void;

/*
//  DATA FITTING SEARCH CALLBACK INTERNAL PARAMETERS STRUCTURE
*/
_dfSearchCallBackLibraryParams :: struct {
    limit_type_flag: s32;
}
#run {
    instance: _dfSearchCallBackLibraryParams;
    assert(((cast(*void)(*instance.limit_type_flag)) - cast(*void)(*instance)) == 0, "_dfSearchCallBackLibraryParams.limit_type_flag has unexpected offset % instead of 0", ((cast(*void)(*instance.limit_type_flag)) - cast(*void)(*instance)));
    assert(size_of(type_of(_dfSearchCallBackLibraryParams.limit_type_flag)) == 4, "_dfSearchCallBackLibraryParams.limit_type_flag has unexpected size % instead of 4", size_of(type_of(_dfSearchCallBackLibraryParams.limit_type_flag)));
    assert(size_of(_dfSearchCallBackLibraryParams) == 4, "_dfSearchCallBackLibraryParams has size % instead of 4", size_of(_dfSearchCallBackLibraryParams));
}

/*
//  DATA FITTING SEARCH CALLBACK INTERNAL PARAMETERS STRUCTURE
*/
dfSearchCallBackLibraryParams :: _dfSearchCallBackLibraryParams;

/*
//  DATA FITTING INTERPOLATION CALLBACK INTERNAL PARAMETERS STRUCTURE
*/
_dfInterpCallBackLibraryParams :: struct {
    reserved1: s32;
}
#run {
    instance: _dfInterpCallBackLibraryParams;
    assert(((cast(*void)(*instance.reserved1)) - cast(*void)(*instance)) == 0, "_dfInterpCallBackLibraryParams.reserved1 has unexpected offset % instead of 0", ((cast(*void)(*instance.reserved1)) - cast(*void)(*instance)));
    assert(size_of(type_of(_dfInterpCallBackLibraryParams.reserved1)) == 4, "_dfInterpCallBackLibraryParams.reserved1 has unexpected size % instead of 4", size_of(type_of(_dfInterpCallBackLibraryParams.reserved1)));
    assert(size_of(_dfInterpCallBackLibraryParams) == 4, "_dfInterpCallBackLibraryParams has size % instead of 4", size_of(_dfInterpCallBackLibraryParams));
}

/*
//  DATA FITTING INTERPOLATION CALLBACK INTERNAL PARAMETERS STRUCTURE
*/
dfInterpCallBackLibraryParams :: _dfInterpCallBackLibraryParams;

/*
//  DATA FITTING INTEGRATION CALLBACK INTERNAL PARAMETERS STRUCTURE
*/
_dfIntegrCallBackLibraryParams :: struct {
    reserved1: s32;
}
#run {
    instance: _dfIntegrCallBackLibraryParams;
    assert(((cast(*void)(*instance.reserved1)) - cast(*void)(*instance)) == 0, "_dfIntegrCallBackLibraryParams.reserved1 has unexpected offset % instead of 0", ((cast(*void)(*instance.reserved1)) - cast(*void)(*instance)));
    assert(size_of(type_of(_dfIntegrCallBackLibraryParams.reserved1)) == 4, "_dfIntegrCallBackLibraryParams.reserved1 has unexpected size % instead of 4", size_of(type_of(_dfIntegrCallBackLibraryParams.reserved1)));
    assert(size_of(_dfIntegrCallBackLibraryParams) == 4, "_dfIntegrCallBackLibraryParams has size % instead of 4", size_of(_dfIntegrCallBackLibraryParams));
}

/*
//  DATA FITTING INTEGRATION CALLBACK INTERNAL PARAMETERS STRUCTURE
*/
dfIntegrCallBackLibraryParams :: _dfIntegrCallBackLibraryParams;

/*
//  DATA FITTING CALLBACK FOR SUPPORT OF USER-DEFINED INTERPOLATION AND
//  EXTRAPOLATION
*/
dfsInterpCallBack :: #type (a0: *s64, a1: *s64, a2: *float, a3: *float, a4: *void, a5: *dfInterpCallBackLibraryParams) -> s32 #c_call;
dfdInterpCallBack :: #type (a0: *s64, a1: *s64, a2: *float64, a3: *float64, a4: *void, a5: *dfInterpCallBackLibraryParams) -> s32 #c_call;

/*
//  DATA FITTING CALLBACK FOR SUPPORT OF USER-DEFINED INTEGRATION
*/
dfsIntegrCallBack :: #type (a0: *s64, a1: *s64, a2: *float, a3: *s64, a4: *float, a5: *float, a6: *void, a7: *dfIntegrCallBackLibraryParams) -> s32 #c_call;
dfdIntegrCallBack :: #type (a0: *s64, a1: *s64, a2: *float64, a3: *s64, a4: *float64, a5: *float64, a6: *void, a7: *dfIntegrCallBackLibraryParams) -> s32 #c_call;

/*
//  DATA FITTING CALLBACK FOR SUPPORT OF USER-DEFINED CELL SEARCH
*/
dfsSearchCellsCallBack :: #type (a0: *s64, a1: *float, a2: *s64, a3: *s32, a4: *void, a5: *dfSearchCallBackLibraryParams) -> s32 #c_call;
dfdSearchCellsCallBack :: #type (a0: *s64, a1: *float64, a2: *s64, a3: *s32, a4: *void, a5: *dfSearchCallBackLibraryParams) -> s32 #c_call;

dfsNewTask1D :: (unk0: *DFTaskPtr, unk1: s64, unk2: *float, unk3: s64, unk4: s64, unk5: *float, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
dfsnewtask1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *float, unk3: *s64, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
DFSNEWTASK1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *float, unk3: *s64, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

dfdNewTask1D :: (unk0: *DFTaskPtr, unk1: s64, unk2: *float64, unk3: s64, unk4: s64, unk5: *float64, unk6: s64) -> s32 #foreign mkl_intel_ilp64;
dfdnewtask1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *float64, unk3: *s64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
DFDNEWTASK1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *float64, unk3: *s64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

dfsEditPtr :: (unk0: DFTaskPtr, unk1: s64, unk2: *float) -> s32 #foreign mkl_intel_ilp64;
dfseditptr :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *float) -> s32 #foreign mkl_intel_ilp64;
DFSEDITPTR :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *float) -> s32 #foreign mkl_intel_ilp64;

dfdEditPtr :: (unk0: DFTaskPtr, unk1: s64, unk2: *float64) -> s32 #foreign mkl_intel_ilp64;
dfdeditptr :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *float64) -> s32 #foreign mkl_intel_ilp64;
DFDEDITPTR :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *float64) -> s32 #foreign mkl_intel_ilp64;

dfiEditVal :: (unk0: DFTaskPtr, unk1: s64, unk2: s64) -> s32 #foreign mkl_intel_ilp64;
dfieditval :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;
DFIEDITVAL :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;

dfsEditIdxPtr :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: *float) -> s32 #foreign mkl_intel_ilp64;
dfseditidxptr :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float) -> s32 #foreign mkl_intel_ilp64;
DFSEDITIDXPTR :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float) -> s32 #foreign mkl_intel_ilp64;

dfdEditIdxPtr :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: *float64) -> s32 #foreign mkl_intel_ilp64;
dfdeditidxptr :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float64) -> s32 #foreign mkl_intel_ilp64;
DFDEDITIDXPTR :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float64) -> s32 #foreign mkl_intel_ilp64;

dfsEditPPSpline1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: *float, unk5: s64, unk6: *float, unk7: *float, unk8: s64) -> s32 #foreign mkl_intel_ilp64;
dfseditppspline1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float, unk5: *s64, unk6: *float, unk7: *float, unk8: *s64) -> s32 #foreign mkl_intel_ilp64;
DFSEDITPPSPLINE1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float, unk5: *s64, unk6: *float, unk7: *float, unk8: *s64) -> s32 #foreign mkl_intel_ilp64;

dfdEditPPSpline1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: *float64, unk5: s64, unk6: *float64, unk7: *float64, unk8: s64) -> s32 #foreign mkl_intel_ilp64;
dfdeditppspline1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float64, unk5: *s64, unk6: *float64, unk7: *float64, unk8: *s64) -> s32 #foreign mkl_intel_ilp64;
DFDEDITPPSPLINE1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float64, unk5: *s64, unk6: *float64, unk7: *float64, unk8: *s64) -> s32 #foreign mkl_intel_ilp64;

dfsQueryPtr :: (unk0: DFTaskPtr, unk1: s64, unk2: **float) -> s32 #foreign mkl_intel_ilp64;
dfsqueryptr :: (unk0: *DFTaskPtr, unk1: *s64, unk2: **float) -> s32 #foreign mkl_intel_ilp64;
DFSQUERYPTR :: (unk0: *DFTaskPtr, unk1: *s64, unk2: **float) -> s32 #foreign mkl_intel_ilp64;

dfdQueryPtr :: (unk0: DFTaskPtr, unk1: s64, unk2: **float64) -> s32 #foreign mkl_intel_ilp64;
dfdqueryptr :: (unk0: *DFTaskPtr, unk1: *s64, unk2: **float64) -> s32 #foreign mkl_intel_ilp64;
DFDQUERYPTR :: (unk0: *DFTaskPtr, unk1: *s64, unk2: **float64) -> s32 #foreign mkl_intel_ilp64;

dfiQueryVal :: (unk0: DFTaskPtr, unk1: s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;
dfiqueryval :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;
DFIQUERYVAL :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;

dfsQueryIdxPtr :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: **float) -> s32 #foreign mkl_intel_ilp64;
dfsqueryidxptr :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: **float) -> s32 #foreign mkl_intel_ilp64;
DFSQUERYIDXPTR :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: **float) -> s32 #foreign mkl_intel_ilp64;

dfdQueryIdxPtr :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: **float64) -> s32 #foreign mkl_intel_ilp64;
dfdqueryidxptr :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: **float64) -> s32 #foreign mkl_intel_ilp64;
DFDQUERYIDXPTR :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: **float64) -> s32 #foreign mkl_intel_ilp64;

dfsConstruct1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64) -> s32 #foreign mkl_intel_ilp64;
dfsconstruct1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;
DFSCONSTRUCT1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;

dfdConstruct1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64) -> s32 #foreign mkl_intel_ilp64;
dfdconstruct1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;
DFDCONSTRUCT1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64) -> s32 #foreign mkl_intel_ilp64;

dfsInterpolateEx1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: *float, unk5: s64, unk6: s64, unk7: *s64, unk8: *float, unk9: *float, unk10: s64, unk11: *s64, unk12: dfsInterpCallBack, unk13: *void, unk14: dfsInterpCallBack, unk15: *void, unk16: dfsInterpCallBack, unk17: *void, unk18: dfsSearchCellsCallBack, unk19: *void) -> s32 #foreign mkl_intel_ilp64;
dfsinterpolateex1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float, unk5: *s64, unk6: *s64, unk7: *s64, unk8: *float, unk9: *float, unk10: *s64, unk11: *s64, unk12: dfsInterpCallBack, unk13: *void, unk14: dfsInterpCallBack, unk15: *void, unk16: dfsInterpCallBack, unk17: *void, unk18: dfsSearchCellsCallBack, unk19: *void) -> s32 #foreign mkl_intel_ilp64;
DFSINTERPOLATEEX1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float, unk5: *s64, unk6: *s64, unk7: *s64, unk8: *float, unk9: *float, unk10: *s64, unk11: *s64, unk12: dfsInterpCallBack, unk13: *void, unk14: dfsInterpCallBack, unk15: *void, unk16: dfsInterpCallBack, unk17: *void, unk18: dfsSearchCellsCallBack, unk19: *void) -> s32 #foreign mkl_intel_ilp64;

dfdInterpolateEx1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: *float64, unk5: s64, unk6: s64, unk7: *s64, unk8: *float64, unk9: *float64, unk10: s64, unk11: *s64, unk12: dfdInterpCallBack, unk13: *void, unk14: dfdInterpCallBack, unk15: *void, unk16: dfdInterpCallBack, unk17: *void, unk18: dfdSearchCellsCallBack, unk19: *void) -> s32 #foreign mkl_intel_ilp64;
dfdinterpolateex1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float64, unk5: *s64, unk6: *s64, unk7: *s64, unk8: *float64, unk9: *float64, unk10: *s64, unk11: *s64, unk12: dfdInterpCallBack, unk13: *void, unk14: dfdInterpCallBack, unk15: *void, unk16: dfdInterpCallBack, unk17: *void, unk18: dfdSearchCellsCallBack, unk19: *void) -> s32 #foreign mkl_intel_ilp64;
DFDINTERPOLATEEX1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float64, unk5: *s64, unk6: *s64, unk7: *s64, unk8: *float64, unk9: *float64, unk10: *s64, unk11: *s64, unk12: dfdInterpCallBack, unk13: *void, unk14: dfdInterpCallBack, unk15: *void, unk16: dfdInterpCallBack, unk17: *void, unk18: dfdSearchCellsCallBack, unk19: *void) -> s32 #foreign mkl_intel_ilp64;

dfsInterpolate1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: *float, unk5: s64, unk6: s64, unk7: *s64, unk8: *float, unk9: *float, unk10: s64, unk11: *s64) -> s32 #foreign mkl_intel_ilp64;
dfsinterpolate1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float, unk5: *s64, unk6: *s64, unk7: *s64, unk8: *float, unk9: *float, unk10: *s64, unk11: *s64) -> s32 #foreign mkl_intel_ilp64;
DFSINTERPOLATE1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float, unk5: *s64, unk6: *s64, unk7: *s64, unk8: *float, unk9: *float, unk10: *s64, unk11: *s64) -> s32 #foreign mkl_intel_ilp64;

dfdInterpolate1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: s64, unk4: *float64, unk5: s64, unk6: s64, unk7: *s64, unk8: *float64, unk9: *float64, unk10: s64, unk11: *s64) -> s32 #foreign mkl_intel_ilp64;
dfdinterpolate1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float64, unk5: *s64, unk6: *s64, unk7: *s64, unk8: *float64, unk9: *float64, unk10: *s64, unk11: *s64) -> s32 #foreign mkl_intel_ilp64;
DFDINTERPOLATE1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *s64, unk4: *float64, unk5: *s64, unk6: *s64, unk7: *s64, unk8: *float64, unk9: *float64, unk10: *s64, unk11: *s64) -> s32 #foreign mkl_intel_ilp64;

dfsSearchCellsEx1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: *float, unk4: s64, unk5: *float, unk6: *s64, unk7: dfsSearchCellsCallBack, unk8: *void) -> s32 #foreign mkl_intel_ilp64;
dfssearchcellsex1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64, unk7: dfsSearchCellsCallBack, unk8: *void) -> s32 #foreign mkl_intel_ilp64;
DFSSEARCHCELLSEX1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64, unk7: dfsSearchCellsCallBack, unk8: *void) -> s32 #foreign mkl_intel_ilp64;

dfdSearchCellsEx1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: *float64, unk4: s64, unk5: *float64, unk6: *s64, unk7: dfdSearchCellsCallBack, unk8: *void) -> s32 #foreign mkl_intel_ilp64;
dfdsearchcellsex1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64, unk7: dfdSearchCellsCallBack, unk8: *void) -> s32 #foreign mkl_intel_ilp64;
DFDSEARCHCELLSEX1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64, unk7: dfdSearchCellsCallBack, unk8: *void) -> s32 #foreign mkl_intel_ilp64;

dfsSearchCells1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: *float, unk4: s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
dfssearchcells1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
DFSSEARCHCELLS1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

dfdSearchCells1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: *float64, unk4: s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
dfdsearchcells1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;
DFDSEARCHCELLS1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64) -> s32 #foreign mkl_intel_ilp64;

dfsIntegrate1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: *float, unk4: s64, unk5: *float, unk6: s64, unk7: *float, unk8: *float, unk9: *float, unk10: s64) -> s32 #foreign mkl_intel_ilp64;
dfsintegrate1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64, unk7: *float, unk8: *float, unk9: *float, unk10: *s64) -> s32 #foreign mkl_intel_ilp64;
DFSINTEGRATE1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64, unk7: *float, unk8: *float, unk9: *float, unk10: *s64) -> s32 #foreign mkl_intel_ilp64;

dfdIntegrate1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: *float64, unk4: s64, unk5: *float64, unk6: s64, unk7: *float64, unk8: *float64, unk9: *float64, unk10: s64) -> s32 #foreign mkl_intel_ilp64;
dfdintegrate1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64, unk7: *float64, unk8: *float64, unk9: *float64, unk10: *s64) -> s32 #foreign mkl_intel_ilp64;
DFDINTEGRATE1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64, unk7: *float64, unk8: *float64, unk9: *float64, unk10: *s64) -> s32 #foreign mkl_intel_ilp64;

dfsIntegrateEx1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: *float, unk4: s64, unk5: *float, unk6: s64, unk7: *float, unk8: *float, unk9: *float, unk10: s64, unk11: dfsIntegrCallBack, unk12: *void, unk13: dfsIntegrCallBack, unk14: *void, unk15: dfsIntegrCallBack, unk16: *void, unk17: dfsSearchCellsCallBack, unk18: *void) -> s32 #foreign mkl_intel_ilp64;
dfsintegrateex1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64, unk7: *float, unk8: *float, unk9: *float, unk10: *s64, unk11: dfsIntegrCallBack, unk12: *void, unk13: dfsIntegrCallBack, unk14: *void, unk15: dfsIntegrCallBack, unk16: *void, unk17: dfsSearchCellsCallBack, unk18: *void) -> s32 #foreign mkl_intel_ilp64;
DFSINTEGRATEEX1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float, unk4: *s64, unk5: *float, unk6: *s64, unk7: *float, unk8: *float, unk9: *float, unk10: *s64, unk11: dfsIntegrCallBack, unk12: *void, unk13: dfsIntegrCallBack, unk14: *void, unk15: dfsIntegrCallBack, unk16: *void, unk17: dfsSearchCellsCallBack, unk18: *void) -> s32 #foreign mkl_intel_ilp64;

dfdIntegrateEx1D :: (unk0: DFTaskPtr, unk1: s64, unk2: s64, unk3: *float64, unk4: s64, unk5: *float64, unk6: s64, unk7: *float64, unk8: *float64, unk9: *float64, unk10: s64, unk11: dfdIntegrCallBack, unk12: *void, unk13: dfdIntegrCallBack, unk14: *void, unk15: dfdIntegrCallBack, unk16: *void, unk17: dfdSearchCellsCallBack, unk18: *void) -> s32 #foreign mkl_intel_ilp64;
dfdintegrateex1d :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64, unk7: *float64, unk8: *float64, unk9: *float64, unk10: *s64, unk11: dfdIntegrCallBack, unk12: *void, unk13: dfdIntegrCallBack, unk14: *void, unk15: dfdIntegrCallBack, unk16: *void, unk17: dfdSearchCellsCallBack, unk18: *void) -> s32 #foreign mkl_intel_ilp64;
DFDINTEGRATEEX1D :: (unk0: *DFTaskPtr, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *s64, unk5: *float64, unk6: *s64, unk7: *float64, unk8: *float64, unk9: *float64, unk10: *s64, unk11: dfdIntegrCallBack, unk12: *void, unk13: dfdIntegrCallBack, unk14: *void, unk15: dfdIntegrCallBack, unk16: *void, unk17: dfdSearchCellsCallBack, unk18: *void) -> s32 #foreign mkl_intel_ilp64;

dfDeleteTask :: (unk0: *DFTaskPtr) -> s32 #foreign mkl_intel_ilp64;
dfdeletetask :: (unk0: *DFTaskPtr) -> s32 #foreign mkl_intel_ilp64;
DFDELETETASK :: (unk0: *DFTaskPtr) -> s32 #foreign mkl_intel_ilp64;

/* Descriptor configuration parameters [default values in brackets] */
DFTI_CONFIG_PARAM :: enum s32 {
    FORWARD_DOMAIN         :: 0;

    DIMENSION              :: 1;

    LENGTHS                :: 2;

    PRECISION              :: 3;

    FORWARD_SCALE          :: 4;

    BACKWARD_SCALE         :: 5;

    NUMBER_OF_TRANSFORMS   :: 7;

    COMPLEX_STORAGE        :: 8;

    REAL_STORAGE           :: 9;

    CONJUGATE_EVEN_STORAGE :: 10;

    PLACEMENT              :: 11;

    INPUT_STRIDES          :: 12;

    OUTPUT_STRIDES         :: 13;

    INPUT_DISTANCE         :: 14;

    OUTPUT_DISTANCE        :: 15;

    WORKSPACE              :: 17;

    ORDERING               :: 18;

    TRANSPOSE              :: 19;

    DESCRIPTOR_NAME        :: 20;

    PACKED_FORMAT          :: 21;

    COMMIT_STATUS          :: 22;

    VERSION                :: 23;

    NUMBER_OF_USER_THREADS :: 26;

    THREAD_LIMIT           :: 27;

    DESTROY_INPUT          :: 28;

    FWD_DISTANCE           :: 58;

    BWD_DISTANCE           :: 59;

    DFTI_FORWARD_DOMAIN         :: FORWARD_DOMAIN;

    DFTI_DIMENSION              :: DIMENSION;

    DFTI_LENGTHS                :: LENGTHS;

    DFTI_PRECISION              :: PRECISION;

    DFTI_FORWARD_SCALE          :: FORWARD_SCALE;

    DFTI_BACKWARD_SCALE         :: BACKWARD_SCALE;

    DFTI_NUMBER_OF_TRANSFORMS   :: NUMBER_OF_TRANSFORMS;

    DFTI_COMPLEX_STORAGE        :: COMPLEX_STORAGE;

    DFTI_REAL_STORAGE           :: REAL_STORAGE;

    DFTI_CONJUGATE_EVEN_STORAGE :: CONJUGATE_EVEN_STORAGE;

    DFTI_PLACEMENT              :: PLACEMENT;

    DFTI_INPUT_STRIDES          :: INPUT_STRIDES;

    DFTI_OUTPUT_STRIDES         :: OUTPUT_STRIDES;

    DFTI_INPUT_DISTANCE         :: INPUT_DISTANCE;

    DFTI_OUTPUT_DISTANCE        :: OUTPUT_DISTANCE;

    DFTI_WORKSPACE              :: WORKSPACE;

    DFTI_ORDERING               :: ORDERING;

    DFTI_TRANSPOSE              :: TRANSPOSE;

    DFTI_DESCRIPTOR_NAME        :: DESCRIPTOR_NAME;

    DFTI_PACKED_FORMAT          :: PACKED_FORMAT;

    DFTI_COMMIT_STATUS          :: COMMIT_STATUS;

    DFTI_VERSION                :: VERSION;

    DFTI_NUMBER_OF_USER_THREADS :: NUMBER_OF_USER_THREADS;

    DFTI_THREAD_LIMIT           :: THREAD_LIMIT;

    DFTI_DESTROY_INPUT          :: DESTROY_INPUT;

    DFTI_FWD_DISTANCE           :: FWD_DISTANCE;

    DFTI_BWD_DISTANCE           :: BWD_DISTANCE;
}

/* Values of the descriptor configuration parameters */
DFTI_CONFIG_VALUE :: enum s32 {
    COMMITTED          :: 30;
    UNCOMMITTED        :: 31;

    COMPLEX            :: 32;
    REAL               :: 33;

    SINGLE             :: 35;
    DOUBLE             :: 36;

    COMPLEX_COMPLEX    :: 39;
    COMPLEX_REAL       :: 40;

    REAL_COMPLEX       :: 41;
    REAL_REAL          :: 42;

    INPLACE            :: 43;
    NOT_INPLACE        :: 44;

    ORDERED            :: 48;
    BACKWARD_SCRAMBLED :: 49;

    ALLOW              :: 51;
    AVOID              :: 52;
    NONE               :: 53;

    CCS_FORMAT         :: 54;
    PACK_FORMAT        :: 55;
    PERM_FORMAT        :: 56;
    CCE_FORMAT         :: 57;

    DFTI_COMMITTED          :: COMMITTED;
    DFTI_UNCOMMITTED        :: UNCOMMITTED;

    DFTI_COMPLEX            :: COMPLEX;
    DFTI_REAL               :: REAL;

    DFTI_SINGLE             :: SINGLE;
    DFTI_DOUBLE             :: DOUBLE;

    DFTI_COMPLEX_COMPLEX    :: COMPLEX_COMPLEX;
    DFTI_COMPLEX_REAL       :: COMPLEX_REAL;

    DFTI_REAL_COMPLEX       :: REAL_COMPLEX;
    DFTI_REAL_REAL          :: REAL_REAL;

    DFTI_INPLACE            :: INPLACE;
    DFTI_NOT_INPLACE        :: NOT_INPLACE;

    DFTI_ORDERED            :: ORDERED;
    DFTI_BACKWARD_SCRAMBLED :: BACKWARD_SCRAMBLED;

    DFTI_ALLOW              :: ALLOW;
    DFTI_AVOID              :: AVOID;
    DFTI_NONE               :: NONE;

    DFTI_CCS_FORMAT         :: CCS_FORMAT;
    DFTI_PACK_FORMAT        :: PACK_FORMAT;
    DFTI_PERM_FORMAT        :: PERM_FORMAT;
    DFTI_CCE_FORMAT         :: CCE_FORMAT;
}

DFTI_DESCRIPTOR :: struct {}
DFTI_DESCRIPTOR_HANDLE :: *DFTI_DESCRIPTOR;

DftiCreateDescriptor :: (unk0: *DFTI_DESCRIPTOR_HANDLE, unk1: DFTI_CONFIG_VALUE, unk2: DFTI_CONFIG_VALUE, unk3: s64, __args: ..Any) -> s64 #foreign mkl_intel_ilp64;

DftiCopyDescriptor :: (unk0: DFTI_DESCRIPTOR_HANDLE, unk1: *DFTI_DESCRIPTOR_HANDLE) -> s64 #foreign mkl_intel_ilp64;

DftiCommitDescriptor :: (unk0: DFTI_DESCRIPTOR_HANDLE) -> s64 #foreign mkl_intel_ilp64;
DftiComputeForward :: (unk0: DFTI_DESCRIPTOR_HANDLE, unk1: *void, __args: ..Any) -> s64 #foreign mkl_intel_ilp64;
DftiComputeBackward :: (unk0: DFTI_DESCRIPTOR_HANDLE, unk1: *void, __args: ..Any) -> s64 #foreign mkl_intel_ilp64;
DftiSetValue :: (unk0: DFTI_DESCRIPTOR_HANDLE, unk1: DFTI_CONFIG_PARAM, __args: ..Any) -> s64 #foreign mkl_intel_ilp64;
DftiGetValue :: (unk0: DFTI_DESCRIPTOR_HANDLE, unk1: DFTI_CONFIG_PARAM, __args: ..Any) -> s64 #foreign mkl_intel_ilp64;
DftiFreeDescriptor :: (unk0: *DFTI_DESCRIPTOR_HANDLE) -> s64 #foreign mkl_intel_ilp64;
DftiErrorMessage :: (unk0: s64) -> *u8 #foreign mkl_intel_ilp64;
DftiErrorClass :: (unk0: s64, unk1: s64) -> s64 #foreign mkl_intel_ilp64;

/**********************************************************************
* INTERNAL INTERFACES. These internal interfaces are not intended to
* be called directly by oneMKL users and may change in future releases.
*/
DftiCreateDescriptor_s_1d :: (unk0: *DFTI_DESCRIPTOR_HANDLE, domain: DFTI_CONFIG_VALUE, __args: ..Any) -> s64 #foreign mkl_intel_ilp64;

DftiCreateDescriptor_s_md :: (unk0: *DFTI_DESCRIPTOR_HANDLE, domain: DFTI_CONFIG_VALUE, many: s64, __args: ..Any) -> s64 #foreign mkl_intel_ilp64;

DftiCreateDescriptor_d_1d :: (unk0: *DFTI_DESCRIPTOR_HANDLE, domain: DFTI_CONFIG_VALUE, __args: ..Any) -> s64 #foreign mkl_intel_ilp64;

DftiCreateDescriptor_d_md :: (unk0: *DFTI_DESCRIPTOR_HANDLE, domain: DFTI_CONFIG_VALUE, many: s64, __args: ..Any) -> s64 #foreign mkl_intel_ilp64;

/* TT lower case */
d_init_trig_transform :: (unk0: *s64, unk1: *s64, unk2: *s64, unk3: *float64, unk4: *s64) -> void #foreign mkl_intel_ilp64;
d_commit_trig_transform :: (unk0: *float64, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *s64, unk3: *float64, unk4: *s64) -> void #foreign mkl_intel_ilp64;
d_forward_trig_transform :: (unk0: *float64, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *s64, unk3: *float64, unk4: *s64) -> void #foreign mkl_intel_ilp64;
d_backward_trig_transform :: (unk0: *float64, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *s64, unk3: *float64, unk4: *s64) -> void #foreign mkl_intel_ilp64;
s_init_trig_transform :: (unk0: *s64, unk1: *s64, unk2: *s64, unk3: *float, unk4: *s64) -> void #foreign mkl_intel_ilp64;
s_commit_trig_transform :: (unk0: *float, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *s64, unk3: *float, unk4: *s64) -> void #foreign mkl_intel_ilp64;
s_forward_trig_transform :: (unk0: *float, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *s64, unk3: *float, unk4: *s64) -> void #foreign mkl_intel_ilp64;
s_backward_trig_transform :: (unk0: *float, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *s64, unk3: *float, unk4: *s64) -> void #foreign mkl_intel_ilp64;
free_trig_transform :: (unk0: *DFTI_DESCRIPTOR_HANDLE, unk1: *s64, unk2: *s64) -> void #foreign mkl_intel_ilp64;

d_init_helmholtz_2d :: (unk0: *float64, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *s64, unk5: *s64, unk6: *u8, unk7: *float64, unk8: *s64, unk9: *float64, unk10: *s64) -> void #foreign mkl_intel_ilp64;
d_commit_helmholtz_2d :: (unk0: *float64, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *DFTI_DESCRIPTOR_HANDLE, unk6: *s64, unk7: *float64, unk8: *s64) -> void #foreign mkl_intel_ilp64;
d_helmholtz_2d :: (unk0: *float64, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *DFTI_DESCRIPTOR_HANDLE, unk6: *s64, unk7: *float64, unk8: *s64) -> void #foreign mkl_intel_ilp64;
free_helmholtz_2d :: (unk0: *DFTI_DESCRIPTOR_HANDLE, unk1: *s64, unk2: *s64) -> void #foreign mkl_intel_ilp64;

d_init_helmholtz_3d :: (unk0: *float64, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *s64, unk7: *s64, unk8: *s64, unk9: *u8, unk10: *float64, unk11: *s64, unk12: *float64, unk13: *s64) -> void #foreign mkl_intel_ilp64;
d_commit_helmholtz_3d :: (unk0: *float64, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *DFTI_DESCRIPTOR_HANDLE, unk8: *DFTI_DESCRIPTOR_HANDLE, unk9: *s64, unk10: *float64, unk11: *s64) -> void #foreign mkl_intel_ilp64;
d_helmholtz_3d :: (unk0: *float64, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *float64, unk5: *float64, unk6: *float64, unk7: *DFTI_DESCRIPTOR_HANDLE, unk8: *DFTI_DESCRIPTOR_HANDLE, unk9: *s64, unk10: *float64, unk11: *s64) -> void #foreign mkl_intel_ilp64;
free_helmholtz_3d :: (unk0: *DFTI_DESCRIPTOR_HANDLE, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *s64, unk3: *s64) -> void #foreign mkl_intel_ilp64;

s_init_helmholtz_2d :: (unk0: *float, unk1: *float, unk2: *float, unk3: *float, unk4: *s64, unk5: *s64, unk6: *u8, unk7: *float, unk8: *s64, unk9: *float, unk10: *s64) -> void #foreign mkl_intel_ilp64;
s_commit_helmholtz_2d :: (unk0: *float, unk1: *float, unk2: *float, unk3: *float, unk4: *float, unk5: *DFTI_DESCRIPTOR_HANDLE, unk6: *s64, unk7: *float, unk8: *s64) -> void #foreign mkl_intel_ilp64;
s_helmholtz_2d :: (unk0: *float, unk1: *float, unk2: *float, unk3: *float, unk4: *float, unk5: *DFTI_DESCRIPTOR_HANDLE, unk6: *s64, unk7: *float, unk8: *s64) -> void #foreign mkl_intel_ilp64;

s_init_helmholtz_3d :: (unk0: *float, unk1: *float, unk2: *float, unk3: *float, unk4: *float, unk5: *float, unk6: *s64, unk7: *s64, unk8: *s64, unk9: *u8, unk10: *float, unk11: *s64, unk12: *float, unk13: *s64) -> void #foreign mkl_intel_ilp64;
s_commit_helmholtz_3d :: (unk0: *float, unk1: *float, unk2: *float, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *DFTI_DESCRIPTOR_HANDLE, unk8: *DFTI_DESCRIPTOR_HANDLE, unk9: *s64, unk10: *float, unk11: *s64) -> void #foreign mkl_intel_ilp64;
s_helmholtz_3d :: (unk0: *float, unk1: *float, unk2: *float, unk3: *float, unk4: *float, unk5: *float, unk6: *float, unk7: *DFTI_DESCRIPTOR_HANDLE, unk8: *DFTI_DESCRIPTOR_HANDLE, unk9: *s64, unk10: *float, unk11: *s64) -> void #foreign mkl_intel_ilp64;

d_init_sph_p :: (unk0: *float64, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *s64, unk5: *s64, unk6: *float64, unk7: *s64, unk8: *float64, unk9: *s64) -> void #foreign mkl_intel_ilp64;
d_commit_sph_p :: (unk0: *float64, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *DFTI_DESCRIPTOR_HANDLE, unk3: *s64, unk4: *float64, unk5: *s64) -> void #foreign mkl_intel_ilp64;
d_sph_p :: (unk0: *float64, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *DFTI_DESCRIPTOR_HANDLE, unk3: *s64, unk4: *float64, unk5: *s64) -> void #foreign mkl_intel_ilp64;
free_sph_p :: (unk0: *DFTI_DESCRIPTOR_HANDLE, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *s64, unk3: *s64) -> void #foreign mkl_intel_ilp64;

d_init_sph_np :: (unk0: *float64, unk1: *float64, unk2: *float64, unk3: *float64, unk4: *s64, unk5: *s64, unk6: *float64, unk7: *s64, unk8: *float64, unk9: *s64) -> void #foreign mkl_intel_ilp64;
d_commit_sph_np :: (unk0: *float64, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *s64, unk3: *float64, unk4: *s64) -> void #foreign mkl_intel_ilp64;
d_sph_np :: (unk0: *float64, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *s64, unk3: *float64, unk4: *s64) -> void #foreign mkl_intel_ilp64;
free_sph_np :: (unk0: *DFTI_DESCRIPTOR_HANDLE, unk1: *s64, unk2: *s64) -> void #foreign mkl_intel_ilp64;

s_init_sph_p :: (unk0: *float, unk1: *float, unk2: *float, unk3: *float, unk4: *s64, unk5: *s64, unk6: *float, unk7: *s64, unk8: *float, unk9: *s64) -> void #foreign mkl_intel_ilp64;
s_commit_sph_p :: (unk0: *float, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *DFTI_DESCRIPTOR_HANDLE, unk3: *s64, unk4: *float, unk5: *s64) -> void #foreign mkl_intel_ilp64;
s_sph_p :: (unk0: *float, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *DFTI_DESCRIPTOR_HANDLE, unk3: *s64, unk4: *float, unk5: *s64) -> void #foreign mkl_intel_ilp64;

s_init_sph_np :: (unk0: *float, unk1: *float, unk2: *float, unk3: *float, unk4: *s64, unk5: *s64, unk6: *float, unk7: *s64, unk8: *float, unk9: *s64) -> void #foreign mkl_intel_ilp64;
s_commit_sph_np :: (unk0: *float, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *s64, unk3: *float, unk4: *s64) -> void #foreign mkl_intel_ilp64;
s_sph_np :: (unk0: *float, unk1: *DFTI_DESCRIPTOR_HANDLE, unk2: *s64, unk3: *float, unk4: *s64) -> void #foreign mkl_intel_ilp64;

feastinit :: (fpm: *s64) -> void #foreign mkl_intel_ilp64;
FEASTINIT :: (fpm: *s64) -> void #foreign mkl_intel_ilp64;

dfeast_scsrev :: (uplo: *u8, n: *s64, sa: *float64, isa: *s64, jsa: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
DFEAST_SCSREV :: (uplo: *u8, n: *s64, sa: *float64, isa: *s64, jsa: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

sfeast_sygv :: (uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
SFEAST_SYGV :: (uplo: *u8, n: *s64, a: *float, lda: *s64, b: *float, ldb: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sfeast_scsrev :: (uplo: *u8, n: *s64, sa: *float, isa: *s64, jsa: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
SFEAST_SCSREV :: (uplo: *u8, n: *s64, sa: *float, isa: *s64, jsa: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

zfeast_hbgv :: (uplo: *u8, n: *s64, kla: *s64, a: *MKL_Complex16, lda: *s64, klb: *s64, b: *MKL_Complex16, ldb: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
ZFEAST_HBGV :: (uplo: *u8, n: *s64, kla: *s64, a: *MKL_Complex16, lda: *s64, klb: *s64, b: *MKL_Complex16, ldb: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zfeast_hcsrev :: (uplo: *u8, n: *s64, sa: *MKL_Complex16, isa: *s64, jsa: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
ZFEAST_HCSREV :: (uplo: *u8, n: *s64, sa: *MKL_Complex16, isa: *s64, jsa: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

cfeast_hbev :: (uplo: *u8, n: *s64, kla: *s64, a: *MKL_Complex8, lda: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
CFEAST_HBEV :: (uplo: *u8, n: *s64, kla: *s64, a: *MKL_Complex8, lda: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

zfeast_heev :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
ZFEAST_HEEV :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

zfeast_hcsrgv :: (uplo: *u8, n: *s64, sa: *MKL_Complex16, isa: *s64, jsa: *s64, sb: *MKL_Complex16, isb: *s64, jsb: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
ZFEAST_HCSRGV :: (uplo: *u8, n: *s64, sa: *MKL_Complex16, isa: *s64, jsa: *s64, sb: *MKL_Complex16, isb: *s64, jsb: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

sfeast_scsrgv :: (uplo: *u8, n: *s64, sa: *float, isa: *s64, jsa: *s64, sb: *float, isb: *s64, jsb: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
SFEAST_SCSRGV :: (uplo: *u8, n: *s64, sa: *float, isa: *s64, jsa: *s64, sb: *float, isb: *s64, jsb: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

dfeast_srci :: (ijob: *s64, n: *s64, ze: *MKL_Complex16, work: *float64, workc: *MKL_Complex16, aq: *float64, sq: *float64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, lambda: *float64, q: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
DFEAST_SRCI :: (ijob: *s64, n: *s64, ze: *MKL_Complex16, work: *float64, workc: *MKL_Complex16, aq: *float64, sq: *float64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, lambda: *float64, q: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

sfeast_sbev :: (uplo: *u8, n: *s64, kla: *s64, a: *float, lda: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
SFEAST_SBEV :: (uplo: *u8, n: *s64, kla: *s64, a: *float, lda: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

dfeast_sygv :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
DFEAST_SYGV :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, b: *float64, ldb: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

cfeast_hegv :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
CFEAST_HEGV :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, b: *MKL_Complex8, ldb: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

zfeast_hrci :: (ijob: *s64, n: *s64, ze: *MKL_Complex16, work: *MKL_Complex16, workc: *MKL_Complex16, zaq: *MKL_Complex16, zsq: *MKL_Complex16, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, lambda: *float64, q: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
ZFEAST_HRCI :: (ijob: *s64, n: *s64, ze: *MKL_Complex16, work: *MKL_Complex16, workc: *MKL_Complex16, zaq: *MKL_Complex16, zsq: *MKL_Complex16, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, lambda: *float64, q: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

cfeast_hrci :: (ijob: *s64, n: *s64, ze: *MKL_Complex8, work: *MKL_Complex8, workc: *MKL_Complex8, zaq: *MKL_Complex8, zsq: *MKL_Complex8, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, lambda: *float, q: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
CFEAST_HRCI :: (ijob: *s64, n: *s64, ze: *MKL_Complex8, work: *MKL_Complex8, workc: *MKL_Complex8, zaq: *MKL_Complex8, zsq: *MKL_Complex8, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, lambda: *float, q: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

zfeast_hegv :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
ZFEAST_HEGV :: (uplo: *u8, n: *s64, a: *MKL_Complex16, lda: *s64, b: *MKL_Complex16, ldb: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

sfeast_srci :: (ijob: *s64, n: *s64, ze: *MKL_Complex8, work: *float, workc: *MKL_Complex8, aq: *float, sq: *float, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, lambda: *float, q: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
SFEAST_SRCI :: (ijob: *s64, n: *s64, ze: *MKL_Complex8, work: *float, workc: *MKL_Complex8, aq: *float, sq: *float, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, lambda: *float, q: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

dfeast_scsrgv :: (uplo: *u8, n: *s64, sa: *float64, isa: *s64, jsa: *s64, sb: *float64, isb: *s64, jsb: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
DFEAST_SCSRGV :: (uplo: *u8, n: *s64, sa: *float64, isa: *s64, jsa: *s64, sb: *float64, isb: *s64, jsb: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

sfeast_syev :: (uplo: *u8, n: *s64, a: *float, lda: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
SFEAST_SYEV :: (uplo: *u8, n: *s64, a: *float, lda: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cfeast_hcsrev :: (uplo: *u8, n: *s64, sa: *MKL_Complex8, isa: *s64, jsa: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
CFEAST_HCSREV :: (uplo: *u8, n: *s64, sa: *MKL_Complex8, isa: *s64, jsa: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

zfeast_hbev :: (uplo: *u8, n: *s64, kla: *s64, a: *MKL_Complex16, lda: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
ZFEAST_HBEV :: (uplo: *u8, n: *s64, kla: *s64, a: *MKL_Complex16, lda: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *MKL_Complex16, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dfeast_sbgv :: (uplo: *u8, n: *s64, kla: *s64, a: *float64, lda: *s64, klb: *s64, b: *float64, ldb: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
DFEAST_SBGV :: (uplo: *u8, n: *s64, kla: *s64, a: *float64, lda: *s64, klb: *s64, b: *float64, ldb: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

cfeast_hbgv :: (uplo: *u8, n: *s64, kla: *s64, a: *MKL_Complex8, lda: *s64, klb: *s64, b: *MKL_Complex8, ldb: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
CFEAST_HBGV :: (uplo: *u8, n: *s64, kla: *s64, a: *MKL_Complex8, lda: *s64, klb: *s64, b: *MKL_Complex8, ldb: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cfeast_heev :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
CFEAST_HEEV :: (uplo: *u8, n: *s64, a: *MKL_Complex8, lda: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

sfeast_sbgv :: (uplo: *u8, n: *s64, kla: *s64, a: *float, lda: *s64, klb: *s64, b: *float, ldb: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
SFEAST_SBGV :: (uplo: *u8, n: *s64, kla: *s64, a: *float, lda: *s64, klb: *s64, b: *float, ldb: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *float, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

cfeast_hcsrgv :: (uplo: *u8, n: *s64, sa: *MKL_Complex8, isa: *s64, jsa: *s64, sb: *MKL_Complex8, isb: *s64, jsb: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;
CFEAST_HCSRGV :: (uplo: *u8, n: *s64, sa: *MKL_Complex8, isa: *s64, jsa: *s64, sb: *MKL_Complex8, isb: *s64, jsb: *s64, fpm: *s64, epsout: *float, loop: *s64, emin: *float, emax: *float, m0: *s64, e: *float, x: *MKL_Complex8, m: *s64, res: *float, info: *s64) -> void #foreign mkl_intel_ilp64;

dfeast_syev :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
DFEAST_SYEV :: (uplo: *u8, n: *s64, a: *float64, lda: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

dfeast_sbev :: (uplo: *u8, n: *s64, kla: *s64, a: *float64, lda: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;
DFEAST_SBEV :: (uplo: *u8, n: *s64, kla: *s64, a: *float64, lda: *s64, fpm: *s64, epsout: *float64, loop: *s64, emin: *float64, emax: *float64, m0: *s64, e: *float64, x: *float64, m: *s64, res: *float64, info: *s64) -> void #foreign mkl_intel_ilp64;

mkl_sparse_ee_init :: (pm: *s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_gv :: (which: *u8, pm: *s64, A: sparse_matrix_t, descrA: matrix_descr, B: sparse_matrix_t, descrB: matrix_descr, k0: s64, k: *s64, E: *float64, X: *float64, res: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;
mkl_sparse_s_gv :: (which: *u8, pm: *s64, A: sparse_matrix_t, descrA: matrix_descr, B: sparse_matrix_t, descrB: matrix_descr, k0: s64, k: *s64, E: *float, X: *float, res: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_ev :: (which: *u8, pm: *s64, A: sparse_matrix_t, descrA: matrix_descr, k0: s64, k: *s64, E: *float64, X: *float64, res: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;
mkl_sparse_s_ev :: (which: *u8, pm: *s64, A: sparse_matrix_t, descrA: matrix_descr, k0: s64, k: *s64, E: *float, X: *float, res: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_svd :: (whichE: *u8, whichV: *u8, pm: *s64, A: sparse_matrix_t, descrA: matrix_descr, k0: s64, k: *s64, E: *float64, XL: *float64, XR: *float64, res: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;
mkl_sparse_s_svd :: (whichE: *u8, whichV: *u8, pm: *s64, A: sparse_matrix_t, descrA: matrix_descr, k0: s64, k: *s64, E: *float, X: *float, XR: *float, res: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_get_format_compact :: () -> MKL_COMPACT_PACK #foreign mkl_intel_ilp64;

mkl_sget_size_compact :: (ld: s64, sd: s64, format: MKL_COMPACT_PACK, nm: s64) -> s64 #foreign mkl_intel_ilp64;

mkl_sgepack_compact :: (layout: MKL_LAYOUT, rows: s64, columns: s64, a: **float, lda: s64, ap: *float, ldap: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_sgeunpack_compact :: (layout: MKL_LAYOUT, rows: s64, columns: s64, a: **float, lda: s64, ap: *float, ldap: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_sgemm_compact :: (layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: s64, n: s64, k: s64, alpha: float, ap: *float, ldap: s64, bp: *float, ldbp: s64, beta: float, cp: *float, ldcp: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_strsm_compact :: (layout: MKL_LAYOUT, side: MKL_SIDE, uplo: MKL_UPLO, transa: MKL_TRANSPOSE, diag: MKL_DIAG, m: s64, n: s64, alpha: float, ap: *float, ldap: s64, bp: *float, ldbp: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_dget_size_compact :: (ld: s64, sd: s64, format: MKL_COMPACT_PACK, nm: s64) -> s64 #foreign mkl_intel_ilp64;

mkl_dgepack_compact :: (layout: MKL_LAYOUT, rows: s64, columns: s64, a: **float64, lda: s64, ap: *float64, ldap: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_dgeunpack_compact :: (layout: MKL_LAYOUT, rows: s64, columns: s64, a: **float64, lda: s64, ap: *float64, ldap: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_dgemm_compact :: (layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: s64, n: s64, k: s64, alpha: float64, a: *float64, ldap: s64, b: *float64, ldbp: s64, beta: float64, c: *float64, ldcp: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_dtrsm_compact :: (layout: MKL_LAYOUT, side: MKL_SIDE, uplo: MKL_UPLO, transa: MKL_TRANSPOSE, diag: MKL_DIAG, m: s64, n: s64, alpha: float64, a: *float64, ldap: s64, b: *float64, ldbp: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_cget_size_compact :: (ld: s64, sd: s64, format: MKL_COMPACT_PACK, nm: s64) -> s64 #foreign mkl_intel_ilp64;

mkl_cgepack_compact :: (layout: MKL_LAYOUT, rows: s64, columns: s64, a: **MKL_Complex8, lda: s64, ap: *float, ldap: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_cgeunpack_compact :: (layout: MKL_LAYOUT, rows: s64, columns: s64, a: **MKL_Complex8, lda: s64, ap: *float, ldap: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_cgemm_compact :: (layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: s64, n: s64, k: s64, alpha: *MKL_Complex8, a: *float, ldap: s64, b: *float, ldbp: s64, beta: *MKL_Complex8, c: *float, ldcp: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_ctrsm_compact :: (layout: MKL_LAYOUT, side: MKL_SIDE, uplo: MKL_UPLO, transa: MKL_TRANSPOSE, diag: MKL_DIAG, m: s64, n: s64, alpha: *MKL_Complex8, a: *float, ldap: s64, b: *float, ldbp: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_zget_size_compact :: (ld: s64, sd: s64, format: MKL_COMPACT_PACK, nm: s64) -> s64 #foreign mkl_intel_ilp64;

mkl_zgepack_compact :: (layout: MKL_LAYOUT, rows: s64, columns: s64, a: **MKL_Complex16, lda: s64, ap: *float64, ldap: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_zgeunpack_compact :: (layout: MKL_LAYOUT, rows: s64, columns: s64, a: **MKL_Complex16, lda: s64, ap: *float64, ldap: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_zgemm_compact :: (layout: MKL_LAYOUT, transa: MKL_TRANSPOSE, transb: MKL_TRANSPOSE, m: s64, n: s64, k: s64, alpha: *MKL_Complex16, a: *float64, ldap: s64, b: *float64, ldbp: s64, beta: *MKL_Complex16, c: *float64, ldcp: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_ztrsm_compact :: (layout: MKL_LAYOUT, side: MKL_SIDE, uplo: MKL_UPLO, transa: MKL_TRANSPOSE, diag: MKL_DIAG, m: s64, n: s64, alpha: *MKL_Complex16, a: *float64, ldap: s64, b: *float64, ldbp: s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

/* LAPACK compact routines */
mkl_cgetrinp_compact :: (layout: MKL_LAYOUT, n: s64, ap: *float, ldap: s64, work: *float, lwork: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_dgetrinp_compact :: (layout: MKL_LAYOUT, n: s64, ap: *float64, ldap: s64, work: *float64, lwork: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_sgetrinp_compact :: (layout: MKL_LAYOUT, n: s64, ap: *float, ldap: s64, work: *float, lwork: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_zgetrinp_compact :: (layout: MKL_LAYOUT, n: s64, ap: *float64, ldap: s64, work: *float64, lwork: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_cgetrfnp_compact :: (layout: MKL_LAYOUT, m: s64, n: s64, ap: *float, ldap: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_dgetrfnp_compact :: (layout: MKL_LAYOUT, m: s64, n: s64, ap: *float64, ldap: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_sgetrfnp_compact :: (layout: MKL_LAYOUT, m: s64, n: s64, ap: *float, ldap: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_zgetrfnp_compact :: (layout: MKL_LAYOUT, m: s64, n: s64, ap: *float64, ldap: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_cpotrf_compact :: (layout: MKL_LAYOUT, uplo: MKL_UPLO, n: s64, ap: *float, ldap: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_dpotrf_compact :: (layout: MKL_LAYOUT, uplo: MKL_UPLO, n: s64, ap: *float64, ldap: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_spotrf_compact :: (layout: MKL_LAYOUT, uplo: MKL_UPLO, n: s64, ap: *float, ldap: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_zpotrf_compact :: (layout: MKL_LAYOUT, uplo: MKL_UPLO, n: s64, ap: *float64, ldap: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_cgeqrf_compact :: (layout: MKL_LAYOUT, m: s64, n: s64, ap: *float, ldap: s64, taup: *float, work: *float, lwork: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_dgeqrf_compact :: (layout: MKL_LAYOUT, m: s64, n: s64, ap: *float64, ldap: s64, taup: *float64, work: *float64, lwork: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_sgeqrf_compact :: (layout: MKL_LAYOUT, m: s64, n: s64, ap: *float, ldap: s64, taup: *float, work: *float, lwork: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

mkl_zgeqrf_compact :: (layout: MKL_LAYOUT, m: s64, n: s64, ap: *float64, ldap: s64, taup: *float64, work: *float64, lwork: s64, info: *s64, format: MKL_COMPACT_PACK, nm: s64) -> void #foreign mkl_intel_ilp64;

/******************************************************************************
*  Objects, part 1: Opaque objects
******************************************************************************/
mkl_graph_matrix :: struct {}
mkl_graph_matrix_t :: *mkl_graph_matrix;

mkl_graph_vector :: struct {}
mkl_graph_vector_t :: *mkl_graph_vector;

mkl_graph_descriptor :: struct {}
mkl_graph_descriptor_t :: *mkl_graph_descriptor;

/******************************************************************************
*  Objects, part 2: Structures, enums and non-opaque objects
******************************************************************************/
mkl_graph_status_t :: enum s32 {
    SUCCESS         :: 0;
    NOT_INITIALIZED :: 1;
    ALLOC_FAILED    :: 2;
    INVALID_VALUE   :: 3;
    INTERNAL_ERROR  :: 4;
    NOT_SUPPORTED   :: 5;

    MKL_GRAPH_STATUS_SUCCESS         :: SUCCESS;
    MKL_GRAPH_STATUS_NOT_INITIALIZED :: NOT_INITIALIZED;
    MKL_GRAPH_STATUS_ALLOC_FAILED    :: ALLOC_FAILED;
    MKL_GRAPH_STATUS_INVALID_VALUE   :: INVALID_VALUE;
    MKL_GRAPH_STATUS_INTERNAL_ERROR  :: INTERNAL_ERROR;
    MKL_GRAPH_STATUS_NOT_SUPPORTED   :: NOT_SUPPORTED;
}

mkl_graph_semiring_t :: enum s32 {
    PLUS_TIMES_FP32  :: 0;
    PLUS_TIMES_FP64  :: 1;
    PLUS_TIMES_INT32 :: 2;
    PLUS_TIMES_INT64 :: 3;
    PLUS_FIRST_FP32  :: 4;
    PLUS_SECOND_FP32 :: 5;
    LOR_LAND_BOOL    :: 6;
    MIN_PLUS_INT32   :: 7;
    MIN_PLUS_INT64   :: 8;
    MIN_PLUS_FP32    :: 9;
    MIN_PLUS_FP64    :: 10;
    MAX_FIRST_INT32  :: 11;
    MAX_FIRST_INT64  :: 12;
    MAX_FIRST_FP32   :: 13;
    MAX_FIRST_FP64   :: 14;
    ANY_FIRST_FP32   :: 15;
    ANY_FIRST_INT32  :: 16;
    ANY_SECOND_FP32  :: 17;
    ANY_SECOND_FP64  :: 18;
    ANY_SECOND_INT32 :: 19;
    ANY_SECOND_INT64 :: 20;
    ANY_PAIR_BOOL    :: 21;
    PLUS_PAIR_INT32  :: 22;
    PLUS_PAIR_INT64  :: 23;
    MIN_SECOND_INT32 :: 24;
    MIN_SECOND_INT64 :: 25;
    MIN_FIRST_INT32  :: 26;
    MIN_FIRST_INT64  :: 27;

    MKL_GRAPH_SEMIRING_PLUS_TIMES_FP32  :: PLUS_TIMES_FP32;
    MKL_GRAPH_SEMIRING_PLUS_TIMES_FP64  :: PLUS_TIMES_FP64;
    MKL_GRAPH_SEMIRING_PLUS_TIMES_INT32 :: PLUS_TIMES_INT32;
    MKL_GRAPH_SEMIRING_PLUS_TIMES_INT64 :: PLUS_TIMES_INT64;
    MKL_GRAPH_SEMIRING_PLUS_FIRST_FP32  :: PLUS_FIRST_FP32;
    MKL_GRAPH_SEMIRING_PLUS_SECOND_FP32 :: PLUS_SECOND_FP32;
    MKL_GRAPH_SEMIRING_LOR_LAND_BOOL    :: LOR_LAND_BOOL;
    MKL_GRAPH_SEMIRING_MIN_PLUS_INT32   :: MIN_PLUS_INT32;
    MKL_GRAPH_SEMIRING_MIN_PLUS_INT64   :: MIN_PLUS_INT64;
    MKL_GRAPH_SEMIRING_MIN_PLUS_FP32    :: MIN_PLUS_FP32;
    MKL_GRAPH_SEMIRING_MIN_PLUS_FP64    :: MIN_PLUS_FP64;
    MKL_GRAPH_SEMIRING_MAX_FIRST_INT32  :: MAX_FIRST_INT32;
    MKL_GRAPH_SEMIRING_MAX_FIRST_INT64  :: MAX_FIRST_INT64;
    MKL_GRAPH_SEMIRING_MAX_FIRST_FP32   :: MAX_FIRST_FP32;
    MKL_GRAPH_SEMIRING_MAX_FIRST_FP64   :: MAX_FIRST_FP64;
    MKL_GRAPH_SEMIRING_ANY_FIRST_FP32   :: ANY_FIRST_FP32;
    MKL_GRAPH_SEMIRING_ANY_FIRST_INT32  :: ANY_FIRST_INT32;
    MKL_GRAPH_SEMIRING_ANY_SECOND_FP32  :: ANY_SECOND_FP32;
    MKL_GRAPH_SEMIRING_ANY_SECOND_FP64  :: ANY_SECOND_FP64;
    MKL_GRAPH_SEMIRING_ANY_SECOND_INT32 :: ANY_SECOND_INT32;
    MKL_GRAPH_SEMIRING_ANY_SECOND_INT64 :: ANY_SECOND_INT64;
    MKL_GRAPH_SEMIRING_ANY_PAIR_BOOL    :: ANY_PAIR_BOOL;
    MKL_GRAPH_SEMIRING_PLUS_PAIR_INT32  :: PLUS_PAIR_INT32;
    MKL_GRAPH_SEMIRING_PLUS_PAIR_INT64  :: PLUS_PAIR_INT64;
    MKL_GRAPH_SEMIRING_MIN_SECOND_INT32 :: MIN_SECOND_INT32;
    MKL_GRAPH_SEMIRING_MIN_SECOND_INT64 :: MIN_SECOND_INT64;
    MKL_GRAPH_SEMIRING_MIN_FIRST_INT32  :: MIN_FIRST_INT32;
    MKL_GRAPH_SEMIRING_MIN_FIRST_INT64  :: MIN_FIRST_INT64;
}

mkl_graph_accumulator_t :: enum s32 {
    NONE :: 0;
    PLUS :: 1;
    LOR  :: 2;
    MIN  :: 3;

    MKL_GRAPH_ACCUMULATOR_NONE :: NONE;
    MKL_GRAPH_ACCUMULATOR_PLUS :: PLUS;
    MKL_GRAPH_ACCUMULATOR_LOR  :: LOR;
    MKL_GRAPH_ACCUMULATOR_MIN  :: MIN;
}

mkl_graph_type_t :: enum s32 {
    UNSET :: -1;
    BOOL  :: 0;
    INT32 :: 1;
    INT64 :: 2;
    FP32  :: 3;
    FP64  :: 4;

    MKL_GRAPH_TYPE_UNSET :: UNSET;
    MKL_GRAPH_TYPE_BOOL  :: BOOL;
    MKL_GRAPH_TYPE_INT32 :: INT32;
    MKL_GRAPH_TYPE_INT64 :: INT64;
    MKL_GRAPH_TYPE_FP32  :: FP32;
    MKL_GRAPH_TYPE_FP64  :: FP64;
}

mkl_graph_property_t :: enum s32 {
    NROWS             :: 0;
    NCOLS             :: 1;
    NNZ               :: 2;
    MATRIX_HAS_CSR    :: 3;
    MATRIX_HAS_CSC    :: 4;
    VECTOR_HAS_DENSE  :: 5;
    VECTOR_HAS_SPARSE :: 6;

    MKL_GRAPH_PROPERTY_NROWS             :: NROWS;
    MKL_GRAPH_PROPERTY_NCOLS             :: NCOLS;
    MKL_GRAPH_PROPERTY_NNZ               :: NNZ;
    MKL_GRAPH_PROPERTY_MATRIX_HAS_CSR    :: MATRIX_HAS_CSR;
    MKL_GRAPH_PROPERTY_MATRIX_HAS_CSC    :: MATRIX_HAS_CSC;
    MKL_GRAPH_PROPERTY_VECTOR_HAS_DENSE  :: VECTOR_HAS_DENSE;
    MKL_GRAPH_PROPERTY_VECTOR_HAS_SPARSE :: VECTOR_HAS_SPARSE;
}

mkl_graph_descriptor_field_t :: enum s32 {
    OUTPUT       :: 0;
    FIRST_INPUT  :: 1;
    SECOND_INPUT :: 2;
    MASK         :: 3;

    MKL_GRAPH_FIELD_OUTPUT       :: OUTPUT;
    MKL_GRAPH_FIELD_FIRST_INPUT  :: FIRST_INPUT;
    MKL_GRAPH_FIELD_SECOND_INPUT :: SECOND_INPUT;
    MKL_GRAPH_FIELD_MASK         :: MASK;
}

mkl_graph_descriptor_field_value_t :: enum s32 {
    NONE                :: 0;
    COMPLEMENT          :: 1;
    TRANSPOSE           :: 2;
    REPLACE             :: 3;
    ONLY_STRUCTURE      :: 4;
    KEEP_MASK_STRUCTURE :: 5;

    MKL_GRAPH_MOD_NONE                :: NONE;
    MKL_GRAPH_MOD_COMPLEMENT          :: COMPLEMENT;
    MKL_GRAPH_MOD_TRANSPOSE           :: TRANSPOSE;
    MKL_GRAPH_MOD_REPLACE             :: REPLACE;
    MKL_GRAPH_MOD_ONLY_STRUCTURE      :: ONLY_STRUCTURE;
    MKL_GRAPH_MOD_KEEP_MASK_STRUCTURE :: KEEP_MASK_STRUCTURE;
}

mkl_graph_method_t :: enum s32 {
    AUTO      :: 0;
    DOT       :: 1;
    GUSTAVSON :: 2;
    HASH      :: 3;

    MKL_GRAPH_METHOD_AUTO      :: AUTO;
    MKL_GRAPH_METHOD_DOT       :: DOT;
    MKL_GRAPH_METHOD_GUSTAVSON :: GUSTAVSON;
    MKL_GRAPH_METHOD_HASH      :: HASH;
}

mkl_graph_request_t :: enum s32 {
    COMPUTE_ALL  :: 0;
    FILL_NNZ     :: 1;
    FILL_ENTRIES :: 2;

    MKL_GRAPH_REQUEST_COMPUTE_ALL  :: COMPUTE_ALL;
    MKL_GRAPH_REQUEST_FILL_NNZ     :: FILL_NNZ;
    MKL_GRAPH_REQUEST_FILL_ENTRIES :: FILL_ENTRIES;
}

/* For matrices */
mkl_graph_matrix_create :: (A_pt: *mkl_graph_matrix_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;
mkl_graph_matrix_destroy :: (A_pt: *mkl_graph_matrix_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

/* For vectors */
mkl_graph_vector_create :: (v_pt: *mkl_graph_vector_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;
mkl_graph_vector_destroy :: (v_pt: *mkl_graph_vector_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

/* For descriptors */
mkl_graph_descriptor_create :: (desc_pt: *mkl_graph_descriptor_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;
mkl_graph_descriptor_destroy :: (desc_pt: *mkl_graph_descriptor_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

/* For matrices */
mkl_graph_matrix_set_csr :: (A: mkl_graph_matrix_t, nrows: s64, ncols: s64, rows_start: *void, rows_start_type: mkl_graph_type_t, col_indx: *void, col_indx_type: mkl_graph_type_t, values: *void, values_type: mkl_graph_type_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

mkl_graph_matrix_get_csr :: (A: mkl_graph_matrix_t, nrows_pt: *s64, ncols_pt: *s64, rows_start_pt: **void, rows_start_type_pt: *mkl_graph_type_t, col_indx_pt: **void, col_indx_type_pt: *mkl_graph_type_t, values_pt: **void, values_type_pt: *mkl_graph_type_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

mkl_graph_matrix_set_csc :: (A: mkl_graph_matrix_t, nrows: s64, ncols: s64, cols_start: *void, cols_start_type: mkl_graph_type_t, row_indx: *void, row_indx_type: mkl_graph_type_t, values: *void, values_type: mkl_graph_type_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

mkl_graph_matrix_get_csc :: (A: mkl_graph_matrix_t, nrows_pt: *s64, ncols_pt: *s64, cols_start_pt: **void, cols_start_type_pt: *mkl_graph_type_t, row_indx_pt: **void, row_indx_type_pt: *mkl_graph_type_t, values_pt: **void, values_type_pt: *mkl_graph_type_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

mkl_graph_matrix_get_property :: (A: mkl_graph_matrix_t, property: mkl_graph_property_t, value_pt: *void) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

mkl_graph_optimize_mxv :: (mask: mkl_graph_vector_t, semiring: mkl_graph_semiring_t, A: mkl_graph_matrix_t, v: mkl_graph_vector_t, desc: mkl_graph_descriptor_t, ncalls: s64) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

mkl_graph_optimize_mxm :: (Mask: mkl_graph_matrix_t, semiring: mkl_graph_semiring_t, A: mkl_graph_matrix_t, B: mkl_graph_matrix_t, desc: mkl_graph_descriptor_t, ncalls: s64) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

mkl_graph_transpose :: (C: mkl_graph_matrix_t, Mask: mkl_graph_matrix_t, accum: mkl_graph_accumulator_t, A: mkl_graph_matrix_t, desc: mkl_graph_descriptor_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

/* For vectors */
mkl_graph_vector_set_dense :: (v: mkl_graph_vector_t, dim: s64, values: *void, values_type: mkl_graph_type_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

mkl_graph_vector_get_dense :: (v: mkl_graph_vector_t, dim_pt: *s64, values_pt: **void, values_type_pt: *mkl_graph_type_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

mkl_graph_vector_set_sparse :: (v: mkl_graph_vector_t, dim: s64, nnz: s64, indices: *void, indices_type: mkl_graph_type_t, values: *void, values_type: mkl_graph_type_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

mkl_graph_vector_get_sparse :: (v: mkl_graph_vector_t, dim_pt: *s64, nnz_pt: *s64, indices_pt: **void, indices_type_pt: *mkl_graph_type_t, values_pt: **void, values_type_pt: *mkl_graph_type_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

mkl_graph_vector_get_property :: (v: mkl_graph_vector_t, property: mkl_graph_property_t, value_pt: *void) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

/* For descriptors */
mkl_graph_descriptor_set_field :: (desc: mkl_graph_descriptor_t, field: mkl_graph_descriptor_field_t, value: mkl_graph_descriptor_field_value_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

/* mxm: computes C<M> = accum(C, A +.x B) with A, B and M possibly modified via
* descriptor desc */
mkl_graph_mxm :: (C: mkl_graph_matrix_t, M: mkl_graph_matrix_t, accum: mkl_graph_accumulator_t, semiring: mkl_graph_semiring_t, A: mkl_graph_matrix_t, B: mkl_graph_matrix_t, desc: mkl_graph_descriptor_t, request: mkl_graph_request_t, method: mkl_graph_method_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

/* mxv: computes w<mask> = accum(w, A +.x u) */
mkl_graph_mxv :: (w: mkl_graph_vector_t, mask: mkl_graph_vector_t, accum: mkl_graph_accumulator_t, semiring: mkl_graph_semiring_t, A: mkl_graph_matrix_t, u: mkl_graph_vector_t, desc: mkl_graph_descriptor_t, request: mkl_graph_request_t, method: mkl_graph_method_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

/* vxm: computes w<mask> = accum(w, u +.x A) */
mkl_graph_vxm :: (w: mkl_graph_vector_t, mask: mkl_graph_vector_t, accum: mkl_graph_accumulator_t, semiring: mkl_graph_semiring_t, u: mkl_graph_vector_t, A: mkl_graph_matrix_t, desc: mkl_graph_descriptor_t, request: mkl_graph_request_t, method: mkl_graph_method_t) -> mkl_graph_status_t #foreign mkl_intel_ilp64;

sparse_qr_hint_t :: enum s32 {
    SPARSE_QR_WITH_PIVOTS :: 0;
}

mkl_sparse_set_qr_hint :: (A: sparse_matrix_t, hint: sparse_qr_hint_t) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_qr :: (operation: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, layout: sparse_layout_t, columns: s64, x: *float64, ldx: s64, b: *float64, ldb: s64) -> sparse_status_t #foreign mkl_intel_ilp64;
mkl_sparse_s_qr :: (operation: sparse_operation_t, A: sparse_matrix_t, descr: matrix_descr, layout: sparse_layout_t, columns: s64, x: *float, ldx: s64, b: *float, ldb: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_qr_reorder :: (A: sparse_matrix_t, descr: matrix_descr) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_qr_factorize :: (A: sparse_matrix_t, alt_values: *float64) -> sparse_status_t #foreign mkl_intel_ilp64;
mkl_sparse_s_qr_factorize :: (A: sparse_matrix_t, alt_values: *float) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_qr_solve :: (operation: sparse_operation_t, A: sparse_matrix_t, alt_values: *float64, layout: sparse_layout_t, columns: s64, x: *float64, ldx: s64, b: *float64, ldb: s64) -> sparse_status_t #foreign mkl_intel_ilp64;
mkl_sparse_s_qr_solve :: (operation: sparse_operation_t, A: sparse_matrix_t, alt_values: *float, layout: sparse_layout_t, columns: s64, x: *float, ldx: s64, b: *float, ldb: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_qr_qmult :: (operation: sparse_operation_t, A: sparse_matrix_t, layout: sparse_layout_t, columns: s64, x: *float64, ldx: s64, b: *float64, ldb: s64) -> sparse_status_t #foreign mkl_intel_ilp64;
mkl_sparse_s_qr_qmult :: (operation: sparse_operation_t, A: sparse_matrix_t, layout: sparse_layout_t, columns: s64, x: *float, ldx: s64, b: *float, ldb: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

mkl_sparse_d_qr_rsolve :: (operation: sparse_operation_t, A: sparse_matrix_t, layout: sparse_layout_t, columns: s64, x: *float64, ldx: s64, b: *float64, ldb: s64) -> sparse_status_t #foreign mkl_intel_ilp64;
mkl_sparse_s_qr_rsolve :: (operation: sparse_operation_t, A: sparse_matrix_t, layout: sparse_layout_t, columns: s64, x: *float, ldx: s64, b: *float, ldb: s64) -> sparse_status_t #foreign mkl_intel_ilp64;

#scope_file

#import "Basic"; // For assert
mkl_core :: #foreign_library,no_dll "lib/mkl_core";
mkl_intel_ilp64 :: #foreign_library,no_dll "lib/mkl_intel_ilp64";
mkl_sequential :: #foreign_library,no_dll "lib/mkl_sequential";
